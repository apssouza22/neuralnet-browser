// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"bB7Pu":[function(require,module,exports) {
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjs = require("@tensorflow/tfjs");
var _model = require("./model");
var _data = require("./data");
var _ui = require("./ui");
var _network = require("./network");
let chart = getChart();
/**
 * Compile and train the given model.
 *
 * @param {nn.ModelWrapper} model The model to train.
 * @param {onIterationCallback} onIteration A callback to execute every 10
 *     batches & epoch end.
 */ async function train(model, onIteration) {
    _ui.logStatus("Training model...");
    // Batch size is another important hyperparameter. It defines the number of
    // examples we group together, or batch, between updates to the model's
    // weights during training. A value that is too low will update weights using
    // too few examples and will not generalize well. Larger batch sizes require
    // more memory resources and aren't guaranteed to perform better.
    const batchSize = 320;
    // Leave out the last 15% of the training data for validation, to monitor
    // overfitting during training.
    const validationSplit = 0.15;
    // Get number of training epochs from the UI.
    const trainEpochs = _ui.getTrainEpochs();
    // We'll keep a buffer of loss and accuracy values over time.
    let trainBatchCount = 0;
    const trainData = data.getTrainData();
    const testData = data.getTestData(null);
    const totalNumBatches = Math.ceil(trainData.xs.length / 784 * (1 - validationSplit) / batchSize) * trainEpochs;
    // During the long-running fit() call for model training, we include
    // callbacks, so that we can plot the loss and accuracy values in the page
    // as the training progresses.
    let valAcc = 1;
    await model.train(trainData.xs, trainData.labels, {
        batchSize,
        validationSplit,
        epochs: trainEpochs,
        callbacks: {
            onBatchEnd: onBatchEnd,
            onEpochEnd: onEpochEnd
        }
    });
    async function onEpochEnd(epoch, logs) {
        console.log("Epoch: " + epoch + " Loss: " + logs.loss.toFixed(5));
        valAcc = logs.val_acc;
        if (onIteration) onIteration("onEpochEnd", epoch, logs);
        await _tfjs.nextFrame();
    }
    async function onBatchEnd(batch, logs) {
        trainBatchCount++;
        console.log("onBatchEnd", trainBatchCount, totalNumBatches);
        _ui.logStatus(`Training... (` + `${(trainBatchCount / totalNumBatches * 100).toFixed(1)}%` + ` complete). To stop training, refresh or close page.`);
        if (onIteration && batch % 10 === 0) onIteration("onBatchEnd", batch, logs);
        chartUpdate(logs.loss, trainBatchCount);
        //Calling tf.nextFrame() in a browser context will release the UI thread so the page can be responsive.
        // Returns a promise that resolve when a requestAnimationFrame has completed
        await _tfjs.nextFrame();
    }
    const testAccPercent = model.evaluate(testData.xs, testData.labels);
    _ui.logStatus(`Final test accuracy: ${testAccPercent.toFixed(1)}%`);
}
/**
 * Show predictions on a number of test examples.
 *
 * @param {nn.ModelWrapper} model The model to be used for making the predictions.
 */ async function showPredictions(model) {
    const testExamples = 100;
    const examples = data.getTestData(testExamples);
    // Code wrapped in a tf.tidy() function callback will have their tensors freed
    // from GPU memory after execution without having to call dispose().
    // The tf.tidy callback runs synchronously.
    _tfjs.tidy(()=>{
        const predictions = model.predict(examples.xs);
        let converted = _model.convertFromFlattenArray(examples.xs, examples.labels);
        const labels = convertFromHotEncoding(converted.labels);
        _ui.showTestResults(converted.images, predictions, labels);
    });
}
// converting from hot encoding to number
// [0, 0, 0, 1, 0, 0, 0, 0, 0, 0] -> 3
function convertFromHotEncoding(labels) {
    let convLabels = [];
    for (const label of labels)convLabels.push((0, _network.argMax)(label));
    return convLabels;
}
let data;
async function load() {
    data = new (0, _data.MnistData)();
    await data.load();
}
// This is our main function. It loads the MNIST data, trains the model, and
// then shows what the model predicted on unseen test data.
_ui.setTrainButtonCallback(async ()=>{
    _ui.logStatus("Loading MNIST data...");
    await load();
    _ui.logStatus("Creating model...");
    const model = _model.getModel(_ui.getModelTypeId());
    model.summary();
    _ui.logStatus("Starting model training...");
    await train(model, ()=>showPredictions(model));
});
function getChart() {
    const ctx = document.getElementById("myChart").getContext("2d");
    const myChart = new Chart(ctx, {
        type: "line",
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        },
        data: {
            labels: [],
            datasets: [
                {
                    label: "Batch Loss",
                    data: [],
                    backgroundColor: [
                        "rgba(255, 99, 132, 0.2)", 
                    ],
                    borderColor: [
                        "rgba(255, 99, 132, 1)", 
                    ]
                }
            ]
        }
    });
    return myChart;
}
function chartUpdate(loss, batch) {
    chart.data.labels.push(batch);
    chart.data.datasets.forEach((dataset)=>{
        dataset.data.push(loss);
    });
    chart.update();
}

},{"@tensorflow/tfjs":"fzTad","./model":"4mRaZ","./data":"5pclG","./ui":"jRvde","./network":"gukqw"}],"fzTad":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "data", ()=>_tfjsData);
parcelHelpers.export(exports, "version", ()=>version);
// Export data api as tf.data
var _tfjsData = require("@tensorflow/tfjs-data");
// Import and register backends.
var _tfjsBackendCpu = require("@tensorflow/tfjs-backend-cpu");
var _tfjsBackendWebgl = require("@tensorflow/tfjs-backend-webgl");
// Import versions of all sub-packages.
var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsLayers = require("@tensorflow/tfjs-layers");
var _tfjsConverter = require("@tensorflow/tfjs-converter");
var _version = require("./version");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.exportAll(_tfjsCore, exports);
parcelHelpers.exportAll(_tfjsLayers, exports);
parcelHelpers.exportAll(_tfjsConverter, exports);
const version = {
    "tfjs-core": (0, _tfjsCore.version_core),
    "tfjs-backend-cpu": (0, _tfjsBackendCpu.version_cpu),
    "tfjs-backend-webgl": (0, _tfjsBackendWebgl.version_webgl),
    "tfjs-data": (0, _tfjsData.version_data),
    "tfjs-layers": (0, _tfjsLayers.version_layers),
    "tfjs-converter": (0, _tfjsConverter.version_converter),
    "tfjs": (0, _version.version)
};

},{"@tensorflow/tfjs-data":"jnwGA","@tensorflow/tfjs-backend-cpu":"alTEC","@tensorflow/tfjs-backend-webgl":"7ttvt","@tensorflow/tfjs-core":"2votT","@tensorflow/tfjs-layers":"jH3jL","@tensorflow/tfjs-converter":"f24HS","./version":"aCSP1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jnwGA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "array", ()=>(0, _dataset.array));
parcelHelpers.export(exports, "Dataset", ()=>(0, _dataset.Dataset));
parcelHelpers.export(exports, "zip", ()=>(0, _dataset.zip));
parcelHelpers.export(exports, "CSVDataset", ()=>(0, _csvDataset.CSVDataset));
parcelHelpers.export(exports, "TextLineDataset", ()=>(0, _textLineDataset.TextLineDataset));
parcelHelpers.export(exports, "csv", ()=>(0, _readers.csv));
parcelHelpers.export(exports, "func", ()=>(0, _readers.func));
parcelHelpers.export(exports, "generator", ()=>(0, _readers.generator));
parcelHelpers.export(exports, "microphone", ()=>(0, _readers.microphone));
parcelHelpers.export(exports, "webcam", ()=>(0, _readers.webcam));
parcelHelpers.export(exports, "FileDataSource", ()=>(0, _fileDataSource.FileDataSource));
parcelHelpers.export(exports, "URLDataSource", ()=>(0, _urlDataSource.URLDataSource));
parcelHelpers.export(exports, "version_data", ()=>(0, _version.version));
var _dataset = require("./dataset");
var _csvDataset = require("./datasets/csv_dataset");
var _textLineDataset = require("./datasets/text_line_dataset");
var _readers = require("./readers");
var _fileDataSource = require("./sources/file_data_source");
var _urlDataSource = require("./sources/url_data_source");
var _version = require("./version");

},{"./dataset":"4dvRW","./datasets/csv_dataset":"4dv1S","./datasets/text_line_dataset":"2AA44","./readers":"814R1","./sources/file_data_source":"ixSKZ","./sources/url_data_source":"3aHDT","./version":"3MzF8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4dvRW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// TODO(soergel): consider vectorized operations within the pipeline.
/**
 * Represents a potentially large list of independent data elements (typically
 * 'samples' or 'examples').
 *
 * A 'data example' may be a primitive, an array, a map from string keys to
 * values, or any nested structure of these.
 *
 * A `Dataset` represents an ordered collection of elements, together with a
 * chain of transformations to be performed on those elements. Each
 * transformation is a method of `Dataset` that returns another `Dataset`, so
 * these may be chained, e.g.
 * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.
 *
 * Data loading and transformation is done in a lazy, streaming fashion.  The
 * dataset may be iterated over multiple times; each iteration starts the data
 * loading anew and recapitulates the transformations.
 *
 * A `Dataset` is typically processed as a stream of unbatched examples --i.e.,
 * its transformations are applied one example at a time. Batching produces a
 * new `Dataset` where each element is a batch. Batching should usually come
 * last in a pipeline, because data transformations are easier to express on a
 * per-example basis than on a per-batch basis.
 *
 * The following code examples are calling `await dataset.forEachAsync(...)` to
 * iterate once over the entire dataset in order to print out the data.
 */ /** @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'} */ parcelHelpers.export(exports, "Dataset", ()=>Dataset);
/**
 * Create a `Dataset` defined by a provided iterator() function.
 *
 * ```js
 * let i = -1;
 * const func = () =>
 *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};
 * const iter = tf.data.iteratorFromFunction(func);
 * const ds = tf.data.datasetFromIteratorFn(iter);
 * await ds.forEachAsync(e => console.log(e));
 * ```
 */ parcelHelpers.export(exports, "datasetFromIteratorFn", ()=>datasetFromIteratorFn);
/**
 * Create a `Dataset` from an array of elements.
 *
 * Create a Dataset from an array of objects:
 * ```js
 * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);
 * await a.forEachAsync(e => console.log(e));
 * ```
 *
 * Create a Dataset from an array of numbers:
 * ```js
 * const a = tf.data.array([4, 5, 6]);
 * await a.forEachAsync(e => console.log(e));
 * ```
 * @param items An array of elements that will be parsed as items in a dataset.
 */ /** @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'} */ parcelHelpers.export(exports, "array", ()=>array);
/**
 * Create a `Dataset` by zipping together an array, dict, or nested
 * structure of `Dataset`s (and perhaps additional constants).
 * The underlying datasets must provide elements in a consistent order such that
 * they correspond.
 *
 * The number of elements in the resulting dataset is the same as the size of
 * the smallest dataset in datasets.
 *
 * The nested structure of the `datasets` argument determines the
 * structure of elements in the resulting iterator.
 *
 * Note this means that, given an array of two datasets that produce dict
 * elements, the result is a dataset that produces elements that are arrays
 * of two dicts:
 *
 * Zip an array of datasets:
 * ```js
 * console.log('Zip two datasets of objects:');
 * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);
 * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);
 * const ds3 = tf.data.zip([ds1, ds2]);
 * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));
 *
 * // If the goal is to merge the dicts in order to produce elements like
 * // {a: ..., b: ...}, this requires a second step such as:
 * console.log('Merge the objects:');
 * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});
 * await ds4.forEachAsync(e => console.log(e));
 * ```
 *
 * Zip a dict of datasets:
 * ```js
 * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);
 * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);
 * const c = tf.data.zip({c: a, d: b});
 * await c.forEachAsync(e => console.log(JSON.stringify(e)));
 * ```
 */ /** @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'} */ parcelHelpers.export(exports, "zip", ()=>zip);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _seedrandom = require("seedrandom");
var _lazyIterator = require("./iterators/lazy_iterator");
var _deepMap = require("./util/deep_map");
class Dataset {
    constructor(){
        this.size = null;
    }
    // TODO(soergel): Make Datasets report whether repeated iterator() calls
    // produce the same result (e.g., reading from a file) or different results
    // (e.g., from the webcam).  Currently we don't make this distinction but it
    // could be important for the user to know.
    // abstract isDeterministic(): boolean;
    /**
     * Groups elements into batches.
     *
     * It is assumed that each of the incoming dataset elements has the same
     * structure-- i.e. the same set of keys at each location in an object
     * hierarchy.  For each key, the resulting `Dataset` provides a batched
     * element collecting all of the incoming values for that key.
     *
     *  * Incoming primitives are grouped into a 1-D Tensor.
     *  * Incoming Tensors are grouped into a new Tensor where the 0'th axis is
     *    the batch dimension.
     *  * Incoming arrays are converted to Tensor and then batched.
     *  * A nested array is interpreted as an n-D Tensor, so the batched result
     *    has n+1 dimensions.
     *  * An array that cannot be converted to Tensor produces an error.
     *
     * If an array should not be batched as a unit, it should first be converted
     * to an object with integer keys.
     *
     * Here are a few examples:
     *
     * Batch a dataset of numbers:
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);
     * await a.forEachAsync(e => e.print());
     * ```
     *
     * Batch a dataset of arrays:
     * ```js
     * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);
     * await b.forEachAsync(e => e.print());
     * ```
     *
     * Batch a dataset of objects:
     * ```js
     * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},
     *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},
     *   {a: 8, b: 18}]).batch(4);
     * await c.forEachAsync(e => {
     *   console.log('{');
     *   for(var key in e) {
     *     console.log(key+':');
     *     e[key].print();
     *   }
     *   console.log('}');
     * })
     * ```
     *
     * @param batchSize The number of elements desired per batch.
     * @param smallLastBatch Whether to emit the final batch when it has fewer
     *   than batchSize elements. Default true.
     * @returns A `Dataset`, from which a stream of batches can be obtained.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ batch(batchSize, smallLastBatch = true) {
        const base = this;
        _tfjsCore.util.assert(batchSize > 0, ()=>`batchSize needs to be positive, but it is
      ${batchSize}`);
        let size;
        if (this.size === Infinity || this.size == null) // If the size of this dataset is infinity or null, the new size keeps the
        // same.
        size = this.size;
        else if (smallLastBatch) // If the size of this dataset is known and include small last batch, the
        // new size is full batch count plus last batch.
        size = Math.ceil(this.size / batchSize);
        else // If the size of this dataset is known and not include small last batch,
        // the new size is full batch count.
        size = Math.floor(this.size / batchSize);
        return datasetFromIteratorFn(async ()=>{
            return (await base.iterator()).columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);
        }, size);
    }
    /**
     * Concatenates this `Dataset` with another.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3]);
     * const b = tf.data.array([4, 5, 6]);
     * const c = a.concatenate(b);
     * await c.forEachAsync(e => console.log(e));
     * ```
     *
     * @param dataset A `Dataset` to be concatenated onto this one.
     * @returns A `Dataset`.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ concatenate(dataset) {
        const base = this;
        let size;
        if (this.size === Infinity || dataset.size === Infinity) // If the size of any of these two dataset is infinity, new size is
        // infinity.
        size = Infinity;
        else if (this.size != null && dataset.size != null) // If the size of both datasets are known and not infinity, new size is
        // sum the size of these two datasets.
        size = this.size + dataset.size;
        else // If neither of these two datasets has infinite size and any of these two
        // datasets' size is null, the new size is null.
        size = null;
        return datasetFromIteratorFn(async ()=>(await base.iterator()).concatenate(await dataset.iterator()), size);
    }
    /**
     * Filters this dataset according to `predicate`.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
     *   .filter(x => x%2 === 0);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param predicate A function mapping a dataset element to a boolean or a
     * `Promise` for one.
     *
     * @returns A `Dataset` of elements for which the predicate was true.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ filter(predicate) {
        const base = this;
        let size;
        if (this.size === Infinity) // If the size of this dataset is infinity, new size is infinity
        size = Infinity;
        else // If this dataset has limited elements, new size is null because it might
        // exhausted randomly.
        size = null;
        return datasetFromIteratorFn(async ()=>{
            return (await base.iterator()).filter((x)=>_tfjsCore.tidy(()=>predicate(x)));
        }, size);
    }
    /**
     * Apply a function to every element of the dataset.
     *
     * After the function is applied to a dataset element, any Tensors contained
     * within that element are disposed.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3]);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param f A function to apply to each dataset element.
     * @returns A `Promise` that resolves after all elements have been processed.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ async forEachAsync(f) {
        return (await this.iterator()).forEachAsync(f);
    }
    /**
     * Maps this dataset through a 1-to-1 transform.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3]).map(x => x*x);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param transform A function mapping a dataset element to a transformed
     *   dataset element.
     *
     * @returns A `Dataset` of transformed elements.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ map(transform) {
        const base = this;
        return datasetFromIteratorFn(async ()=>{
            return (await base.iterator()).map((x)=>_tfjsCore.tidy(()=>transform(x)));
        }, this.size);
    }
    /**
     * Maps this dataset through an async 1-to-1 transform.
     *
     * ```js
     * const a =
     *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){
     *    setTimeout(() => {
     *      resolve(x * x);
     *    }, Math.random()*1000 + 500);
     *  }));
     * console.log(await a.toArray());
     * ```
     *
     * @param transform A function mapping a dataset element to a `Promise` for a
     *   transformed dataset element.  This transform is responsible for disposing
     *   any intermediate `Tensor`s, i.e. by wrapping its computation in
     *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous
     *   `map()` case).
     *
     * @returns A `Dataset` of transformed elements.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ mapAsync(transform) {
        const base = this;
        return datasetFromIteratorFn(async ()=>{
            return (await base.iterator()).mapAsync(transform);
        }, this.size);
    }
    /**
     *  Creates a `Dataset` that prefetches elements from this dataset.
     *
     * @param bufferSize: An integer specifying the number of elements to be
     *   prefetched.
     * @returns A `Dataset`.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ prefetch(bufferSize) {
        if (bufferSize == null) throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
        const base = this;
        return datasetFromIteratorFn(async ()=>(await base.iterator()).prefetch(bufferSize), this.size);
    }
    /**
     * Repeats this dataset `count` times.
     *
     * NOTE: If this dataset is a function of global state (e.g. a random number
     * generator), then different repetitions may produce different elements.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3]).repeat(3);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param count: (Optional) An integer, representing the number of times
     *   the dataset should be repeated. The default behavior (if `count` is
     *   `undefined` or negative) is for the dataset be repeated indefinitely.
     * @returns A `Dataset`.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ repeat(count) {
        const base = this;
        let size;
        if (this.size != null && count > 0) // If this dataset has size and count is positive, new size is current
        // size multiply count. This also covers the case that current size is
        // infinity.
        size = this.size * count;
        else if (count === 0) // If count is 0, new size is 0.
        size = 0;
        else if (this.size != null && (count === undefined || count < 0)) // If this dataset has size and count is undefined or negative, the
        // dataset will be repeated indefinitely and new size is infinity.
        size = Infinity;
        else // If the size of this dataset is null, the new dataset's size is null.
        size = null;
        return datasetFromIteratorFn(async ()=>{
            const iteratorIterator = (0, _lazyIterator.iteratorFromFunction)(async ()=>({
                    value: await base.iterator(),
                    done: false
                }));
            return (0, _lazyIterator.iteratorFromConcatenated)(iteratorIterator.take(count));
        }, size);
    }
    /**
     * Creates a `Dataset` that skips `count` initial elements from this dataset.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param count: The number of elements of this dataset that should be skipped
     *   to form the new dataset.  If `count` is greater than the size of this
     *   dataset, the new dataset will contain no elements.  If `count`
     *   is `undefined` or negative, skips the entire dataset.
     *
     * @returns A `Dataset`.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ skip(count) {
        const base = this;
        let size;
        if (this.size != null && count >= 0 && this.size >= count) // If the size of this dataset is greater than count, the new dataset's
        // size is current size minus skipped size.This also covers the case that
        // current size is infinity.
        size = this.size - count;
        else if (this.size != null && (this.size < count || count === undefined || count < 0)) // If the size of this dataset is smaller than count, or count is
        // undefined or negative, skips the entire dataset and the new size is 0.
        size = 0;
        else // If the size of this dataset is null, the new dataset's size is null.
        size = null;
        return datasetFromIteratorFn(async ()=>(await base.iterator()).skip(count), size);
    }
    /**
     * Pseudorandomly shuffles the elements of this dataset. This is done in a
     * streaming manner, by sampling from a given number of prefetched elements.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param bufferSize: An integer specifying the number of elements from this
     *   dataset from which the new dataset will sample.
     * @param seed: (Optional) An integer specifying the random seed that will
     *   be used to create the distribution.
     * @param reshuffleEachIteration: (Optional) A boolean, which if true
     *   indicates that the dataset should be pseudorandomly reshuffled each time
     *   it is iterated over. If false, elements will be returned in the same
     *   shuffled order on each iteration. (Defaults to `true`.)
     * @returns A `Dataset`.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ shuffle(bufferSize, seed, reshuffleEachIteration = true) {
        if (bufferSize == null || bufferSize < 0) {
            if (this.size == null) throw new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.");
            else throw new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for `tf.Tensor`s), consider setting " + `bufferSize to the dataset size (${this.size} elements)`);
        }
        const base = this;
        const random = _seedrandom.alea(seed || _tfjsCore.util.now().toString());
        return datasetFromIteratorFn(async ()=>{
            let seed2 = random.int32();
            if (reshuffleEachIteration) seed2 += random.int32();
            return (await base.iterator()).shuffle(bufferSize, seed2.toString());
        }, this.size);
    }
    /**
     * Creates a `Dataset` with at most `count` initial elements from this
     * dataset.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);
     * await a.forEachAsync(e => console.log(e));
     * ```
     *
     * @param count: The number of elements of this dataset that should be taken
     *   to form the new dataset.  If `count` is `undefined` or negative, or if
     *   `count` is greater than the size of this dataset, the new dataset will
     *   contain all elements of this dataset.
     * @returns A `Dataset`.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ take(count) {
        const base = this;
        let size;
        if (this.size != null && this.size > count) // If the size of this dataset is greater than count, the new dataset's
        // size is count.
        size = count;
        else if (this.size != null && this.size <= count) // If the size of this dataset is equal or smaller than count, the new
        // dataset's size is the size of this dataset.
        size = this.size;
        else // If the size of this dataset is null, the new dataset's size is null.
        size = null;
        return datasetFromIteratorFn(async ()=>(await base.iterator()).take(count), size);
    }
    /**
     * Collect all elements of this dataset into an array.
     *
     * Obviously this will succeed only for small datasets that fit in memory.
     * Useful for testing and generally should be avoided if possible.
     *
     * ```js
     * const a = tf.data.array([1, 2, 3, 4, 5, 6]);
     * console.log(await a.toArray());
     * ```
     *
     * @returns A Promise for an array of elements, which will resolve
     *   when a new stream has been obtained and fully consumed.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ async toArray() {
        if (this.size === Infinity) throw new Error("Can not convert infinite data stream to array.");
        return (await this.iterator()).toArray();
    }
    /**
     * Collect all elements of this dataset into an array with prefetching 100
     * elements. This is useful for testing, because the prefetch changes the
     * order in which the Promises are resolved along the processing pipeline.
     * This may help expose bugs where results are dependent on the order of
     * Promise resolution rather than on the logical order of the stream (i.e.,
     * due to hidden mutable state).
     *
     * @returns A Promise for an array of elements, which will resolve
     *   when a new stream has been obtained and fully consumed.
     */ async toArrayForTest() {
        if (this.size === Infinity) throw new Error("Can not convert infinite data stream to array.");
        return (await this.iterator()).toArrayForTest();
    }
}
// TODO(soergel): deep sharded shuffle, where supported
Dataset.MAX_BUFFER_SIZE = 10000;
function datasetFromIteratorFn(iteratorFn, size = null) {
    return new class extends Dataset {
        constructor(){
            super(...arguments);
            this.size = size;
        }
        /*
         * Provide a new stream of elements.  Note this will also start new streams
         * from any underlying `Dataset`s.
         */ async iterator() {
            return iteratorFn();
        }
    }();
}
function array(items) {
    return datasetFromIteratorFn(async ()=>(0, _lazyIterator.iteratorFromItems)(items), items.length);
}
function zip(datasets) {
    // manually type-check the argument for JS users
    if (!(0, _deepMap.isIterable)(datasets)) throw new Error("The argument to zip() must be an object or array.");
    let size;
    if (Array.isArray(datasets)) for(let i = 0; i < datasets.length; i++)size = size == null ? datasets[i].size : Math.min(size, datasets[i].size);
    else if (datasets instanceof Object) for(const ds in datasets)size = size == null ? datasets[ds].size : Math.min(size, datasets[ds].size);
    return datasetFromIteratorFn(async ()=>{
        const streams = await (0, _deepMap.deepMapAndAwaitAll)(datasets, (d)=>{
            if (d instanceof Dataset) return {
                value: d.iterator(),
                recurse: false
            };
            else if ((0, _deepMap.isIterable)(d)) return {
                value: null,
                recurse: true
            };
            else throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
        });
        return (0, _lazyIterator.iteratorFromZipped)(streams, (0, _lazyIterator.ZipMismatchMode).SHORTEST);
    }, size);
}
/**
 * A zip function for use with deepZip, passed via the columnMajorBatch call.
 *
 * Accepts an array of identically-structured nested elements and either batches
 * them (if they are primitives, numeric arrays, or Tensors) or requests
 * recursion (if not).
 */ // tslint:disable-next-line:no-any
function deepBatchConcat(rows) {
    if (rows === null) return null;
    // use the first item to decide whether to recurse or batch here.
    const exampleRow = rows[0];
    if ((0, _deepMap.canTensorify)(exampleRow)) {
        // rows is an array of primitives, Tensors, or arrays.  Batch them.
        const value = batchConcat(rows);
        return {
            value,
            recurse: false
        };
    }
    // the example row is an object, so recurse into it.
    return {
        value: null,
        recurse: true
    };
}
/**
 * Assembles a list of same-shaped numbers, number arrays, or Tensors
 * into a single new Tensor where axis 0 is the batch dimension.
 */ function batchConcat(arrays) {
    if (arrays.length === 0) // We can't return an empty Tensor because we don't know the element shape.
    throw new Error("Can't make a batch of zero elements.");
    if (arrays[0] instanceof _tfjsCore.Tensor) // Input is an array of Tensors
    return _tfjsCore.stack(arrays);
    else // Input is a possibly-nested array of numbers.
    return _tfjsCore.tensor(arrays);
}

},{"@tensorflow/tfjs-core":"2votT","seedrandom":"kcfU7","./iterators/lazy_iterator":"bQ73n","./util/deep_map":"iwr3N","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2votT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Optimizers.
parcelHelpers.export(exports, "AdadeltaOptimizer", ()=>(0, _adadeltaOptimizer.AdadeltaOptimizer));
parcelHelpers.export(exports, "AdagradOptimizer", ()=>(0, _adagradOptimizer.AdagradOptimizer));
parcelHelpers.export(exports, "AdamOptimizer", ()=>(0, _adamOptimizer.AdamOptimizer));
parcelHelpers.export(exports, "AdamaxOptimizer", ()=>(0, _adamaxOptimizer.AdamaxOptimizer));
parcelHelpers.export(exports, "MomentumOptimizer", ()=>(0, _momentumOptimizer.MomentumOptimizer));
parcelHelpers.export(exports, "Optimizer", ()=>(0, _optimizer.Optimizer));
parcelHelpers.export(exports, "RMSPropOptimizer", ()=>(0, _rmspropOptimizer.RMSPropOptimizer));
parcelHelpers.export(exports, "SGDOptimizer", ()=>(0, _sgdOptimizer.SGDOptimizer));
parcelHelpers.export(exports, "Tensor", ()=>(0, _tensor.Tensor));
parcelHelpers.export(exports, "TensorBuffer", ()=>(0, _tensor.TensorBuffer));
parcelHelpers.export(exports, "Variable", ()=>(0, _tensor.Variable));
parcelHelpers.export(exports, "Rank", ()=>(0, _types.Rank));
parcelHelpers.export(exports, "sumOutType", ()=>(0, _types.sumOutType));
parcelHelpers.export(exports, "upcastType", ()=>(0, _types.upcastType));
parcelHelpers.export(exports, "Reduction", ()=>(0, _lossOps.Reduction));
parcelHelpers.export(exports, "customGrad", ()=>(0, _gradients.customGrad));
parcelHelpers.export(exports, "grad", ()=>(0, _gradients.grad));
parcelHelpers.export(exports, "grads", ()=>(0, _gradients.grads));
parcelHelpers.export(exports, "valueAndGrad", ()=>(0, _gradients.valueAndGrad));
parcelHelpers.export(exports, "valueAndGrads", ()=>(0, _gradients.valueAndGrads));
parcelHelpers.export(exports, "variableGrads", ()=>(0, _gradients.variableGrads));
parcelHelpers.export(exports, "Environment", ()=>(0, _environment.Environment));
parcelHelpers.export(exports, "env", ()=>(0, _environment.env));
parcelHelpers.export(exports, "ENV", ()=>(0, _environment.ENV));
parcelHelpers.export(exports, "version_core", ()=>(0, _version.version));
// Top-level method exports.
parcelHelpers.export(exports, "nextFrame", ()=>(0, _browserUtil.nextFrame));
parcelHelpers.export(exports, "browser", ()=>_browser);
parcelHelpers.export(exports, "io", ()=>_io);
parcelHelpers.export(exports, "math", ()=>_math);
parcelHelpers.export(exports, "serialization", ()=>_serialization);
parcelHelpers.export(exports, "test_util", ()=>_testUtil);
parcelHelpers.export(exports, "util", ()=>_util);
parcelHelpers.export(exports, "backend_util", ()=>_backendUtil);
parcelHelpers.export(exports, "tensor_util", ()=>_tensorUtil);
parcelHelpers.export(exports, "slice_util", ()=>_sliceUtil);
parcelHelpers.export(exports, "gather_util", ()=>_gatherNdUtil);
parcelHelpers.export(exports, "scatter_util", ()=>_scatterNdUtil);
parcelHelpers.export(exports, "device_util", ()=>_deviceUtil);
parcelHelpers.export(exports, "kernel_impls", ()=>_kernelImpls);
// Backend specific.
parcelHelpers.export(exports, "KernelBackend", ()=>(0, _backend.KernelBackend));
parcelHelpers.export(exports, "DataStorage", ()=>(0, _backend.DataStorage));
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * @fileoverview
 * @suppress {partialAlias} Optimization disabled due to passing the module
 * object into a function below:
 *
 *   import * as ops from './ops/ops';
 *   setOpHandler(ops);
 */ // Engine is the global singleton that needs to be initialized before the rest
// of the app.
var _engine = require("./engine");
// Register backend-agnostic flags.
var _flags = require("./flags");
// Register all the gradients.
var _registerAllGradients = require("./register_all_gradients");
var _platformBrowser = require("./platforms/platform_browser");
var _platformNode = require("./platforms/platform_node");
// Serialization.
var _io = require("./io/io");
var _math = require("./math");
var _browser = require("./ops/browser");
var _gatherNdUtil = require("./ops/gather_nd_util");
var _scatterNdUtil = require("./ops/scatter_nd_util");
var _sliceUtil = require("./ops/slice_util");
var _serialization = require("./serialization");
var _tensor = require("./tensor");
var _tensorUtil = require("./tensor_util");
var _testUtil = require("./test_util");
var _util = require("./util");
var _version = require("./version");
// Second level exports.
var _backendUtil = require("./backends/backend_util");
var _deviceUtil = require("./device_util");
var _kernelImpls = require("./backends/kernel_impls");
var _ops = require("./ops/ops");
// Import all op chainers and add type info to Tensor.
var _registerAllChainedOps = require("./public/chained_ops/register_all_chained_ops");
var _adadeltaOptimizer = require("./optimizers/adadelta_optimizer");
var _adagradOptimizer = require("./optimizers/adagrad_optimizer");
var _adamOptimizer = require("./optimizers/adam_optimizer");
var _adamaxOptimizer = require("./optimizers/adamax_optimizer");
var _momentumOptimizer = require("./optimizers/momentum_optimizer");
var _optimizer = require("./optimizers/optimizer");
var _rmspropOptimizer = require("./optimizers/rmsprop_optimizer");
var _sgdOptimizer = require("./optimizers/sgd_optimizer");
var _types = require("./types");
parcelHelpers.exportAll(_ops, exports);
var _lossOps = require("./ops/loss_ops");
var _train = require("./train");
parcelHelpers.exportAll(_train, exports);
var _globals = require("./globals");
parcelHelpers.exportAll(_globals, exports);
var _kernelRegistry = require("./kernel_registry");
parcelHelpers.exportAll(_kernelRegistry, exports);
var _gradients = require("./gradients");
var _environment = require("./environment");
var _browserUtil = require("./browser_util");
var _backend = require("./backends/backend");
// Export all kernel names / info.
var _kernelNames = require("./kernel_names");
parcelHelpers.exportAll(_kernelNames, exports);
(0, _tensor.setOpHandler)(_ops);

},{"./engine":"1aEvR","./flags":"krVi8","./register_all_gradients":"ci5bI","./platforms/platform_browser":"lIuHs","./platforms/platform_node":"2ydqs","./io/io":"2y2Ef","./math":"dWBjd","./ops/browser":"eNnql","./ops/gather_nd_util":"6p9Tw","./ops/scatter_nd_util":"h9rnV","./ops/slice_util":"3jgPu","./serialization":"wKqJz","./tensor":"DPGBx","./tensor_util":"kUGKD","./test_util":"9tuFM","./util":"9v6Fb","./version":"v1SEt","./backends/backend_util":"8CK58","./device_util":"ctAag","./backends/kernel_impls":"9xKxz","./ops/ops":"iDElj","./public/chained_ops/register_all_chained_ops":"6DEHx","./optimizers/adadelta_optimizer":"7LYeo","./optimizers/adagrad_optimizer":"1K352","./optimizers/adam_optimizer":"lKjPX","./optimizers/adamax_optimizer":"d9QP5","./optimizers/momentum_optimizer":"5ywAZ","./optimizers/optimizer":"jFpqK","./optimizers/rmsprop_optimizer":"21qx8","./optimizers/sgd_optimizer":"h9wSb","./types":"aToA9","./ops/loss_ops":"bboI4","./train":"hMjG0","./globals":"gfrr7","./kernel_registry":"3ziE7","./gradients":"4PSmY","./environment":"8tlxC","./browser_util":"kHUPK","./backends/backend":"2CVFT","./kernel_names":"2CzXQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1aEvR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Engine", ()=>Engine);
parcelHelpers.export(exports, "ENGINE", ()=>ENGINE);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("./environment");
var _globalUtil = require("./global_util");
var _kernelRegistry = require("./kernel_registry");
var _profiler = require("./profiler");
var _tape = require("./tape");
var _tensor = require("./tensor");
var _tensorUtil = require("./tensor_util");
var _util = require("./util");
class EngineState {
    constructor(){
        // Public since optimizers will use it.
        this.registeredVariables = {};
        this.nextTapeNodeId = 0;
        this.numBytes = 0;
        this.numTensors = 0;
        this.numStringTensors = 0;
        this.numDataBuffers = 0;
        // Number of nested tf.grad() statements when computing higher-order
        // gradients. E.g. `1` for first-order gradients and `2` for second-order
        // gradients. Used to track if the tape should be removed after a backprop.
        this.gradientDepth = 0;
        // Number of nested kernel calls. When kernel depth is greater than 1, we turn
        // off the tape.
        this.kernelDepth = 0;
        this.scopeStack = [];
        /**
         * Keeps track of the number of data moves during a kernel execution. We
         * maintain a stack since kernels can call other kernels, recursively.
         */ this.numDataMovesStack = [];
        this.nextScopeId = 0;
        this.tensorInfo = new WeakMap();
        this.profiling = false;
        this.activeProfile = {
            newBytes: 0,
            newTensors: 0,
            peakBytes: 0,
            kernels: [],
            result: null
        };
    }
    dispose() {
        for(const variableName in this.registeredVariables)this.registeredVariables[variableName].dispose();
    }
}
class Engine {
    constructor(ENV){
        this.ENV = ENV;
        this.registry = {};
        this.registryFactory = {};
        this.pendingBackendInitId = 0;
        this.state = new EngineState();
    }
    async ready() {
        if (this.pendingBackendInit != null) return this.pendingBackendInit.then(()=>{});
        if (this.backendInstance != null) return;
        const sortedBackends = this.getSortedBackends();
        for(let i = 0; i < sortedBackends.length; i++){
            const backendName = sortedBackends[i];
            const success = await this.initializeBackend(backendName).success;
            if (success) {
                await this.setBackend(backendName);
                return;
            }
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);
    }
    get backend() {
        if (this.pendingBackendInit != null) throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` + `sure to await tf.ready() or await tf.setBackend() before calling ` + `other methods`);
        if (this.backendInstance == null) {
            const { name , asyncInit  } = this.initializeBackendsAndReturnBest();
            if (asyncInit) throw new Error(`The highest priority backend '${name}' has not yet been ` + `initialized. Make sure to await tf.ready() or ` + `await tf.setBackend() before calling other methods`);
            this.setBackend(name);
        }
        return this.backendInstance;
    }
    backendNames() {
        return Object.keys(this.registryFactory);
    }
    findBackend(backendName) {
        if (!(backendName in this.registry)) {
            // If the backend hasn't been initialized but we have a registry entry for
            // it, initialize it and return it.
            if (backendName in this.registryFactory) {
                const { asyncInit  } = this.initializeBackend(backendName);
                if (asyncInit) // Backend is not ready yet.
                return null;
            } else return null;
        }
        return this.registry[backendName];
    }
    findBackendFactory(backendName) {
        if (!(backendName in this.registryFactory)) return null;
        return this.registryFactory[backendName].factory;
    }
    registerBackend(backendName, factory, priority = 1) {
        if (backendName in this.registryFactory) {
            console.warn(`${backendName} backend was already registered. ` + `Reusing existing backend factory.`);
            return false;
        }
        this.registryFactory[backendName] = {
            factory,
            priority
        };
        return true;
    }
    async setBackend(backendName) {
        if (this.registryFactory[backendName] == null) throw new Error(`Backend name '${backendName}' not found in registry`);
        this.backendName = backendName;
        if (this.registry[backendName] == null) {
            this.backendInstance = null;
            const { success , asyncInit  } = this.initializeBackend(backendName);
            const result = asyncInit ? await success : success;
            if (!result) return false;
        }
        this.backendInstance = this.registry[backendName];
        this.setupRegisteredKernels();
        // Reset the profiler.
        this.profiler = new (0, _profiler.Profiler)(this.backendInstance);
        return true;
    }
    setupRegisteredKernels() {
        const kernels = (0, _kernelRegistry.getKernelsForBackend)(this.backendName);
        kernels.forEach((kernel)=>{
            if (kernel.setupFunc != null) kernel.setupFunc(this.backendInstance);
        });
    }
    disposeRegisteredKernels(backendName) {
        const kernels = (0, _kernelRegistry.getKernelsForBackend)(backendName);
        kernels.forEach((kernel)=>{
            if (kernel.disposeFunc != null) kernel.disposeFunc(this.registry[backendName]);
        });
    }
    /**
     * Initializes a backend by looking up the backend name in the factory
     * registry and calling the factory method. Returns a boolean representing
     * whether the initialization of the backend suceeded. Throws an error if
     * there is no backend in the factory registry.
     */ initializeBackend(backendName) {
        const registryFactoryEntry = this.registryFactory[backendName];
        if (registryFactoryEntry == null) throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);
        try {
            const backend = registryFactoryEntry.factory();
            // Test if the factory returns a promise.
            if (Promise.resolve(backend) === backend) {
                const promiseId = ++this.pendingBackendInitId;
                const success = backend.then((backendInstance)=>{
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) return false;
                    this.registry[backendName] = backendInstance;
                    this.pendingBackendInit = null;
                    return true;
                }).catch((err)=>{
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) return false;
                    this.pendingBackendInit = null;
                    console.warn(`Initialization of backend ${backendName} failed`);
                    console.warn(err.stack || err.message);
                    return false;
                });
                this.pendingBackendInit = success;
                return {
                    success,
                    asyncInit: true
                };
            } else {
                this.registry[backendName] = backend;
                return {
                    success: true,
                    asyncInit: false
                };
            }
        } catch (err) {
            console.warn(`Initialization of backend ${backendName} failed`);
            console.warn(err.stack || err.message);
            return {
                success: false,
                asyncInit: false
            };
        }
    }
    removeBackend(backendName) {
        if (!(backendName in this.registryFactory)) throw new Error(`${backendName} backend not found in registry`);
        if (this.backendName === backendName && this.pendingBackendInit != null) // There is a pending promise of the backend we want to remove. Make it
        // obsolete.
        this.pendingBackendInitId++;
        if (backendName in this.registry) {
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        delete this.registryFactory[backendName];
        // Unset the backend if it is active.
        if (this.backendName === backendName) {
            this.pendingBackendInit = null;
            this.backendName = null;
            this.backendInstance = null;
        }
    }
    getSortedBackends() {
        if (Object.keys(this.registryFactory).length === 0) throw new Error("No backend found in registry.");
        return Object.keys(this.registryFactory).sort((a, b)=>{
            // Highest priority comes first.
            return this.registryFactory[b].priority - this.registryFactory[a].priority;
        });
    }
    initializeBackendsAndReturnBest() {
        const sortedBackends = this.getSortedBackends();
        for(let i = 0; i < sortedBackends.length; i++){
            const backendName = sortedBackends[i];
            const { success , asyncInit  } = this.initializeBackend(backendName);
            if (asyncInit || success) return {
                name: backendName,
                asyncInit
            };
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);
    }
    moveData(backend, dataId) {
        const info = this.state.tensorInfo.get(dataId);
        const srcBackend = info.backend;
        const values = this.readSync(dataId);
        // Delete the tensor from the old backend and move it to the new
        // backend.
        srcBackend.disposeData(dataId);
        info.backend = backend;
        backend.move(dataId, values, info.shape, info.dtype);
        if (this.shouldCheckForMemLeaks()) // Track the number of moves during a kernel execution to correctly
        // detect memory leaks.
        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
    }
    tidy(nameOrFn, fn) {
        let name = null;
        if (fn == null) {
            // Called with only 1 argument.
            if (typeof nameOrFn !== "function") throw new Error("Please provide a function to tidy()");
            fn = nameOrFn;
        } else {
            // Called with 2 arguments.
            if (typeof nameOrFn !== "string" && !(nameOrFn instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
            if (typeof fn !== "function") throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
            name = nameOrFn;
        // TODO(nsthorat,smilkov): Do operation logging and performance
        // profiling.
        }
        let result;
        return this.scopedRun(()=>this.startScope(name), ()=>this.endScope(result), ()=>{
            result = fn();
            if (result instanceof Promise) console.error("Cannot return a Promise inside of tidy.");
            return result;
        });
    }
    scopedRun(start, end, f) {
        start();
        try {
            const res = f();
            end();
            return res;
        } catch (ex) {
            end();
            throw ex;
        }
    }
    nextTensorId() {
        return Engine.nextTensorId++;
    }
    nextVariableId() {
        return Engine.nextVariableId++;
    }
    /**
     * This method is called instead of the public-facing tensor.clone() when
     * saving a tensor for backwards pass. It makes sure to add the clone
     * operation to the tape regardless of being called inside a kernel
     * execution.
     *
     * This method will go away once all kernels are modularized since we won't
     * need to turn off the tape inside runKernel().
     */ clone(x) {
        const y = this.makeTensorFromDataId(x.dataId, x.shape, x.dtype);
        const inputs = {
            x
        };
        const grad = (dy)=>({
                x: ()=>dy.toFloat()
            });
        const saved = [];
        this.addTapeNode(this.state.activeScope.name, inputs, [
            y
        ], grad, saved, {});
        return y;
    }
    /**
     * Execute a kernel with the given name and return the output tensor.
     *
     * @param kernelName The name of the kernel to execute.
     * @param inputs A map of input names to tensors.
     * @param attrs A map of attribute names to their values. An attribute is a
     *     primitive (non-tensor) input to the kernel.
     * @param inputsToSave A list of tensors, inputs to save for the backprop
     *     computation.
     * @param outputsToSave A list of booleans, specifying which output to save
     *     for the backprop computation. These are booleans since the output
     * tensors are not visible to the user.
     */ runKernel(kernelName, inputs, attrs, inputsToSave, outputsToSave) {
        const forwardFunc = null;
        const backwardsFunc = null;
        // Call runKernel as a stop-gap until we modularize all kernels.
        // Once we modularize all kernels, we will remove the existing
        // `runKernelFunc`.
        return this.runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave);
    }
    shouldCheckForMemLeaks() {
        return this.ENV.getBool("IS_TEST");
    }
    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {
        const numDataIdsAfter = this.backend.numDataIds();
        // Count the number of data ids associated with the result of the kernel.
        let numOutputDataIds = 0;
        outInfos.forEach((info)=>{
            // Complex numbers allocate 3 data ids, one for 'real', one for
            // 'imaginary', and one for the container that holds the former two.
            numOutputDataIds += info.dtype === "complex64" ? 3 : 1;
        });
        // Account for the number of moves during kernel execution. A "data move"
        // can happen in the middle of a kernel execution, placing a new (key,value)
        // pair in the data storage. Since data moves have net zero effect (we
        // always remove the data from the old backend), we have to cancel them out
        // when detecting memory leaks.
        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];
        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;
        if (dataIdsLeaked > 0) throw new Error(`Backend '${this.backendName}' has an internal memory leak ` + `(${dataIdsLeaked} data ids) after running '${kernelName}'`);
    }
    /**
     * @deprecated Use `runKernel` for newly added kernels. Keep using this method
     *     only for kernels that are not yet fully modularized.
     */ runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave) {
        let outputs;
        let saved = [];
        const isTapeOn = this.isTapeOn();
        if (kernelName == null) kernelName = this.state.activeScope != null ? this.state.activeScope.name : "";
        const startingBytecount = this.state.numBytes;
        const startingNumTensors = this.state.numTensors;
        if (this.shouldCheckForMemLeaks()) this.state.numDataMovesStack.push(0);
        let kernelFunc;
        const kernel = (0, _kernelRegistry.getKernel)(kernelName, this.backendName);
        let out;
        if (kernel != null) kernelFunc = ()=>{
            const numDataIdsBefore = this.backend.numDataIds();
            out = kernel.kernelFunc({
                inputs,
                attrs,
                backend: this.backend
            });
            const outInfos = Array.isArray(out) ? out : [
                out
            ];
            if (this.shouldCheckForMemLeaks()) this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);
            const outTensors = outInfos.map(({ dataId , shape , dtype  })=>this.makeTensorFromDataId(dataId, shape, dtype));
            // Save the inputs and outputs.
            // Do not save unless we are recording to the tape. Otherwise it would
            // cause a mem leak since we would never run backprop, which disposes
            // the kept tensors.
            if (isTapeOn) {
                let tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);
                if (tensorsToSave == null) {
                    // Fallback for ops that call runKernelFunc and pass in
                    // inputsToSave and outputsToSave. Currently this is the set of ops
                    // with kernel support in the WASM backend. Once those ops and
                    // respective gradients are modularised we can remove this path.
                    if (outputsToSave == null) outputsToSave = [];
                    const outsToSave = outTensors.filter((_, i)=>outputsToSave[i]);
                    tensorsToSave = (inputsToSave || []).slice().concat(outsToSave);
                }
                saved = this.saveTensorsForBackwardMode(tensorsToSave);
            }
            return outTensors;
        };
        else {
            const saveFunc = (tensors)=>{
                // Do not save unless we are recording to the tape. Otherwise it would
                // cause a mem leak since we would never run backprop, which disposes
                // the kept tensors.
                if (!isTapeOn) return;
                saved = tensors.map((tensor)=>this.keep(this.clone(tensor)));
            };
            kernelFunc = ()=>{
                const numDataIdsBefore = this.backend.numDataIds();
                out = this.tidy(()=>forwardFunc(this.backend, saveFunc));
                const outs = Array.isArray(out) ? out : [
                    out
                ];
                if (this.shouldCheckForMemLeaks()) this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outs);
                return outs;
            };
        }
        // Stop recording to a tape when running a kernel.
        this.scopedRun(()=>this.state.kernelDepth++, ()=>this.state.kernelDepth--, ()=>{
            if (!this.ENV.getBool("DEBUG")) outputs = kernelFunc();
            else outputs = this.profiler.profileKernel(kernelName, inputs, ()=>kernelFunc());
        });
        if (isTapeOn) this.addTapeNode(kernelName, inputs, outputs, backwardsFunc, saved, attrs);
        if (this.state.profiling) this.state.activeProfile.kernels.push({
            name: kernelName,
            bytesAdded: this.state.numBytes - startingBytecount,
            totalBytesSnapshot: this.state.numBytes,
            tensorsAdded: this.state.numTensors - startingNumTensors,
            totalTensorsSnapshot: this.state.numTensors,
            inputShapes: Object.keys(inputs).map((key)=>inputs[key].shape),
            outputShapes: outputs.map((item)=>item.shape)
        });
        return Array.isArray(out) ? outputs : outputs[0];
    }
    /**
     * Saves tensors used in forward mode for use in backward mode.
     *
     * @param tensors the list of tensors to save.
     */ saveTensorsForBackwardMode(tensors) {
        const saved = tensors.map((tensor)=>this.keep(this.clone(tensor)));
        return saved;
    }
    /**
     * Returns a list of tensors to save for a given gradient calculation.
     *
     * Returns undefined if their is no registered gradient for this kernel in the
     * gradient registry.
     *
     * @param kernelName name of kernel to look up gradient for.
     * @param inputs a map of input tensors.
     * @param outputs an array of output tensors from forward mode of kernel.
     */ getTensorsForGradient(kernelName, inputs, outputs) {
        const gradConfig = (0, _kernelRegistry.getGradient)(kernelName);
        if (gradConfig != null) {
            const inputsToSave = gradConfig.inputsToSave || [];
            const outputsToSave = gradConfig.outputsToSave || [];
            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs
            // specified in inputsToSave will be saved.
            let inputTensorsToSave;
            if (gradConfig.saveAllInputs) {
                _util.assert(Array.isArray(inputs), ()=>"saveAllInputs is true, expected inputs to be an array.");
                inputTensorsToSave = Object.keys(inputs).map((key)=>inputs[key]);
            } else inputTensorsToSave = inputsToSave.map((inputName)=>inputs[inputName]);
            const outputTensorsToSave = outputs.filter((_, i)=>outputsToSave[i]);
            return inputTensorsToSave.concat(outputTensorsToSave);
        }
        // TODO(yassogba) throw exception here once all runkernelFunc calls with
        // inputsToSave/outputsToSave are removed
        return null;
    }
    /**
     * Internal method used by public APIs for tensor creation. Makes a new
     * tensor with the provided shape, dtype and values. It always
     * creates a new data id and writes the values to the underlying backend.
     */ makeTensor(values, shape, dtype, backend) {
        if (values == null) throw new Error("Values passed to engine.makeTensor() are null");
        dtype = dtype || "float32";
        backend = backend || this.backend;
        let backendVals = values;
        if (dtype === "string" && _util.isString(values[0])) backendVals = values.map((d)=>_util.encodeString(d));
        const dataId = backend.write(backendVals, shape, dtype);
        const t = new (0, _tensor.Tensor)(shape, dtype, dataId, this.nextTensorId());
        this.incRef(t, backend);
        // Count bytes for string tensors.
        if (dtype === "string") {
            const info = this.state.tensorInfo.get(dataId);
            const newBytes = (0, _util.bytesFromStringArray)(backendVals);
            this.state.numBytes += newBytes - info.bytes;
            info.bytes = newBytes;
        }
        return t;
    }
    /**
     * Internal method used by backends. Makes a new tensor
     * that is a wrapper around an existing data id. It doesn't create
     * a new data id, only increments the ref count used in memory tracking.
     */ makeTensorFromDataId(dataId, shape, dtype, backend) {
        dtype = dtype || "float32";
        const t = new (0, _tensor.Tensor)(shape, dtype, dataId, this.nextTensorId());
        this.incRef(t, backend);
        return t;
    }
    makeVariable(initialValue, trainable = true, name, dtype) {
        name = name || this.nextVariableId().toString();
        if (dtype != null && dtype !== initialValue.dtype) initialValue = initialValue.asType(dtype);
        const v = new (0, _tensor.Variable)(initialValue, trainable, name, this.nextTensorId());
        if (this.state.registeredVariables[v.name] != null) throw new Error(`Variable with name ${v.name} was already registered`);
        this.state.registeredVariables[v.name] = v;
        this.incRef(v, this.backend);
        return v;
    }
    incRef(a, backend) {
        const refCount = this.state.tensorInfo.has(a.dataId) ? this.state.tensorInfo.get(a.dataId).refCount : 0;
        this.state.numTensors++;
        if (a.dtype === "string") this.state.numStringTensors++;
        if (refCount === 0) {
            this.state.numDataBuffers++;
            // Bytes for complex numbers are counted by their components. Bytes for
            // string tensors are counted when writing values.
            let bytes = 0;
            if (a.dtype !== "complex64" && a.dtype !== "string") bytes = a.size * _util.bytesPerElement(a.dtype);
            this.state.tensorInfo.set(a.dataId, {
                backend: backend || this.backend,
                dtype: a.dtype,
                shape: a.shape,
                bytes,
                refCount: 0
            });
            this.state.numBytes += bytes;
        }
        this.state.tensorInfo.get(a.dataId).refCount++;
        if (!(a instanceof (0, _tensor.Variable))) this.track(a);
    }
    disposeTensor(a) {
        if (!this.state.tensorInfo.has(a.dataId)) return;
        this.state.numTensors--;
        if (a.dtype === "string") this.state.numStringTensors--;
        const info = this.state.tensorInfo.get(a.dataId);
        const refCount = info.refCount;
        if (refCount <= 1) {
            // Don't count bytes for complex numbers as they are counted by their
            // components.
            if (a.dtype !== "complex64") this.state.numBytes -= info.bytes;
            this.state.numDataBuffers--;
            info.backend.disposeData(a.dataId);
            this.state.tensorInfo.delete(a.dataId);
        } else this.state.tensorInfo.get(a.dataId).refCount--;
    // TODO(nsthorat): Construct an error and save the stack trace for
    // debugging when in debug mode. Creating a stack trace is too expensive
    // to do unconditionally.
    }
    disposeVariables() {
        for(const varName in this.state.registeredVariables){
            const v = this.state.registeredVariables[varName];
            this.disposeVariable(v);
        }
    }
    disposeVariable(v) {
        this.disposeTensor(v);
        if (this.state.registeredVariables[v.name] != null) delete this.state.registeredVariables[v.name];
    }
    memory() {
        const info = this.backend.memory();
        info.numTensors = this.state.numTensors;
        info.numDataBuffers = this.state.numDataBuffers;
        info.numBytes = this.state.numBytes;
        if (this.state.numStringTensors > 0) {
            info.unreliable = true;
            if (info.reasons == null) info.reasons = [];
            info.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)");
        }
        return info;
    }
    async profile(query) {
        this.state.profiling = true;
        const startBytes = this.state.numBytes;
        const startNumTensors = this.state.numTensors;
        this.state.activeProfile.kernels = [];
        this.state.activeProfile.result = query();
        this.state.profiling = false;
        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((d)=>d.totalBytesSnapshot));
        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;
        this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;
        return this.state.activeProfile;
    }
    isTapeOn() {
        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
    }
    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {
        const tapeNode = {
            id: this.state.nextTapeNodeId++,
            kernelName,
            inputs,
            outputs,
            saved
        };
        const gradConfig = (0, _kernelRegistry.getGradient)(kernelName);
        if (gradConfig != null) gradientsFunc = gradConfig.gradFunc;
        if (gradientsFunc != null) tapeNode.gradient = (dys)=>{
            // TODO(smilkov): To optimize back-prop, pass dys that are not used in
            // the backprop graph to the user as null instead of zeros
            dys = dys.map((dy, i)=>{
                if (dy == null) {
                    const output = outputs[i];
                    const vals = _util.makeZerosTypedArray(output.size, output.dtype);
                    return this.makeTensor(vals, output.shape, output.dtype);
                }
                return dy;
            });
            // Grad functions of ops with single outputs expect a dy, while ops
            // with multiple outputs expect dys (array of dy).
            return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);
        };
        this.state.activeTape.push(tapeNode);
    }
    keep(result) {
        result.kept = true;
        return result;
    }
    startTape() {
        if (this.state.gradientDepth === 0) this.state.activeTape = [];
        this.state.gradientDepth++;
    }
    endTape() {
        this.state.gradientDepth--;
    }
    /**
     * Start a scope. Use this with endScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */ startScope(name) {
        const scopeInfo = {
            track: [],
            name: "unnamed scope",
            id: this.state.nextScopeId++
        };
        if (name) scopeInfo.name = name;
        this.state.scopeStack.push(scopeInfo);
        this.state.activeScope = scopeInfo;
    }
    /**
     * End a scope. Use this with startScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */ endScope(result) {
        const tensorsToTrackInParent = (0, _tensorUtil.getTensorsInContainer)(result);
        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map((t)=>t.id));
        // Dispose the arrays tracked in this scope.
        for(let i = 0; i < this.state.activeScope.track.length; i++){
            const tensor = this.state.activeScope.track[i];
            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) tensor.dispose();
        }
        const oldScope = this.state.scopeStack.pop();
        this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1];
        // Track the current result in the parent scope.
        tensorsToTrackInParent.forEach((tensor)=>{
            // Only track the tensor if was allocated in the inner scope and is not
            // globally kept.
            if (!tensor.kept && tensor.scopeId === oldScope.id) this.track(tensor);
        });
    }
    /**
     * Returns gradients of `f` with respect to each of the `xs`. The gradients
     * returned are of the same length as `xs`, but some might be null if `f`
     * was not a function of that `x`. It also takes optional dy to multiply the
     * gradient, which defaults to `1`.
     */ gradients(f, xs, dy, allowNoGradients = false) {
        _util.assert(xs.length > 0, ()=>"gradients() received an empty list of xs.");
        if (dy != null && dy.dtype !== "float32") throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);
        const y = this.scopedRun(()=>this.startTape(), ()=>this.endTape(), ()=>this.tidy("forward", f));
        _util.assert(y instanceof (0, _tensor.Tensor), ()=>"The result y returned by f() must be a tensor.");
        // Filter out the nodes that don't connect x => y.
        const filteredTape = (0, _tape.getFilteredNodesXToY)(this.state.activeTape, xs, y);
        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
        return this.tidy("backward", ()=>{
            const accumulatedGradientMap = {};
            accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy;
            // Backprop gradients through the filtered nodes.
            (0, _tape.backpropagateGradients)(accumulatedGradientMap, filteredTape, // Pass the tidy function to avoid circular dep with `tape.ts`.
            (f)=>this.tidy(f));
            const grads = xs.map((x)=>accumulatedGradientMap[x.id]);
            if (this.state.gradientDepth === 0) {
                // This means that we are not computing higher-order gradients
                // and can clean up the tape.
                this.state.activeTape.forEach((node)=>{
                    for (const tensor of node.saved)tensor.dispose();
                });
                this.state.activeTape = null;
            }
            return {
                value: y,
                grads
            };
        });
    }
    customGrad(f) {
        _util.assert(_util.isFunction(f), ()=>"The f passed in customGrad(f) must be a function.");
        return (...inputs)=>{
            _util.assert(inputs.every((t)=>t instanceof (0, _tensor.Tensor)), ()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");
            let res;
            const inputMap = {};
            inputs.forEach((input, i)=>{
                inputMap[i] = input;
            });
            return this.runKernelFunc((_, save)=>{
                res = f(...[
                    ...inputs,
                    save
                ]);
                _util.assert(res.value instanceof (0, _tensor.Tensor), ()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor");
                _util.assert(_util.isFunction(res.gradFunc), ()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.");
                return res.value;
            }, inputMap, (dy, saved)=>{
                const gradRes = res.gradFunc(dy, saved);
                const grads = Array.isArray(gradRes) ? gradRes : [
                    gradRes
                ];
                _util.assert(grads.length === inputs.length, ()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).");
                _util.assert(grads.every((t)=>t instanceof (0, _tensor.Tensor)), ()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
                const gradMap = {};
                grads.forEach((grad, i)=>{
                    gradMap[i] = ()=>grad;
                });
                return gradMap;
            });
        };
    }
    readSync(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.readSync(dataId);
    }
    read(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.read(dataId);
    }
    async time(query) {
        const start = (0, _util.now)();
        const timingInfo = await this.backend.time(query);
        timingInfo.wallMs = (0, _util.now)() - start;
        return timingInfo;
    }
    /**
     * Tracks a Tensor in the current scope to be automatically cleaned up
     * when the current scope ends, and returns the value.
     *
     * @param result The Tensor to track in the current scope.
     */ track(result) {
        if (this.state.activeScope != null) {
            result.scopeId = this.state.activeScope.id;
            this.state.activeScope.track.push(result);
        }
        return result;
    }
    get registeredVariables() {
        return this.state.registeredVariables;
    }
    /**
     * Resets the engine state. Removes all backends but does not remove
     * registered backend factories.
     */ reset() {
        // Make any pending promise obsolete.
        this.pendingBackendInitId++;
        this.state.dispose();
        this.ENV.reset();
        this.state = new EngineState();
        for(const backendName in this.registry){
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        this.backendName = null;
        this.backendInstance = null;
        this.pendingBackendInit = null;
    }
}
Engine.nextTensorId = 0;
Engine.nextVariableId = 0;
function ones(shape) {
    const values = (0, _util.makeOnesTypedArray)((0, _util.sizeFromShape)(shape), "float32");
    return ENGINE.makeTensor(values, shape, "float32");
}
function getOrMakeEngine() {
    const ns = (0, _globalUtil.getGlobalNamespace)();
    if (ns._tfengine == null) {
        const environment = new (0, _environment.Environment)(ns);
        ns._tfengine = new Engine(environment);
    }
    (0, _environment.setEnvironmentGlobal)(ns._tfengine.ENV);
    // Tell the current tensor interface that the global engine is responsible
    // for tracking.
    (0, _tensor.setTensorTracker)(()=>ns._tfengine);
    return ns._tfengine;
}
const ENGINE = getOrMakeEngine();

},{"./environment":"8tlxC","./global_util":"4etpx","./kernel_registry":"3ziE7","./profiler":"6GT9C","./tape":"82ekz","./tensor":"DPGBx","./tensor_util":"kUGKD","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8tlxC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The environment contains evaluated flags as well as the registered platform.
 * This is always used as a global singleton and can be retrieved with
 * `tf.env()`.
 */ /** @doc {heading: 'Environment'} */ parcelHelpers.export(exports, "Environment", ()=>Environment);
parcelHelpers.export(exports, "getQueryParams", ()=>getQueryParams);
/**
 * Returns the current environment (a global singleton).
 *
 * The environment object contains the evaluated feature values as well as the
 * active platform.
 */ /** @doc {heading: 'Environment'} */ parcelHelpers.export(exports, "env", ()=>env);
parcelHelpers.export(exports, "ENV", ()=>ENV);
parcelHelpers.export(exports, "setEnvironmentGlobal", ()=>setEnvironmentGlobal);
var global = arguments[3];
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
const TENSORFLOWJS_FLAGS_PREFIX = "tfjsflags";
class Environment {
    // tslint:disable-next-line: no-any
    constructor(global1){
        this.global = global;
        this.flags = {};
        this.flagRegistry = {};
        this.urlFlags = {};
        this.populateURLFlags();
    }
    setPlatform(platformName, platform) {
        if (this.platform != null) console.warn(`Platform ${this.platformName} has already been set. ` + `Overwriting the platform with ${platform}.`);
        this.platformName = platformName;
        this.platform = platform;
    }
    registerFlag(flagName, evaluationFn, setHook) {
        this.flagRegistry[flagName] = {
            evaluationFn,
            setHook
        };
        // Override the flag value from the URL. This has to happen here because the
        // environment is initialized before flags get registered.
        if (this.urlFlags[flagName] != null) {
            const flagValue = this.urlFlags[flagName];
            console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);
            this.set(flagName, flagValue);
        }
    }
    get(flagName) {
        if (flagName in this.flags) return this.flags[flagName];
        this.flags[flagName] = this.evaluateFlag(flagName);
        return this.flags[flagName];
    }
    getNumber(flagName) {
        return this.get(flagName);
    }
    getBool(flagName) {
        return this.get(flagName);
    }
    getFlags() {
        return this.flags;
    }
    // For backwards compatibility.
    get features() {
        return this.flags;
    }
    set(flagName, value) {
        if (this.flagRegistry[flagName] == null) throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);
        this.flags[flagName] = value;
        if (this.flagRegistry[flagName].setHook != null) this.flagRegistry[flagName].setHook(value);
    }
    evaluateFlag(flagName) {
        if (this.flagRegistry[flagName] == null) throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);
        return this.flagRegistry[flagName].evaluationFn();
    }
    setFlags(flags) {
        this.flags = Object.assign({}, flags);
    }
    reset() {
        this.flags = {};
        this.urlFlags = {};
        this.populateURLFlags();
    }
    populateURLFlags() {
        if (typeof this.global === "undefined" || typeof this.global.location === "undefined" || typeof this.global.location.search === "undefined") return;
        const urlParams = getQueryParams(this.global.location.search);
        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(",");
            keyValues.forEach((keyValue)=>{
                const [key, value] = keyValue.split(":");
                this.urlFlags[key] = parseValue(key, value);
            });
        }
    }
}
function getQueryParams(queryString) {
    const params = {};
    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t)=>{
        decodeParam(params, t[0], t[1]);
        return t.join("=");
    });
    return params;
}
function decodeParam(params, name, value) {
    params[decodeURIComponent(name)] = decodeURIComponent(value || "");
}
function parseValue(flagName, value) {
    value = value.toLowerCase();
    if (value === "true" || value === "false") return value === "true";
    else if (`${+value}` === value) return +value;
    throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);
}
function env() {
    return ENV;
}
let ENV = null;
function setEnvironmentGlobal(environment) {
    ENV = environment;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"4etpx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// tslint:disable-next-line:no-any
parcelHelpers.export(exports, "getGlobalNamespace", ()=>getGlobalNamespace);
/**
 * Returns a globally accessible 'singleton' object.
 *
 * @param key the name of the object
 * @param init a function to initialize to initialize this object
 *             the first time it is fetched.
 */ parcelHelpers.export(exports, "getGlobal", ()=>getGlobal);
var global = arguments[3];
var process = require("process");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Note that the identifier globalNameSpace is scoped to this module, but will
// always resolve to the same global object regardless of how the module is
// resolved.
// tslint:disable-next-line:no-any
let globalNameSpace;
function getGlobalNamespace() {
    if (globalNameSpace == null) {
        // tslint:disable-next-line:no-any
        let ns;
        if (typeof window !== "undefined") ns = window;
        else if (typeof global !== "undefined") ns = global;
        else if (typeof process !== "undefined") ns = process;
        else if (typeof self !== "undefined") ns = self;
        else throw new Error("Could not find a global object");
        globalNameSpace = ns;
    }
    return globalNameSpace;
}
// tslint:disable-next-line:no-any
function getGlobalMap() {
    const ns = getGlobalNamespace();
    if (ns._tfGlobals == null) ns._tfGlobals = new Map();
    return ns._tfGlobals;
}
function getGlobal(key, init) {
    const globalMap = getGlobalMap();
    if (globalMap.has(key)) return globalMap.get(key);
    else {
        const singleton = init();
        globalMap.set(key, singleton);
        return globalMap.get(key);
    }
}

},{"process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"3ziE7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns the kernel function (code) associated with the provided names.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 */ parcelHelpers.export(exports, "getKernel", ()=>getKernel);
/**
 * Returns the registered gradient info associated with the provided kernel.
 * @param kernelName The official TF kernel name.
 */ parcelHelpers.export(exports, "getGradient", ()=>getGradient);
parcelHelpers.export(exports, "getKernelsForBackend", ()=>getKernelsForBackend);
/**
 * Registers the function (forward pass) for the kernel in a global registry.
 *
 * @param config A config object with the following properties:
 * - `kernelName` The official name of the kernel.
 * - `backendName` The official name of the backend.
 * - `kernelFunc` The function to run during the forward pass of the kernel.
 * - `setupFunc` Optional. Gets called once, after the backend initializes.
 * - `disposeFunc` Optional. Gets called once, right before the backend is
 * disposed.
 */ parcelHelpers.export(exports, "registerKernel", ()=>registerKernel);
/**
 * Registers a gradient function for a given kernel in the global registry,
 * to be used during the back-propagation of that kernel.
 *
 * @param config An object with the following properties:
 * - `kernelName` The name of the kernel that the gradient function is for.
 * - `gradFunc` The function to run during back-propagation.
 */ parcelHelpers.export(exports, "registerGradient", ()=>registerGradient);
/**
 * Removes the kernel function from the registry.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 *
 */ parcelHelpers.export(exports, "unregisterKernel", ()=>unregisterKernel);
/** Removes the registered gradient from the global registry. */ parcelHelpers.export(exports, "unregisterGradient", ()=>unregisterGradient);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _globalUtil = require("./global_util");
const kernelRegistry = (0, _globalUtil.getGlobal)("kernelRegistry", ()=>new Map());
const gradRegistry = (0, _globalUtil.getGlobal)("gradRegistry", ()=>new Map());
function getKernel(kernelName, backendName) {
    const key = makeKey(kernelName, backendName);
    return kernelRegistry.get(key);
}
function getGradient(kernelName) {
    return gradRegistry.get(kernelName);
}
function getKernelsForBackend(backendName) {
    const it = kernelRegistry.entries();
    const result = [];
    while(true){
        const { done , value  } = it.next();
        if (done) break;
        const [key, config] = value;
        const [backend, ] = key.split("_");
        if (backend === backendName) result.push(config);
    }
    return result;
}
function registerKernel(config) {
    const { kernelName , backendName  } = config;
    const key = makeKey(kernelName, backendName);
    if (kernelRegistry.has(key)) console.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);
    kernelRegistry.set(key, config);
}
function registerGradient(config) {
    const { kernelName  } = config;
    if (gradRegistry.has(kernelName)) console.warn(`Overriding the gradient for '${kernelName}'`);
    gradRegistry.set(kernelName, config);
}
function unregisterKernel(kernelName, backendName) {
    const key = makeKey(kernelName, backendName);
    if (!kernelRegistry.has(key)) throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);
    kernelRegistry.delete(key);
}
function unregisterGradient(kernelName) {
    if (!gradRegistry.has(kernelName)) throw new Error(`The gradient '${kernelName}' for backend is not registered`);
    gradRegistry.delete(kernelName);
}
function makeKey(kernelName, backendName) {
    return `${backendName}_${kernelName}`;
}

},{"./global_util":"4etpx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6GT9C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Profiler", ()=>Profiler);
parcelHelpers.export(exports, "checkComputationForErrors", ()=>checkComputationForErrors);
parcelHelpers.export(exports, "Logger", ()=>Logger);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("./util");
class Profiler {
    constructor(backendTimer, logger){
        this.backendTimer = backendTimer;
        this.logger = logger;
        if (logger == null) this.logger = new Logger();
    }
    profileKernel(kernelName, inputs, f) {
        let outputs;
        const holdResultWrapperFn = ()=>{
            outputs = f();
        };
        const timer = this.backendTimer.time(holdResultWrapperFn);
        outputs.forEach((r)=>{
            // Dangling promise here because we don't want to propagate up
            // asynchronicity.
            r.data().then((vals)=>{
                checkComputationForErrors(vals, r.dtype, kernelName);
                timer.then((timing)=>{
                    let extraInfo = "";
                    if (timing.getExtraProfileInfo != null) extraInfo = timing.getExtraProfileInfo();
                    this.logger.logKernelProfile(kernelName, r, vals, timing.kernelMs, inputs, extraInfo);
                });
            });
        });
        return outputs;
    }
}
function checkComputationForErrors(vals, dtype, kernelName) {
    if (dtype !== "float32") // Only floating point computations will generate NaN values
    return false;
    for(let i = 0; i < vals.length; i++){
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) {
            // Throwing custom exception so behavior is testable.
            console.warn(`Found ${num} in the result of '${kernelName}'`);
            return true;
        }
    }
    return false;
}
class Logger {
    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {
        const time = typeof timeMs === "number" ? _util.rightPad(`${timeMs}ms`, 9) : timeMs["error"];
        const paddedName = _util.rightPad(name, 25);
        const rank = result.rank;
        const size = result.size;
        const shape = _util.rightPad(result.shape.toString(), 14);
        let inputShapesDescription = "";
        for(const name1 in inputs){
            const input = inputs[name1];
            // The input might be a non-tensor (e.g HTMLImageElement), in which case
            // we claim the output shape as input shape.
            const inputShape = input.shape || result.shape;
            const inputRank = inputShape.length;
            inputShapesDescription += `${name1}: ${inputRank}D ${inputRank > 0 ? inputShape : ""} `;
        }
        console.log(`%c${paddedName}\t%c${time}\t%c${rank}D ${shape}\t%c${size}\t%c${inputShapesDescription}\t%c${extraInfo}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
    }
}

},{"./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9v6Fb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Shuffles the array in-place using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1, 2, 3, 4, 5];
 * tf.util.shuffle(a);
 * console.log(a);
 * ```
 *
 * @param array The array to shuffle in-place.
 */ /** @doc {heading: 'Util', namespace: 'util'} */ // tslint:disable-next-line:no-any
parcelHelpers.export(exports, "shuffle", ()=>shuffle);
/** Clamps a value to a specified range. */ parcelHelpers.export(exports, "clamp", ()=>clamp);
parcelHelpers.export(exports, "nearestLargerEven", ()=>nearestLargerEven);
parcelHelpers.export(exports, "sum", ()=>sum);
/**
 * Returns a sample from a uniform [a, b) distribution.
 *
 * @param a The minimum support (inclusive).
 * @param b The maximum support (exclusive).
 * @return A pseudorandom number on the half-open interval [a,b).
 */ parcelHelpers.export(exports, "randUniform", ()=>randUniform);
/** Returns the squared Euclidean distance between two vectors. */ parcelHelpers.export(exports, "distSquared", ()=>distSquared);
/**
 * Asserts that the expression is true. Otherwise throws an error with the
 * provided message.
 *
 * ```js
 * const x = 2;
 * tf.util.assert(x === 2, 'x is not 2');
 * ```
 *
 * @param expr The expression to assert (as a boolean).
 * @param msg A function that returns the message to report when throwing an
 *     error. We use a function for performance reasons.
 */ /** @doc {heading: 'Util', namespace: 'util'} */ parcelHelpers.export(exports, "assert", ()=>assert);
parcelHelpers.export(exports, "assertShapesMatch", ()=>assertShapesMatch);
parcelHelpers.export(exports, "assertNonNull", ()=>assertNonNull);
// NOTE: We explicitly type out what T extends instead of any so that
// util.flatten on a nested array of number doesn't try to infer T as a
// number[][], causing us to explicitly type util.flatten<number>().
/**
 *  Flattens an arbitrarily nested array.
 *
 * ```js
 * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
 * const flat = tf.util.flatten(a);
 * console.log(flat);
 * ```
 *
 *  @param arr The nested array to flatten.
 *  @param result The destination array which holds the elements.
 *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
 *      to false.
 */ /** @doc {heading: 'Util', namespace: 'util'} */ parcelHelpers.export(exports, "flatten", ()=>flatten);
/**
 * Returns the size (number of elements) of the tensor given its shape.
 *
 * ```js
 * const shape = [3, 4, 2];
 * const size = tf.util.sizeFromShape(shape);
 * console.log(size);
 * ```
 */ /** @doc {heading: 'Util', namespace: 'util'} */ parcelHelpers.export(exports, "sizeFromShape", ()=>sizeFromShape);
parcelHelpers.export(exports, "isScalarShape", ()=>isScalarShape);
parcelHelpers.export(exports, "arraysEqual", ()=>arraysEqual);
parcelHelpers.export(exports, "isInt", ()=>isInt);
parcelHelpers.export(exports, "tanh", ()=>tanh);
parcelHelpers.export(exports, "sizeToSquarishShape", ()=>sizeToSquarishShape);
/**
 * Creates a new array with randomized indicies to a given quantity.
 *
 * ```js
 * const randomTen = tf.util.createShuffledIndices(10);
 * console.log(randomTen);
 * ```
 *
 * @param number Quantity of how many shuffled indicies to create.
 */ /** @doc {heading: 'Util', namespace: 'util'} */ parcelHelpers.export(exports, "createShuffledIndices", ()=>createShuffledIndices);
parcelHelpers.export(exports, "rightPad", ()=>rightPad);
parcelHelpers.export(exports, "repeatedTry", ()=>repeatedTry);
/**
 * Given the full size of the array and a shape that may contain -1 as the
 * implicit dimension, returns the inferred shape where -1 is replaced.
 * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].
 *
 * @param shape The shape, which may contain -1 in some dimension.
 * @param size The full size (number of elements) of the array.
 * @return The inferred shape where -1 is replaced with the inferred size.
 */ parcelHelpers.export(exports, "inferFromImplicitShape", ()=>inferFromImplicitShape);
parcelHelpers.export(exports, "parseAxisParam", ()=>parseAxisParam);
/** Reduces the shape by removing all dimensions of shape 1. */ parcelHelpers.export(exports, "squeezeShape", ()=>squeezeShape);
parcelHelpers.export(exports, "getTypedArrayFromDType", ()=>getTypedArrayFromDType);
parcelHelpers.export(exports, "getArrayFromDType", ()=>getArrayFromDType);
parcelHelpers.export(exports, "checkConversionForErrors", ()=>checkConversionForErrors);
/** Returns true if the dtype is valid. */ parcelHelpers.export(exports, "isValidDtype", ()=>isValidDtype);
/**
 * Returns true if the new type can't encode the old type without loss of
 * precision.
 */ parcelHelpers.export(exports, "hasEncodingLoss", ()=>hasEncodingLoss);
parcelHelpers.export(exports, "isTypedArray", ()=>isTypedArray);
parcelHelpers.export(exports, "bytesPerElement", ()=>bytesPerElement);
/**
 * Returns the approximate number of bytes allocated in the string array - 2
 * bytes per character. Computing the exact bytes for a native string in JS is
 * not possible since it depends on the encoding of the html page that serves
 * the website.
 */ parcelHelpers.export(exports, "bytesFromStringArray", ()=>bytesFromStringArray);
/** Returns true if the value is a string. */ parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isBoolean", ()=>isBoolean);
parcelHelpers.export(exports, "isNumber", ()=>isNumber);
parcelHelpers.export(exports, "inferDtype", ()=>inferDtype);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "nearestDivisor", ()=>nearestDivisor);
parcelHelpers.export(exports, "computeStrides", ()=>computeStrides);
parcelHelpers.export(exports, "toTypedArray", ()=>toTypedArray);
// Provide a nested array of TypedArray in given shape.
parcelHelpers.export(exports, "toNestedArray", ()=>toNestedArray);
parcelHelpers.export(exports, "makeOnesTypedArray", ()=>makeOnesTypedArray);
parcelHelpers.export(exports, "makeZerosTypedArray", ()=>makeZerosTypedArray);
/**
 * Returns the current high-resolution time in milliseconds relative to an
 * arbitrary time in the past. It works across different platforms (node.js,
 * browsers).
 *
 * ```js
 * console.log(tf.util.now());
 * ```
 */ /** @doc {heading: 'Util', namespace: 'util'} */ parcelHelpers.export(exports, "now", ()=>now);
parcelHelpers.export(exports, "assertNonNegativeIntegerDimensions", ()=>assertNonNegativeIntegerDimensions);
/**
 * Returns a platform-specific implementation of
 * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 *
 * If `fetch` is defined on the global object (`window`, `process`, etc.),
 * `tf.util.fetch` returns that function.
 *
 * If not, `tf.util.fetch` returns a platform-specific solution.
 *
 * ```js
 * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');
 * // handle response
 * ```
 */ /** @doc {heading: 'Util'} */ parcelHelpers.export(exports, "fetch", ()=>fetch);
/**
 * Encodes the provided string into bytes using the provided encoding scheme.
 *
 * @param s The string to encode.
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 */ /** @doc {heading: 'Util'} */ parcelHelpers.export(exports, "encodeString", ()=>encodeString);
/**
 * Decodes the provided bytes into a string using the provided encoding scheme.
 * @param bytes The bytes to decode.
 *
 * @param encoding The encoding scheme. Defaults to utf-8.
 */ /** @doc {heading: 'Util'} */ parcelHelpers.export(exports, "decodeString", ()=>decodeString);
/**
 * Computes flat index for a given location (multidimentionsal index) in a
 * Tensor/multidimensional array.
 *
 * @param locs Location in the tensor.
 * @param rank Rank of the tensor.
 * @param strides Tensor strides.
 */ parcelHelpers.export(exports, "locToIndex", ()=>locToIndex);
/**
 * Computes the location (multidimensional index) in a tensor/multidimentional
 * array for a given flat index.
 *
 * @param index Index in flat array.
 * @param rank Rank of tensor.
 * @param strides Strides of tensor.
 */ parcelHelpers.export(exports, "indexToLoc", ()=>indexToLoc);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("./environment");
function shuffle(array) {
    let counter = array.length;
    let temp = 0;
    let index = 0;
    // While there are elements in the array
    while(counter > 0){
        // Pick a random index
        index = Math.random() * counter | 0;
        // Decrease counter by 1
        counter--;
        // And swap the last element with it
        temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
    }
}
function clamp(min, x, max) {
    return Math.max(min, Math.min(x, max));
}
function nearestLargerEven(val) {
    return val % 2 === 0 ? val : val + 1;
}
function sum(arr) {
    let sum = 0;
    for(let i = 0; i < arr.length; i++)sum += arr[i];
    return sum;
}
function randUniform(a, b) {
    const r = Math.random();
    return b * r + (1 - r) * a;
}
function distSquared(a, b) {
    let result = 0;
    for(let i = 0; i < a.length; i++){
        const diff = Number(a[i]) - Number(b[i]);
        result += diff * diff;
    }
    return result;
}
function assert(expr, msg) {
    if (!expr) throw new Error(typeof msg === "string" ? msg : msg());
}
function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = "") {
    assert(arraysEqual(shapeA, shapeB), ()=>errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
}
function assertNonNull(a) {
    assert(a != null, ()=>`The input to the tensor constructor must be a non-null value.`);
}
function flatten(arr, result = [], skipTypedArray = false) {
    if (result == null) result = [];
    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) for(let i = 0; i < arr.length; ++i)flatten(arr[i], result, skipTypedArray);
    else result.push(arr);
    return result;
}
function sizeFromShape(shape) {
    if (shape.length === 0) // Scalar.
    return 1;
    let size = shape[0];
    for(let i = 1; i < shape.length; i++)size *= shape[i];
    return size;
}
function isScalarShape(shape) {
    return shape.length === 0;
}
function arraysEqual(n1, n2) {
    if (n1 === n2) return true;
    if (n1 == null || n2 == null) return false;
    if (n1.length !== n2.length) return false;
    for(let i = 0; i < n1.length; i++){
        if (n1[i] !== n2[i]) return false;
    }
    return true;
}
function isInt(a) {
    return a % 1 === 0;
}
function tanh(x) {
    // tslint:disable-next-line:no-any
    if (Math.tanh != null) // tslint:disable-next-line:no-any
    return Math.tanh(x);
    if (x === Infinity) return 1;
    else if (x === -Infinity) return -1;
    else {
        const e2x = Math.exp(2 * x);
        return (e2x - 1) / (e2x + 1);
    }
}
function sizeToSquarishShape(size) {
    const width = Math.ceil(Math.sqrt(size));
    return [
        width,
        Math.ceil(size / width)
    ];
}
function createShuffledIndices(n) {
    const shuffledIndices = new Uint32Array(n);
    for(let i = 0; i < n; ++i)shuffledIndices[i] = i;
    shuffle(shuffledIndices);
    return shuffledIndices;
}
function rightPad(a, size) {
    if (size <= a.length) return a;
    return a + " ".repeat(size - a.length);
}
function repeatedTry(checkFn, delayFn = (counter)=>0, maxCounter) {
    return new Promise((resolve, reject)=>{
        let tryCount = 0;
        const tryFn = ()=>{
            if (checkFn()) {
                resolve();
                return;
            }
            tryCount++;
            const nextBackoff = delayFn(tryCount);
            if (maxCounter != null && tryCount >= maxCounter) {
                reject();
                return;
            }
            setTimeout(tryFn, nextBackoff);
        };
        tryFn();
    });
}
function inferFromImplicitShape(shape, size) {
    let shapeProd = 1;
    let implicitIdx = -1;
    for(let i = 0; i < shape.length; ++i){
        if (shape[i] >= 0) shapeProd *= shape[i];
        else if (shape[i] === -1) {
            if (implicitIdx !== -1) throw Error(`Shapes can only have 1 implicit size. ` + `Found -1 at dim ${implicitIdx} and dim ${i}`);
            implicitIdx = i;
        } else if (shape[i] < 0) throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);
    }
    if (implicitIdx === -1) {
        if (size > 0 && size !== shapeProd) throw Error(`Size(${size}) must match the product of shape ${shape}`);
        return shape;
    }
    if (shapeProd === 0) throw Error(`Cannot infer the missing size in [${shape}] when ` + `there are 0 elements`);
    if (size % shapeProd !== 0) throw Error(`The implicit shape can't be a fractional number. ` + `Got ${size} / ${shapeProd}`);
    const newShape = shape.slice();
    newShape[implicitIdx] = size / shapeProd;
    return newShape;
}
function parseAxisParam(axis, shape) {
    const rank = shape.length;
    // Normalize input
    axis = axis == null ? shape.map((s, i)=>i) : [].concat(axis);
    // Check for valid range
    assert(axis.every((ax)=>ax >= -rank && ax < rank), ()=>`All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`);
    // Check for only integers
    assert(axis.every((ax)=>isInt(ax)), ()=>`All values in axis param must be integers but ` + `got axis ${axis}`);
    // Handle negative axis.
    return axis.map((a)=>a < 0 ? rank + a : a);
}
function squeezeShape(shape, axis) {
    const newShape = [];
    const keptDims = [];
    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
    const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();
    let j = 0;
    for(let i = 0; i < shape.length; ++i){
        if (axes != null) {
            if (axes[j] === i && shape[i] !== 1) throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);
            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
                newShape.push(shape[i]);
                keptDims.push(i);
            }
            if (axes[j] <= i) j++;
        }
        if (shape[i] !== 1) {
            newShape.push(shape[i]);
            keptDims.push(i);
        }
    }
    return {
        newShape,
        keptDims
    };
}
function getTypedArrayFromDType(dtype, size) {
    let values = null;
    if (dtype == null || dtype === "float32") values = new Float32Array(size);
    else if (dtype === "int32") values = new Int32Array(size);
    else if (dtype === "bool") values = new Uint8Array(size);
    else throw new Error(`Unknown data type ${dtype}`);
    return values;
}
function getArrayFromDType(dtype, size) {
    let values = null;
    if (dtype == null || dtype === "float32") values = new Float32Array(size);
    else if (dtype === "int32") values = new Int32Array(size);
    else if (dtype === "bool") values = new Uint8Array(size);
    else if (dtype === "string") values = new Array(size);
    else throw new Error(`Unknown data type ${dtype}`);
    return values;
}
function checkConversionForErrors(vals, dtype) {
    for(let i = 0; i < vals.length; i++){
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);
    }
}
function isValidDtype(dtype) {
    return dtype === "bool" || dtype === "complex64" || dtype === "float32" || dtype === "int32" || dtype === "string";
}
function hasEncodingLoss(oldType, newType) {
    if (newType === "complex64") return false;
    if (newType === "float32" && oldType !== "complex64") return false;
    if (newType === "int32" && oldType !== "float32" && oldType !== "complex64") return false;
    if (newType === "bool" && oldType === "bool") return false;
    return true;
}
function isTypedArray(a) {
    return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array;
}
function bytesPerElement(dtype) {
    if (dtype === "float32" || dtype === "int32") return 4;
    else if (dtype === "complex64") return 8;
    else if (dtype === "bool") return 1;
    else throw new Error(`Unknown dtype ${dtype}`);
}
function bytesFromStringArray(arr) {
    if (arr == null) return 0;
    let bytes = 0;
    arr.forEach((x)=>bytes += x.length);
    return bytes;
}
function isString(value) {
    return typeof value === "string" || value instanceof String;
}
function isBoolean(value) {
    return typeof value === "boolean";
}
function isNumber(value) {
    return typeof value === "number";
}
function inferDtype(values) {
    if (Array.isArray(values)) return inferDtype(values[0]);
    if (values instanceof Float32Array) return "float32";
    else if (values instanceof Int32Array || values instanceof Uint8Array) return "int32";
    else if (isNumber(values)) return "float32";
    else if (isString(values)) return "string";
    else if (isBoolean(values)) return "bool";
    return "float32";
}
function isFunction(f) {
    return !!(f && f.constructor && f.call && f.apply);
}
function nearestDivisor(size, start) {
    for(let i = start; i < size; ++i){
        if (size % i === 0) return i;
    }
    return size;
}
function computeStrides(shape) {
    const rank = shape.length;
    if (rank < 2) return [];
    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)
    // strides.
    const strides = new Array(rank - 1);
    strides[rank - 2] = shape[rank - 1];
    for(let i = rank - 3; i >= 0; --i)strides[i] = strides[i + 1] * shape[i + 1];
    return strides;
}
function toTypedArray(a, dtype, debugMode) {
    if (dtype === "string") throw new Error("Cannot convert a string[] to a TypedArray");
    if (Array.isArray(a)) a = flatten(a);
    if (debugMode) checkConversionForErrors(a, dtype);
    if (noConversionNeeded(a, dtype)) return a;
    if (dtype == null || dtype === "float32" || dtype === "complex64") return new Float32Array(a);
    else if (dtype === "int32") return new Int32Array(a);
    else if (dtype === "bool") {
        const bool = new Uint8Array(a.length);
        for(let i = 0; i < bool.length; ++i)if (Math.round(a[i]) !== 0) bool[i] = 1;
        return bool;
    } else throw new Error(`Unknown data type ${dtype}`);
}
function createNestedArray(offset, shape, a) {
    const ret = new Array();
    if (shape.length === 1) {
        const d = shape[0];
        for(let i = 0; i < d; i++)ret[i] = a[offset + i];
    } else {
        const d1 = shape[0];
        const rest = shape.slice(1);
        const len = rest.reduce((acc, c)=>acc * c);
        for(let i1 = 0; i1 < d1; i1++)ret[i1] = createNestedArray(offset + i1 * len, rest, a);
    }
    return ret;
}
function toNestedArray(shape, a) {
    if (shape.length === 0) // Scalar type should return a single number.
    return a[0];
    const size = shape.reduce((acc, c)=>acc * c);
    if (size === 0) // A tensor with shape zero should be turned into empty list.
    return [];
    if (size !== a.length) throw new Error(`[${shape}] does not match the input size.`);
    return createNestedArray(0, shape, a);
}
function noConversionNeeded(a, dtype) {
    return a instanceof Float32Array && dtype === "float32" || a instanceof Int32Array && dtype === "int32" || a instanceof Uint8Array && dtype === "bool";
}
function makeOnesTypedArray(size, dtype) {
    const array = makeZerosTypedArray(size, dtype);
    for(let i = 0; i < array.length; i++)array[i] = 1;
    return array;
}
function makeZerosTypedArray(size, dtype) {
    if (dtype == null || dtype === "float32" || dtype === "complex64") return new Float32Array(size);
    else if (dtype === "int32") return new Int32Array(size);
    else if (dtype === "bool") return new Uint8Array(size);
    else throw new Error(`Unknown data type ${dtype}`);
}
function now() {
    return (0, _environment.env)().platform.now();
}
function assertNonNegativeIntegerDimensions(shape) {
    shape.forEach((dimSize)=>{
        assert(Number.isInteger(dimSize) && dimSize >= 0, ()=>`Tensor must have a shape comprised of positive integers but got ` + `shape [${shape}].`);
    });
}
function fetch(path, requestInits) {
    return (0, _environment.env)().platform.fetch(path, requestInits);
}
function encodeString(s, encoding = "utf-8") {
    encoding = encoding || "utf-8";
    return (0, _environment.env)().platform.encode(s, encoding);
}
function decodeString(bytes, encoding = "utf-8") {
    encoding = encoding || "utf-8";
    return (0, _environment.env)().platform.decode(bytes, encoding);
}
function locToIndex(locs, rank, strides) {
    if (rank === 0) return 0;
    else if (rank === 1) return locs[0];
    let index = locs[locs.length - 1];
    for(let i = 0; i < locs.length - 1; ++i)index += strides[i] * locs[i];
    return index;
}
function indexToLoc(index, rank, strides) {
    if (rank === 0) return [];
    else if (rank === 1) return [
        index
    ];
    const locs = new Array(rank);
    for(let i = 0; i < locs.length - 1; ++i){
        locs[i] = Math.floor(index / strides[i]);
        index -= locs[i] * strides[i];
    }
    locs[locs.length - 1] = index;
    return locs;
}

},{"./environment":"8tlxC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"82ekz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Computes a list of TapeNodes that connect x to y, filtering everything else
 * out and preserving the order of the original tape elements.
 *
 * @param tape The tape elements to filter.
 * @param xs The input Tensors.
 * @param y The output Tensor.
 */ parcelHelpers.export(exports, "getFilteredNodesXToY", ()=>getFilteredNodesXToY);
/**
 * Backpropagate gradients through the filtered TapeNodes.
 *
 * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
 * is mutated by this method.
 * @param filteredTape The filtered TapeNodes to backprop through.
 */ parcelHelpers.export(exports, "backpropagateGradients", ()=>backpropagateGradients);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("./util");
function getFilteredNodesXToY(tape, xs, y) {
    // Forward pass to compute all the nodes and Tensors that are transitively a
    // function of x.
    const tensorsFromX = {};
    const nodesFromX = {};
    for(let i = 0; i < xs.length; i++)tensorsFromX[xs[i].id] = true;
    for(let i1 = 0; i1 < tape.length; i1++){
        const node = tape[i1];
        const nodeInputs = node.inputs;
        for(const inputName in nodeInputs){
            const input = nodeInputs[inputName];
            let anyInputFromX = false;
            for(let j = 0; j < xs.length; j++)if (tensorsFromX[input.id]) {
                node.outputs.forEach((output)=>tensorsFromX[output.id] = true);
                anyInputFromX = true;
                nodesFromX[node.id] = true;
                break;
            }
            if (anyInputFromX) break;
        }
    }
    // Backward pass to find all of the nodes and Tensors that lead to y.
    const tensorsLeadToY = {};
    tensorsLeadToY[y.id] = true;
    const nodesToY = {};
    for(let i2 = tape.length - 1; i2 >= 0; i2--){
        const node1 = tape[i2];
        const nodeInputs1 = node1.inputs;
        // If any of the outputs lead to y, mark all of the inputs as leading to y.
        for(let j1 = 0; j1 < node1.outputs.length; j1++)if (tensorsLeadToY[node1.outputs[j1].id]) {
            for(const inputName1 in nodeInputs1){
                tensorsLeadToY[nodeInputs1[inputName1].id] = true;
                nodesToY[node1.id] = true;
            }
            break;
        }
    }
    // Return the paths that come from x and lead to y.
    const filteredTape = [];
    for(let i3 = 0; i3 < tape.length; i3++){
        const node2 = tape[i3];
        if (nodesFromX[node2.id] && nodesToY[node2.id]) {
            // Prune the inputs from the node that aren't a function of x.
            const prunedInputs = {};
            for(const inputName2 in node2.inputs){
                const nodeInput = node2.inputs[inputName2];
                if (tensorsFromX[nodeInput.id]) prunedInputs[inputName2] = nodeInput;
            }
            // Copy the node and overwrite inputsAndArgs to the pruned version.
            const prunedNode = Object.assign({}, node2);
            prunedNode.inputs = prunedInputs;
            prunedNode.outputs = node2.outputs;
            filteredTape.push(prunedNode);
        }
    }
    return filteredTape;
}
function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy) {
    // Walk the tape backward and keep a map of Tensor to its gradient.
    for(let i = filteredTape.length - 1; i >= 0; i--){
        const node = filteredTape[i];
        const dys = [];
        node.outputs.forEach((o)=>{
            const gradTensor = tensorAccumulatedGradientMap[o.id];
            if (gradTensor != null) dys.push(gradTensor);
            else // This particular output is not in the back-propagation subgraph, so it
            // does not affect the final output, thus we put null for its dy.
            dys.push(null);
        });
        if (node.gradient == null) throw new Error(`Cannot compute gradient: gradient function not found ` + `for ${node.kernelName}.`);
        // Backprop dy through this node and accumulate gradients over the inputs.
        const inputGradients = node.gradient(dys);
        for(const inputName in node.inputs){
            if (!(inputName in inputGradients)) throw new Error(`Cannot backprop through input ${inputName}. ` + `Available gradients found: ${Object.keys(inputGradients)}.`);
            // Call the gradient function.
            const dx = tidy(()=>inputGradients[inputName]());
            if (dx.dtype !== "float32") throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);
            const x = node.inputs[inputName];
            if (!_util.arraysEqual(dx.shape, x.shape)) throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `'${inputName}' has shape '${dx.shape}', which does not match ` + `the shape of the input '${x.shape}'`);
            if (tensorAccumulatedGradientMap[x.id] == null) tensorAccumulatedGradientMap[x.id] = dx;
            else {
                const curGradient = tensorAccumulatedGradientMap[x.id];
                tensorAccumulatedGradientMap[x.id] = curGradient.add(dx);
                curGradient.dispose();
            }
        }
    }
}

},{"./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"DPGBx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A mutable object, similar to `tf.Tensor`, that allows users to set values
 * at locations before converting to an immutable `tf.Tensor`.
 *
 * See `tf.buffer` for creating a tensor buffer.
 */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ parcelHelpers.export(exports, "TensorBuffer", ()=>TensorBuffer);
/**
 * An external consumer can register itself as the tensor tracker. This way
 * the Tensor class can notify the tracker for every tensor created and
 * disposed.
 */ parcelHelpers.export(exports, "setTensorTracker", ()=>setTensorTracker);
/**
 * An external consumer can register itself as the op handler. This way the
 * Tensor class can have chaining methods that call into ops via the op
 * handler.
 */ parcelHelpers.export(exports, "setOpHandler", ()=>setOpHandler);
/**
 * Sets the deprecation warning function to be used by this file. This way the
 * Tensor class can be a leaf but still use the environment.
 */ parcelHelpers.export(exports, "setDeprecationWarningFn", ()=>setDeprecationWarningFn);
/**
 * A `tf.Tensor` object represents an immutable, multidimensional array of
 * numbers that has a shape and a data type.
 *
 * See `tf.tensor` for details on how to create a `tf.Tensor`.
 */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ parcelHelpers.export(exports, "Tensor", ()=>Tensor);
/**
 * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
 */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ parcelHelpers.export(exports, "Variable", ()=>Variable);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorFormat = require("./tensor_format");
var _util = require("./util");
class TensorBuffer {
    constructor(shape, dtype, values){
        this.dtype = dtype;
        this.shape = shape.slice();
        this.size = _util.sizeFromShape(shape);
        if (values != null) {
            const n = values.length;
            _util.assert(n === this.size, ()=>`Length of values '${n}' does not match the size ` + `inferred by the shape '${this.size}'.`);
        }
        if (dtype === "complex64") throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` + `a TensorBuffer for the real and imaginary parts separately and ` + `call tf.complex(real, imag).`);
        this.values = values || _util.getArrayFromDType(dtype, this.size);
        this.strides = (0, _util.computeStrides)(shape);
    }
    /**
     * Sets a value in the buffer at a given location.
     *
     * @param value The value to set.
     * @param locs  The location indices.
     */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ set(value, ...locs) {
        if (locs.length === 0) locs = [
            0
        ];
        _util.assert(locs.length === this.rank, ()=>`The number of provided coordinates (${locs.length}) must ` + `match the rank (${this.rank})`);
        const index = this.locToIndex(locs);
        this.values[index] = value;
    }
    /**
     * Returns the value in the buffer at the provided location.
     *
     * @param locs The location indices.
     */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ get(...locs) {
        if (locs.length === 0) locs = [
            0
        ];
        let i = 0;
        for (const loc of locs){
            if (loc < 0 || loc >= this.shape[i]) {
                const msg = `Requested out of range element at ${locs}. ` + `  Buffer shape=${this.shape}`;
                throw new Error(msg);
            }
            i++;
        }
        let index = locs[locs.length - 1];
        for(let i1 = 0; i1 < locs.length - 1; ++i1)index += this.strides[i1] * locs[i1];
        return this.values[index];
    }
    locToIndex(locs) {
        if (this.rank === 0) return 0;
        else if (this.rank === 1) return locs[0];
        let index = locs[locs.length - 1];
        for(let i = 0; i < locs.length - 1; ++i)index += this.strides[i] * locs[i];
        return index;
    }
    indexToLoc(index) {
        if (this.rank === 0) return [];
        else if (this.rank === 1) return [
            index
        ];
        const locs = new Array(this.shape.length);
        for(let i = 0; i < locs.length - 1; ++i){
            locs[i] = Math.floor(index / this.strides[i]);
            index -= locs[i] * this.strides[i];
        }
        locs[locs.length - 1] = index;
        return locs;
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Creates an immutable `tf.Tensor` object from the buffer.
     */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ toTensor() {
        return trackerFn().makeTensor(this.values, this.shape, this.dtype);
    }
}
// For tracking tensor creation and disposal.
let trackerFn = null;
// Used by chaining methods to call into ops.
let opHandler = null;
// Used to warn about deprecated methods.
let deprecationWarningFn = null;
function setTensorTracker(fn) {
    trackerFn = fn;
}
function setOpHandler(handler) {
    opHandler = handler;
}
function setDeprecationWarningFn(fn) {
    deprecationWarningFn = fn;
}
class Tensor {
    constructor(shape, dtype, dataId, id){
        /** Whether this tensor has been globally kept. */ this.kept = false;
        this.isDisposedInternal = false;
        this.shape = shape.slice();
        this.dtype = dtype || "float32";
        this.size = _util.sizeFromShape(shape);
        this.strides = (0, _util.computeStrides)(shape);
        this.dataId = dataId;
        this.id = id;
        this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
    }
    /** Flatten a Tensor to a 1D array. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ flatten() {
        this.throwIfDisposed();
        return this.as1D();
    }
    /** Converts a size-1 `tf.Tensor` to a `tf.Scalar`. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ asScalar() {
        this.throwIfDisposed();
        _util.assert(this.size === 1, ()=>"The array must have only 1 element.");
        return this.reshape([]);
    }
    /** Converts a `tf.Tensor` to a `tf.Tensor1D`. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ as1D() {
        this.throwIfDisposed();
        return this.reshape([
            this.size
        ]);
    }
    /**
     * Converts a `tf.Tensor` to a `tf.Tensor2D`.
     *
     * @param rows Number of rows in `tf.Tensor2D`.
     * @param columns Number of columns in `tf.Tensor2D`.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ as2D(rows, columns) {
        this.throwIfDisposed();
        return this.reshape([
            rows,
            columns
        ]);
    }
    /**
     * Converts a `tf.Tensor` to a `tf.Tensor3D`.
     *
     * @param rows Number of rows in `tf.Tensor3D`.
     * @param columns Number of columns in `tf.Tensor3D`.
     * @param depth Depth of `tf.Tensor3D`.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ as3D(rows, columns, depth) {
        this.throwIfDisposed();
        return this.reshape([
            rows,
            columns,
            depth
        ]);
    }
    /**
     * Converts a `tf.Tensor` to a `tf.Tensor4D`.
     *
     * @param rows Number of rows in `tf.Tensor4D`.
     * @param columns Number of columns in `tf.Tensor4D`.
     * @param depth Depth of `tf.Tensor4D`.
     * @param depth2 4th dimension of `tf.Tensor4D`.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ as4D(rows, columns, depth, depth2) {
        this.throwIfDisposed();
        return this.reshape([
            rows,
            columns,
            depth,
            depth2
        ]);
    }
    /**
     * Converts a `tf.Tensor` to a `tf.Tensor5D`.
     *
     * @param rows Number of rows in `tf.Tensor5D`.
     * @param columns Number of columns in `tf.Tensor5D`.
     * @param depth Depth of `tf.Tensor5D`.
     * @param depth2 4th dimension of `tf.Tensor5D`.
     * @param depth3 5th dimension of 'tf.Tensor5D'
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ as5D(rows, columns, depth, depth2, depth3) {
        this.throwIfDisposed();
        return this.reshape([
            rows,
            columns,
            depth,
            depth2,
            depth3
        ]);
    }
    /**
     * Casts a `tf.Tensor` to a specified dtype.
     *
     * @param dtype Data-type to cast the tensor to.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ asType(dtype) {
        this.throwIfDisposed();
        return opHandler.cast(this, dtype);
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ async buffer() {
        const vals = await this.data();
        return opHandler.buffer(this.shape, this.dtype, vals);
    }
    /** Returns a `tf.TensorBuffer` that holds the underlying data. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ bufferSync() {
        return opHandler.buffer(this.shape, this.dtype, this.dataSync());
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * asynchronously.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ async array() {
        const vals = await this.data();
        return (0, _util.toNestedArray)(this.shape, vals);
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * synchronously.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ arraySync() {
        return (0, _util.toNestedArray)(this.shape, this.dataSync());
    }
    /**
     * Asynchronously downloads the values from the `tf.Tensor`. Returns a
     * promise of `TypedArray` that resolves when the computation has finished.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ async data() {
        this.throwIfDisposed();
        const data = trackerFn().read(this.dataId);
        if (this.dtype === "string") {
            const bytes = await data;
            try {
                return bytes.map((b)=>_util.decodeString(b));
            } catch (_a) {
                throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
            }
        }
        return data;
    }
    /**
     * Synchronously downloads the values from the `tf.Tensor`. This blocks the
     * UI thread until the values are ready, which can cause performance issues.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ dataSync() {
        this.throwIfDisposed();
        const data = trackerFn().readSync(this.dataId);
        if (this.dtype === "string") try {
            return data.map((b)=>_util.decodeString(b));
        } catch (_a) {
            throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
        }
        return data;
    }
    /** Returns the underlying bytes of the tensor's data. */ async bytes() {
        this.throwIfDisposed();
        const data = await trackerFn().read(this.dataId);
        if (this.dtype === "string") return data;
        else return new Uint8Array(data.buffer);
    }
    /**
     * Disposes `tf.Tensor` from memory.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ dispose() {
        if (this.isDisposed) return;
        trackerFn().disposeTensor(this);
        this.isDisposedInternal = true;
    }
    get isDisposed() {
        return this.isDisposedInternal;
    }
    throwIfDisposed() {
        if (this.isDisposed) throw new Error(`Tensor is disposed.`);
    }
    /** Casts the array to type `float32` */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ toFloat() {
        return this.asType("float32");
    }
    /** Casts the array to type `int32` */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ toInt() {
        return this.asType("int32");
    }
    /** Casts the array to type `bool` */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ toBool() {
        return this.asType("bool");
    }
    /**
     * Prints the `tf.Tensor`. See `tf.print` for details.
     *
     * @param verbose Whether to print verbose information about the tensor,
     *    including dtype and size.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ print(verbose = false) {
        return opHandler.print(this, verbose);
    }
    /**
     * Reshapes the tensor into the provided shape.
     * See `tf.reshape` for more details.
     *
     * @param newShape An array of integers defining the output tensor shape.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ reshape(newShape) {
        this.throwIfDisposed();
        return opHandler.reshape(this, newShape);
    }
    /**
     * Reshapes the tensor into the shape of the provided tensor.
     *
     * @param x The tensor of required shape.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ reshapeAs(x) {
        this.throwIfDisposed();
        return this.reshape(x.shape);
    }
    /**
     * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
     * into the tensor's shape. See `tf.expandDims` for details.
     *
     * @param axis The dimension index at which to insert shape of 1. Defaults to
     *     0 (the first dimension).
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ expandDims(axis = 0) {
        return opHandler.expandDims(this, axis);
    }
    /**
     * Returns the cumulative sum of the `tf.Tensor` along `axis`.
     *
     * @param axis The axis along which to sum. Optional. Defaults to 0.
     * @param exclusive Whether to perform exclusive cumulative sum. Defaults to
     *    false. If set to true then the sum of each tensor entry does not
     * include its own value, but only the values previous to it along the
     * specified axis.
     * @param reverse Whether to sum in the opposite direction. Defaults to
     *    false.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ cumsum(axis = 0, exclusive = false, reverse = false) {
        return opHandler.cumsum(this, axis, exclusive, reverse);
    }
    /**
     * Returns a `tf.Tensor` with dimensions of size 1 removed from the shape.
     * See `tf.squeeze` for more details.
     *
     * @param axis A list of numbers. If specified, only squeezes the
     *    dimensions listed. The dimension index starts at 0. It is an error to
     *    squeeze a dimension that is not 1.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ squeeze(axis) {
        this.throwIfDisposed();
        return opHandler.squeeze(this, axis);
    }
    /** Returns a copy of the tensor. See `tf.clone` for details. */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ clone() {
        this.throwIfDisposed();
        return opHandler.clone(this);
    }
    /**
     * Returns a human-readable description of the tensor. Useful for logging.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ toString(verbose = false) {
        const vals = this.dataSync();
        return (0, _tensorFormat.tensorToString)(vals, this.shape, this.dtype, verbose);
    }
    // Below is chain API that is not exposed to docs to avoid repetition. To
    // expose a method, move it above this comment and add @doc and jsdoc.
    gather(indices, axis = 0) {
        this.throwIfDisposed();
        return opHandler.gather(this, indices, axis);
    }
    norm(ord = "euclidean", axis = null, keepDims = false) {
        this.throwIfDisposed();
        return opHandler.norm(this, ord, axis, keepDims);
    }
    slice(begin, size) {
        this.throwIfDisposed();
        return opHandler.slice(this, begin, size);
    }
    reverse(axis) {
        this.throwIfDisposed();
        return opHandler.reverse(this, axis);
    }
    stack(x, axis = 0) {
        return opHandler.stack([
            this,
            x
        ], axis);
    }
    unstack(axis = 0) {
        return opHandler.unstack(this, axis);
    }
    // Reduction ops.
    all(axis = null, keepDims = false) {
        this.throwIfDisposed();
        return opHandler.all(this, axis, keepDims);
    }
    any(axis = null, keepDims = false) {
        this.throwIfDisposed();
        return opHandler.any(this, axis, keepDims);
    }
    logSumExp(axis = null, keepDims = false) {
        this.throwIfDisposed();
        return opHandler.logSumExp(this, axis, keepDims);
    }
    sum(axis = null, keepDims = false) {
        this.throwIfDisposed();
        return opHandler.sum(this, axis, keepDims);
    }
    prod(axis = null, keepDims = false) {
        this.throwIfDisposed();
        return opHandler.prod(this, axis, keepDims);
    }
    mean(axis = null, keepDims = false) {
        this.throwIfDisposed();
        return opHandler.mean(this, axis, keepDims);
    }
    min(axis = null, keepDims = false) {
        this.throwIfDisposed();
        return opHandler.min(this, axis, keepDims);
    }
    argMin(axis = null) {
        this.throwIfDisposed();
        return opHandler.argMin(this, axis);
    }
    argMax(axis = null) {
        this.throwIfDisposed();
        return opHandler.argMax(this, axis);
    }
    // Transformations
    cast(dtype) {
        this.throwIfDisposed();
        return opHandler.cast(this, dtype);
    }
    // Binary ops.
    /**
     * @deprecated strict variants of ops have been deprecated
     */ addStrict(x) {
        this.throwIfDisposed();
        return opHandler.addStrict(this, x);
    }
    atan2(x) {
        this.throwIfDisposed();
        return opHandler.atan2(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ subStrict(x) {
        this.throwIfDisposed();
        return opHandler.subStrict(this, x);
    }
    pow(exp) {
        this.throwIfDisposed();
        return opHandler.pow(this, exp);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ powStrict(exp) {
        this.throwIfDisposed();
        return opHandler.powStrict(this, exp);
    }
    mul(x) {
        this.throwIfDisposed();
        return opHandler.mul(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ mulStrict(x) {
        this.throwIfDisposed();
        return opHandler.mulStrict(this, x);
    }
    floorDiv(x) {
        this.throwIfDisposed();
        return opHandler.floorDiv(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ divStrict(x) {
        this.throwIfDisposed();
        return opHandler.divStrict(this, x);
    }
    minimum(x) {
        this.throwIfDisposed();
        return opHandler.minimum(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ minimumStrict(x) {
        this.throwIfDisposed();
        return opHandler.minimumStrict(this, x);
    }
    maximum(x) {
        this.throwIfDisposed();
        return opHandler.maximum(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ maximumStrict(x) {
        this.throwIfDisposed();
        return opHandler.maximumStrict(this, x);
    }
    mod(x) {
        this.throwIfDisposed();
        return opHandler.mod(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ modStrict(x) {
        this.throwIfDisposed();
        return opHandler.modStrict(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ squaredDifferenceStrict(x) {
        this.throwIfDisposed();
        return opHandler.squaredDifferenceStrict(this, x);
    }
    // Compare ops.
    /**
     * @deprecated strict variants of ops have been deprecated
     */ notEqualStrict(x) {
        this.throwIfDisposed();
        return opHandler.notEqualStrict(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ lessStrict(x) {
        this.throwIfDisposed();
        return opHandler.lessStrict(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ equalStrict(x) {
        this.throwIfDisposed();
        return opHandler.equalStrict(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ lessEqualStrict(x) {
        this.throwIfDisposed();
        return opHandler.lessEqualStrict(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ greaterStrict(x) {
        this.throwIfDisposed();
        return opHandler.greaterStrict(this, x);
    }
    /**
     * @deprecated strict variants of ops have been deprecated
     */ greaterEqualStrict(x) {
        this.throwIfDisposed();
        return opHandler.greaterEqualStrict(this, x);
    }
    // Compare ops.
    logicalAnd(x) {
        this.throwIfDisposed();
        return opHandler.logicalAnd(this, x);
    }
    logicalOr(x) {
        this.throwIfDisposed();
        return opHandler.logicalOr(this, x);
    }
    logicalNot() {
        this.throwIfDisposed();
        return opHandler.logicalNot(this);
    }
    logicalXor(x) {
        this.throwIfDisposed();
        return opHandler.logicalXor(this, x);
    }
    where(condition, x) {
        this.throwIfDisposed();
        return opHandler.where(condition, this, x);
    }
    // Unary ops.
    neg() {
        this.throwIfDisposed();
        return opHandler.neg(this);
    }
    ceil() {
        this.throwIfDisposed();
        return opHandler.ceil(this);
    }
    floor() {
        this.throwIfDisposed();
        return opHandler.floor(this);
    }
    sign() {
        this.throwIfDisposed();
        return opHandler.sign(this);
    }
    isNaN() {
        this.throwIfDisposed();
        return opHandler.isNaN(this);
    }
    isInf() {
        this.throwIfDisposed();
        return opHandler.isInf(this);
    }
    isFinite() {
        this.throwIfDisposed();
        return opHandler.isFinite(this);
    }
    exp() {
        this.throwIfDisposed();
        return opHandler.exp(this);
    }
    expm1() {
        this.throwIfDisposed();
        return opHandler.expm1(this);
    }
    log() {
        this.throwIfDisposed();
        return opHandler.log(this);
    }
    log1p() {
        this.throwIfDisposed();
        return opHandler.log1p(this);
    }
    sqrt() {
        this.throwIfDisposed();
        return opHandler.sqrt(this);
    }
    rsqrt() {
        this.throwIfDisposed();
        return opHandler.rsqrt(this);
    }
    square() {
        this.throwIfDisposed();
        return opHandler.square(this);
    }
    reciprocal() {
        this.throwIfDisposed();
        return opHandler.reciprocal(this);
    }
    abs() {
        this.throwIfDisposed();
        return opHandler.abs(this);
    }
    clipByValue(min, max) {
        this.throwIfDisposed();
        return opHandler.clipByValue(this, min, max);
    }
    relu() {
        this.throwIfDisposed();
        return opHandler.relu(this);
    }
    relu6() {
        this.throwIfDisposed();
        return opHandler.relu6(this);
    }
    elu() {
        this.throwIfDisposed();
        return opHandler.elu(this);
    }
    selu() {
        this.throwIfDisposed();
        return opHandler.selu(this);
    }
    leakyRelu(alpha = 0.2) {
        this.throwIfDisposed();
        return opHandler.leakyRelu(this, alpha);
    }
    prelu(alpha) {
        this.throwIfDisposed();
        return opHandler.prelu(this, alpha);
    }
    sigmoid() {
        this.throwIfDisposed();
        return opHandler.sigmoid(this);
    }
    logSigmoid() {
        this.throwIfDisposed();
        return opHandler.logSigmoid(this);
    }
    softplus() {
        this.throwIfDisposed();
        return opHandler.softplus(this);
    }
    zerosLike() {
        this.throwIfDisposed();
        return opHandler.zerosLike(this);
    }
    onesLike() {
        this.throwIfDisposed();
        return opHandler.onesLike(this);
    }
    sin() {
        this.throwIfDisposed();
        return opHandler.sin(this);
    }
    cos() {
        this.throwIfDisposed();
        return opHandler.cos(this);
    }
    tan() {
        this.throwIfDisposed();
        return opHandler.tan(this);
    }
    asin() {
        this.throwIfDisposed();
        return opHandler.asin(this);
    }
    acos() {
        this.throwIfDisposed();
        return opHandler.acos(this);
    }
    atan() {
        this.throwIfDisposed();
        return opHandler.atan(this);
    }
    sinh() {
        this.throwIfDisposed();
        return opHandler.sinh(this);
    }
    cosh() {
        this.throwIfDisposed();
        return opHandler.cosh(this);
    }
    tanh() {
        this.throwIfDisposed();
        return opHandler.tanh(this);
    }
    asinh() {
        this.throwIfDisposed();
        return opHandler.asinh(this);
    }
    acosh() {
        this.throwIfDisposed();
        return opHandler.acosh(this);
    }
    atanh() {
        this.throwIfDisposed();
        return opHandler.atanh(this);
    }
    erf() {
        this.throwIfDisposed();
        return opHandler.erf(this);
    }
    round() {
        this.throwIfDisposed();
        return opHandler.round(this);
    }
    step(alpha = 0.0) {
        this.throwIfDisposed();
        return opHandler.step(this, alpha);
    }
    softmax(dim = -1) {
        this.throwIfDisposed();
        return opHandler.softmax(this, dim);
    }
    logSoftmax(axis = -1) {
        this.throwIfDisposed();
        return opHandler.logSoftmax(this, axis);
    }
    // Image ops.
    resizeBilinear(newShape2D, alignCorners = false) {
        this.throwIfDisposed();
        return opHandler.image.resizeBilinear(this, newShape2D, alignCorners);
    }
    resizeNearestNeighbor(newShape2D, alignCorners = false) {
        this.throwIfDisposed();
        return opHandler.image.resizeNearestNeighbor(this, newShape2D, alignCorners);
    }
    // Pooling.
    avgPool(filterSize, strides, pad, dimRoundingMode) {
        this.throwIfDisposed();
        return opHandler.avgPool(this, filterSize, strides, pad, dimRoundingMode);
    }
    maxPool(filterSize, strides, pad, dimRoundingMode) {
        this.throwIfDisposed();
        return opHandler.maxPool(this, filterSize, strides, pad, dimRoundingMode);
    }
    pool(windowShape, poolingType, padding, dilationRate, strides) {
        this.throwIfDisposed();
        return opHandler.pool(this, windowShape, poolingType, padding, dilationRate, strides);
    }
    variable(trainable = true, name, dtype) {
        this.throwIfDisposed();
        return trackerFn().makeVariable(this, trainable, name, dtype);
    }
    unsortedSegmentSum(segmentIds, numSegments) {
        this.throwIfDisposed();
        return opHandler.unsortedSegmentSum(this, segmentIds, numSegments);
    }
    topk(k = 1, sorted = true) {
        this.throwIfDisposed();
        return opHandler.topk(this, k, sorted);
    }
    stridedSlice(begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {
        this.throwIfDisposed();
        return opHandler.stridedSlice(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
    }
    fft() {
        this.throwIfDisposed();
        return opHandler.spectral.fft(this);
    }
    ifft() {
        this.throwIfDisposed();
        return opHandler.spectral.ifft(this);
    }
    rfft() {
        this.throwIfDisposed();
        return opHandler.spectral.rfft(this);
    }
    irfft() {
        this.throwIfDisposed();
        return opHandler.spectral.irfft(this);
    }
}
Object.defineProperty(Tensor, Symbol.hasInstance, {
    value: (instance)=>{
        return !!instance && instance.dataId != null && instance.shape != null && instance.dtype != null;
    }
});
class Variable extends Tensor {
    constructor(initialValue, trainable, name, tensorId){
        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);
        this.trainable = trainable;
        this.name = name;
    }
    /**
     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
     * the same shape and dtype as the old `tf.Tensor`.
     *
     * @param newValue New tensor to be assigned to this variable.
     */ /** @doc {heading: 'Tensors', subheading: 'Classes'} */ assign(newValue) {
        if (newValue.dtype !== this.dtype) throw new Error(`dtype of the new value (${newValue.dtype}) and ` + `previous value (${this.dtype}) must match`);
        if (!_util.arraysEqual(newValue.shape, this.shape)) throw new Error(`shape of the new value (${newValue.shape}) and ` + `previous value (${this.shape}) must match`);
        trackerFn().disposeTensor(this);
        this.dataId = newValue.dataId;
        trackerFn().incRef(this, null);
    }
    dispose() {
        trackerFn().disposeVariable(this);
        this.isDisposedInternal = true;
    }
}
Object.defineProperty(Variable, Symbol.hasInstance, {
    value: (instance)=>{
        return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;
    }
});

},{"./tensor_format":"ly7SV","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ly7SV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tensorToString", ()=>tensorToString);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("./util");
// Maximum number of values before we decide to show ellipsis.
const FORMAT_LIMIT_NUM_VALS = 20;
// Number of first and last values to show when displaying a, b,...,y, z.
const FORMAT_NUM_FIRST_LAST_VALS = 3;
// Number of significant digits to show.
const FORMAT_NUM_SIG_DIGITS = 7;
function tensorToString(vals, shape, dtype, verbose) {
    const strides = (0, _util.computeStrides)(shape);
    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);
    const rank = shape.length;
    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);
    const lines = [
        "Tensor"
    ];
    if (verbose) {
        lines.push(`  dtype: ${dtype}`);
        lines.push(`  rank: ${rank}`);
        lines.push(`  shape: [${shape}]`);
        lines.push(`  values:`);
    }
    lines.push(valsLines.map((l)=>"    " + l).join("\n"));
    return lines.join("\n");
}
function computeMaxSizePerColumn(vals, shape, dtype, strides) {
    const n = (0, _util.sizeFromShape)(shape);
    const numCols = strides[strides.length - 1];
    const padPerCol = new Array(numCols).fill(0);
    const rank = shape.length;
    const valuesOrTuples = dtype === "complex64" ? createComplexTuples(vals) : vals;
    if (rank > 1) for(let row = 0; row < n / numCols; row++){
        const offset = row * numCols;
        for(let j = 0; j < numCols; j++)padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);
    }
    return padPerCol;
}
function valToString(val, pad, dtype) {
    let valStr;
    if (Array.isArray(val)) valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` + `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;
    else if ((0, _util.isString)(val)) valStr = `'${val}'`;
    else if (dtype === "bool") valStr = boolNumToString(val);
    else valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();
    return (0, _util.rightPad)(valStr, pad);
}
function boolNumToString(v) {
    return v === 0 ? "false" : "true";
}
function subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {
    const storagePerElement = dtype === "complex64" ? 2 : 1;
    const size = shape[0];
    const rank = shape.length;
    if (rank === 0) {
        if (dtype === "complex64") {
            const complexTuple = createComplexTuples(vals);
            return [
                valToString(complexTuple[0], 0, dtype)
            ];
        }
        if (dtype === "bool") return [
            boolNumToString(vals[0])
        ];
        return [
            vals[0].toString()
        ];
    }
    if (rank === 1) {
        if (size > FORMAT_LIMIT_NUM_VALS) {
            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;
            let firstVals = Array.from(vals.slice(0, firstValsSize));
            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));
            if (dtype === "complex64") {
                firstVals = createComplexTuples(firstVals);
                lastVals = createComplexTuples(lastVals);
            }
            return [
                "[" + firstVals.map((x, i)=>valToString(x, padPerCol[i], dtype)).join(", ") + ", ..., " + lastVals.map((x, i)=>valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype)).join(", ") + "]"
            ];
        }
        const displayVals = dtype === "complex64" ? createComplexTuples(vals) : Array.from(vals);
        return [
            "[" + displayVals.map((x, i)=>valToString(x, padPerCol[i], dtype)).join(", ") + "]"
        ];
    }
    // The array is rank 2 or more.
    const subshape = shape.slice(1);
    const substrides = strides.slice(1);
    const stride = strides[0] * storagePerElement;
    const lines = [];
    if (size > FORMAT_LIMIT_NUM_VALS) {
        for(let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++){
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false));
        }
        lines.push("...");
        for(let i1 = size - FORMAT_NUM_FIRST_LAST_VALS; i1 < size; i1++){
            const start1 = i1 * stride;
            const end1 = start1 + stride;
            lines.push(...subTensorToString(vals.slice(start1, end1), subshape, dtype, substrides, padPerCol, i1 === size - 1 /* isLast */ ));
        }
    } else for(let i2 = 0; i2 < size; i2++){
        const start2 = i2 * stride;
        const end2 = start2 + stride;
        lines.push(...subTensorToString(vals.slice(start2, end2), subshape, dtype, substrides, padPerCol, i2 === size - 1 /* isLast */ ));
    }
    const sep = rank === 2 ? "," : "";
    lines[0] = "[" + lines[0] + sep;
    for(let i3 = 1; i3 < lines.length - 1; i3++)lines[i3] = " " + lines[i3] + sep;
    let newLineSep = ",\n";
    for(let i4 = 2; i4 < rank; i4++)newLineSep += "\n";
    lines[lines.length - 1] = " " + lines[lines.length - 1] + "]" + (isLast ? "" : newLineSep);
    return lines;
}
function createComplexTuples(vals) {
    const complexTuples = [];
    for(let i = 0; i < vals.length; i += 2)complexTuples.push([
        vals[i],
        vals[i + 1]
    ]);
    return complexTuples;
}

},{"./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kUGKD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeTypesMatch", ()=>makeTypesMatch);
parcelHelpers.export(exports, "assertTypesMatch", ()=>assertTypesMatch);
parcelHelpers.export(exports, "isTensorInList", ()=>isTensorInList);
/**
 * Extracts any `Tensor`s found within the provided object.
 *
 * @param container an object that may be a `Tensor` or may directly contain
 *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
 *   is safe to pass any object here, except that `Promise`s are not
 *   supported.
 * @returns An array of `Tensors` found within the passed object. If the
 *   argument is simply a `Tensor', a list containing that `Tensor` is
 *   returned. If the object is not a `Tensor` or does not
 *   contain `Tensors`, an empty list is returned.
 */ parcelHelpers.export(exports, "getTensorsInContainer", ()=>getTensorsInContainer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensor = require("./tensor");
var _types = require("./types");
var _util = require("./util");
function makeTypesMatch(a, b) {
    if (a.dtype === b.dtype) return [
        a,
        b
    ];
    const dtype = (0, _types.upcastType)(a.dtype, b.dtype);
    return [
        a.cast(dtype),
        b.cast(dtype)
    ];
}
function assertTypesMatch(a, b) {
    (0, _util.assert)(a.dtype === b.dtype, ()=>`The dtypes of the first(${a.dtype}) and` + ` second(${b.dtype}) input must match`);
}
function isTensorInList(tensor, tensorList) {
    return tensorList.some((x)=>x.id === tensor.id);
}
function getTensorsInContainer(result) {
    const list = [];
    const seen = new Set();
    walkTensorContainer(result, list, seen);
    return list;
}
function walkTensorContainer(container, list, seen) {
    if (container == null) return;
    if (container instanceof (0, _tensor.Tensor)) {
        list.push(container);
        return;
    }
    if (!isIterable(container)) return;
    // Iteration over keys works also for arrays.
    const iterable = container;
    for(const k in iterable){
        const val = iterable[k];
        if (!seen.has(val)) {
            seen.add(val);
            walkTensorContainer(val, list, seen);
        }
    }
}
// tslint:disable-next-line:no-any
function isIterable(obj) {
    return Array.isArray(obj) || typeof obj === "object";
}

},{"./tensor":"DPGBx","./types":"aToA9","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aToA9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Rank", ()=>Rank);
parcelHelpers.export(exports, "upcastType", ()=>upcastType);
/** Returns the output type after summation. */ parcelHelpers.export(exports, "sumOutType", ()=>sumOutType);
var Rank;
(function(Rank) {
    Rank["R0"] = "R0";
    Rank["R1"] = "R1";
    Rank["R2"] = "R2";
    Rank["R3"] = "R3";
    Rank["R4"] = "R4";
    Rank["R5"] = "R5";
    Rank["R6"] = "R6";
})(Rank || (Rank = {}));
// Looks for upcasting types. Used, for example, in operations with mixed dtype
// inputs.
var UpcastInt32AndMap;
(function(UpcastInt32AndMap) {
    UpcastInt32AndMap["float32"] = "float32";
    UpcastInt32AndMap["int32"] = "int32";
    UpcastInt32AndMap["bool"] = "int32";
    UpcastInt32AndMap["complex64"] = "complex64";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
var UpcastBoolAndMap;
(function(UpcastBoolAndMap) {
    UpcastBoolAndMap["float32"] = "float32";
    UpcastBoolAndMap["int32"] = "int32";
    UpcastBoolAndMap["bool"] = "bool";
    UpcastBoolAndMap["complex64"] = "complex64";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
var UpcastFloat32AndMap;
(function(UpcastFloat32AndMap) {
    UpcastFloat32AndMap["float32"] = "float32";
    UpcastFloat32AndMap["int32"] = "float32";
    UpcastFloat32AndMap["bool"] = "float32";
    UpcastFloat32AndMap["complex64"] = "complex64";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
var UpcastComplex64AndMap;
(function(UpcastComplex64AndMap) {
    UpcastComplex64AndMap["float32"] = "complex64";
    UpcastComplex64AndMap["int32"] = "complex64";
    UpcastComplex64AndMap["bool"] = "complex64";
    UpcastComplex64AndMap["complex64"] = "complex64";
})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));
const upcastTypeMap = {
    "float32": UpcastFloat32AndMap,
    "int32": UpcastInt32AndMap,
    "bool": UpcastBoolAndMap,
    "complex64": UpcastComplex64AndMap
};
function upcastType(typeA, typeB) {
    if (typeA === "string" || typeB === "string") {
        if (typeA === "string" && typeB === "string") return "string";
        throw new Error(`Can not upcast ${typeA} with ${typeB}`);
    }
    return upcastTypeMap[typeA][typeB];
}
function sumOutType(type) {
    return upcastType(type, "int32");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"krVi8":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _deviceUtil = require("./device_util");
var _environment = require("./environment");
var process = require("process");
const ENV = (0, _environment.env)();
/**
 * This file contains environment-related flag registrations.
 */ /** Whether to enable debug mode. */ ENV.registerFlag("DEBUG", ()=>false, (debugValue)=>{
    if (debugValue) console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
/** Whether we are in a browser (as versus, say, node.js) environment. */ ENV.registerFlag("IS_BROWSER", ()=>_deviceUtil.isBrowser());
/** Whether we are in a browser (as versus, say, node.js) environment. */ ENV.registerFlag("IS_NODE", ()=>typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined");
/** Whether this browser is Chrome. */ ENV.registerFlag("IS_CHROME", ()=>typeof navigator !== "undefined" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
/**
 * True when the environment is "production" where we disable safety checks
 * to gain performance.
 */ ENV.registerFlag("PROD", ()=>false);
/**
 * Whether to do sanity checks when inferring a shape from user-provided
 * values, used when creating a new tensor.
 */ ENV.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", ()=>ENV.getBool("DEBUG"));
/** Whether deprecation warnings are enabled. */ ENV.registerFlag("DEPRECATION_WARNINGS_ENABLED", ()=>true);
/** True if running unit tests. */ ENV.registerFlag("IS_TEST", ()=>false);

},{"./device_util":"ctAag","./environment":"8tlxC","process":"d5jf4"}],"ctAag":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isMobile", ()=>isMobile);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // tslint:disable-next-line:no-any
function _isNavigatorDefined() {
    return typeof navigator !== "undefined" && navigator != null;
}
function isMobile() {
    if (_isNavigatorDefined()) {
        // tslint:disable-next-line:no-any
        const a = navigator.userAgent || navigator.vendor || window.opera;
        // tslint:disable-next-line:max-line-length
        return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || // tslint:disable-next-line:max-line-length
        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
    }
    return false;
}
function isBrowser() {
    return typeof window !== "undefined" && window.document != null || typeof WorkerGlobalScope !== "undefined";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ci5bI":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _addGrad = require("./gradients/Add_grad");
var _addNGrad = require("./gradients/AddN_grad");
var _batchMatMulGrad = require("./gradients/BatchMatMul_grad");
var _batchToSpaceNDGrad = require("./gradients/BatchToSpaceND_grad");
var _broadcastToGrad = require("./gradients/BroadcastTo_grad");
var _concatGrad = require("./gradients/Concat_grad");
var _conv2DGrad = require("./gradients/Conv2D_grad");
var _conv2DBackpropInputGrad = require("./gradients/Conv2DBackpropInput_grad");
var _conv3DGrad = require("./gradients/Conv3D_grad");
var _depthwiseConv2DNativeGrad = require("./gradients/DepthwiseConv2dNative_grad");
var _divGrad = require("./gradients/Div_grad");
var _fusedBatchNormGrad = require("./gradients/FusedBatchNorm_grad");
var _greaterEqualGrad = require("./gradients/GreaterEqual_grad");
var _identityGrad = require("./gradients/Identity_grad");
var _lrnGrad = require("./gradients/LRN_grad");
var _maxGrad = require("./gradients/Max_grad");
var _oneHotGrad = require("./gradients/OneHot_grad");
var _padV2Grad = require("./gradients/PadV2_grad");
var _spaceToBatchNDGrad = require("./gradients/SpaceToBatchND_grad");
var _splitVGrad = require("./gradients/SplitV_grad");
var _squareGrad = require("./gradients/Square_grad");
var _squaredDifferenceGrad = require("./gradients/SquaredDifference_grad");
var _subGrad = require("./gradients/Sub_grad");
var _tileGrad = require("./gradients/Tile_grad");
var _transposeGrad = require("./gradients/Transpose_grad");
var _kernelRegistry = require("./kernel_registry");
// Export all kernel configs here so that the package can auto register them
const gradConfigs = [
    (0, _addGrad.addGradConfig),
    (0, _addNGrad.addNGradConfig),
    (0, _batchMatMulGrad.batchMatMulGradConfig),
    (0, _batchToSpaceNDGrad.batchToSpaceNDGradConfig),
    (0, _broadcastToGrad.broadcastToGradConfig),
    (0, _concatGrad.concatGradConfig),
    (0, _conv2DGrad.conv2DGradConfig),
    (0, _conv2DBackpropInputGrad.conv2DBackpropInputGradConfig),
    (0, _conv3DGrad.conv3DGradConfig),
    (0, _depthwiseConv2DNativeGrad.depthwiseConv2dNativeGradConfig),
    (0, _divGrad.divGradConfig),
    (0, _fusedBatchNormGrad.fusedBatchNormGradConfig),
    (0, _greaterEqualGrad.greaterEqualGradConfig),
    (0, _identityGrad.identityGradConfig),
    (0, _lrnGrad.lrnGradConfig),
    (0, _oneHotGrad.oneHotGradConfig),
    (0, _padV2Grad.padV2GradConfig),
    (0, _splitVGrad.splitVGradConfig),
    (0, _maxGrad.maxGradConfig),
    (0, _spaceToBatchNDGrad.spaceToBatchNDGradConfig),
    (0, _squareGrad.squareGradConfig),
    (0, _squaredDifferenceGrad.squaredDifferenceGradConfig),
    (0, _tileGrad.tileGradConfig),
    (0, _transposeGrad.transposeGradConfig),
    (0, _subGrad.subGradConfig)
];
for (const gradientConfig of gradConfigs)(0, _kernelRegistry.registerGradient)(gradientConfig);

},{"./gradients/Add_grad":"6kxhI","./gradients/AddN_grad":"9tm7P","./gradients/BatchMatMul_grad":"7Fz7d","./gradients/BatchToSpaceND_grad":"cJlMR","./gradients/BroadcastTo_grad":"ljBQ5","./gradients/Concat_grad":"haV7c","./gradients/Conv2D_grad":"65S8Q","./gradients/Conv2DBackpropInput_grad":"hZbwb","./gradients/Conv3D_grad":"dCNS0","./gradients/DepthwiseConv2dNative_grad":"5t7Kn","./gradients/Div_grad":"67IRB","./gradients/FusedBatchNorm_grad":"hZ0fX","./gradients/GreaterEqual_grad":"vod0w","./gradients/Identity_grad":"chOOD","./gradients/LRN_grad":"4b0CQ","./gradients/Max_grad":"iGiUV","./gradients/OneHot_grad":"fYu6X","./gradients/PadV2_grad":"ekOlT","./gradients/SpaceToBatchND_grad":"dNlEj","./gradients/SplitV_grad":"h9N2m","./gradients/Square_grad":"g9nWN","./gradients/SquaredDifference_grad":"2DIzj","./gradients/Sub_grad":"jStlB","./gradients/Tile_grad":"dHgyH","./gradients/Transpose_grad":"jS5E0","./kernel_registry":"3ziE7"}],"6kxhI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addGradConfig", ()=>addGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _broadcastUtil = require("../ops/broadcast_util");
const addGradConfig = {
    kernelName: (0, _kernelNames.Add),
    inputsToSave: [
        "a",
        "b"
    ],
    gradFunc: (dy, saved)=>{
        const [a, b] = saved;
        const outShape = _broadcastUtil.assertAndGetBroadcastShape(a.shape, b.shape);
        const derA = ()=>{
            let res = dy;
            const reduceAxes = _broadcastUtil.getReductionAxes(a.shape, outShape);
            if (reduceAxes.length > 0) res = res.sum(reduceAxes);
            return res.reshape(a.shape);
        };
        const derB = ()=>{
            let res = dy;
            const reduceAxes = _broadcastUtil.getReductionAxes(b.shape, outShape);
            if (reduceAxes.length > 0) res = res.sum(reduceAxes);
            return res.reshape(b.shape);
        };
        return {
            a: derA,
            b: derB
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/broadcast_util":"kQqEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2CzXQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Add", ()=>Add);
parcelHelpers.export(exports, "AddN", ()=>AddN);
parcelHelpers.export(exports, "BatchMatMul", ()=>BatchMatMul);
parcelHelpers.export(exports, "BatchToSpaceND", ()=>BatchToSpaceND);
parcelHelpers.export(exports, "BroadcastTo", ()=>BroadcastTo);
parcelHelpers.export(exports, "Concat", ()=>Concat);
parcelHelpers.export(exports, "Conv2D", ()=>Conv2D);
parcelHelpers.export(exports, "Conv2DBackpropFilter", ()=>Conv2DBackpropFilter);
parcelHelpers.export(exports, "Conv2DBackpropInput", ()=>Conv2DBackpropInput);
parcelHelpers.export(exports, "Conv3D", ()=>Conv3D);
parcelHelpers.export(exports, "Conv3DBackpropFilterV2", ()=>Conv3DBackpropFilterV2);
parcelHelpers.export(exports, "Conv3DBackpropInputV2", ()=>Conv3DBackpropInputV2);
parcelHelpers.export(exports, "DepthToSpace", ()=>DepthToSpace);
parcelHelpers.export(exports, "DepthwiseConv2dNative", ()=>DepthwiseConv2dNative);
parcelHelpers.export(exports, "DepthwiseConv2dNativeBackpropFilter", ()=>DepthwiseConv2dNativeBackpropFilter);
parcelHelpers.export(exports, "DepthwiseConv2dNativeBackpropInput", ()=>DepthwiseConv2dNativeBackpropInput);
parcelHelpers.export(exports, "Diag", ()=>Diag);
parcelHelpers.export(exports, "Div", ()=>Div);
parcelHelpers.export(exports, "Equal", ()=>Equal);
parcelHelpers.export(exports, "FusedBatchNorm", ()=>FusedBatchNorm);
parcelHelpers.export(exports, "Greater", ()=>Greater);
parcelHelpers.export(exports, "GreaterEqual", ()=>GreaterEqual);
parcelHelpers.export(exports, "Identity", ()=>Identity);
parcelHelpers.export(exports, "Less", ()=>Less);
parcelHelpers.export(exports, "LessEqual", ()=>LessEqual);
parcelHelpers.export(exports, "LRN", ()=>LRN);
parcelHelpers.export(exports, "LRNBackprop", ()=>LRNBackprop);
parcelHelpers.export(exports, "MaxPoolWithArgmax", ()=>MaxPoolWithArgmax);
parcelHelpers.export(exports, "NotEqual", ()=>NotEqual);
parcelHelpers.export(exports, "NonMaxSuppressionV3", ()=>NonMaxSuppressionV3);
parcelHelpers.export(exports, "NonMaxSuppressionV5", ()=>NonMaxSuppressionV5);
parcelHelpers.export(exports, "Max", ()=>Max);
parcelHelpers.export(exports, "OneHot", ()=>OneHot);
parcelHelpers.export(exports, "PadV2", ()=>PadV2);
parcelHelpers.export(exports, "SpaceToBatchND", ()=>SpaceToBatchND);
parcelHelpers.export(exports, "SplitV", ()=>SplitV);
parcelHelpers.export(exports, "SquaredDifference", ()=>SquaredDifference);
parcelHelpers.export(exports, "Square", ()=>Square);
parcelHelpers.export(exports, "Sub", ()=>Sub);
parcelHelpers.export(exports, "Tile", ()=>Tile);
parcelHelpers.export(exports, "Transpose", ()=>Transpose);
parcelHelpers.export(exports, "FromPixels", ()=>FromPixels);
const Add = "Add";
const AddN = "AddN";
const BatchMatMul = "BatchMatMul";
const BatchToSpaceND = "BatchToSpaceND";
const BroadcastTo = "BroadcastTo";
const Concat = "Concat";
const Conv2D = "Conv2D";
const Conv2DBackpropFilter = "Conv2DBackpropFilter";
const Conv2DBackpropInput = "Conv2DBackpropInput";
const Conv3D = "Conv3D";
const Conv3DBackpropFilterV2 = "Conv3DBackpropFilterV2";
const Conv3DBackpropInputV2 = "Conv3DBackpropInputV2";
const DepthToSpace = "DepthToSpace";
const DepthwiseConv2dNative = "DepthwiseConv2dNative";
const DepthwiseConv2dNativeBackpropFilter = "DepthwiseConv2dNativeBackpropFilter";
const DepthwiseConv2dNativeBackpropInput = "DepthwiseConv2dNativeBackpropInput";
const Diag = "Diag";
const Div = "Div";
const Equal = "Equal";
const FusedBatchNorm = "FusedBatchNorm";
const Greater = "Greater";
const GreaterEqual = "GreaterEqual";
const Identity = "Identity";
const Less = "Less";
const LessEqual = "LessEqual";
const LRN = "LRN";
const LRNBackprop = "LRNBackprop";
const MaxPoolWithArgmax = "MaxPoolWithArgmax";
const NotEqual = "NotEqual";
const NonMaxSuppressionV3 = "NonMaxSuppressionV3";
const NonMaxSuppressionV5 = "NonMaxSuppressionV5";
const Max = "Max";
const OneHot = "OneHot";
const PadV2 = "PadV2";
const SpaceToBatchND = "SpaceToBatchND";
const SplitV = "SplitV";
const SquaredDifference = "SquaredDifference";
const Square = "Square";
const Sub = "Sub";
const Tile = "Tile";
const Transpose = "Transpose";
const FromPixels = "FromPixels";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQqEF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Returns the dimensions in the input shape that are broadcasted to
 * produce the provided output shape.
 *
 * The returned dimensions are 0-indexed and sorted. An example:
 * inShape = [4, 1, 3]
 * outShape = [5, 4, 3, 3]
 * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.
 */ parcelHelpers.export(exports, "getBroadcastDims", ()=>getBroadcastDims);
/**
 * Returns the axes in the output space that should be reduced to produce
 * the input space.
 */ parcelHelpers.export(exports, "getReductionAxes", ()=>getReductionAxes);
parcelHelpers.export(exports, "assertAndGetBroadcastShape", ()=>assertAndGetBroadcastShape);
function getBroadcastDims(inShape, outShape) {
    const inRank = inShape.length;
    const dims = [];
    for(let i = 0; i < inRank; i++){
        const dim = inRank - 1 - i;
        const a = inShape[dim] || 1;
        const b = outShape[outShape.length - 1 - i] || 1;
        if (b > 1 && a === 1) dims.unshift(dim);
    }
    return dims;
}
function getReductionAxes(inShape, outShape) {
    const result = [];
    for(let i = 0; i < outShape.length; i++){
        const inDim = inShape[inShape.length - i - 1];
        const outAxis = outShape.length - i - 1;
        const outDim = outShape[outAxis];
        if (inDim == null || inDim === 1 && outDim > 1) result.unshift(outAxis);
    }
    return result;
}
function assertAndGetBroadcastShape(shapeA, shapeB) {
    const result = [];
    const l = Math.max(shapeA.length, shapeB.length);
    for(let i = 0; i < l; i++){
        let a = shapeA[shapeA.length - i - 1];
        if (a == null) a = 1;
        let b = shapeB[shapeB.length - i - 1];
        if (b == null) b = 1;
        if (a === 1) result.unshift(b);
        else if (b === 1) result.unshift(a);
        else if (a !== b) {
            const errMsg = `Operands could not be broadcast together with shapes ` + `${shapeA} and ${shapeB}.`;
            throw Error(errMsg);
        } else result.unshift(a);
    }
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9tm7P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addNGradConfig", ()=>addNGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
const addNGradConfig = {
    kernelName: (0, _kernelNames.AddN),
    saveAllInputs: true,
    gradFunc: (dy, saved)=>{
        const ders = {};
        saved.forEach((_, i)=>{
            ders[i] = ()=>dy.clone();
        });
        return ders;
    }
};

},{"../kernel_names":"2CzXQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Fz7d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchMatMulGradConfig", ()=>batchMatMulGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _matMul = require("../ops/mat_mul");
const batchMatMulGradConfig = {
    kernelName: (0, _kernelNames.BatchMatMul),
    inputsToSave: [
        "a",
        "b"
    ],
    gradFunc: (dy, saved, attrs)=>{
        const [a, b] = saved;
        const { transposeA , transposeB  } = attrs;
        if (!transposeA && !transposeB) return {
            a: ()=>(0, _matMul.matMul)(dy, b, false, true),
            b: ()=>(0, _matMul.matMul)(a, dy, true, false)
        };
        else if (!transposeA && transposeB) return {
            a: ()=>(0, _matMul.matMul)(dy, b, false, false),
            b: ()=>(0, _matMul.matMul)(dy, a, true, false)
        };
        else if (transposeA && !transposeB) return {
            a: ()=>(0, _matMul.matMul)(b, dy, false, true),
            b: ()=>(0, _matMul.matMul)(a, dy, false, false)
        };
        else return {
            a: ()=>(0, _matMul.matMul)(b, dy, true, true),
            b: ()=>(0, _matMul.matMul)(dy, a, true, true)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/mat_mul":"SZp9a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"SZp9a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matMul", ()=>matMul);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _operation = require("./operation");
/**
 * Computes the dot product of two matrices, A * B. These must be matrices.
 *
 * ```js
 * const a = tf.tensor2d([1, 2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.matMul(b).print();  // or tf.matMul(a, b)
 * ```
 * @param a First matrix in dot product operation.
 * @param b Second matrix in dot product operation.
 * @param transposeA If true, `a` is transposed before multiplication.
 * @param transposeB If true, `b` is transposed before multiplication.
 */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */ function matMul_(a, b, transposeA = false, transposeB = false) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "matMul");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "matMul");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    _util.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, ()=>`Error in matMul: inputs must have the same rank of at least 2, ` + `got ranks ${$a.rank} and ${$b.rank}.`);
    const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
    const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
    const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
    const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
    const outerDimsA = $a.shape.slice(0, -2);
    const outerDimsB = $b.shape.slice(0, -2);
    const batchDimA = _util.sizeFromShape(outerDimsA);
    const batchDimB = _util.sizeFromShape(outerDimsB);
    _util.assert(_util.arraysEqual(outerDimsA, outerDimsB), ()=>`Error in matMul: outer dimensions (${outerDimsA}) and (` + `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} must match.`);
    _util.assert(innerShapeA === innerShapeB, ()=>`Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
    const outShape = $a.shape.slice(0, -2).concat([
        outerShapeA,
        outerShapeB
    ]);
    const a3D = transposeA ? (0, _arrayOps.reshape)($a, [
        batchDimA,
        innerShapeA,
        outerShapeA
    ]) : (0, _arrayOps.reshape)($a, [
        batchDimA,
        outerShapeA,
        innerShapeA
    ]);
    const b3D = transposeB ? (0, _arrayOps.reshape)($b, [
        batchDimB,
        outerShapeB,
        innerShapeB
    ]) : (0, _arrayOps.reshape)($b, [
        batchDimB,
        innerShapeB,
        outerShapeB
    ]);
    const forward = (backend, save)=>{
        save([
            a3D,
            b3D
        ]);
        return backend.batchMatMul(a3D, b3D, transposeA, transposeB);
    };
    const inputs = {
        a: a3D,
        b: b3D
    };
    const attrs = {
        transposeA,
        transposeB
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.BatchMatMul), attrs);
    return (0, _arrayOps.reshape)(res, outShape);
}
const matMul = (0, _operation.op)({
    matMul_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsyzK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inferShape", ()=>inferShape);
parcelHelpers.export(exports, "convertToTensor", ()=>convertToTensor);
parcelHelpers.export(exports, "convertToTensorArray", ()=>convertToTensorArray);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("./engine");
var _environment = require("./environment");
var _tensor = require("./tensor");
var _util = require("./util");
function inferShape(val, dtype) {
    let firstElem = val;
    if ((0, _util.isTypedArray)(val)) return dtype === "string" ? [] : [
        val.length
    ];
    if (!Array.isArray(val)) return []; // Scalar.
    const shape = [];
    while(Array.isArray(firstElem) || (0, _util.isTypedArray)(firstElem) && dtype !== "string"){
        shape.push(firstElem.length);
        firstElem = firstElem[0];
    }
    if (Array.isArray(val) && (0, _environment.env)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")) deepAssertShapeConsistency(val, shape, []);
    return shape;
}
function deepAssertShapeConsistency(val, shape, indices) {
    indices = indices || [];
    if (!Array.isArray(val) && !(0, _util.isTypedArray)(val)) {
        (0, _util.assert)(shape.length === 0, ()=>`Element arr[${indices.join("][")}] is a primitive, ` + `but should be an array/TypedArray of ${shape[0]} elements`);
        return;
    }
    (0, _util.assert)(shape.length > 0, ()=>`Element arr[${indices.join("][")}] should be a primitive, ` + `but is an array of ${val.length} elements`);
    (0, _util.assert)(val.length === shape[0], ()=>`Element arr[${indices.join("][")}] should have ${shape[0]} ` + `elements, but has ${val.length} elements`);
    const subShape = shape.slice(1);
    for(let i = 0; i < val.length; ++i)deepAssertShapeConsistency(val[i], subShape, indices.concat(i));
}
function assertDtype(expectedDtype, actualDType, argName, functionName) {
    if (expectedDtype == null) return;
    if (expectedDtype !== "numeric" && expectedDtype !== actualDType || expectedDtype === "numeric" && actualDType === "string") throw new Error(`Argument '${argName}' passed to '${functionName}' must ` + `be ${expectedDtype} tensor, but got ${actualDType} tensor`);
}
function convertToTensor(x, argName, functionName, parseAsDtype = "numeric") {
    if (x instanceof (0, _tensor.Tensor)) {
        assertDtype(parseAsDtype, x.dtype, argName, functionName);
        return x;
    }
    let inferredDtype = (0, _util.inferDtype)(x);
    // If the user expects a bool/int/float, use that info to update the
    // inferredDtype when it is not a string.
    if (inferredDtype !== "string" && [
        "bool",
        "int32",
        "float32"
    ].indexOf(parseAsDtype) >= 0) inferredDtype = parseAsDtype;
    assertDtype(parseAsDtype, inferredDtype, argName, functionName);
    if (x == null || !(0, _util.isTypedArray)(x) && !Array.isArray(x) && typeof x !== "number" && typeof x !== "boolean" && typeof x !== "string") {
        const type = x == null ? "null" : x.constructor.name;
        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` + `Tensor or TensorLike, but got '${type}'`);
    }
    const inferredShape = inferShape(x, inferredDtype);
    if (!(0, _util.isTypedArray)(x) && !Array.isArray(x)) x = [
        x
    ];
    const skipTypedArray = true;
    const values = inferredDtype !== "string" ? (0, _util.toTypedArray)(x, inferredDtype, (0, _environment.env)().getBool("DEBUG")) : (0, _util.flatten)(x, [], skipTypedArray);
    return (0, _engine.ENGINE).makeTensor(values, inferredShape, inferredDtype);
}
function convertToTensorArray(arg, argName, functionName, parseAsDtype = "numeric") {
    if (!Array.isArray(arg)) throw new Error(`Argument ${argName} passed to ${functionName} must be a ` + "`Tensor[]` or `TensorLike[]`");
    const tensors = arg;
    return tensors.map((t, i)=>convertToTensor(t, `${argName}[${i}]`, functionName), parseAsDtype);
}

},{"./engine":"1aEvR","./environment":"8tlxC","./tensor":"DPGBx","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"29MCO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.
 *
 * The values are stored in CPU as `TypedArray`. Fill the buffer using
 * `buffer.set()`, or by modifying directly `buffer.values`.
 *
 * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with
 * those values.
 *
 * ```js
 * // Create a buffer and set values at particular indices.
 * const buffer = tf.buffer([2, 2]);
 * buffer.set(3, 0, 0);
 * buffer.set(5, 1, 0);
 *
 * // Convert the buffer back to a tensor.
 * buffer.toTensor().print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The dtype of the buffer. Defaults to 'float32'.
 * @param values The values of the buffer as `TypedArray`. Defaults to
 * zeros.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ parcelHelpers.export(exports, "buffer", ()=>buffer);
parcelHelpers.export(exports, "print", ()=>print // Not wrapped in op() since no need to increase stack trace.
);
parcelHelpers.export(exports, "cast", ()=>cast);
parcelHelpers.export(exports, "cumsum", ()=>cumsum);
parcelHelpers.export(exports, "expandDims", ()=>expandDims);
parcelHelpers.export(exports, "reshape", ()=>reshape);
parcelHelpers.export(exports, "squeeze", ()=>squeeze);
parcelHelpers.export(exports, "stack", ()=>stack);
parcelHelpers.export(exports, "unstack", ()=>unstack);
parcelHelpers.export(exports, "setdiff1dAsync", ()=>setdiff1dAsync);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensor = require("../tensor");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _axisUtil = require("./axis_util");
var _concat = require("./concat");
var _operation = require("./operation");
/**
 * Reshapes a `tf.Tensor` to a given shape.
 *
 * Given an input tensor, returns a new tensor with the same values as the
 * input tensor with shape `shape`.
 *
 * If one component of shape is the special value -1, the size of that
 * dimension is computed so that the total size remains constant. In
 * particular, a shape of [-1] flattens into 1-D. At most one component of
 * shape can be -1.
 *
 * If shape is 1-D or higher, then the operation returns a tensor with shape
 * shape filled with the values of tensor. In this case, the number of
 * elements implied by shape must be the same as the number of elements in
 * tensor.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.reshape([2, 2]).print();
 * ```
 *
 * @param x The input tensor to be reshaped.
 * @param shape An array of integers defining the output tensor shape.
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function reshape_(x, shape) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reshape", null);
    shape = _util.inferFromImplicitShape(shape, $x.size);
    _util.assert($x.size === _util.sizeFromShape(shape), ()=>"new shape and old shape must have the same number of elements.");
    const grad = (dy)=>{
        return {
            x: ()=>dy.reshape($x.shape)
        };
    };
    const attrs = {
        shape
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.reshape($x, shape), {
        x: $x
    }, grad, "Reshape", attrs);
}
/**
 * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
 * x.squeeze().print();
 * ```
 *
 * @param x The input tensor to be squeezed.
 * @param axis An optional list of numbers. If specified, only
 *     squeezes the dimensions listed. The dimension index starts at 0. It
 * is an error to squeeze a dimension that is not 1.
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function squeeze_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "squeeze");
    return reshape($x, _util.squeezeShape($x.shape, axis).newShape);
}
/**
 * Casts a `tf.Tensor` to a new dtype.
 *
 * ```js
 * const x = tf.tensor1d([1.5, 2.5, 3]);
 * tf.cast(x, 'int32').print();
 * ```
 * @param x The input tensor to be casted.
 * @param dtype The dtype to cast the input tensor to.
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function cast_(x, dtype) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "cast");
    // Sanity checks.
    if (!_util.isValidDtype(dtype)) throw new Error(`Failed to cast to unknown dtype ${dtype}`);
    if (dtype === "string" && $x.dtype !== "string" || dtype !== "string" && $x.dtype === "string") throw new Error("Only strings can be casted to strings");
    const grad = (dy)=>{
        return {
            x: ()=>dy.clone()
        };
    };
    const attrs = {
        dtype
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.cast($x, dtype), {
        x: $x
    }, grad, "Cast", attrs);
}
/**
 * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.stack([a, b, c]).print();
 * ```
 *
 * @param tensors A list of tensor objects with the same shape and dtype.
 * @param axis The axis to stack along. Defaults to 0 (the first dim).
 */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */ function stack_(tensors, axis = 0) {
    const $tensors = (0, _tensorUtilEnv.convertToTensorArray)(tensors, "tensors", "stack");
    _util.assert($tensors.length >= 1, ()=>"Pass at least one tensor to tf.stack");
    if ($tensors.length === 1) return $tensors[0].expandDims(axis);
    const rank = $tensors[0].rank;
    const shape = $tensors[0].shape;
    const dtype = $tensors[0].dtype;
    _util.assert(axis <= rank, ()=>"Axis must be <= rank of the tensor");
    $tensors.forEach((t)=>{
        _util.assertShapesMatch(shape, t.shape, "All tensors passed to stack must have matching shapes");
    });
    $tensors.forEach((t)=>{
        _util.assert(dtype === t.dtype, ()=>"All tensors passed to stack must have matching dtypes");
    });
    const expandedTensors = $tensors.map((t)=>t.expandDims(axis));
    return (0, _concat.concat)(expandedTensors, axis);
}
/**
 * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * tf.unstack(a).forEach(tensor => tensor.print());
 * ```
 *
 * @param x A tensor object.
 * @param axis The axis to unstack along. Defaults to 0 (the first dim).
 */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */ function unstack_(x, axis = 0) {
    axis = axis || 0;
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "unstack");
    _util.assert(axis >= -$x.shape.length && axis < $x.shape.length, ()=>`Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);
    if (axis < 0) axis += $x.shape.length;
    const grad = (dy)=>{
        return {
            x: ()=>stack(dy, axis)
        };
    };
    const attrs = {
        axis
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.unstack($x, axis), {
        x: $x
    }, grad, "Unpack", attrs);
}
/**
 * Computes the cumulative sum of a `tf.Tensor` along `axis`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4]);
 * x.cumsum().print();
 * ```
 * ```js
 * const x = tf.tensor([[1, 2], [3, 4]]);
 * x.cumsum().print();
 * ```
 *
 * @param x The input tensor to be summed.
 * @param axis The axis along which to sum. Optional. Defaults to 0.
 * @param exclusive Whether to perform exclusive cumulative sum. Optional.
 *     Defaults to false. If set to true then the sum of each tensor entry
 *     does not include its own value, but only the values previous to it
 *     along the specified axis.
 * @param reverse Whether to sum in the opposite direction. Optional.
 *     Defaults to false.
 */ /** @doc {heading: 'Operations', subheading: 'Scan'} */ function cumsum_(x, axis = 0, exclusive = false, reverse = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "cumsum");
    axis = axis | 0;
    const permutation = (0, _axisUtil.getAxesPermutation)([
        axis
    ], $x.rank);
    let permutedX = $x;
    if (permutation != null) permutedX = $x.transpose(permutation);
    const permutedAxis = (0, _axisUtil.getInnerMostAxes)(1, $x.rank)[0];
    const grad = (dy)=>{
        return {
            permutedX: ()=>dy.cumsum(axis, exclusive, !reverse)
        };
    };
    let value = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.cumsum(permutedX, permutedAxis, exclusive, reverse), {
        permutedX
    }, grad);
    if (permutation != null) value = value.transpose(permutation);
    return value;
}
/**
 * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
 * into the tensor's shape.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const axis = 1;
 * x.expandDims(axis).print();
 * ```
 *
 * @param x The input tensor whose dimensions to be expanded.
 * @param axis The dimension index at which to insert shape of `1`. Defaults
 *     to 0 (the first dimension).
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function expandDims_(x, axis = 0) {
    const parseAs = null;
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "expandDims", parseAs);
    _util.assert(axis <= $x.rank, ()=>"Axis must be <= rank of the tensor");
    const newShape = $x.shape.slice();
    if (axis < 0) {
        // Negative value is counted from the tail of rank.
        _util.assert(-($x.rank + 1) <= axis, ()=>`Axis must be in the interval [${-($x.rank + 1)}, ${$x.rank}]`);
        axis = $x.rank + axis + 1;
    }
    newShape.splice(axis, 0, 1);
    return reshape($x, newShape);
}
/**
 * Computes the difference between two lists of numbers.
 *
 * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`
 * that represents all values that are in `x` but not in `y`. The returned
 * Tensor `out` is sorted in the same order that the numbers appear in `x`
 * (duplicates are preserved). This operation also returns a Tensor indices that
 * represents the position of each out element in `x`. In other words:
 *
 * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`
 *
 * ```js
 * const x = [1, 2, 3, 4, 5, 6];
 * const y = [1, 3, 5];
 *
 * const [out, indices] = await tf.setdiff1dAsync(x, y);
 * out.print(); // [2, 4, 6]
 * indices.print(); // [1, 3, 5]
 * ```
 *
 * @param x 1-D Tensor. Values to keep.
 * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the
 *     output.
 * @returns Promise of Tensor tuple [out, indices].
 *  out: Tensor with the same type as x.
 *  indices: A Tensor of type int32.
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ async function setdiff1dAsync_(x, y) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "setdiff1d");
    const $y = (0, _tensorUtilEnv.convertToTensor)(y, "y", "setdiff1d");
    _util.assert($x.dtype === $y.dtype, ()=>`x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);
    _util.assert($x.rank === 1, ()=>`x should be 1D tensor, but got x (${$x.shape}).`);
    _util.assert($y.rank === 1, ()=>`y should be 1D tensor, but got y (${$y.shape}).`);
    const xVals = await $x.data();
    const yVals = await $y.data();
    const ySet = new Set(yVals);
    let outputSize = 0;
    for(let i = 0; i < xVals.length; i++)if (!ySet.has(xVals[i])) outputSize++;
    const buffer = new (0, _tensor.TensorBuffer)([
        outputSize
    ], $x.dtype);
    const indices = new (0, _tensor.TensorBuffer)([
        outputSize
    ], "int32");
    for(let i1 = 0, p = 0; i1 < xVals.length; i1++)if (!ySet.has(xVals[i1])) {
        buffer.values[p] = xVals[i1];
        indices.values[p] = i1;
        p++;
    }
    return [
        buffer.toTensor(),
        indices.toTensor()
    ];
}
function buffer(shape, dtype = "float32", values) {
    dtype = dtype || "float32";
    _util.assertNonNegativeIntegerDimensions(shape);
    return new (0, _tensor.TensorBuffer)(shape, dtype, values);
}
/**
 * Prints information about the `tf.Tensor` including its data.
 *
 * ```js
 * const verbose = true;
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);
 * ```
 * @param x The tensor to be printed.
 * @param verbose Whether to print verbose information about the ` Tensor`,
 * including dtype and size.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function print(x, verbose = false) {
    console.log(x.toString(verbose));
}
const cast = (0, _operation.op)({
    cast_
});
const cumsum = (0, _operation.op)({
    cumsum_
});
const expandDims = (0, _operation.op)({
    expandDims_
});
const reshape = (0, _operation.op)({
    reshape_
});
const squeeze = (0, _operation.op)({
    squeeze_
});
const stack = (0, _operation.op)({
    stack_
});
const unstack = (0, _operation.op)({
    unstack_
});
const setdiff1dAsync = setdiff1dAsync_;

},{"../engine":"1aEvR","../tensor":"DPGBx","../tensor_util_env":"fsyzK","../util":"9v6Fb","./axis_util":"1A9rc","./concat":"jfkcZ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1A9rc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns true if the axis specifies the inner most dimensions of the
 * array.
 */ parcelHelpers.export(exports, "axesAreInnerMostDims", ()=>axesAreInnerMostDims);
parcelHelpers.export(exports, "combineLocations", ()=>combineLocations);
parcelHelpers.export(exports, "computeOutAndReduceShapes", ()=>computeOutAndReduceShapes);
parcelHelpers.export(exports, "expandShapeToKeepDim", ()=>expandShapeToKeepDim);
parcelHelpers.export(exports, "assertAxesAreInnerMostDims", ()=>assertAxesAreInnerMostDims);
/**
 * Returns the axes permutation to be used with `tf.transpose`, if such
 * permutation is necessary. Otherwise it returns null. This method is used by
 * operations that operate only on inner-most axes.
 */ parcelHelpers.export(exports, "getAxesPermutation", ()=>getAxesPermutation);
/** Returns the axes permutation that undoes the original permutation. */ parcelHelpers.export(exports, "getUndoAxesPermutation", ()=>getUndoAxesPermutation);
parcelHelpers.export(exports, "getInnerMostAxes", ()=>getInnerMostAxes);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function axesAreInnerMostDims(axes, rank) {
    for(let i = 0; i < axes.length; ++i){
        if (axes[axes.length - i - 1] !== rank - 1 - i) return false;
    }
    return true;
}
function combineLocations(outputLoc, reduceLoc, axes) {
    const rank = outputLoc.length + reduceLoc.length;
    const loc = [];
    let outIdx = 0;
    let reduceIdx = 0;
    for(let dim = 0; dim < rank; dim++)if (axes.indexOf(dim) === -1) loc.push(outputLoc[outIdx++]);
    else loc.push(reduceLoc[reduceIdx++]);
    return loc;
}
function computeOutAndReduceShapes(aShape, axes) {
    const outShape = [];
    const rank = aShape.length;
    for(let dim = 0; dim < rank; dim++)if (axes.indexOf(dim) === -1) outShape.push(aShape[dim]);
    const reduceShape = axes.map((dim)=>aShape[dim]);
    return [
        outShape,
        reduceShape
    ];
}
function expandShapeToKeepDim(shape, axes) {
    const reduceSubShape = axes.map((x)=>1);
    return combineLocations(shape, reduceSubShape, axes);
}
function assertAxesAreInnerMostDims(msg, axes, rank) {
    _util.assert(axesAreInnerMostDims(axes, rank), ()=>`${msg} supports only inner-most axes for now. ` + `Got axes ${axes} and rank-${rank} input.`);
}
function getAxesPermutation(axes, rank) {
    if (axesAreInnerMostDims(axes, rank)) return null;
    const result = [];
    for(let i = 0; i < rank; ++i)if (axes.indexOf(i) === -1) result.push(i);
    axes.forEach((axis)=>result.push(axis));
    return result;
}
function getUndoAxesPermutation(axes) {
    return axes.map((axis, i)=>[
            i,
            axis
        ]).sort((a, b)=>a[1] - b[1]).map((x)=>x[0]);
}
function getInnerMostAxes(numAxes, rank) {
    const res = [];
    for(let i = rank - numAxes; i < rank; ++i)res.push(i);
    return res;
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfkcZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat", ()=>concat);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _concatUtil = require("./concat_util");
var _operation = require("./operation");
var _tensorOps = require("./tensor_ops");
/**
 * Concatenates a list of `tf.Tensor`s along a given axis.
 *
 * The tensors ranks and types must match, and their sizes must match in all
 * dimensions except `axis`.
 *
 * Also available are stricter rank-specific methods that assert that
 * `tensors` are of the given rank:
 *   - `tf.concat1d`
 *   - `tf.concat2d`
 *   - `tf.concat3d`
 *   - `tf.concat4d`
 *
 * Except `tf.concat1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * a.concat(b).print();  // or a.concat(b)
 * ```
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.concat([a, b, c]).print();
 * ```
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [10, 20]]);
 * const b = tf.tensor2d([[3, 4], [30, 40]]);
 * const axis = 1;
 * tf.concat([a, b], axis).print();
 * ```
 * @param tensors A list of tensors to concatenate.
 * @param axis The axis to concate along. Defaults to 0 (the first dim).
 */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */ function concat_(tensors, axis = 0) {
    (0, _util.assert)(tensors.length >= 1, ()=>"Pass at least one tensor to concat");
    let $tensors = (0, _tensorUtilEnv.convertToTensorArray)(tensors, "tensors", "concat");
    if ($tensors[0].dtype === "complex64") $tensors.forEach((tensor)=>{
        if (tensor.dtype !== "complex64") throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${tensor.dtype}. `);
    });
    const $axis = (0, _util.parseAxisParam)(axis, $tensors[0].shape)[0];
    const outShape = (0, _concatUtil.computeOutShape)($tensors.map((t)=>t.shape), $axis);
    if ((0, _util.sizeFromShape)(outShape) === 0) return (0, _tensorOps.tensor)([], outShape);
    // Keep only non-empty tensors (ignore tensors with 0 in their shape).
    $tensors = $tensors.filter((t)=>t.size > 0);
    if ($tensors.length === 1) return $tensors[0];
    const shapes = $tensors.map((t)=>t.shape);
    (0, _concatUtil.assertParamsConsistent)(shapes, $axis);
    const forward = (backend, save)=>{
        const $axis = (0, _util.parseAxisParam)(axis, $tensors[0].shape)[0];
        const res = backend.concat($tensors, $axis);
        save($tensors);
        return res;
    };
    const inputs = $tensors;
    const attr = {
        axis
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Concat), attr);
}
const concat = (0, _operation.op)({
    concat_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./concat_util":"4F290","./operation":"l6IGY","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4F290":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertParamsConsistent", ()=>assertParamsConsistent);
parcelHelpers.export(exports, "computeOutShape", ()=>computeOutShape);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function assertParamsConsistent(shapes, axis) {
    const rank = shapes[0].length;
    shapes.forEach((shape, i)=>{
        _util.assert(shape.length === rank, ()=>`Error in concat${rank}D: rank of tensors[${i}] must be the same ` + `as the rank of the rest (${rank})`);
    });
    _util.assert(axis >= 0 && axis < rank, ()=>`Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);
    const firstShape = shapes[0];
    shapes.forEach((shape, i)=>{
        for(let r = 0; r < rank; r++)_util.assert(r === axis || shape[r] === firstShape[r], ()=>`Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` + `does not match the shape of the rest (${firstShape}) ` + `along the non-concatenated axis ${i}.`);
    });
}
function computeOutShape(shapes, axis) {
    const outputShape = shapes[0].slice();
    for(let i = 1; i < shapes.length; i++)outputShape[axis] += shapes[i][axis];
    return outputShape;
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l6IGY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Used for wrapping functions that perform math operations on
 * Tensors. The function will be wrapped in a named scope that cleans all
 * memory usage after the function is done.
 */ parcelHelpers.export(exports, "op", ()=>op);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
function op(f) {
    const keys = Object.keys(f);
    if (keys.length !== 1) throw new Error(`Please provide an object with a single key ` + `(operation name) mapping to a function. Got an object with ` + `${keys.length} keys.`);
    let opName = keys[0];
    const fn = f[opName];
    // Strip the underscore from the end of the function name.
    if (opName.endsWith("_")) opName = opName.substring(0, opName.length - 1);
    // tslint:disable-next-line:no-any
    const f2 = (...args)=>{
        (0, _engine.ENGINE).startScope(opName);
        try {
            const result = fn(...args);
            if (result instanceof Promise) console.error("Cannot return a Promise inside of tidy.");
            (0, _engine.ENGINE).endScope(result);
            return result;
        } catch (ex) {
            (0, _engine.ENGINE).endScope(null);
            throw ex;
        }
    };
    Object.defineProperty(f2, "name", {
        value: opName,
        configurable: true
    });
    // tslint:disable-next-line:no-any
    return f2;
}

},{"../engine":"1aEvR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1qbPi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fill", ()=>fill);
parcelHelpers.export(exports, "linspace", ()=>linspace);
parcelHelpers.export(exports, "ones", ()=>ones);
parcelHelpers.export(exports, "range", ()=>range);
parcelHelpers.export(exports, "scalar", ()=>scalar);
parcelHelpers.export(exports, "tensor", ()=>tensor);
parcelHelpers.export(exports, "tensor1d", ()=>tensor1d);
parcelHelpers.export(exports, "tensor2d", ()=>tensor2d);
parcelHelpers.export(exports, "tensor3d", ()=>tensor3d);
parcelHelpers.export(exports, "tensor4d", ()=>tensor4d);
parcelHelpers.export(exports, "tensor5d", ()=>tensor5d);
parcelHelpers.export(exports, "tensor6d", ()=>tensor6d);
parcelHelpers.export(exports, "variable", ()=>variable);
parcelHelpers.export(exports, "zeros", ()=>zeros);
parcelHelpers.export(exports, "onesLike", ()=>onesLike);
parcelHelpers.export(exports, "zerosLike", ()=>zerosLike);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _environment = require("../environment");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _complexOps = require("./complex_ops");
var _operation = require("./operation");
/**
 * Creates a `tf.Tensor` with the provided values, shape and dtype.
 *
 * ```js
 * // Pass an array of values to create a vector.
 * tf.tensor([1, 2, 3, 4]).print();
 * ```
 *
 * ```js
 * // Pass a nested array of values to make a matrix or a higher
 * // dimensional tensor.
 * tf.tensor([[1, 2], [3, 4]]).print();
 * ```
 *
 * ```js
 * // Pass a flat array and specify a shape yourself.
 * tf.tensor([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`. If the values are strings,
 *     they will be encoded as utf-8 and kept as `Uint8Array[]`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function tensor(values, shape, dtype) {
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    return makeTensor(values, shape, inferredShape, dtype);
}
/** This is shared code across all tensor creation methods. */ function makeTensor(values, shape, inferredShape, dtype) {
    if (dtype == null) dtype = (0, _util.inferDtype)(values);
    if (dtype === "complex64") throw new Error(`Cannot construct a complex64 tensor directly. ` + `Please use tf.complex(real, imag).`);
    if (!(0, _util.isTypedArray)(values) && !Array.isArray(values) && typeof values !== "number" && typeof values !== "boolean" && typeof values !== "string") throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
    if (shape != null) {
        (0, _util.assertNonNegativeIntegerDimensions)(shape);
        const providedSize = (0, _util.sizeFromShape)(shape);
        const inferredSize = (0, _util.sizeFromShape)(inferredShape);
        (0, _util.assert)(providedSize === inferredSize, ()=>`Based on the provided shape, [${shape}], the tensor should have ` + `${providedSize} values but has ${inferredSize}`);
        for(let i = 0; i < inferredShape.length; ++i){
            const inferred = inferredShape[i];
            const flatDimsDontMatch = i === inferredShape.length - 1 ? inferred !== (0, _util.sizeFromShape)(shape.slice(i)) : true;
            (0, _util.assert)(inferredShape[i] === shape[i] || !flatDimsDontMatch, ()=>`Error creating a new Tensor. Inferred shape ` + `(${inferredShape}) does not match the provided ` + `shape (${shape}). `);
        }
    }
    if (!(0, _util.isTypedArray)(values) && !Array.isArray(values)) values = [
        values
    ];
    shape = shape || inferredShape;
    values = dtype !== "string" ? (0, _util.toTypedArray)(values, dtype, (0, _environment.env)().getBool("DEBUG")) : (0, _util.flatten)(values, [], true);
    return (0, _engine.ENGINE).makeTensor(values, shape, dtype);
}
/**
 * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.scalar` as it makes the code more readable.
 *
 * ```js
 * tf.scalar(3.14).print();
 * ```
 *
 * @param value The value of the scalar.
 * @param dtype The data type.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function scalar(value, dtype) {
    if (((0, _util.isTypedArray)(value) && dtype !== "string" || Array.isArray(value)) && dtype !== "complex64") throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
    if (dtype === "string" && (0, _util.isTypedArray)(value) && !(value instanceof Uint8Array)) throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
    const shape = [];
    const inferredShape = [];
    return makeTensor(value, shape, inferredShape, dtype);
}
/**
 * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor1d` as it makes the code more readable.
 *
 * ```js
 * tf.tensor1d([1, 2, 3]).print();
 * ```
 *
 * @param values The values of the tensor. Can be array of numbers,
 *     or a `TypedArray`.
 * @param dtype The data type.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function tensor1d(values, dtype) {
    (0, _util.assertNonNull)(values);
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 1) throw new Error("tensor1d() requires values to be a flat/TypedArray");
    const shape = null;
    return makeTensor(values, shape, inferredShape, dtype);
}
/**
 * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor2d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor2d([[1, 2], [3, 4]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided, it is inferred from
 *     `values`.
 * @param dtype The data type.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function tensor2d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 2) throw new Error("tensor2d() requires shape to have two numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 2 && inferredShape.length !== 1) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
    return makeTensor(values, shape, inferredShape, dtype);
}
/**
 * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor3d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided,  it is inferred from
 *     `values`.
 * @param dtype The data type.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function tensor3d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 3) throw new Error("tensor3d() requires shape to have three numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 3 && inferredShape.length !== 1) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
    return makeTensor(values, shape, inferredShape, dtype);
}
/**
 * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor4d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function tensor4d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 4) throw new Error("tensor4d() requires shape to have four numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 4 && inferredShape.length !== 1) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
    return makeTensor(values, shape, inferredShape, dtype);
}
/**
 * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor5d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor5d([[[[[1], [2]], [[3], [4]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function tensor5d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 5) throw new Error("tensor5d() requires shape to have five numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 5 && inferredShape.length !== 1) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
    return makeTensor(values, shape, inferredShape, dtype);
}
/**
 * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor6d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function tensor6d(values, shape, dtype) {
    (0, _util.assertNonNull)(values);
    if (shape != null && shape.length !== 6) throw new Error("tensor6d() requires shape to have six numbers");
    const inferredShape = (0, _tensorUtilEnv.inferShape)(values, dtype);
    if (inferredShape.length !== 6 && inferredShape.length !== 1) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
    if (inferredShape.length === 1 && shape == null) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
    shape = shape || inferredShape;
    return makeTensor(values, shape, inferredShape, dtype);
}
/**
 * Creates a new variable with the provided initial value.
 * ```js
 * const x = tf.variable(tf.tensor([1, 2, 3]));
 * x.assign(tf.tensor([4, 5, 6]));
 *
 * x.print();
 * ```
 *
 * @param initialValue Initial value for the tensor.
 * @param trainable If true, optimizers are allowed to update it.
 * @param name Name of the variable. Defaults to a unique id.
 * @param dtype If set, initialValue will be converted to the given type.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function variable(initialValue, trainable = true, name, dtype) {
    return (0, _engine.ENGINE).makeVariable(initialValue, trainable, name, dtype);
}
/**
 * Creates a `tf.Tensor` with all elements set to 1.
 *
 * ```js
 * tf.ones([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 *     'float'.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function ones(shape, dtype = "float32") {
    if (dtype === "complex64") {
        const real = ones(shape, "float32");
        const imag = zeros(shape, "float32");
        return (0, _complexOps.complex)(real, imag);
    }
    const values = (0, _util.makeOnesTypedArray)((0, _util.sizeFromShape)(shape), dtype);
    return (0, _engine.ENGINE).makeTensor(values, shape, dtype);
}
/**
 * Creates a `tf.Tensor` with all elements set to 0.
 *
 * ```js
 * tf.zeros([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Can
 *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function zeros(shape, dtype = "float32") {
    if (dtype === "complex64") {
        const real = zeros(shape, "float32");
        const imag = zeros(shape, "float32");
        return (0, _complexOps.complex)(real, imag);
    }
    const values = (0, _util.makeZerosTypedArray)((0, _util.sizeFromShape)(shape), dtype);
    return (0, _engine.ENGINE).makeTensor(values, shape, dtype);
}
/**
 * Creates a `tf.Tensor` filled with a scalar value.
 *
 * ```js
 * tf.fill([2, 2], 4).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param value The scalar value to fill the tensor with.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 * 'float'.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function fill(shape, value, dtype) {
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.fill(shape, value, dtype), {});
}
/**
 * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.onesLike(x).print();
 * ```
 * @param x A tensor.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function onesLike_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "onesLike");
    if ($x.dtype === "complex64") {
        const r = onesLike((0, _complexOps.real)($x));
        const i = zerosLike((0, _complexOps.imag)($x));
        return (0, _complexOps.complex)(r, i);
    }
    const der = (dy, saved)=>({
            x: ()=>zerosLike(dy)
        });
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.onesLike($x), {
        x: $x
    }, der, "OnesLike");
}
/**
 * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.zerosLike(x).print();
 * ```
 *
 * @param x The tensor of required shape.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function zerosLike_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "zerosLike");
    const der = (dy, saved)=>({
            x: ()=>zerosLike(dy)
        });
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.zerosLike($x), {
        x: $x
    }, der, "ZerosLike");
}
/**
 * Return an evenly spaced sequence of numbers over the given interval.
 *
 * ```js
 * tf.linspace(0, 9, 10).print();
 * ```
 * @param start The start value of the sequence.
 * @param stop The end value of the sequence.
 * @param num The number of values to generate.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function linspace(start, stop, num) {
    if (num <= 0) throw new Error("The number of values should be positive.");
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.linspace(start, stop, num), {});
}
/**
 * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.
 *
 * The tensor is a is half-open interval meaning it includes start, but
 * excludes stop. Decrementing ranges and negative step values are also
 * supported.
 *
 * ```js
 * tf.range(0, 9, 2).print();
 * ```
 *
 * @param start An integer start value
 * @param stop An integer stop value
 * @param step An integer increment (will default to 1 or -1)
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function range(start, stop, step = 1, dtype = "float32") {
    if (step === 0) throw new Error("Cannot have a step of zero");
    const sameStartStop = start === stop;
    const increasingRangeNegativeStep = start < stop && step < 0;
    const decreasingRangePositiveStep = stop < start && step > 1;
    if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) return zeros([
        0
    ], dtype);
    const numElements = Math.abs(Math.ceil((stop - start) / step));
    const values = (0, _util.makeZerosTypedArray)(numElements, dtype);
    if (stop < start && step === 1) // Auto adjust the step's sign if it hasn't been set
    // (or was set to 1)
    step = -1;
    values[0] = start;
    for(let i = 1; i < values.length; i++)values[i] = values[i - 1] + step;
    return tensor1d(values, dtype);
}
const onesLike = (0, _operation.op)({
    onesLike_
});
const zerosLike = (0, _operation.op)({
    zerosLike_
});

},{"../engine":"1aEvR","../environment":"8tlxC","../tensor_util_env":"fsyzK","../util":"9v6Fb","./complex_ops":"2VHfg","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2VHfg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "complex", ()=>complex);
parcelHelpers.export(exports, "real", ()=>real);
parcelHelpers.export(exports, "imag", ()=>imag);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Converts two real numbers to a complex number.
 *
 * Given a tensor `real` representing the real part of a complex number, and a
 * tensor `imag` representing the imaginary part of a complex number, this
 * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],
 * where r represents the real part and i represents the imag part.
 *
 * The input tensors real and imag must have the same shape.
 *
 * ```js
 * const real = tf.tensor1d([2.25, 3.25]);
 * const imag = tf.tensor1d([4.75, 5.75]);
 * const complex = tf.complex(real, imag);
 *
 * complex.print();
 * ```
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function complex_(real, imag) {
    const $real = (0, _tensorUtilEnv.convertToTensor)(real, "real", "complex");
    const $imag = (0, _tensorUtilEnv.convertToTensor)(imag, "imag", "complex");
    _util.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` + `must match in call to tf.complex().`);
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.complex($real, $imag), {
        $real,
        $imag
    });
}
/**
 * Returns the real part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the real part of each element in input considered as a complex number.
 *
 * If the input is real, it simply makes a clone.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.real(x).print();
 * ```
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function real_(input) {
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "real");
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.real($input), {
        $input
    });
}
/**
 * Returns the imaginary part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the imaginary part of each element in input considered as a complex number.
 * If input is real, a tensor of all zeros is returned.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.imag(x).print();
 * ```
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function imag_(input) {
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "imag");
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.imag($input), {
        $input
    });
}
const complex = (0, _operation.op)({
    complex_
});
const real = (0, _operation.op)({
    real_
});
const imag = (0, _operation.op)({
    imag_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cJlMR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchToSpaceNDGradConfig", ()=>batchToSpaceNDGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _spaceToBatchNd = require("../ops/space_to_batch_nd");
const batchToSpaceNDGradConfig = {
    kernelName: (0, _kernelNames.BatchToSpaceND),
    gradFunc: (dy, saved, attrs)=>{
        const { blockShape , crops  } = attrs;
        return {
            x: ()=>(0, _spaceToBatchNd.spaceToBatchND)(dy, blockShape, crops)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/space_to_batch_nd":"h2QsM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2QsM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spaceToBatchND", ()=>spaceToBatchND);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * This operation divides "spatial" dimensions `[1, ..., M]` of the input into
 * a grid of blocks of shape `blockShape`, and interleaves these blocks with
 * the "batch" dimension (0) such that in the output, the spatial
 * dimensions `[1, ..., M]` correspond to the position within the grid,
 * and the batch dimension combines both the position within a spatial block
 * and the original batch position. Prior to division into blocks,
 * the spatial dimensions of the input are optionally zero padded
 * according to `paddings`. See below for a precise description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);
 * const blockShape = [2, 2];
 * const paddings = [[0, 0], [0, 0]];
 *
 * x.spaceToBatchND(blockShape, paddings).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=
 *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad
 * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It
 * is required that
 * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input
 * according to `paddings` to produce `padded` of shape paddedShape.
 *
 * 2. Reshape `padded` to `reshapedPadded` of shape:
 * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`
 *
 * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`
 * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the
 * batch dimension, producing an output tensor of shape:
 * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function spaceToBatchND_(x, blockShape, paddings) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "spaceToBatchND");
    _util.assert($x.rank >= 1 + blockShape.length, ()=>`input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);
    _util.assert(paddings.length === blockShape.length, ()=>`paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);
    _util.assert($x.shape.reduce((a, b, i)=>{
        if (i > 0 && i <= blockShape.length) return a && (b + paddings[i - 1][0] + paddings[i - 1][1]) % blockShape[i - 1] === 0;
        return a;
    }, true), ()=>`input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);
    const forward = (backend)=>backend.spaceToBatchND($x, blockShape, paddings);
    const inputs = {
        x: $x
    };
    const attrs = {
        blockShape,
        paddings
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.SpaceToBatchND), attrs);
}
const spaceToBatchND = (0, _operation.op)({
    spaceToBatchND_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ljBQ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "broadcastToGradConfig", ()=>broadcastToGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _reductionOps = require("../ops/reduction_ops");
const broadcastToGradConfig = {
    kernelName: (0, _kernelNames.BroadcastTo),
    gradFunc: (dy, saved, attrs)=>{
        const broadCastToAttrs = attrs;
        const inputShape = broadCastToAttrs.inputShape;
        const outputShape = broadCastToAttrs.shape;
        const reps = Array.from(outputShape);
        for(let i = inputShape.length - 1; i >= 0; i--){
            if (inputShape[i] === outputShape[i]) reps[i] = 1;
            else if (inputShape[i] !== 1) throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);
        }
        const axes = [];
        for(let i1 = 0; i1 < reps.length; i1++)if (reps[i1] > 1) axes.push(i1);
        return {
            x: ()=>(0, _reductionOps.sum)(dy, axes, true)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/reduction_ops":"hwfGu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hwfGu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "all", ()=>all);
parcelHelpers.export(exports, "any", ()=>any);
parcelHelpers.export(exports, "argMax", ()=>argMax);
parcelHelpers.export(exports, "argMin", ()=>argMin);
parcelHelpers.export(exports, "logSumExp", ()=>logSumExp);
parcelHelpers.export(exports, "mean", ()=>mean);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "moments", ()=>moments);
parcelHelpers.export(exports, "sum", ()=>sum);
parcelHelpers.export(exports, "prod", ()=>prod);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _gradients = require("../gradients");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _axisUtil = require("./axis_util");
var _operation = require("./operation");
var _reductionOpsUtil = require("./reduction_ops_util");
var _tensorOps = require("./tensor_ops");
/**
 * Computes the log(sum(exp(elements across the reduction dimensions)).
 *
 * Reduces the input along the dimensions given in `axis`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.logSumExp().print();  // or tf.logSumExp(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)
 * ```
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. If null (the default),
 *     reduces all dimensions.
 * @param keepDims If true, retains reduced dimensions with length
 *     of 1. Defaults to false.
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function logSumExp_(x, axis = null, keepDims = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "logSumExp");
    const axes = _util.parseAxisParam(axis, $x.shape);
    const xMax = $x.max(axes, true);
    const a = $x.sub(xMax);
    const b = a.exp();
    const c = b.sum(axes);
    const d = c.log();
    const res = xMax.reshape(d.shape).add(d);
    if (keepDims) {
        const newShape = _axisUtil.expandShapeToKeepDim(res.shape, axes);
        return res.reshape(newShape);
    }
    return res;
}
/**
 * Computes the sum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If axes has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.sum().print();  // or tf.sum(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.sum(axis).print();  // or tf.sum(x, axis)
 * ```
 *
 * @param x The input tensor to compute the sum over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function sum_(x, axis = null, keepDims = false) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sum");
    if ($x.dtype === "bool") $x = $x.toInt();
    const axes = _util.parseAxisParam(axis, $x.shape);
    // Use a custom gradient to bypass 2 gradient backprops since sum is used
    // extremely often.
    const customOp = (0, _gradients.customGrad)((x)=>{
        const permutation = _axisUtil.getAxesPermutation(axes, x.rank);
        let reductionAxes = axes;
        let permutedX = x;
        if (permutation != null) {
            permutedX = x.transpose(permutation);
            reductionAxes = _axisUtil.getInnerMostAxes(reductionAxes.length, x.rank);
        }
        const gradFunc = (dy)=>{
            const expandedDyShape = x.shape.slice();
            axes.forEach((axis)=>{
                expandedDyShape[axis] = 1;
            });
            const expandedDy = dy.reshape(expandedDyShape);
            const derX = expandedDy.mul((0, _tensorOps.ones)(x.shape, "float32"));
            return derX;
        };
        const gradInputs = (dy)=>{
            return {
                x: ()=>gradFunc(dy)
            };
        };
        const attrs = {
            axes: reductionAxes
        };
        let value = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.sum(permutedX, reductionAxes), {
            x: permutedX
        }, gradInputs, "Sum", attrs);
        if (keepDims) {
            const newShape = _axisUtil.expandShapeToKeepDim(value.shape, axes);
            value = value.reshape(newShape);
        }
        return {
            value,
            gradFunc
        };
    });
    return customOp($x);
}
/**
 * Computes the product of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.prod().print();  // or tf.prod(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.prod(axis).print();  // or tf.prod(x, axis)
 * ```
 *
 * @param x The input tensor to compute the product over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function prod_(x, axis = null, keepDims = false) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "prod");
    if ($x.dtype === "bool") $x = $x.toInt();
    const axes = _util.parseAxisParam(axis, $x.shape);
    const permutation = _axisUtil.getAxesPermutation(axes, $x.rank);
    let reductionAxes = axes;
    let permutedX = $x;
    if (permutation != null) {
        permutedX = $x.transpose(permutation);
        reductionAxes = _axisUtil.getInnerMostAxes(reductionAxes.length, $x.rank);
    }
    let value = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.prod(permutedX, reductionAxes), {
        permutedX
    });
    if (keepDims) {
        const newShape = _axisUtil.expandShapeToKeepDim(value.shape, axes);
        value = value.reshape(newShape);
    }
    return value;
}
/**
 * Computes the mean of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is
 * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with
 * a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.mean().print();  // or tf.mean(a)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.mean(axis).print();  // or tf.mean(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function mean_(x, axis = null, keepDims = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "mean");
    const axes = _util.parseAxisParam(axis, $x.shape);
    const shapes = _axisUtil.computeOutAndReduceShapes($x.shape, axes);
    const reduceShape = shapes[1];
    const reduceSize = _util.sizeFromShape(reduceShape);
    // Use a custom gradient to bypass 2 gradient backprops since mean is used
    // extremely often.
    const customOp = (0, _gradients.customGrad)((x)=>{
        const reduceSizeScalar = (0, _tensorOps.scalar)(reduceSize);
        // Cast if needed.
        const xReduce = reduceSizeScalar.dtype === x.dtype ? x : x.cast(reduceSizeScalar.dtype);
        const res = xReduce.div(reduceSizeScalar);
        const value = res.sum(axis, keepDims);
        const gradFunc = (dy)=>{
            const expandedDyShape = x.shape.slice();
            axes.forEach((axis)=>{
                expandedDyShape[axis] = 1;
            });
            const expandedDy = dy.reshape(expandedDyShape);
            const derX = expandedDy.mul((0, _tensorOps.ones)(x.shape, "float32")).div(reduceSize);
            return derX;
        };
        return {
            value,
            gradFunc
        };
    });
    return customOp($x);
}
/**
 * Computes the minimum value from the input.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axes`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axes` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.min().print();  // or tf.min(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.min(axis).print();  // or tf.min(x, axis)
 * ```
 *
 * @param x The input Tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function min_(x, axis = null, keepDims = false) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "min");
    const xOrig = $x;
    const origAxes = _util.parseAxisParam(axis, $x.shape);
    let axes = origAxes;
    const permutedAxes = _axisUtil.getAxesPermutation(axes, $x.rank);
    if (permutedAxes != null) {
        $x = $x.transpose(permutedAxes);
        axes = _axisUtil.getInnerMostAxes(axes.length, $x.rank);
    }
    const grad = (dy, saved)=>(0, _reductionOpsUtil.gradForMinAndMax)(dy, saved[1], saved[0], origAxes, permutedAxes);
    const inputsToSave = [
        $x
    ];
    const outputsToSave = [
        true
    ];
    let res = (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.min($x, axes);
        save([
            xOrig,
            y
        ]);
        return y;
    }, {
        x: $x
    }, grad, "Min", {
        axes
    }, inputsToSave, outputsToSave);
    if (keepDims) {
        const newShape = _axisUtil.expandShapeToKeepDim(res.shape, origAxes);
        res = res.reshape(newShape);
    }
    return res;
}
/**
 * Returns the indices of the minimum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMin().print();  // or tf.argMin(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMin(axis).print();  // or tf.argMin(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function argMin_(x, axis = 0) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "argMin");
    if (axis == null) axis = 0;
    let axes = _util.parseAxisParam(axis, $x.shape);
    const permutedAxes = _axisUtil.getAxesPermutation(axes, $x.rank);
    if (permutedAxes != null) {
        $x = $x.transpose(permutedAxes);
        axes = _axisUtil.getInnerMostAxes(axes.length, $x.rank);
    }
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>(0, _tensorOps.zerosLike)($x)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.argMin($x, axes[0]);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Returns the indices of the maximum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMax().print();  // or tf.argMax(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMax(axis).print();  // or tf.argMax(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function argMax_(x, axis = 0) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "argMax");
    if (axis == null) axis = 0;
    let axes = _util.parseAxisParam(axis, $x.shape);
    const permutedAxes = _axisUtil.getAxesPermutation(axes, $x.rank);
    if (permutedAxes != null) {
        $x = $x.transpose(permutedAxes);
        axes = _axisUtil.getInnerMostAxes(axes.length, $x.rank);
    }
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            x: ()=>(0, _tensorOps.zerosLike)($x)
        };
    };
    const attrs = {
        axis: axes[0]
    };
    const inputsToSave = [
        $x
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.argMax($x, axes[0]);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "ArgMax", attrs, inputsToSave);
}
/**
 * Computes the logical and of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.all().print();  // or tf.all(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.all(axis).print();  // or tf.all(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function all_(x, axis = null, keepDims = false) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "all", "bool");
    const origAxes = _util.parseAxisParam(axis, $x.shape);
    let axes = origAxes;
    const permutedAxes = _axisUtil.getAxesPermutation(axes, $x.rank);
    if (permutedAxes != null) {
        $x = $x.transpose(permutedAxes);
        axes = _axisUtil.getInnerMostAxes(axes.length, $x.rank);
    }
    const res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.all($x, axes), {
        $x
    });
    if (keepDims) {
        const newShape = _axisUtil.expandShapeToKeepDim(res.shape, origAxes);
        return res.reshape(newShape);
    }
    return res;
}
/**
 * Computes the logical or of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.any().print();  // or tf.any(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.any(axis).print();  // or tf.any(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function any_(x, axis = null, keepDims = false) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "any", "bool");
    const origAxes = _util.parseAxisParam(axis, $x.shape);
    let axes = origAxes;
    const permutedAxes = _axisUtil.getAxesPermutation(axes, $x.rank);
    if (permutedAxes != null) {
        $x = $x.transpose(permutedAxes);
        axes = _axisUtil.getInnerMostAxes(axes.length, $x.rank);
    }
    const res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.any($x, axes), {
        $x
    });
    if (keepDims) {
        const newShape = _axisUtil.expandShapeToKeepDim(res.shape, origAxes);
        return res.reshape(newShape);
    }
    return res;
}
/**
 * Calculates the mean and variance of `x`. The mean and variance are
 * calculated by aggregating the contents of `x` across `axes`. If `x` is
 * 1-D and `axes = [0]` this is just the mean and variance of a vector.
 *
 * @param x The input tensor.
 * @param axis The dimension(s) along with to compute mean and
 *     variance. By default it reduces all dimensions.
 * @param keepDims If true, the moments have the same dimensionality as the
 *     input.
 * @return An object with two keys: `mean` and `variance`.
 */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */ function moments_(x, axis = null, keepDims = false) {
    x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "moments");
    const axes = _util.parseAxisParam(axis, x.shape);
    const mean = x.mean(axes, keepDims);
    let keepDimsShape = mean.shape;
    if (!keepDims) keepDimsShape = _axisUtil.expandShapeToKeepDim(mean.shape, axes);
    const devSquared = x.toFloat().sub(mean.reshape(keepDimsShape)).square();
    const variance = devSquared.mean(axes, keepDims);
    return {
        mean,
        variance
    };
}
const all = (0, _operation.op)({
    all_
});
const any = (0, _operation.op)({
    any_
});
const argMax = (0, _operation.op)({
    argMax_
});
const argMin = (0, _operation.op)({
    argMin_
});
const logSumExp = (0, _operation.op)({
    logSumExp_
});
const mean = (0, _operation.op)({
    mean_
});
const min = (0, _operation.op)({
    min_
});
const moments = (0, _operation.op)({
    moments_
});
const sum = (0, _operation.op)({
    sum_
});
const prod = (0, _operation.op)({
    prod_
});

},{"../engine":"1aEvR","../gradients":"4PSmY","../tensor_util_env":"fsyzK","../util":"9v6Fb","./axis_util":"1A9rc","./operation":"l6IGY","./reduction_ops_util":"eimRx","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4PSmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "customGrad", ()=>customGrad);
parcelHelpers.export(exports, "variableGrads", ()=>variableGrads);
parcelHelpers.export(exports, "valueAndGrad", ()=>valueAndGrad);
parcelHelpers.export(exports, "valueAndGrads", ()=>valueAndGrads);
parcelHelpers.export(exports, "grad", ()=>grad);
parcelHelpers.export(exports, "grads", ()=>grads);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("./engine");
var _tensor = require("./tensor");
var _tensorUtilEnv = require("./tensor_util_env");
var _util = require("./util");
/**
 * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the
 * gradient of `f(x)` with respect to `x`.
 *
 * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to
 * `x` is computed instead. `f(x)` must take a single tensor `x` and return a
 * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.grad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * g(x).print();
 * ```
 *
 * ```js
 * // f(x) = x ^ 3
 * const f = x => x.pow(tf.scalar(3, 'int32'));
 * // f'(x) = 3x ^ 2
 * const g = tf.grad(f);
 * // f''(x) = 6x
 * const gg = tf.grad(g);
 *
 * const x = tf.tensor1d([2, 3]);
 * gg(x).print();
 * ```
 *
 * @param f The function f(x), to compute gradient for.
 */ /** @doc {heading: 'Training', subheading: 'Gradients'} */ function grad(f) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in grad(f) must be a function");
    return (x, dy)=>{
        // x can be of any dtype, thus null as the last argument.
        const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "tf.grad", null);
        const $dy = dy != null ? (0, _tensorUtilEnv.convertToTensor)(dy, "dy", "tf.grad") : null;
        return (0, _engine.ENGINE).tidy(()=>{
            const { value , grads  } = (0, _engine.ENGINE).gradients(()=>f($x), [
                $x
            ], $dy);
            if ($dy != null) _util.assertShapesMatch(value.shape, $dy.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)");
            checkGrads(grads);
            return grads[0];
        });
    };
}
/**
 * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,
 * which gives an array of gradients of `f()` with respect to each input
 * [`x1`,`x2`,...].
 *
 * If `dy` is passed when calling `g()`, the gradient of
 * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.
 * The provided `f` must take one or more tensors and return a single tensor
 * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df / da = b, df / db = a
 * const g = tf.grads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const [da, db] = g([a, b]);
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @param f The function `f(x1, x2,...)` to compute gradients for.
 */ /** @doc {heading: 'Training', subheading: 'Gradients'} */ function grads(f) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in grads(f) must be a function");
    return (args, dy)=>{
        _util.assert(Array.isArray(args), ()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
        // args can be of any dtype, thus null as the last argument.
        const $args = (0, _tensorUtilEnv.convertToTensorArray)(args, "args", "tf.grads", null);
        const $dy = dy != null ? (0, _tensorUtilEnv.convertToTensor)(dy, "dy", "tf.grads") : null;
        return (0, _engine.ENGINE).tidy(()=>{
            const { value , grads  } = (0, _engine.ENGINE).gradients(()=>f(...$args), $args, $dy);
            if ($dy != null) _util.assertShapesMatch(value.shape, $dy.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])");
            checkGrads(grads);
            return grads;
        });
    };
}
/**
 * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.valueAndGrad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * const {value, grad} = g(x);
 *
 * console.log('value');
 * value.print();
 * console.log('grad');
 * grad.print();
 * ```
 */ /** @doc {heading: 'Training', subheading: 'Gradients'} */ function valueAndGrad(f) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in valueAndGrad(f) must be a function");
    return (x, dy)=>{
        _util.assert(x instanceof (0, _tensor.Tensor), ()=>"The x passed in valueAndGrad(f)(x) must be a tensor");
        _util.assert(dy == null || dy instanceof (0, _tensor.Tensor), ()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
        const { grads , value  } = (0, _engine.ENGINE).gradients(()=>f(x), [
            x
        ], dy);
        checkGrads(grads);
        return {
            grad: grads[0],
            value
        };
    };
}
/**
 * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df/da = b, df/db = a
 * const g = tf.valueAndGrads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const {value, grads} = g([a, b]);
 *
 * const [da, db] = grads;
 *
 * console.log('value');
 * value.print();
 *
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 */ /** @doc {heading: 'Training', subheading: 'Gradients'} */ function valueAndGrads(f) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in valueAndGrads(f) must be a function");
    return (args, dy)=>{
        _util.assert(Array.isArray(args) && args.every((arg)=>arg instanceof (0, _tensor.Tensor)), ()=>"The args passed in valueAndGrads(f)(args) must be array of tensors");
        _util.assert(dy == null || dy instanceof (0, _tensor.Tensor), ()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
        const res = (0, _engine.ENGINE).gradients(()=>f(...args), args, dy);
        if (dy != null) _util.assertShapesMatch(res.value.shape, dy.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])");
        checkGrads(res.grads);
        return res;
    };
}
/**
 * Computes and returns the gradient of f(x) with respect to the list of
 * trainable variables provided by `varList`. If no list is provided, it
 * defaults to all trainable variables.
 *
 * ```js
 * const a = tf.variable(tf.tensor1d([3, 4]));
 * const b = tf.variable(tf.tensor1d([5, 6]));
 * const x = tf.tensor1d([1, 2]);
 *
 * // f(a, b) = a * x ^ 2 + b * x
 * const f = () => a.mul(x.square()).add(b.mul(x)).sum();
 * // df/da = x ^ 2, df/db = x
 * const {value, grads} = tf.variableGrads(f);
 *
 * Object.keys(grads).forEach(varName => grads[varName].print());
 * ```
 *
 * @param f The function to execute. f() should return a scalar.
 * @param varList The list of variables to compute the gradients with respect
 *     to. Defaults to all trainable variables.
 * @returns An object with the following keys and values:
 *   - `value`: The value of the function `f`.
 *   - `grads`: A map from the names of the variables to the gradients.
 *     If the `varList` argument is provided explicitly and contains a subset of
 *     non-trainable variables, this map in the return value will contain keys
 *     that map the names of the non-trainable variables to `null`.
 */ /** @doc {heading: 'Training', subheading: 'Gradients'} */ function variableGrads(f, varList) {
    _util.assert(_util.isFunction(f), ()=>"The f passed in variableGrads(f) must be a function");
    _util.assert(varList == null || Array.isArray(varList) && varList.every((v)=>v instanceof (0, _tensor.Variable)), ()=>"The varList passed in variableGrads(f, varList) must be an array of variables");
    const specifiedVarList = varList != null;
    if (!specifiedVarList) {
        // Get all of the trainable variables.
        varList = [];
        for(const varName in (0, _engine.ENGINE).registeredVariables)varList.push((0, _engine.ENGINE).registeredVariables[varName]);
    }
    const specifiedNonTrainable = specifiedVarList ? varList.filter((variable)=>!variable.trainable) : null;
    // Prune non-trainable variables.
    const originalVarCount = varList.length;
    varList = varList.filter((variable)=>variable.trainable);
    _util.assert(varList.length > 0, ()=>`variableGrads() expects at least one of the input variables to ` + `be trainable, but none of the ${originalVarCount} variables is ` + `trainable.`);
    const allowNoGradients = true;
    const { value , grads  } = (0, _engine.ENGINE).gradients(f, varList, null, allowNoGradients);
    _util.assert(grads.some((g)=>g != null), ()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().");
    _util.assert(value.rank === 0, ()=>`The f passed in variableGrads(f) must return a scalar, but it ` + `returned a rank-${value.rank} tensor`);
    const namedGrads = {};
    varList.forEach((v, i)=>{
        if (grads[i] != null) namedGrads[v.name] = grads[i];
    });
    if (specifiedNonTrainable != null) // If varList is explicitly provided and contains non-trainable values,
    // add them to the returned gradients with `null` values.
    specifiedNonTrainable.forEach((v)=>namedGrads[v.name] = null);
    return {
        value,
        grads: namedGrads
    };
}
/**
 * Overrides the gradient computation of a function `f`.
 *
 * Takes a function
 * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`
 * and returns another function `g(...inputs)` which takes the same inputs as
 * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients
 * with respect to each input of `f` are computed using `f().gradFunc`.
 *
 * The `save` function passsed to `f` should be used for saving tensors needed
 * in the gradient. And the `saved` passed to the `gradFunc` is a
 * `NamedTensorMap`, which contains those saved tensor.
 *
 * ```js
 * const customOp = tf.customGrad((x, save) => {
 *   // Save x to make sure it's available later for the gradient.
 *   save([x]);
 *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);
 *   return {
 *     value: x.square(),
 *     // Note `saved.x` which points to the `x` we saved earlier.
 *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]
 *   };
 * });
 *
 * const x = tf.tensor1d([-1, -2, 3]);
 * const dx = tf.grad(x => customOp(x));
 *
 * console.log(`f(x):`);
 * customOp(x).print();
 * console.log(`f'(x):`);
 * dx(x).print();
 * ```
 *
 * @param f The function to evaluate in forward mode, which should return
 *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`
 *     returns the custom gradients of `f` with respect to its inputs.
 */ /** @doc {heading: 'Training', subheading: 'Gradients'} */ function customGrad(f) {
    return (0, _engine.ENGINE).customGrad(f);
}
function checkGrads(grads) {
    const numNullGradients = grads.filter((g)=>g == null).length;
    if (numNullGradients > 0) throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}

},{"./engine":"1aEvR","./tensor":"DPGBx","./tensor_util_env":"fsyzK","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eimRx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gradient helper function for the min and max operations.
 */ parcelHelpers.export(exports, "gradForMinAndMax", ()=>gradForMinAndMax);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _axisUtil = require("./axis_util");
function gradForMinAndMax(dy, y, xOrig, origAxes, permutedAxes) {
    if (y.rank < xOrig.rank) y = y.reshape(_axisUtil.expandShapeToKeepDim(y.shape, origAxes));
    if (dy.rank < xOrig.rank) dy = dy.reshape(_axisUtil.expandShapeToKeepDim(dy.shape, origAxes));
    return {
        x: ()=>{
            const dx = dy.mul(xOrig.equal(y).cast(dy.dtype));
            return permutedAxes == null ? dx : dx.transpose(permutedAxes);
        }
    };
}

},{"./axis_util":"1A9rc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"haV7c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concatGradConfig", ()=>concatGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _split = require("../ops/split");
var _util = require("../util");
const concatGradConfig = {
    kernelName: (0, _kernelNames.Concat),
    saveAllInputs: true,
    gradFunc: (dy, saved, attrs)=>{
        const shapes = saved.map((t)=>t.shape);
        const { axis  } = attrs;
        const $axis = (0, _util.parseAxisParam)(axis, saved[0].shape)[0];
        const sizeSplits = shapes.map((s)=>s[$axis]);
        const derTensors = (0, _split.split)(dy, sizeSplits, $axis);
        return derTensors.map((t)=>()=>t);
    }
};

},{"../kernel_names":"2CzXQ","../ops/split":"kOQiE","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kOQiE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "split", ()=>split);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Splits a `tf.Tensor` into sub tensors.
 *
 * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`
 * into `numOrSizeSplits` smaller tensors.
 * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.
 *
 * If `numOrSizeSplits` is a number array, splits `x` into
 * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the
 * same size as `x` except along dimension `axis` where the size is
 * `numOrSizeSplits[i]`.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
 * const [a, b] = tf.split(x, 2, 1);
 * a.print();
 * b.print();
 *
 * const [c, d, e] = tf.split(x, [1, 2, 1], 1);
 * c.print();
 * d.print();
 * e.print();
 * ```
 *
 * @param x The input tensor to split.
 * @param numOrSizeSplits Either an integer indicating the number of
 * splits along the axis or an array of integers containing the sizes of
 * each output tensor along the axis. If a number then it must evenly divide
 * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.
 * @param axis The dimension along which to split. Defaults to 0 (the first
 * dim).
 */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */ function split_(x, numOrSizeSplits, axis = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "split");
    const $axis = (0, _util.parseAxisParam)(axis, $x.shape)[0];
    let splitSizes;
    if (typeof numOrSizeSplits === "number") {
        (0, _util.assert)($x.shape[$axis] % numOrSizeSplits === 0, ()=>"Number of splits must evenly divide the axis.");
        splitSizes = new Array(numOrSizeSplits).fill($x.shape[$axis] / numOrSizeSplits);
    } else {
        (0, _util.assert)($x.shape[$axis] === numOrSizeSplits.reduce((a, b)=>a + b), ()=>"The sum of sizes must match the size of the axis dimension.");
        splitSizes = numOrSizeSplits;
    }
    const forward = (backend, _)=>{
        return backend.split($x, splitSizes, $axis);
    };
    const inputs = {
        x: $x
    };
    const attr = {
        numOrSizeSplits,
        axis
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.SplitV), attr);
}
const split = (0, _operation.op)({
    split_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"65S8Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DGradConfig", ()=>conv2DGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _conv2DBackpropFilter = require("../ops/conv2d_backprop_filter");
var _conv2DBackpropInput = require("../ops/conv2d_backprop_input");
var _convUtil = require("../ops/conv_util");
var _util = require("../util");
const conv2DGradConfig = {
    kernelName: (0, _kernelNames.Conv2D),
    inputsToSave: [
        "x",
        "filter"
    ],
    gradFunc: (dy, saved, attrs)=>{
        const [x4D, $filter] = saved;
        const { dilations , strides , pad , dataFormat  } = attrs;
        _util.assert(_convUtil.tupleValuesAreOne(dilations), ()=>"Error in gradient of conv2D: dilation rates greater than 1 " + `are not yet supported in gradients. Got dilations '${dilations}'`);
        return {
            x: ()=>(0, _conv2DBackpropInput.conv2DBackpropInput)(x4D.shape, dy, $filter, strides, pad, dataFormat),
            filter: ()=>(0, _conv2DBackpropFilter.conv2DBackpropFilter)(x4D, dy, $filter.shape, strides, pad, dataFormat)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/conv2d_backprop_filter":"dg2XP","../ops/conv2d_backprop_input":"2dggy","../ops/conv_util":"oHP2H","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dg2XP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DBackpropFilter", ()=>conv2DBackpropFilter);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
/**
 * Computes the derivative of the filter of a 2D convolution.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.
 * @param dy The dy image, of rank 4 or rank 3, of shape
 *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.
 * @param filterShape The shape of the filter, length 4,
 *     [filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */ function conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = "NHWC", dimRoundingMode) {
    let x4D = x;
    if (x.rank === 3) x4D = (0, _arrayOps.reshape)(x, [
        1,
        x.shape[0],
        x.shape[1],
        x.shape[2]
    ]);
    let dy4D = dy;
    if (dy4D.rank === 3) dy4D = (0, _arrayOps.reshape)(dy, [
        1,
        dy.shape[0],
        dy.shape[1],
        dy.shape[2]
    ]);
    _util.assert(x4D.rank === 4, ()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ` + `${x4D.shape}.`);
    _util.assert(dy4D.rank === 4, ()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ` + `${dy4D.shape}.`);
    _util.assert(filterShape.length === 4, ()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ` + `${filterShape}.`);
    const inDepth = dataFormat === "NHWC" ? x4D.shape[3] : x4D.shape[1];
    const outDepth = dataFormat === "NHWC" ? dy4D.shape[3] : dy4D.shape[1];
    _util.assert(inDepth === filterShape[2], ()=>`Error in conv2dDerFilter: depth of input ${inDepth}) must ` + `match input depth in filter (${filterShape[2]}.`);
    _util.assert(outDepth === filterShape[3], ()=>`Error in conv2dDerFilter: depth of dy (${outDepth}) must ` + `match output depth for filter (${filterShape[3]}).`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in conv2dDerFilter: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const forward = (backend)=>{
        const dilations = 1;
        const $dataFormat = _convUtil.convertConv2DDataFormat(dataFormat);
        const convInfo = _convUtil.computeConv2DInfo(x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
        return backend.conv2dDerFilter(x4D, dy4D, convInfo);
    };
    const inputs = {
        x: x4D,
        dy: dy4D
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dimRoundingMode
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Conv2DBackpropFilter), attrs);
}
const conv2DBackpropFilter = (0, _operation.op)({
    conv2DBackpropFilter_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../util":"9v6Fb","./array_ops":"29MCO","./conv_util":"oHP2H","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"oHP2H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "computePool2DInfo", ()=>computePool2DInfo);
/**
 * Computes the information for a forward pass of a pooling3D operation.
 */ parcelHelpers.export(exports, "computePool3DInfo", ()=>computePool3DInfo);
/**
 * Computes the information for a forward pass of a convolution/pooling
 * operation.
 */ parcelHelpers.export(exports, "computeConv2DInfo", ()=>computeConv2DInfo);
/**
 * Computes the information for a forward pass of a 3D convolution/pooling
 * operation.
 */ parcelHelpers.export(exports, "computeConv3DInfo", ()=>computeConv3DInfo);
parcelHelpers.export(exports, "computeDefaultPad", ()=>computeDefaultPad);
parcelHelpers.export(exports, "tupleValuesAreOne", ()=>tupleValuesAreOne);
parcelHelpers.export(exports, "eitherStridesOrDilationsAreOne", ()=>eitherStridesOrDilationsAreOne);
/**
 * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to
 *    'channelsLast'|'channelsFirst'
 * @param dataFormat in 'NHWC'|'NCHW' mode
 * @return dataFormat in 'channelsLast'|'channelsFirst' mode
 * @throws unknown dataFormat
 */ parcelHelpers.export(exports, "convertConv2DDataFormat", ()=>convertConv2DDataFormat);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = "channelsLast") {
    const [filterHeight, filterWidth] = parseTupleParam(filterSize);
    let filterShape;
    if (dataFormat === "channelsLast") filterShape = [
        filterHeight,
        filterWidth,
        inShape[3],
        inShape[3]
    ];
    else if (dataFormat === "channelsFirst") filterShape = [
        filterHeight,
        filterWidth,
        inShape[1],
        inShape[1]
    ];
    else throw new Error(`Unknown dataFormat ${dataFormat}`);
    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
}
function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = "NDHWC") {
    const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);
    let filterShape;
    let $dataFormat;
    if (dataFormat === "NDHWC") {
        $dataFormat = "channelsLast";
        filterShape = [
            filterDepth,
            filterHeight,
            filterWidth,
            inShape[4],
            inShape[4]
        ];
    } else if (dataFormat === "NCDHW") {
        $dataFormat = "channelsFirst";
        filterShape = [
            filterDepth,
            filterHeight,
            filterWidth,
            inShape[1],
            inShape[1]
        ];
    } else throw new Error(`Unknown dataFormat ${dataFormat}`);
    return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);
}
function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = "channelsLast") {
    let [batchSize, inHeight, inWidth, inChannels] = [
        -1,
        -1,
        -1,
        -1
    ];
    if (dataFormat === "channelsLast") [batchSize, inHeight, inWidth, inChannels] = inShape;
    else if (dataFormat === "channelsFirst") [batchSize, inChannels, inHeight, inWidth] = inShape;
    else throw new Error(`Unknown dataFormat ${dataFormat}`);
    const [filterHeight, filterWidth, , filterChannels] = filterShape;
    const [strideHeight, strideWidth] = parseTupleParam(strides);
    const [dilationHeight, dilationWidth] = parseTupleParam(dilations);
    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    const { padInfo , outHeight , outWidth  } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);
    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    let outShape;
    if (dataFormat === "channelsFirst") outShape = [
        batchSize,
        outChannels,
        outHeight,
        outWidth
    ];
    else if (dataFormat === "channelsLast") outShape = [
        batchSize,
        outHeight,
        outWidth,
        outChannels
    ];
    return {
        batchSize,
        dataFormat,
        inHeight,
        inWidth,
        inChannels,
        outHeight,
        outWidth,
        outChannels,
        padInfo,
        strideHeight,
        strideWidth,
        filterHeight,
        filterWidth,
        effectiveFilterHeight,
        effectiveFilterWidth,
        dilationHeight,
        dilationWidth,
        inShape,
        outShape,
        filterShape
    };
}
function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = "channelsLast", roundingMode) {
    let [batchSize, inDepth, inHeight, inWidth, inChannels] = [
        -1,
        -1,
        -1,
        -1,
        -1
    ];
    if (dataFormat === "channelsLast") [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;
    else if (dataFormat === "channelsFirst") [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;
    else throw new Error(`Unknown dataFormat ${dataFormat}`);
    const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;
    const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);
    const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);
    const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);
    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    const { padInfo , outDepth , outHeight , outWidth  } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);
    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    let outShape;
    if (dataFormat === "channelsFirst") outShape = [
        batchSize,
        outChannels,
        outDepth,
        outHeight,
        outWidth
    ];
    else if (dataFormat === "channelsLast") outShape = [
        batchSize,
        outDepth,
        outHeight,
        outWidth,
        outChannels
    ];
    return {
        batchSize,
        dataFormat,
        inDepth,
        inHeight,
        inWidth,
        inChannels,
        outDepth,
        outHeight,
        outWidth,
        outChannels,
        padInfo,
        strideDepth,
        strideHeight,
        strideWidth,
        filterDepth,
        filterHeight,
        filterWidth,
        effectiveFilterDepth,
        effectiveFilterHeight,
        effectiveFilterWidth,
        dilationDepth,
        dilationHeight,
        dilationWidth,
        inShape,
        outShape,
        filterShape
    };
}
function computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {
    if (zeroPad == null) zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    const inputRows = inShape[0];
    const inputCols = inShape[1];
    const outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util.assert(_util.isInt(outputRows), ()=>`The output # of rows (${outputRows}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
    const outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util.assert(_util.isInt(outputCols), ()=>`The output # of columns (${outputCols}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
    return [
        outputRows,
        outputCols
    ];
}
function computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {
    if (zeroPad == null) zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    const inputDepth = inShape[0];
    const inputRows = inShape[1];
    const inputCols = inShape[2];
    const outputDepths = conditionalRound((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util.assert(_util.isInt(outputDepths), ()=>`The output # of depths (${outputDepths}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
    const outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util.assert(_util.isInt(outputRows), ()=>`The output # of rows (${outputRows}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
    const outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    _util.assert(_util.isInt(outputCols), ()=>`The output # of columns (${outputCols}) must be an integer. ` + `Change the stride and/or zero pad parameters`);
    return [
        outputDepths,
        outputRows,
        outputCols,
        outChannels
    ];
}
function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {
    const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
}
function parseTupleParam(param) {
    if (typeof param === "number") return [
        param,
        param,
        param
    ];
    if (param.length === 2) return [
        param[0],
        param[1],
        1
    ];
    return param;
}
function parse3TupleParam(param) {
    return typeof param === "number" ? [
        param,
        param,
        param
    ] : param;
}
/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d
 * Atrous convolution is equivalent to standard convolution with upsampled
 * filters with effective_filter_height =
 * filter_height + (filter_height - 1) * (dilation - 1)
 * and effective_filter_width =
 * filter_width + (filter_width - 1) * (dilation - 1),
 * produced by inserting dilation - 1 zeros along consecutive elements across
 * the filters' spatial dimensions.
 * When there is a dilation, this converts a filter dimension to the
 * effective filter dimension, so it can be used in a standard convolution.
 */ function getEffectiveFilterSize(filterSize, dilation) {
    if (dilation <= 1) return filterSize;
    return filterSize + (filterSize - 1) * (dilation - 1);
}
function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode) {
    let padInfo;
    let outHeight;
    let outWidth;
    if (typeof pad === "number") {
        const padType = pad === 0 ? "VALID" : "NUMBER";
        padInfo = {
            top: pad,
            bottom: pad,
            left: pad,
            right: pad,
            type: padType
        };
        const outShape = computeOutputShape2D([
            inHeight,
            inWidth
        ], filterHeight, strideHeight, pad, roundingMode);
        outHeight = outShape[0];
        outWidth = outShape[1];
    } else if (pad === "same") {
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);
        const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);
        const top = Math.floor(padAlongHeight / 2);
        const bottom = padAlongHeight - top;
        const left = Math.floor(padAlongWidth / 2);
        const right = padAlongWidth - left;
        padInfo = {
            top,
            bottom,
            left,
            right,
            type: "SAME"
        };
    } else if (pad === "valid") {
        padInfo = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            type: "VALID"
        };
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    } else throw Error(`Unknown padding parameter: ${pad}`);
    return {
        padInfo,
        outHeight,
        outWidth
    };
}
function get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {
    let padInfo;
    let outDepth;
    let outHeight;
    let outWidth;
    if (typeof pad === "number") {
        const padType = pad === 0 ? "VALID" : "NUMBER";
        padInfo = {
            top: pad,
            bottom: pad,
            left: pad,
            right: pad,
            front: pad,
            back: pad,
            type: padType
        };
        const outShape = computeOutputShape4D([
            inDepth,
            inHeight,
            inWidth,
            1
        ], filterDepth, 1, strideDepth, pad, roundingMode);
        outDepth = outShape[0];
        outHeight = outShape[1];
        outWidth = outShape[2];
    } else if (pad === "same") {
        outDepth = Math.ceil(inDepth / strideDepth);
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;
        const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
        const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
        const front = Math.floor(padAlongDepth / 2);
        const back = padAlongDepth - front;
        const top = Math.floor(padAlongHeight / 2);
        const bottom = padAlongHeight - top;
        const left = Math.floor(padAlongWidth / 2);
        const right = padAlongWidth - left;
        padInfo = {
            top,
            bottom,
            left,
            right,
            front,
            back,
            type: "SAME"
        };
    } else if (pad === "valid") {
        padInfo = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            front: 0,
            back: 0,
            type: "VALID"
        };
        outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    } else throw Error(`Unknown padding parameter: ${pad}`);
    return {
        padInfo,
        outDepth,
        outHeight,
        outWidth
    };
}
/**
 * Rounds a value depending on the rounding mode
 * @param value
 * @param roundingMode
 */ function conditionalRound(value, roundingMode) {
    if (!roundingMode) return value;
    switch(roundingMode){
        case "round":
            // used for Caffe Conv
            return Math.round(value);
        case "ceil":
            // used for Caffe Pool
            return Math.ceil(value);
        case "floor":
            return Math.floor(value);
        default:
            throw new Error(`Unknown roundingMode ${roundingMode}`);
    }
}
function tupleValuesAreOne(param) {
    const [dimA, dimB, dimC] = parseTupleParam(param);
    return dimA === 1 && dimB === 1 && dimC === 1;
}
function eitherStridesOrDilationsAreOne(strides, dilations) {
    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
}
function convertConv2DDataFormat(dataFormat) {
    if (dataFormat === "NHWC") return "channelsLast";
    else if (dataFormat === "NCHW") return "channelsFirst";
    else throw new Error(`Unknown dataFormat ${dataFormat}`);
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2dggy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DBackpropInput", ()=>conv2DBackpropInput);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
/**
 * Computes the derivative of the input of a 2D convolution.
 *
 * @param xShape The shape of the input: [batch, height, width, inDepth].
 * If length of 3, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 4 or rank 3 of shape
 *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */ function conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = "NHWC", dimRoundingMode) {
    _util.assert(xShape.length === dy.rank, ()=>`Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
    let xShape4D = xShape;
    let dy4D = dy;
    let reshapedTo4D = false;
    if (dy.rank === 3) {
        reshapedTo4D = true;
        dy4D = (0, _arrayOps.reshape)(dy, [
            1,
            dy.shape[0],
            dy.shape[1],
            dy.shape[2]
        ]);
        xShape4D = [
            1,
            xShape[0],
            xShape[1],
            xShape[2]
        ];
    }
    _util.assert(xShape4D.length === 4, ()=>`Error in conv2dDerInput: inShape must be length 4, but got length ` + `${xShape4D.length}.`);
    _util.assert(dy4D.rank === 4, ()=>`Error in conv2dDerInput: dy must be rank 4, but got ` + `rank ${dy4D.rank}`);
    _util.assert(filter.rank === 4, ()=>`Error in conv2dDerInput: filter must be rank 4, but got ` + `rank ${filter.rank}`);
    const inDepth = dataFormat === "NHWC" ? xShape4D[3] : xShape4D[1];
    const outDepth = dataFormat === "NHWC" ? dy4D.shape[3] : dy4D.shape[1];
    _util.assert(inDepth === filter.shape[2], ()=>`Error in conv2dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[2]}.`);
    _util.assert(outDepth === filter.shape[3], ()=>`Error in conv2dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[3]}.`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in conv2dDerInput: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const forward = (backend, save)=>{
        const dilations = 1;
        const $dataFormat = _convUtil.convertConv2DDataFormat(dataFormat);
        const convInfo = _convUtil.computeConv2DInfo(xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
        const res = backend.conv2dDerInput(dy4D, filter, convInfo);
        save([
            dy4D,
            filter
        ]);
        return res;
    };
    const inputs = {
        dy: dy4D,
        filter
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dimRoundingMode
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Conv2DBackpropInput), attrs);
    if (reshapedTo4D) return (0, _arrayOps.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const conv2DBackpropInput = (0, _operation.op)({
    conv2DBackpropInput_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../util":"9v6Fb","./array_ops":"29MCO","./conv_util":"oHP2H","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZbwb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DBackpropInputGradConfig", ()=>conv2DBackpropInputGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _conv2D = require("../ops/conv2d");
var _conv2DBackpropFilter = require("../ops/conv2d_backprop_filter");
const conv2DBackpropInputGradConfig = {
    kernelName: (0, _kernelNames.Conv2DBackpropInput),
    inputsToSave: [
        "dy",
        "filter"
    ],
    gradFunc: (ddx, saved, attrs)=>{
        const [dy, filter] = saved;
        const { strides , pad , dataFormat , dimRoundingMode  } = attrs;
        return {
            dy: ()=>(0, _conv2D.conv2d)(ddx, filter, strides, pad, dataFormat, 1 /* dilations */ , dimRoundingMode),
            filter: ()=>(0, _conv2DBackpropFilter.conv2DBackpropFilter)(ddx, dy, filter.shape, strides, pad, dataFormat, dimRoundingMode)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/conv2d":"94uN6","../ops/conv2d_backprop_filter":"dg2XP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"94uN6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2d", ()=>conv2d);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
/**
 * Computes a 2D convolution over the input x.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function conv2d_(x, filter, strides, pad, dataFormat = "NHWC", dilations = [
    1,
    1
], dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv2d");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv2d");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _arrayOps.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);
    _util.assert($filter.rank === 4, ()=>`Error in conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in conv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const inDepth = dataFormat === "NHWC" ? x4D.shape[3] : x4D.shape[1];
    _util.assert(inDepth === $filter.shape[2], ()=>`Error in conv2d: depth of input (${inDepth}) must match ` + `input depth for filter ${$filter.shape[2]}.`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in conv2D: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    const forward = (backend, save)=>{
        const $dataFormat = _convUtil.convertConv2DDataFormat(dataFormat);
        const convInfo = _convUtil.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
        const res = backend.conv2d(x4D, $filter, convInfo);
        save([
            x4D,
            $filter
        ]);
        return res;
    };
    const inputs = {
        x: x4D,
        filter: $filter
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations,
        dimRoundingMode
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Conv2D), attrs);
    if (reshapedTo4D) return (0, _arrayOps.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const conv2d = (0, _operation.op)({
    conv2d_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./conv_util":"oHP2H","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dCNS0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3DGradConfig", ()=>conv3DGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _conv3DBackpropFilter = require("../ops/conv3d_backprop_filter");
var _conv3DBackpropInput = require("../ops/conv3d_backprop_input");
var _convUtil = require("../ops/conv_util");
var _util = require("../util");
const conv3DGradConfig = {
    kernelName: (0, _kernelNames.Conv3D),
    inputsToSave: [
        "x",
        "filter"
    ],
    gradFunc: (dy, saved, attrs)=>{
        const { dilations , strides , pad  } = attrs;
        _util.assert((0, _convUtil.tupleValuesAreOne)(dilations), ()=>"Error in gradient of conv3D: dilation rates greater than 1 are " + `not yet supported in gradients. Got dilations '${dilations}'`);
        const [x5D, $filter] = saved;
        return {
            x: ()=>(0, _conv3DBackpropInput.conv3DBackpropInput)(x5D.shape, dy, $filter, strides, pad),
            filter: ()=>(0, _conv3DBackpropFilter.conv3DBackpropFilter)(x5D, dy, $filter.shape, strides, pad)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/conv3d_backprop_filter":"gkdDf","../ops/conv3d_backprop_input":"dmSvt","../ops/conv_util":"oHP2H","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkdDf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3DBackpropFilter", ()=>conv3DBackpropFilter);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
/**
 * Computes the derivative of the filter of a 3D convolution.
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is
 *     assumed.
 * @param dy The dy image, of rank 5 or rank 4, of shape
 *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is
 *     assumed.
 * @param filterShape The shape of the filter, length 5,
 *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideDepth, strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */ function conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {
    let x5D = x;
    if (x.rank === 4) x5D = (0, _arrayOps.reshape)(x, [
        1,
        x.shape[0],
        x.shape[1],
        x.shape[2],
        x.shape[3]
    ]);
    let dy5D = dy;
    if (dy5D.rank === 4) dy5D = (0, _arrayOps.reshape)(dy, [
        1,
        dy.shape[0],
        dy.shape[1],
        dy.shape[2],
        dy.shape[3]
    ]);
    _util.assert(x5D.rank === 5, ()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ` + `${x5D.shape}.`);
    _util.assert(dy5D.rank === 5, ()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ` + `${dy5D.shape}.`);
    _util.assert(filterShape.length === 5, ()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ` + `${filterShape}.`);
    _util.assert(x5D.shape[4] === filterShape[3], ()=>`Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` + `match input depth in filter (${filterShape[3]}.`);
    _util.assert(dy5D.shape[4] === filterShape[4], ()=>`Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` + `match output depth for filter (${filterShape[4]}).`);
    const forward = (backend)=>{
        const dilations = 1;
        const convInfo = _convUtil.computeConv3DInfo(x5D.shape, filterShape, strides, dilations, pad);
        return backend.conv3dDerFilter(x5D, dy5D, convInfo);
    };
    const inputs = {
        x: x5D,
        y: dy5D
    };
    const attrs = {
        strides,
        pad
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Conv3DBackpropFilterV2), attrs);
}
const conv3DBackpropFilter = (0, _operation.op)({
    conv3DBackpropFilter_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../util":"9v6Fb","./array_ops":"29MCO","./conv_util":"oHP2H","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmSvt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3DBackpropInput", ()=>conv3DBackpropInput);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
/**
 * Computes the derivative of the input of a 3D convolution.
 *
 * @param xShape The shape of the input: [batch, depth, height, width,
 * in_channels]. If length of 4, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 5 or rank 4 of shape
 *   `[batch, outDepth, outHeight, outWidth, in_channels]`.
 * If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 */ function conv3DBackpropInput_(xShape, dy, filter, strides, pad) {
    _util.assert(xShape.length === dy.rank, ()=>`Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
    let xShape5D = xShape;
    let dy5D = dy;
    let reshapedTo5D = false;
    if (dy.rank === 4) {
        reshapedTo5D = true;
        dy5D = (0, _arrayOps.reshape)(dy, [
            1,
            dy.shape[0],
            dy.shape[1],
            dy.shape[2],
            dy.shape[3]
        ]);
        xShape5D = [
            1,
            xShape[0],
            xShape[1],
            xShape[2],
            xShape[3]
        ];
    }
    const inDepth = xShape5D[4];
    const outDepth = dy5D.shape[4];
    _util.assert(xShape5D.length === 5, ()=>`Error in conv3dDerInput: inShape must be length 5, but got length ` + `${xShape5D.length}.`);
    _util.assert(dy5D.rank === 5, ()=>`Error in conv3dDerInput: dy must be rank 5, but got ` + `rank ${dy5D.rank}`);
    _util.assert(filter.rank === 5, ()=>`Error in conv3dDerInput: filter must be rank 5, but got ` + `rank ${filter.rank}`);
    _util.assert(inDepth === filter.shape[3], ()=>`Error in conv3dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[3]}.`);
    _util.assert(outDepth === filter.shape[4], ()=>`Error in conv3dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[4]}.`);
    const forward = (backend)=>{
        const dilations = 1;
        const convInfo = _convUtil.computeConv3DInfo(xShape5D, filter.shape, strides, dilations, pad);
        return backend.conv3dDerInput(dy5D, filter, convInfo);
    };
    const inputs = {
        dy: dy5D
    };
    const attrs = {
        pad
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Conv3DBackpropInputV2), attrs);
    if (reshapedTo5D) return (0, _arrayOps.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3],
        res.shape[4]
    ]);
    return res;
}
const conv3DBackpropInput = (0, _operation.op)({
    conv3DBackpropInput_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../util":"9v6Fb","./array_ops":"29MCO","./conv_util":"oHP2H","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5t7Kn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2dNativeGradConfig", ()=>depthwiseConv2dNativeGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _convUtil = require("../ops/conv_util");
var _depthwiseConv2DNativeBackpropFilter = require("../ops/depthwise_conv2d_native_backprop_filter");
var _depthwiseConv2DNativeBackpropInput = require("../ops/depthwise_conv2d_native_backprop_input");
var _util = require("../util");
const depthwiseConv2dNativeGradConfig = {
    kernelName: (0, _kernelNames.DepthwiseConv2dNative),
    inputsToSave: [
        "x",
        "filter"
    ],
    gradFunc: (dy, saved, attrs)=>{
        const { dilations , strides , pad , dimRoundingMode  } = attrs;
        const $dilations = dilations == null ? [
            1,
            1
        ] : dilations;
        _util.assert(_convUtil.tupleValuesAreOne($dilations), ()=>"Error in gradient of depthwiseConv2dNative: dilation rates " + `greater than 1 are not yet supported. Got dilations ` + `'${$dilations}'`);
        const [x, filter] = saved;
        _util.assert(x.rank === 4, ()=>`Error in gradient of depthwiseConv2dNative: input must be ` + `rank 4, but got rank ${x.rank}.`);
        _util.assert(filter.rank === 4, ()=>`Error in gradient of depthwiseConv2dNative: filter must be ` + `rank 4, but got rank ${filter.rank}.`);
        _util.assert(x.shape[3] === filter.shape[2], ()=>`Error in gradient of depthwiseConv2d: number of input ` + `channels (${x.shape[3]}) must match the inChannels dimension ` + `in filter ${filter.shape[2]}.`);
        _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, $dilations), ()=>"Error in gradient of depthwiseConv2d: Either strides or " + `dilations must be  1. Got strides ${strides} and dilations ` + `'${$dilations}'.`);
        if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in depthwiseConv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
        const convInfo = _convUtil.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true);
        return {
            x: ()=>(0, _depthwiseConv2DNativeBackpropInput.depthwiseConv2dNativeBackpropInput)(x.shape, dy, filter, convInfo),
            filter: ()=>(0, _depthwiseConv2DNativeBackpropFilter.depthwiseConv2dNativeBackpropFilter)(x, dy, filter.shape, convInfo)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/conv_util":"oHP2H","../ops/depthwise_conv2d_native_backprop_filter":"d54uU","../ops/depthwise_conv2d_native_backprop_input":"bpcTn","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d54uU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2dNativeBackpropFilter", ()=>depthwiseConv2dNativeBackpropFilter);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _arrayOps = require("./array_ops");
var _operation = require("./operation");
function depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, convInfo) {
    let x4D = x;
    if (x.rank === 3) x4D = (0, _arrayOps.reshape)(x, [
        1,
        x.shape[0],
        x.shape[1],
        x.shape[2]
    ]);
    let dy4D = dy;
    if (dy4D.rank === 3) dy4D = (0, _arrayOps.reshape)(dy, [
        1,
        dy.shape[0],
        dy.shape[1],
        dy.shape[2]
    ]);
    const forward = (backend)=>backend.depthwiseConv2DDerFilter(x4D, dy4D, convInfo);
    const inputs = {
        x: x4D,
        dy: dy4D
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.DepthwiseConv2dNativeBackpropFilter));
}
const depthwiseConv2dNativeBackpropFilter = (0, _operation.op)({
    depthwiseConv2dNativeBackpropFilter_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","./array_ops":"29MCO","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpcTn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2dNativeBackpropInput", ()=>depthwiseConv2dNativeBackpropInput);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _arrayOps = require("./array_ops");
var _operation = require("./operation");
function depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, convInfo) {
    let dy4D = dy;
    let reshapedTo4D = false;
    if (dy.rank === 3) {
        reshapedTo4D = true;
        dy4D = (0, _arrayOps.reshape)(dy, [
            1,
            dy.shape[0],
            dy.shape[1],
            dy.shape[2]
        ]);
    }
    const forward = (backend)=>backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);
    const inputs = {
        dy: dy4D
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.DepthwiseConv2dNativeBackpropInput));
    if (reshapedTo4D) return (0, _arrayOps.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const depthwiseConv2dNativeBackpropInput = (0, _operation.op)({
    depthwiseConv2dNativeBackpropInput_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","./array_ops":"29MCO","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"67IRB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divGradConfig", ()=>divGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _arrayOps = require("../ops/array_ops");
var _binaryOps = require("../ops/binary_ops");
var _broadcastUtil = require("../ops/broadcast_util");
var _div = require("../ops/div");
var _reductionOps = require("../ops/reduction_ops");
var _square = require("../ops/square");
var _unaryOps = require("../ops/unary_ops");
const divGradConfig = {
    kernelName: (0, _kernelNames.Div),
    inputsToSave: [
        "a",
        "b"
    ],
    gradFunc: (dy, saved)=>{
        const [a, b] = saved;
        const outShape = _broadcastUtil.assertAndGetBroadcastShape(a.shape, b.shape);
        const derA = ()=>{
            const res = (0, _div.div)(dy, b.toFloat());
            const reduceAxes = _broadcastUtil.getReductionAxes(a.shape, outShape);
            if (reduceAxes.length > 0) return (0, _reductionOps.sum)(res, reduceAxes).reshape(a.shape);
            return res;
        };
        const derB = ()=>{
            let res = (0, _binaryOps.mul)(dy, a.toFloat());
            const reduceAxes = _broadcastUtil.getReductionAxes(b.shape, outShape);
            if (reduceAxes.length > 0) res = (0, _arrayOps.reshape)((0, _reductionOps.sum)(res, reduceAxes), b.shape);
            const tmp = (0, _square.square)(b);
            return (0, _unaryOps.neg)((0, _div.div)(res, tmp.toFloat()));
        };
        return {
            a: derA,
            b: derB
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/array_ops":"29MCO","../ops/binary_ops":"3wHWX","../ops/broadcast_util":"kQqEF","../ops/div":"3bNgZ","../ops/reduction_ops":"hwfGu","../ops/square":"52Axi","../ops/unary_ops":"dAJBE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3wHWX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addStrict", ()=>addStrict);
parcelHelpers.export(exports, "atan2", ()=>atan2);
parcelHelpers.export(exports, "divStrict", ()=>divStrict);
parcelHelpers.export(exports, "floorDiv", ()=>floorDiv);
parcelHelpers.export(exports, "maximum", ()=>maximum);
parcelHelpers.export(exports, "maximumStrict", ()=>maximumStrict);
parcelHelpers.export(exports, "minimum", ()=>minimum);
parcelHelpers.export(exports, "minimumStrict", ()=>minimumStrict);
parcelHelpers.export(exports, "mod", ()=>mod);
parcelHelpers.export(exports, "modStrict", ()=>modStrict);
parcelHelpers.export(exports, "mul", ()=>mul);
parcelHelpers.export(exports, "mulStrict", ()=>mulStrict);
parcelHelpers.export(exports, "pow", ()=>pow);
parcelHelpers.export(exports, "powStrict", ()=>powStrict);
parcelHelpers.export(exports, "squaredDifferenceStrict", ()=>squaredDifferenceStrict);
parcelHelpers.export(exports, "subStrict", ()=>subStrict);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _add = require("./add");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
var _tensorOps = require("./tensor_ops");
var _unaryOps = require("./unary_ops");
/**
 * @deprecated
 * Adds two `tf.Tensor`s element-wise, A + B.
 *
 * Inputs must be the same shape. For broadcasting support, use add() instead.
 *
 * @param a The first Tensor to add element-wise.
 * @param b The second Tensor to add element-wise.
 */ function addStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "addStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "addStrict");
    _util.assertShapesMatch($a.shape, $b.shape, "Error in addStrict: ");
    return $a.add($b);
}
/**
 * @deprecated
 * Subtracts two `tf.Tensor`s element-wise, A - B. Inputs must
 * be the same shape.
 *
 * For broadcasting support, use `tf.sub` instead.
 *
 * @param a The first Tensor to subtract element-wise.
 * @param b The second Tensor to subtract element-wise.
 */ function subStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "subStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "subStrict");
    _util.assertShapesMatch($a.shape, $b.shape, "Error in subStrict: ");
    return $a.sub($b);
}
/**
 * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
 *
 * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
 * corresponding elements in x and y. The result's dtype will be the upcasted
 * type of the `base` and `exp` dtypes.
 *
 * ```js
 * const a = tf.tensor([[2, 3], [4, 5]])
 * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 *
 * ```js
 * const a = tf.tensor([[1, 2], [3, 4]])
 * const b = tf.tensor(2).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 * We also expose `powStrict` which has the same signature as this op and
 * asserts that `base` and `exp` are the same shape (does not broadcast).
 *
 * @param base The base `tf.Tensor` to pow element-wise.
 * @param exp The exponent `tf.Tensor` to pow element-wise.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function pow_(base, exp) {
    let $base = (0, _tensorUtilEnv.convertToTensor)(base, "base", "pow");
    let $exp = (0, _tensorUtilEnv.convertToTensor)(exp, "exp", "pow");
    [$base, $exp] = (0, _tensorUtil.makeTypesMatch)($base, $exp);
    const outShape = _broadcastUtil.assertAndGetBroadcastShape($base.shape, $exp.shape);
    const grad = (dy, saved)=>{
        const [$base, $exp, y] = saved;
        const derBase = ()=>{
            const expFloat = $exp.toFloat();
            let res = dy.mul(expFloat.mul($base.pow(expFloat.sub((0, _tensorOps.scalar)(1)))));
            const reduceAxes = _broadcastUtil.getReductionAxes($base.shape, outShape);
            if (reduceAxes.length > 0) res = res.sum(reduceAxes);
            return res.reshape($base.shape);
        };
        const derExp = ()=>{
            const condition = $base.greater(0);
            const logBase = $base.log().where(condition, (0, _tensorOps.zerosLike)($base));
            let res = dy.mul(y.mul(logBase));
            const reduceAxes = _broadcastUtil.getReductionAxes($exp.shape, outShape);
            if (reduceAxes.length > 0) res = res.sum(reduceAxes);
            return res.reshape($exp.shape);
        };
        return {
            a: derBase,
            b: derExp
        };
    };
    const attrs = {};
    const inputsToSave = [
        $base,
        $exp
    ];
    const outputsToSave = [
        true
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.pow($base, $exp);
        save([
            $base,
            $exp,
            y
        ]);
        return y;
    }, {
        a: $base,
        b: $exp
    }, grad, "Pow", attrs, inputsToSave, outputsToSave);
}
/**
 * @deprecated
 * Computes the power of one `tf.Tensor` to another. Inputs must
 * be the same shape.
 *
 * For broadcasting support, use `tf.pow` instead.
 *
 * @param base The base tensor to pow element-wise.
 * @param exp The exponent tensor to pow element-wise.
 */ function powStrict_(base, exp) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    _util.assertShapesMatch(base.shape, exp.shape, "Error in powStrict: ");
    return base.pow(exp);
}
/**
 * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
 *
 * We also expose `tf.mulStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([2, 3, 4, 5]);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 *
 * ```js
 * // Broadcast mul a with b.
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.scalar(5);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 * @param a The first tensor to multiply.
 * @param b The second tensor to multiply. Must have the same dtype as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function mul_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "mul");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "mul");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const outShape = _broadcastUtil.assertAndGetBroadcastShape($a.shape, $b.shape);
    const der = (dy, saved)=>{
        const [$a, $b] = saved;
        const derA = ()=>{
            const res = dy.mul($b.toFloat());
            const reduceAxes = _broadcastUtil.getReductionAxes($a.shape, outShape);
            if (reduceAxes.length > 0) return res.sum(reduceAxes).reshape($a.shape);
            return res;
        };
        const derB = ()=>{
            const res = dy.mul($a.toFloat());
            const reduceAxes = _broadcastUtil.getReductionAxes($b.shape, outShape);
            if (reduceAxes.length > 0) return res.sum(reduceAxes).reshape($b.shape);
            return res;
        };
        return {
            a: derA,
            b: derB
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.multiply($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    }, {
        a: $a,
        b: $b
    }, der, "Mul");
}
/**
 * @deprecated
 * Multiplies two `tf.Tensor`s element-wise, A * B.
 *
 * Inputs must be the same shape. For broadcasting support, use `tf.mul`.
 *
 * @param a The first tensor to multiply.
 * @param b The first tensor to multiply. Must have the same
 *    dtype as `a`.
 */ function mulStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "mul");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "mul");
    _util.assertShapesMatch($a.shape, $b.shape, "Error in multiplyStrict: ");
    return $a.mul($b);
}
/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 * The result is rounded with floor function.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.floorDiv(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.floorDiv(b).print();  // or tf.floorDiv(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function floorDiv_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "floorDiv");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "floorDiv");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const outShape = _broadcastUtil.assertAndGetBroadcastShape($a.shape, $b.shape);
    const der = (dy, saved)=>{
        const [$a, $b] = saved;
        const derA = ()=>{
            const res = dy.div($b.toFloat());
            const reduceAxes = _broadcastUtil.getReductionAxes($a.shape, outShape);
            if (reduceAxes.length > 0) return res.sum(reduceAxes).reshape($a.shape);
            return res;
        };
        const derB = ()=>{
            let res = dy.mul($a.toFloat());
            const reduceAxes = _broadcastUtil.getReductionAxes($b.shape, outShape);
            if (reduceAxes.length > 0) res = res.sum(reduceAxes).reshape($b.shape);
            const tmp = $b.square();
            return res.div(tmp.toFloat()).neg();
        };
        return {
            a: derA,
            b: derB
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.floorDiv($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    }, {
        a: $a,
        b: $b
    }, der, "FloorDiv");
}
/**
 * @deprecated
 * Divides two `tf.Tensor`s element-wise, A / B. Inputs must
 * be the same shape.
 *
 * @param a The first tensor as the numerator for element-wise division.
 * @param b The second tensor as the denominator for element-wise division.
 */ function divStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "div");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "div");
    _util.assertShapesMatch($a.shape, $b.shape, "Error in divideStrict: ");
    return $a.div($b);
}
/**
 * Returns the mod of a and b element-wise.
 * `floor(x / y) * y + mod(x, y) = x`
 * Supports broadcasting.
 *
 * We also expose `tf.modStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * ```js
 * // Broadcast a mod b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function mod_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "mod");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "mod");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const outShape = _broadcastUtil.assertAndGetBroadcastShape($a.shape, $b.shape);
    const der = (dy, saved)=>{
        const [$a, $b] = saved;
        const derA = ()=>{
            const reduceAxes = _broadcastUtil.getReductionAxes($a.shape, outShape);
            if (reduceAxes.length > 0) return dy.sum(reduceAxes).reshape($a.shape);
            return dy;
        };
        const derB = ()=>{
            const res = dy.mul($a.div($b).floor().neg());
            const reduceAxes = _broadcastUtil.getReductionAxes($b.shape, outShape);
            if (reduceAxes.length > 0) return res.sum(reduceAxes).reshape($b.shape);
            return res;
        };
        return {
            $a: derA,
            $b: derB
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.mod($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    }, {
        $a,
        $b
    }, der);
}
/**
 * @deprecated
 * Returns the mod of a and b (`a < b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use mod().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */ function modStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "modStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "modStrict");
    _util.assertShapesMatch($a.shape, $b.shape, "Error in modStrict: ");
    return $a.mod($b);
}
/**
 * Returns the min of a and b (`a < b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `minimumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * ```js
 * // Broadcast minimum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function minimum_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "minimum");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "minimum");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    if ($a.dtype === "bool") {
        $a = $a.toInt();
        $b = $b.toInt();
    }
    _broadcastUtil.assertAndGetBroadcastShape($a.shape, $b.shape);
    const der = (dy, saved)=>{
        const [$a, $b] = saved;
        const derA = ()=>dy.mul($a.lessEqual($b).toFloat());
        const derB = ()=>dy.mul($a.greater($b).toFloat());
        return {
            a: derA,
            b: derB
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.minimum($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    }, {
        a: $a,
        b: $b
    }, der, "Minimum");
}
/**
 * @deprecated
 * Returns the min of a and b (`a < b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use minimum().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */ function minimumStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "minimumStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "minimumStrict");
    _util.assertShapesMatch($a.shape, $b.shape, "Error in minimumStrict: ");
    return $a.minimum($b);
}
/**
 * Returns the max of a and b (`a > b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `tf.maximumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * ```js
 * // Broadcast maximum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function maximum_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "maximum");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "maximum");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    if ($a.dtype === "bool") {
        $a = $a.toInt();
        $b = $b.toInt();
    }
    _broadcastUtil.assertAndGetBroadcastShape($a.shape, $b.shape);
    const der = (dy, saved)=>{
        const [$a, $b] = saved;
        const derA = ()=>dy.mul($a.greaterEqual($b).toFloat());
        const derB = ()=>dy.mul($a.less($b).toFloat());
        return {
            a: derA,
            b: derB
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.maximum($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    }, {
        a: $a,
        b: $b
    }, der, "Maximum");
}
/**
 * @deprecated
 * Returns the max of a and b (`a > b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use maximum().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */ function maximumStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "maximumStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "maximumStrict");
    _util.assertShapesMatch($a.shape, $b.shape, "Error in maximumStrict: ");
    return $a.maximum($b);
}
/**
 * @deprecated
 * Returns (a - b) * (a - b) element-wise.
 *
 * Inputs must be the same shape. For broadcasting support, use
 * `tf.squaredDifference` instead.
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 */ function squaredDifferenceStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "squaredDifferenceStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "squaredDifferenceStrict");
    _util.assertShapesMatch($a.shape, $b.shape, "Error in squaredDifferenceStrict: ");
    return $a.squaredDifference($b);
}
/**
 * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);
 * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);
 *
 * tf.atan2(a, b).print()
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 *
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function atan2_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "atan2");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "atan2");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const outShape = _broadcastUtil.assertAndGetBroadcastShape($a.shape, $b.shape);
    const der = (dy, saved)=>{
        const [$a, $b] = saved;
        const derA = ()=>{
            const d = (0, _add.add)($a.square(), $b.square());
            let res = dy.mul($b.div(d));
            const reduceAxes = _broadcastUtil.getReductionAxes($a.shape, outShape);
            if (reduceAxes.length > 0) res = res.sum(reduceAxes);
            return res.reshape($a.shape);
        };
        const derB = ()=>{
            const d = (0, _add.add)($a.square(), $b.square());
            let res = (0, _unaryOps.neg)(dy.mul($a.div(d)));
            const reduceAxes = _broadcastUtil.getReductionAxes($b.shape, outShape);
            if (reduceAxes.length > 0) res = res.sum(reduceAxes);
            return res.reshape($b.shape);
        };
        return {
            $a: derA,
            $b: derB
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.atan2($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    }, {
        $a,
        $b
    }, der);
}
const addStrict = (0, _operation.op)({
    addStrict_
});
const atan2 = (0, _operation.op)({
    atan2_
});
const divStrict = (0, _operation.op)({
    divStrict_
});
const floorDiv = (0, _operation.op)({
    floorDiv_
});
const maximum = (0, _operation.op)({
    maximum_
});
const maximumStrict = (0, _operation.op)({
    maximumStrict_
});
const minimum = (0, _operation.op)({
    minimum_
});
const minimumStrict = (0, _operation.op)({
    minimumStrict_
});
const mod = (0, _operation.op)({
    mod_
});
const modStrict = (0, _operation.op)({
    modStrict_
});
const mul = (0, _operation.op)({
    mul_
});
const mulStrict = (0, _operation.op)({
    mulStrict_
});
const pow = (0, _operation.op)({
    pow_
});
const powStrict = (0, _operation.op)({
    powStrict_
});
const squaredDifferenceStrict = (0, _operation.op)({
    squaredDifferenceStrict_
});
const subStrict = (0, _operation.op)({
    subStrict_
});

},{"../engine":"1aEvR","../globals":"gfrr7","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","../util":"9v6Fb","./add":"i4ulI","./broadcast_util":"kQqEF","./operation":"l6IGY","./tensor_ops":"1qbPi","./unary_ops":"dAJBE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gfrr7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Enables production mode which disables correctness checks in favor of
 * performance.
 */ /** @doc {heading: 'Environment'} */ parcelHelpers.export(exports, "enableProdMode", ()=>enableProdMode);
/**
 * Enables debug mode which will log information about all executed kernels:
 * the elapsed time of the kernel execution, as well as the rank, shape, and
 * size of the output tensor.
 *
 * Debug mode will significantly slow down your application as it will
 * download the result of every operation to the CPU. This should not be used in
 * production. Debug mode does not affect the timing information of the kernel
 * execution as we do not measure download time in the kernel execution time.
 *
 * See also: `tf.profile`, `tf.memory`.
 */ /** @doc {heading: 'Environment'} */ parcelHelpers.export(exports, "enableDebugMode", ()=>enableDebugMode);
/** Globally disables deprecation warnings */ parcelHelpers.export(exports, "disableDeprecationWarnings", ()=>disableDeprecationWarnings);
/** Warn users about deprecated functionality. */ parcelHelpers.export(exports, "deprecationWarn", ()=>deprecationWarn);
/**
 * Dispose all variables kept in backend engine.
 */ /** @doc {heading: 'Environment'} */ parcelHelpers.export(exports, "disposeVariables", ()=>disposeVariables);
/**
 * It returns the global engine that keeps track of all tensors and backends.
 */ /** @doc {heading: 'Environment'} */ parcelHelpers.export(exports, "engine", ()=>engine);
/**
 * Returns memory info at the current time in the program. The result is an
 * object with the following properties:
 *
 * - `numBytes`: Number of bytes allocated (undisposed) at this time.
 * - `numTensors`: Number of unique tensors allocated.
 * - `numDataBuffers`: Number of unique data buffers allocated
 *   (undisposed) at this time, which is ≤ the number of tensors
 *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same
 *   data buffer with `a`).
 * - `unreliable`: True if the memory usage is unreliable. See `reasons` when
 *    `unreliable` is true.
 * - `reasons`: `string[]`, reasons why the memory is unreliable, present if
 *    `unreliable` is true.
 *
 * WebGL Properties:
 * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at
 *     this time.
 */ /** @doc {heading: 'Performance', subheading: 'Memory'} */ parcelHelpers.export(exports, "memory", ()=>memory);
/**
 * Executes the provided function `f()` and returns a promise that resolves
 * with information about the function's memory use:
 * - `newBytes`: the number of new bytes allocated
 * - `newTensors`: the number of new tensors created
 * - `peakBytes`: the peak number of bytes allocated
 * - `kernels`: an array of objects for each kernel involved that reports
 * their input and output shapes, number of bytes used, and number of new
 * tensors created.
 *
 * ```js
 * const profile = await tf.profile(() => {
 *   const x = tf.tensor1d([1, 2, 3]);
 *   let x2 = x.square();
 *   x2.dispose();
 *   x2 = x.square();
 *   x2.dispose();
 *   return x;
 * });
 *
 * console.log(`newBytes: ${profile.newBytes}`);
 * console.log(`newTensors: ${profile.newTensors}`);
 * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>
 * k.totalBytesSnapshot)}`);
 * ```
 *
 */ /** @doc {heading: 'Performance', subheading: 'Profile'} */ parcelHelpers.export(exports, "profile", ()=>profile);
/**
 * Executes the provided function `fn` and after it is executed, cleans up all
 * intermediate tensors allocated by `fn` except those returned by `fn`.
 * `fn` must not return a Promise (async functions not allowed). The returned
 * result can be a complex object.
 *
 * Using this method helps avoid memory leaks. In general, wrap calls to
 * operations in `tf.tidy` for automatic memory cleanup.
 *
 * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to
 * dispose variables, please use `tf.disposeVariables` or call dispose()
 * directly on variables.
 *
 * ```js
 * // y = 2 ^ 2 + 1
 * const y = tf.tidy(() => {
 *   // a, b, and one will be cleaned up when the tidy ends.
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *   const b = a.square();
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * y.print();
 * ```
 *
 * @param nameOrFn The name of the closure, or the function to execute.
 *     If a name is provided, the 2nd argument should be the function.
 *     If debug mode is on, the timing and the memory usage of the function
 *     will be tracked and displayed on the console using the provided name.
 * @param fn The function to execute.
 */ /** @doc {heading: 'Performance', subheading: 'Memory'} */ parcelHelpers.export(exports, "tidy", ()=>tidy);
/**
 * Disposes any `tf.Tensor`s found within the provided object.
 *
 * @param container an object that may be a `tf.Tensor` or may directly
 *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If
 *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing
 *     happens. In general it is safe to pass any object here, except that
 *     `Promise`s are not supported.
 */ /** @doc {heading: 'Performance', subheading: 'Memory'} */ parcelHelpers.export(exports, "dispose", ()=>dispose);
/**
 * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed
 * automatically.
 *
 * ```js
 * let b;
 * const y = tf.tidy(() => {
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *
 *   // b will not be cleaned up by the tidy. a and one will be cleaned up
 *   // when the tidy ends.
 *   b = tf.keep(a.square());
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * console.log('y:');
 * y.print();
 * console.log('b:');
 * b.print();
 * ```
 *
 * @param result The tensor to keep from being disposed.
 */ /** @doc {heading: 'Performance', subheading: 'Memory'} */ parcelHelpers.export(exports, "keep", ()=>keep);
/**
 * Executes `f()` and returns a promise that resolves with timing
 * information.
 *
 * The result is an object with the following properties:
 *
 * - `wallMs`: Wall execution time.
 * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the
 * WebGL backend and the query timer extension is not available, this will
 * return an error object.
 * - On `WebGL` The following additional properties exist:
 *   - `uploadWaitMs`: CPU blocking time on texture uploads.
 *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).
 *
 * ```js
 * const x = tf.randomNormal([20, 20]);
 * const time = await tf.time(() => x.matMul(x));
 *
 * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);
 * ```
 *
 * @param f The function to execute and time.
 */ /** @doc {heading: 'Performance', subheading: 'Timing'} */ parcelHelpers.export(exports, "time", ()=>time);
/**
 * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and
 * executing operations on those tensors. Returns a promise that resolves
 * to a boolean if the backend initialization was successful.
 *
 * Note this disposes the current backend, if any, as well as any tensors
 * associated with it. A new backend is initialized, even if it is of the
 * same type as the previous one.
 *
 * @param backendName The name of the backend. Currently supports
 *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js
 *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).
 */ /** @doc {heading: 'Backends'} */ parcelHelpers.export(exports, "setBackend", ()=>setBackend);
/**
 * Returns a promise that resolves when the currently selected backend (or the
 * highest priority one) has initialized. Await this promise when you are using
 * a backend that has async initialization.
 */ /** @doc {heading: 'Backends'} */ parcelHelpers.export(exports, "ready", ()=>ready);
/**
 * Returns the current backend name (cpu, webgl, etc). The backend is
 * responsible for creating tensors and executing operations on those tensors.
 */ /** @doc {heading: 'Backends'} */ parcelHelpers.export(exports, "getBackend", ()=>getBackend);
/**
 * Removes a backend and the registered factory.
 */ /** @doc {heading: 'Backends'} */ parcelHelpers.export(exports, "removeBackend", ()=>removeBackend);
/**
 * Finds the backend registered under the provided name. Returns null if the
 * name is not in the registry, or the registration hasn't finished yet.
 */ parcelHelpers.export(exports, "findBackend", ()=>findBackend);
/**
 * Finds the backend factory registered under the provided name. Returns a
 * function that produces a new backend when called. Returns null if the name
 * is not in the registry.
 */ parcelHelpers.export(exports, "findBackendFactory", ()=>findBackendFactory);
/**
 * Registers a global backend. The registration should happen when importing
 * a module file (e.g. when importing `backend_webgl.ts`), and is used for
 * modular builds (e.g. custom tfjs bundle with only webgl support).
 *
 * @param factory The backend factory function. When called, it should
 * return a backend instance, or a promise of an instance.
 * @param priority The priority of the backend (higher = more important).
 *     In case multiple backends are registered, the priority is used to find
 *     the best backend. Defaults to 1.
 * @return False if there is already a registered backend under this name, true
 *     if not.
 */ /** @doc {heading: 'Backends'} */ parcelHelpers.export(exports, "registerBackend", ()=>registerBackend);
/**
 * Gets the current backend. If no backends have been initialized, this will
 * attempt to initialize the best backend. Will throw an error if the highest
 * priority backend has async initialization, in which case, you should call
 * 'await tf.ready()' before running other code.
 */ /** @doc {heading: 'Backends'} */ parcelHelpers.export(exports, "backend", ()=>backend);
/**
 * Sets the global platform.
 *
 * @param platformName The name of this platform.
 * @param platform A platform implementation.
 */ parcelHelpers.export(exports, "setPlatform", ()=>setPlatform);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("./engine");
var _environment = require("./environment");
var _tensor = require("./tensor");
var _tensorUtil = require("./tensor_util");
function enableProdMode() {
    (0, _environment.env)().set("PROD", true);
}
function enableDebugMode() {
    (0, _environment.env)().set("DEBUG", true);
}
function disableDeprecationWarnings() {
    (0, _environment.env)().set("DEPRECATION_WARNINGS_ENABLED", false);
    console.warn(`TensorFlow.js deprecation warnings have been disabled.`);
}
function deprecationWarn(msg) {
    if ((0, _environment.env)().getBool("DEPRECATION_WARNINGS_ENABLED")) console.warn(msg + " You can disable deprecation warnings with " + "tf.disableDeprecationWarnings().");
}
(0, _tensor.setDeprecationWarningFn)(deprecationWarn);
function disposeVariables() {
    (0, _engine.ENGINE).disposeVariables();
}
function engine() {
    return 0, _engine.ENGINE;
}
function memory() {
    return (0, _engine.ENGINE).memory();
}
function profile(f) {
    return (0, _engine.ENGINE).profile(f);
}
function tidy(nameOrFn, fn) {
    return (0, _engine.ENGINE).tidy(nameOrFn, fn);
}
function dispose(container) {
    const tensors = (0, _tensorUtil.getTensorsInContainer)(container);
    tensors.forEach((tensor)=>tensor.dispose());
}
function keep(result) {
    return (0, _engine.ENGINE).keep(result);
}
function time(f) {
    return (0, _engine.ENGINE).time(f);
}
function setBackend(backendName) {
    return (0, _engine.ENGINE).setBackend(backendName);
}
function ready() {
    return (0, _engine.ENGINE).ready();
}
function getBackend() {
    return (0, _engine.ENGINE).backendName;
}
function removeBackend(name) {
    (0, _engine.ENGINE).removeBackend(name);
}
function findBackend(name) {
    return (0, _engine.ENGINE).findBackend(name);
}
function findBackendFactory(name) {
    return (0, _engine.ENGINE).findBackendFactory(name);
}
function registerBackend(name, factory, priority = 1) {
    return (0, _engine.ENGINE).registerBackend(name, factory, priority);
}
function backend() {
    return (0, _engine.ENGINE).backend;
}
function setPlatform(platformName, platform) {
    (0, _environment.env)().setPlatform(platformName, platform);
}

},{"./engine":"1aEvR","./environment":"8tlxC","./tensor":"DPGBx","./tensor_util":"kUGKD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i4ulI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "add", ()=>add);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 *
 * ```js
 * // Broadcast add a with b.
 * const a = tf.scalar(5);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 * @param a The first `tf.Tensor` to add.
 * @param b The second `tf.Tensor` to add. Must have the same type as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function add_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "add");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "add");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const forward = (backend, save)=>{
        const res = backend.add($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    };
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Add));
}
const add = (0, _operation.op)({
    add_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dAJBE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "abs", ()=>abs);
parcelHelpers.export(exports, "acos", ()=>acos);
parcelHelpers.export(exports, "acosh", ()=>acosh);
parcelHelpers.export(exports, "asin", ()=>asin);
parcelHelpers.export(exports, "asinh", ()=>asinh);
parcelHelpers.export(exports, "atan", ()=>atan);
parcelHelpers.export(exports, "atanh", ()=>atanh);
parcelHelpers.export(exports, "ceil", ()=>ceil);
parcelHelpers.export(exports, "clipByValue", ()=>clipByValue);
parcelHelpers.export(exports, "cos", ()=>cos);
parcelHelpers.export(exports, "cosh", ()=>cosh);
parcelHelpers.export(exports, "erf", ()=>erf);
parcelHelpers.export(exports, "exp", ()=>exp);
parcelHelpers.export(exports, "expm1", ()=>expm1);
parcelHelpers.export(exports, "floor", ()=>floor);
parcelHelpers.export(exports, "log", ()=>log);
parcelHelpers.export(exports, "log1p", ()=>log1p);
parcelHelpers.export(exports, "logSigmoid", ()=>logSigmoid);
parcelHelpers.export(exports, "neg", ()=>neg);
parcelHelpers.export(exports, "reciprocal", ()=>reciprocal);
parcelHelpers.export(exports, "round", ()=>round);
parcelHelpers.export(exports, "rsqrt", ()=>rsqrt);
parcelHelpers.export(exports, "sigmoid", ()=>sigmoid);
parcelHelpers.export(exports, "sign", ()=>sign);
parcelHelpers.export(exports, "isNaN", ()=>isNaN);
parcelHelpers.export(exports, "isInf", ()=>isInf);
parcelHelpers.export(exports, "isFinite", ()=>isFinite);
parcelHelpers.export(exports, "sin", ()=>sin);
parcelHelpers.export(exports, "sinh", ()=>sinh);
parcelHelpers.export(exports, "softplus", ()=>softplus);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
parcelHelpers.export(exports, "step", ()=>step);
parcelHelpers.export(exports, "tan", ()=>tan);
parcelHelpers.export(exports, "tanh", ()=>tanh);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _tensorOps = require("./tensor_ops");
/**
 * Computes `-1 * x` element-wise.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);
 *
 * x.neg().print();  // or tf.neg(x)
 * ```
 *
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function neg_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "neg");
    const grad = (dy)=>{
        return {
            x: ()=>dy.neg()
        };
    };
    const attrs = {};
    const inputsToSave = [
        $x
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.neg($x), {
        x: $x
    }, grad, "Neg", attrs, inputsToSave);
}
/**
 * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.ceil().print();  // or tf.ceil(x)
 * ```
 * @param x The input Tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function ceil_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "ceil");
    // TODO(manrajgrover): Return null for gradients when backprop supports it.
    const grad = (dy)=>{
        return {
            $x: ()=>(0, _tensorOps.zerosLike)(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.ceil($x), {
        $x
    }, grad);
}
/**
 * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.floor().print();  // or tf.floor(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function floor_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "floor");
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    const grad = (dy)=>{
        return {
            $x: ()=>(0, _tensorOps.zerosLike)(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.floor($x), {
        $x
    }, grad);
}
/**
 * Returns an element-wise indication of the sign of a number.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);
 *
 * x.sign().print();  // or tf.sign(x)
 * ```
 * @param x The input Tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function sign_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sign");
    const grad = (dy)=>{
        return {
            $x: ()=>(0, _tensorOps.zerosLike)(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.sign($x), {
        $x
    }, grad);
}
/**
 * RReturns which elements of x are NaN.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isNaN().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function isNaN_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "isNaN");
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    const grad = (dy)=>{
        return {
            $x: ()=>(0, _tensorOps.zerosLike)(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.isNaN($x), {
        $x
    }, grad);
}
/**
 * Returns which elements of x are Infinity or -Infinity.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isInf().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function isInf_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "isInf");
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    const grad = (dy)=>{
        return {
            $x: ()=>(0, _tensorOps.zerosLike)(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.isInf($x), {
        $x
    }, grad);
}
/**
 * Returns which elements of x are finite.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isFinite().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function isFinite_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "isFinite");
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    const grad = (dy)=>{
        return {
            $x: ()=>(0, _tensorOps.zerosLike)(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.isFinite($x), {
        $x
    }, grad);
}
/**
 * Computes round of input `tf.Tensor` element-wise: `round(x)`.
 * It implements banker's rounding.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.round().print();  // or tf.round(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function round_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "round");
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    const grad = (dy)=>{
        return {
            $x: ()=>(0, _tensorOps.zerosLike)(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.round($x), {
        $x
    }, grad);
}
/**
 * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.exp().print();  // or tf.exp(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function exp_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "exp");
    const bck = (dy, saved)=>{
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return {
            x: ()=>dy.mul(saved[0])
        };
    };
    const attrs = {};
    const inputsToSave = [];
    const outputsToSave = [
        true
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.exp($x);
        save([
            y
        ]);
        return y;
    }, {
        x: $x
    }, bck, "Exp", attrs, inputsToSave, outputsToSave);
}
/**
 * Computes exponential of the input `tf.Tensor` minus one element-wise.
 * `e ^ x - 1`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.expm1().print();  // or tf.expm1(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function expm1_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "expm1");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>dy.mul($x.exp())
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.expm1($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E]);
 *
 * x.log().print();  // or tf.log(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function log_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "log");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            x: ()=>dy.div($x.toFloat())
        };
    };
    const attrs = {};
    const inputsToSave = [
        $x
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.log($x);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "Log", attrs, inputsToSave);
}
/**
 * Computes natural logarithm of the input `tf.Tensor` plus one
 * element-wise: `ln(1 + x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E - 1]);
 *
 * x.log1p().print();  // or tf.log1p(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function log1p_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "log1p");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>dy.div($x.add(1))
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.log1p($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.sqrt().print();  // or tf.sqrt(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function sqrt_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sqrt");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            x: ()=>dy.div($x.toFloat().sqrt().mul(2))
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.sqrt($x);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "Sqrt", {});
}
/**
 * Computes reciprocal of square root of the input `tf.Tensor` element-wise:
 * `y = 1 / sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.rsqrt().print();  // or tf.rsqrt(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function rsqrt_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "rsqrt");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            x: ()=>dy.div($x.pow(1.5).mul(2)).neg()
        };
    };
    const inputsToSave = [
        $x
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.rsqrt($x);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "Rsqrt", {} /* attrs */ , inputsToSave);
}
/**
 * Computes reciprocal of x element-wise: `1 / x`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, 2]);
 *
 * x.reciprocal().print();  // or tf.reciprocal(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function reciprocal_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reciprocal");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>dy.div($x.square().neg())
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.reciprocal($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes absolute value element-wise: `abs(x)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.abs().print();  // or tf.abs(x)
 * ```
 * @param x The input `tf.Tensor`.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function abs_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "abs");
    if ($x.dtype === "complex64") return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.complexAbs($x), {
        $x
    });
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            x: ()=>dy.mul($x.toFloat().step(-1))
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.abs($x);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "Abs");
}
/**
 * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)
 * ```
 * @param x The input tensor.
 * @param clipValueMin Lower-bound of range to be clipped to.
 * @param clipValueMax Upper-bound of range to be clipped to.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function clipByValue_(x, clipValueMin, clipValueMax) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "clipByValue");
    _util.assert(clipValueMin <= clipValueMax, ()=>`Error in clip: min (${clipValueMin}) must be ` + `less than or equal to max (${clipValueMax}).`);
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            x: ()=>dy.where($x.greaterEqual(clipValueMin).logicalAnd($x.lessEqual(clipValueMax)), (0, _tensorOps.zerosLike)(dy))
        };
    };
    const inputsToSave = [
        $x
    ];
    const attr = {
        min: clipValueMin,
        max: clipValueMax
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.clip($x, clipValueMin, clipValueMax);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "ClipByValue", attr, inputsToSave);
}
/**
 * Computes sigmoid element-wise, `1 / (1 + exp(-x))`
 *
 * ```js
 * const x = tf.tensor1d([0, -1, 2, -3]);
 *
 * x.sigmoid().print();  // or tf.sigmoid(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function sigmoid_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sigmoid");
    const grad = (dy, saved)=>{
        const [y] = saved;
        return {
            x: ()=>dy.mul(y.mul((0, _tensorOps.scalar)(1).sub(y)))
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.sigmoid($x);
        save([
            y
        ]);
        return y;
    }, {
        x: $x
    }, grad, "Sigmoid");
}
/**
 * Computes log sigmoid of the input `tf.Tensor` element-wise:
 * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.logSigmoid().print();  // or tf.logSigmoid(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function logSigmoid_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "logSigmoid");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>dy.mul($x.neg().sigmoid())
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.softplus($x.neg()).neg();
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.softplus().print();  // or tf.softplus(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function softplus_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "softplus");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>dy.mul($x.sigmoid())
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.softplus($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes sin of the input Tensor element-wise: `sin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.sin().print();  // or tf.sin(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function sin_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sin");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            x: ()=>$x.toFloat().cos().mul(dy)
        };
    };
    const inputsToSave = [
        $x
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.sin($x);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "Sin", {} /* attrs */ , inputsToSave);
}
/**
 * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.cos().print();  // or tf.cos(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function cos_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "cos");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            x: ()=>$x.toFloat().sin().neg().mul(dy)
        };
    };
    const inputsToSave = [
        $x
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.cos($x);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "Cos", {} /* attrs */ , inputsToSave);
}
/**
 * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.tan().print();  // or tf.tan(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function tan_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "tan");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>dy.div($x.cos().square())
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.tan($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asin().print();  // or tf.asin(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function asin_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "asin");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            // tslint:disable-next-line: no-unnecessary-type-assertion
            $x: ()=>dy.div((0, _tensorOps.scalar)(1).sub($x.toFloat().square()).sqrt())
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.asin($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.acos().print();  // or tf.acos(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function acos_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "acos");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>{
                const a = $x.toFloat().square();
                const b = (0, _tensorOps.scalar)(1).sub(a).sqrt();
                // tslint:disable-next-line: no-unnecessary-type-assertion
                return dy.div(b).neg();
            }
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.acos($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.atan().print();  // or tf.atan(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function atan_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "atan");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>dy.div($x.toFloat().square().add(1))
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.atan($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.sinh().print();  // or tf.sinh(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function sinh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "sinh");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return {
            $x: ()=>$x.toFloat().cosh().mul(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.sinh($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.cosh().print();  // or tf.cosh(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function cosh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "cosh");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return {
            $x: ()=>$x.toFloat().sinh().mul(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.cosh($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, 70]);
 *
 * x.tanh().print();  // or tf.tanh(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function tanh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "tanh");
    const grad = (dy, saved)=>{
        const [y] = saved;
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return {
            x: ()=>(0, _tensorOps.scalar)(1).sub(y.square()).mul(dy)
        };
    };
    const outputsToSave = [
        true
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.tanh($x);
        save([
            y
        ]);
        return y;
    }, {
        x: $x
    }, grad, "Tanh", {} /* attrs */ , null, outputsToSave);
}
/**
 * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:
 * `asinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asinh().print();  // or tf.asinh(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function asinh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "asinh");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>{
                const a = (0, _tensorOps.scalar)(1).add($x.toFloat().square()).sqrt();
                // tslint:disable-next-line: no-unnecessary-type-assertion
                return dy.div(a);
            }
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.asinh($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:
 * `acosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([10, 1, 3, 5.7]);
 *
 * x.acosh().print();  // or tf.acosh(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function acosh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "acosh");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>{
                const a = $x.toFloat().square().sub(1).sqrt();
                // tslint:disable-next-line: no-unnecessary-type-assertion
                return dy.div(a);
            }
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.acosh($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:
 * `atanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.atanh().print();  // or tf.atanh(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function atanh_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "atanh");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>dy.div((0, _tensorOps.scalar)(1).sub($x.toFloat().square()))
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.atanh($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes gause error function of the input `tf.Tensor` element-wise:
 * `erf(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.erf().print(); // or tf.erf(x);
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function erf_(x) {
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "erf");
    _util.assert($x.dtype === "int32" || $x.dtype === "float32", ()=>"Input dtype must be `int32` or `float32`.");
    if ($x.dtype === "int32") $x = $x.toFloat();
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>dy.mul($x.square().neg().exp().mul(2 / Math.sqrt(Math.PI)))
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.erf($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`
 *
 * ```js
 * const x = tf.tensor1d([0, 2, -1, -3]);
 *
 * x.step(.5).print();  // or tf.step(x, .5)
 * ```
 * @param x The input tensor.
 * @param alpha The gradient when input is negative.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function step_(x, alpha = 0.0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "step");
    // TODO(manrajgrover): Return null for gradients when backprop supports
    // it.
    const grad = (dy)=>{
        return {
            $x: ()=>(0, _tensorOps.zerosLike)(dy)
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.step($x, alpha), {
        $x
    }, grad);
}
const abs = (0, _operation.op)({
    abs_
});
const acos = (0, _operation.op)({
    acos_
});
const acosh = (0, _operation.op)({
    acosh_
});
const asin = (0, _operation.op)({
    asin_
});
const asinh = (0, _operation.op)({
    asinh_
});
const atan = (0, _operation.op)({
    atan_
});
const atanh = (0, _operation.op)({
    atanh_
});
const ceil = (0, _operation.op)({
    ceil_
});
const clipByValue = (0, _operation.op)({
    clipByValue_
});
const cos = (0, _operation.op)({
    cos_
});
const cosh = (0, _operation.op)({
    cosh_
});
const erf = (0, _operation.op)({
    erf_
});
const exp = (0, _operation.op)({
    exp_
});
const expm1 = (0, _operation.op)({
    expm1_
});
const floor = (0, _operation.op)({
    floor_
});
const log = (0, _operation.op)({
    log_
});
const log1p = (0, _operation.op)({
    log1p_
});
const logSigmoid = (0, _operation.op)({
    logSigmoid_
});
const neg = (0, _operation.op)({
    neg_
});
const reciprocal = (0, _operation.op)({
    reciprocal_
});
const round = (0, _operation.op)({
    round_
});
const rsqrt = (0, _operation.op)({
    rsqrt_
});
const sigmoid = (0, _operation.op)({
    sigmoid_
});
const sign = (0, _operation.op)({
    sign_
});
const isNaN = (0, _operation.op)({
    isNaN_
});
const isInf = (0, _operation.op)({
    isInf_
});
const isFinite = (0, _operation.op)({
    isFinite_
});
const sin = (0, _operation.op)({
    sin_
});
const sinh = (0, _operation.op)({
    sinh_
});
const softplus = (0, _operation.op)({
    softplus_
});
const sqrt = (0, _operation.op)({
    sqrt_
});
const step = (0, _operation.op)({
    step_
});
const tan = (0, _operation.op)({
    tan_
});
const tanh = (0, _operation.op)({
    tanh_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3bNgZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "div", ()=>div);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _binaryOps = require("./binary_ops");
var _operation = require("./operation");
/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function div_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "div");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "div");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    if ($a.dtype === "int32" && $b.dtype === "int32") return (0, _binaryOps.floorDiv)($a, $b);
    const forward = (backend, save)=>{
        const res = backend.realDivide($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    };
    const inputs = {
        a: $a,
        b: $b
    };
    const attrs = {};
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Div), attrs);
}
const div = (0, _operation.op)({
    div_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./binary_ops":"3wHWX","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"52Axi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "square", ()=>square);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes square of `x` element-wise: `x ^ 2`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
 *
 * x.square().print();  // or tf.square(x)
 * ```
 * @param x The input Tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function square_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "square");
    const attrs = {};
    const inputsToSave = [
        $x
    ];
    const outputsToSave = [];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        save([
            $x
        ]);
        return backend.square($x);
    }, {
        x: $x
    }, null, "Square", attrs, inputsToSave, outputsToSave);
}
const square = (0, _operation.op)({
    square_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZ0fX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fusedBatchNormGradConfig", ()=>fusedBatchNormGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _add = require("../ops/add");
var _arrayOps = require("../ops/array_ops");
var _binaryOps = require("../ops/binary_ops");
var _broadcastUtil = require("../ops/broadcast_util");
var _reductionOps = require("../ops/reduction_ops");
var _sub = require("../ops/sub");
var _tensorOps = require("../ops/tensor_ops");
var _tile = require("../ops/tile");
var _unaryOps = require("../ops/unary_ops");
const fusedBatchNormGradConfig = {
    kernelName: (0, _kernelNames.FusedBatchNorm),
    inputsToSave: [
        "x",
        "mean",
        "variance",
        "scale"
    ],
    gradFunc: (dy, saved, attrs)=>{
        const { varianceEpsilon  } = attrs;
        const [x, mean, variance, scale] = saved;
        const scaleValue = scale == null ? (0, _tensorOps.scalar)(1) : scale;
        const reductionAxes = (0, _broadcastUtil.getReductionAxes)(mean.shape, x.shape);
        const tileShape = [];
        if (mean.rank === 1) {
            for(let i = 0; i < x.shape.length - 1; ++i)tileShape.push(x.shape[i]);
            tileShape.push(1);
        }
        const xMinusMean = (0, _sub.sub)(x, mean);
        const dyTimesScaleValue = (0, _binaryOps.mul)(dy, scaleValue);
        const oneOverSqrtVariance = (0, _unaryOps.rsqrt)((0, _add.add)(variance, (0, _tensorOps.scalar)(varianceEpsilon)));
        const minusHalfRCube = (0, _binaryOps.mul)((0, _binaryOps.mul)((0, _binaryOps.mul)(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), (0, _tensorOps.scalar)(-0.5));
        const derX = ()=>{
            if (mean.rank === 1) return (0, _arrayOps.reshape)((0, _binaryOps.mul)((0, _binaryOps.mul)(dy, (0, _tile.tile)(oneOverSqrtVariance.as4D(1, 1, 1, mean.shape[0]), tileShape)), scaleValue), x.shape);
            else return (0, _arrayOps.reshape)((0, _binaryOps.mul)((0, _binaryOps.mul)(dy, oneOverSqrtVariance), scaleValue), x.shape);
        };
        const derMean = ()=>{
            let meanDer = (0, _binaryOps.mul)((0, _binaryOps.mul)(oneOverSqrtVariance, (0, _tensorOps.scalar)(-1)), dyTimesScaleValue);
            if (mean.rank === 1) meanDer = (0, _reductionOps.sum)(meanDer, reductionAxes);
            return (0, _arrayOps.reshape)(meanDer, mean.shape);
        };
        const derVariance = ()=>{
            let varianceDer = (0, _binaryOps.mul)((0, _binaryOps.mul)(minusHalfRCube, xMinusMean), dyTimesScaleValue);
            if (mean.rank === 1) varianceDer = (0, _reductionOps.sum)(varianceDer, reductionAxes);
            return (0, _arrayOps.reshape)(varianceDer, mean.shape);
        };
        const derScale = ()=>{
            const xMinusMean2TimesRsqrt = (0, _binaryOps.mul)(xMinusMean, oneOverSqrtVariance);
            let scaleDer = (0, _binaryOps.mul)(dy, xMinusMean2TimesRsqrt);
            if (mean.rank === 1) scaleDer = (0, _reductionOps.sum)(scaleDer, reductionAxes);
            return (0, _arrayOps.reshape)(scaleDer, mean.shape);
        };
        const derOffset = ()=>{
            let offsetDer = dy;
            if (mean.rank === 1) offsetDer = (0, _reductionOps.sum)(offsetDer, reductionAxes);
            return (0, _arrayOps.reshape)(offsetDer, mean.shape);
        };
        return {
            x: derX,
            mean: derMean,
            variance: derVariance,
            scale: derScale,
            offset: derOffset
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/add":"i4ulI","../ops/array_ops":"29MCO","../ops/binary_ops":"3wHWX","../ops/broadcast_util":"kQqEF","../ops/reduction_ops":"hwfGu","../ops/sub":"mafuF","../ops/tensor_ops":"1qbPi","../ops/tile":"kFneb","../ops/unary_ops":"dAJBE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"mafuF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sub", ()=>sub);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 *
 * ```js
 * // Broadcast subtract a with b.
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.scalar(5);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 * @param a The first `tf.Tensor` to subtract from.
 * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as
 * `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function sub_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "sub");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "sub");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const forward = (backend, save)=>{
        const res = backend.subtract($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    };
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Sub));
}
const sub = (0, _operation.op)({
    sub_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kFneb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tile", ()=>tile);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Construct a tensor by repeating it the number of times given by reps.
 *
 * This operation creates a new tensor by replicating `input` `reps`
 * times. The output tensor's i'th dimension has `input.shape[i] *
 * reps[i]` elements, and the values of `input` are replicated
 * `reps[i]` times along the i'th dimension. For example, tiling
 * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 *
 * a.tile([2]).print();    // or a.tile([2])
 * ```
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.tile([1, 2]).print();  // or a.tile([1, 2])
 * ```
 * @param x The tensor to tile.
 * @param reps Determines the number of replications per dimension.
 */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */ function tile_(x, reps) {
    const parseAs = null;
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "tile", parseAs);
    _util.assert($x.rank === reps.length, ()=>`Error in transpose: rank of input ${$x.rank} ` + `must match length of reps ${reps}.`);
    const forward = (backend, save)=>{
        const res = backend.tile($x, reps);
        save([
            $x
        ]);
        return res;
    };
    const inputsToSave = [
        $x
    ];
    const inputs = {
        x: $x
    };
    const attrs = {
        reps
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Tile), attrs, inputsToSave);
}
const tile = (0, _operation.op)({
    tile_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"vod0w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "greaterEqualGradConfig", ()=>greaterEqualGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _tensorOps = require("../ops/tensor_ops");
const greaterEqualGradConfig = {
    kernelName: (0, _kernelNames.GreaterEqual),
    inputsToSave: [
        "a",
        "b"
    ],
    gradFunc: (dy, saved)=>{
        const [a, b] = saved;
        return {
            a: ()=>(0, _tensorOps.zerosLike)(a),
            b: ()=>(0, _tensorOps.zerosLike)(b)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chOOD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identityGradConfig", ()=>identityGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
const identityGradConfig = {
    kernelName: (0, _kernelNames.Identity),
    gradFunc: (dy)=>{
        return {
            x: ()=>dy.toFloat()
        };
    }
};

},{"../kernel_names":"2CzXQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4b0CQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lrnGradConfig", ()=>lrnGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _localResponseNormalizationBackprop = require("../ops/local_response_normalization_backprop");
const lrnGradConfig = {
    kernelName: (0, _kernelNames.LRN),
    inputsToSave: [
        "x"
    ],
    outputsToSave: [
        true
    ],
    gradFunc: (dy, saved, attrs)=>{
        const [x, y] = saved;
        const { depthRadius , bias , alpha , beta  } = attrs;
        return {
            x: ()=>(0, _localResponseNormalizationBackprop.localResponseNormalizationBackprop)(x, y, dy, depthRadius, bias, alpha, beta)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/local_response_normalization_backprop":"cYgZw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cYgZw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "localResponseNormalizationBackprop", ()=>localResponseNormalizationBackprop);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _operation = require("./operation");
function localResponseNormalizationBackprop_(x, y, dy, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
    const forward = (backend)=>backend.LRNGrad(dy, x, y, depthRadius, bias, alpha, beta);
    const inputs = {
        x,
        y,
        dy
    };
    const attrs = {
        depthRadius,
        bias,
        alpha,
        beta
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.LRNBackprop), attrs);
}
const localResponseNormalizationBackprop = (0, _operation.op)({
    localResponseNormalizationBackprop_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iGiUV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxGradConfig", ()=>maxGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _axisUtil = require("../ops/axis_util");
var _reductionOpsUtil = require("../ops/reduction_ops_util");
var _transpose = require("../ops/transpose");
var _util = require("../util");
const maxGradConfig = {
    kernelName: (0, _kernelNames.Max),
    inputsToSave: [
        "x"
    ],
    outputsToSave: [
        true
    ],
    gradFunc: (dy, saved, attrs)=>{
        const maxAttrs = attrs;
        const { reductionIndices  } = maxAttrs;
        const [x, y] = saved;
        const origAxes = _util.parseAxisParam(reductionIndices, x.shape);
        const permutedAxes = _axisUtil.getAxesPermutation(origAxes, x.rank);
        const maxGrad = (0, _reductionOpsUtil.gradForMinAndMax)(dy, y, x, origAxes, permutedAxes);
        return {
            x: ()=>{
                let out = maxGrad["x"]();
                if (permutedAxes != null) out = (0, _transpose.transpose)(out);
                return out;
            }
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/axis_util":"1A9rc","../ops/reduction_ops_util":"eimRx","../ops/transpose":"5Lger","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Lger":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transpose", ()=>transpose);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.
 *
 * The returned `tf.Tensor`'s dimension `i` will correspond to the input
 * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,
 * where `n` is the rank of the input `tf.Tensor`. Hence by default, this
 * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
 *
 * a.transpose().print();  // or tf.transpose(a)
 * ```
 *
 * @param x The tensor to transpose.
 * @param perm The permutation of the dimensions of a.
 */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */ function transpose_(x, perm) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "transpose");
    if (perm == null) perm = $x.shape.map((s, i)=>i).reverse();
    _util.assert($x.rank === perm.length, ()=>`Error in transpose: rank of input ${$x.rank} ` + `must match length of perm ${perm}.`);
    perm.forEach((axis)=>{
        _util.assert(axis >= 0 && axis < $x.rank, ()=>`All entries in 'perm' must be between 0 and ${$x.rank - 1}` + ` but got ${perm}`);
    });
    if ($x.rank <= 1) return $x.clone();
    const attrs = {
        perm
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.transpose($x, perm), {
        x: $x
    }, null, "Transpose", attrs);
}
const transpose = (0, _operation.op)({
    transpose_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fYu6X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "oneHotGradConfig", ()=>oneHotGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _tensorOps = require("../ops/tensor_ops");
const oneHotGradConfig = {
    kernelName: (0, _kernelNames.OneHot),
    inputsToSave: [
        "indices"
    ],
    gradFunc: (dy, saved)=>{
        const indices = saved[0];
        return {
            indices: ()=>(0, _tensorOps.zeros)(indices.shape, "float32")
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ekOlT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "padV2GradConfig", ()=>padV2GradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
const padV2GradConfig = {
    kernelName: (0, _kernelNames.PadV2),
    inputsToSave: [
        "x"
    ],
    gradFunc: (dy, saved, attrs)=>{
        // Pad introduces values around the original tensor, so the gradient
        // slices the original shape out of the gradient.
        const x = saved[0];
        const { paddings  } = attrs;
        const begin = paddings.map((p)=>p[0]);
        return {
            x: ()=>dy.slice(begin, x.shape)
        };
    }
};

},{"../kernel_names":"2CzXQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dNlEj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spaceToBatchNDGradConfig", ()=>spaceToBatchNDGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _batchToSpaceNd = require("../ops/batch_to_space_nd");
const spaceToBatchNDGradConfig = {
    kernelName: (0, _kernelNames.SpaceToBatchND),
    gradFunc: (dy, saved, attrs)=>{
        const { blockShape , paddings  } = attrs;
        return {
            x: ()=>(0, _batchToSpaceNd.batchToSpaceND)(dy, blockShape, paddings)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/batch_to_space_nd":"fvVrh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fvVrh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchToSpaceND", ()=>batchToSpaceND);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of
 * shape `blockShape + [batch]`, interleaves these blocks back into the grid
 * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with
 * the same rank as the input. The spatial dimensions of this intermediate
 * result are then optionally cropped according to `crops` to produce the
 * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise
 * description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);
 * const blockShape = [2, 2];
 * const crops = [[0, 0], [0, 0]];
 *
 * x.batchToSpaceND(blockShape, crops).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.
 * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input
 * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required
 * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,
 * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,
 * x.shape[N-1]]`
 *
 * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /
 * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`
 * according to `crops` to produce the output of shape: `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],
 * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -
 * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function batchToSpaceND_(x, blockShape, crops) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchToSpaceND");
    const prod = blockShape.reduce((a, b)=>a * b);
    _util.assert($x.rank >= 1 + blockShape.length, ()=>`input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);
    _util.assert(crops.length === blockShape.length, ()=>`crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);
    _util.assert($x.shape[0] % prod === 0, ()=>`input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` + `the elements of blockShape ${blockShape.join(" * ")} === ${prod}`);
    const forward = (backend)=>{
        return backend.batchToSpaceND($x, blockShape, crops);
    };
    const inputs = {
        x: $x
    };
    const attrs = {
        blockShape,
        crops
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.BatchToSpaceND), attrs);
}
const batchToSpaceND = (0, _operation.op)({
    batchToSpaceND_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h9N2m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitVGradConfig", ()=>splitVGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _concat = require("../ops/concat");
const splitVGradConfig = {
    kernelName: (0, _kernelNames.SplitV),
    gradFunc: (dy, saved, attrs)=>{
        const { axis  } = attrs;
        return {
            x: ()=>(0, _concat.concat)(dy, axis)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/concat":"jfkcZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g9nWN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squareGradConfig", ()=>squareGradConfig);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _binaryOps = require("../ops/binary_ops");
const squareGradConfig = {
    kernelName: (0, _kernelNames.Square),
    inputsToSave: [
        "x"
    ],
    gradFunc: (dy, saved)=>{
        const [x] = saved;
        return {
            x: ()=>(0, _binaryOps.mul)(dy, (0, _binaryOps.mul)(x.toFloat(), 2))
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/binary_ops":"3wHWX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2DIzj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squaredDifferenceGradConfig", ()=>squaredDifferenceGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _binaryOps = require("../ops/binary_ops");
var _sub = require("../ops/sub");
var _tensorOps = require("../ops/tensor_ops");
const squaredDifferenceGradConfig = {
    kernelName: (0, _kernelNames.SquaredDifference),
    inputsToSave: [
        "a",
        "b"
    ],
    gradFunc: (dy, saved)=>{
        const [a, b] = saved;
        const two = (0, _tensorOps.scalar)(2);
        const derA = ()=>(0, _binaryOps.mul)(dy, (0, _binaryOps.mul)(two, (0, _sub.sub)(a, b)));
        const derB = ()=>(0, _binaryOps.mul)(dy, (0, _binaryOps.mul)(two, (0, _sub.sub)(b, a)));
        return {
            a: derA,
            b: derB
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/binary_ops":"3wHWX","../ops/sub":"mafuF","../ops/tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jStlB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subGradConfig", ()=>subGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _arrayOps = require("../ops/array_ops");
var _broadcastUtil = require("../ops/broadcast_util");
var _reductionOps = require("../ops/reduction_ops");
var _unaryOps = require("../ops/unary_ops");
const subGradConfig = {
    kernelName: (0, _kernelNames.Sub),
    inputsToSave: [
        "a",
        "b"
    ],
    gradFunc: (dy, saved)=>{
        const [a, b] = saved;
        const outShape = _broadcastUtil.assertAndGetBroadcastShape(a.shape, b.shape);
        const derA = ()=>{
            let res = dy;
            const reduceAxes = _broadcastUtil.getReductionAxes(a.shape, outShape);
            if (reduceAxes.length > 0) res = (0, _reductionOps.sum)(res, reduceAxes);
            return (0, _arrayOps.reshape)(res, a.shape);
        };
        const derB = ()=>{
            let res = dy;
            const reduceAxes = _broadcastUtil.getReductionAxes(b.shape, outShape);
            if (reduceAxes.length > 0) res = (0, _reductionOps.sum)(res, reduceAxes);
            return (0, _arrayOps.reshape)((0, _unaryOps.neg)(res), b.shape);
        };
        return {
            a: derA,
            b: derB
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/array_ops":"29MCO","../ops/broadcast_util":"kQqEF","../ops/reduction_ops":"hwfGu","../ops/unary_ops":"dAJBE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dHgyH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tileGradConfig", ()=>tileGradConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _add = require("../ops/add");
var _slice = require("../ops/slice");
var _tensorOps = require("../ops/tensor_ops");
const tileGradConfig = {
    kernelName: (0, _kernelNames.Tile),
    inputsToSave: [
        "x"
    ],
    gradFunc: (dy, saved, attrs)=>{
        const [x] = saved;
        const { reps  } = attrs;
        const derX = ()=>{
            let xGrad = (0, _tensorOps.zerosLike)(x);
            // TODO(cais): Maybe reduce memory footprint by avoiding repeated
            // slicing.
            if (x.rank === 1) for(let i = 0; i < reps[0]; ++i)xGrad = (0, _add.add)(xGrad, (0, _slice.slice)(dy, [
                i * x.shape[0]
            ], [
                x.shape[0]
            ]));
            else if (x.rank === 2) {
                for(let i1 = 0; i1 < reps[0]; ++i1)for(let j = 0; j < reps[1]; ++j)xGrad = (0, _add.add)(xGrad, (0, _slice.slice)(dy, [
                    i1 * x.shape[0],
                    j * x.shape[1]
                ], [
                    x.shape[0],
                    x.shape[1]
                ]));
            } else if (x.rank === 3) for(let i2 = 0; i2 < reps[0]; ++i2){
                for(let j1 = 0; j1 < reps[1]; ++j1)for(let k = 0; k < reps[2]; ++k)xGrad = (0, _add.add)(xGrad, (0, _slice.slice)(dy, [
                    i2 * x.shape[0],
                    j1 * x.shape[1],
                    k * x.shape[2]
                ], [
                    x.shape[0],
                    x.shape[1],
                    x.shape[2]
                ]));
            }
            else if (x.rank === 4) {
                for(let i3 = 0; i3 < reps[0]; ++i3)for(let j2 = 0; j2 < reps[1]; ++j2){
                    for(let k1 = 0; k1 < reps[2]; ++k1)for(let l = 0; l < reps[3]; ++l)xGrad = (0, _add.add)(xGrad, (0, _slice.slice)(dy, [
                        i3 * x.shape[0],
                        j2 * x.shape[1],
                        k1 * x.shape[2],
                        l * x.shape[3]
                    ], [
                        x.shape[0],
                        x.shape[1],
                        x.shape[2],
                        x.shape[3]
                    ]));
                }
            } else throw new Error(`Gradient for tile operation is not implemented for rank-` + `${x.rank} tensors yet.`);
            return xGrad;
        };
        return {
            x: derX
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/add":"i4ulI","../ops/slice":"ist4s","../ops/tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ist4s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice);
parcelHelpers.export(exports, "slice1d", ()=>slice1d);
parcelHelpers.export(exports, "slice2d", ()=>slice2d);
parcelHelpers.export(exports, "slice3d", ()=>slice3d);
parcelHelpers.export(exports, "slice4d", ()=>slice4d);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
var _pad = require("./pad");
var _sliceUtil = require("./slice_util");
/**
 * Extracts a 1D slice from 1D array starting at coordinates `begin` and is
 * of length `size`. See `slice` for details.
 */ function slice1d_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice1d");
    _util.assert($x.rank === 1, ()=>`slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);
    return slice($x, [
        begin
    ], [
        size
    ]);
}
/**
 * Extracts a 2D slice from a 2D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */ function slice2d_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice2d");
    _util.assert($x.rank === 2, ()=>`slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);
    return slice($x, begin, size);
}
/**
 * Extracts a 3D slice from a 3D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */ function slice3d_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice3d");
    _util.assert($x.rank === 3, ()=>`slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);
    return slice($x, begin, size);
}
/**
 * Extracts a 4D slice from a 4D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */ function slice4d_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice4d");
    _util.assert($x.rank === 4, ()=>`slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);
    return slice($x, begin, size);
}
/**
 * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`
 * and is of size `size`.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `x` is of the given rank:
 *   - `tf.slice1d`
 *   - `tf.slice2d`
 *   - `tf.slice3d`
 *   - `tf.slice4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.slice([1], [2]).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * x.slice([1, 0], [1, 2]).print();
 * ```
 * @param x The input `tf.Tensor` to slice from.
 * @param begin The coordinates to start the slice from. The length can be
 *     less than the rank of x - the rest of the axes will have implicit 0 as
 *     start. Can also be a single number, in which case it specifies the
 *     first axis.
 * @param size The size of the slice. The length can be less than the rank of
 *     x - the rest of the axes will have implicit -1. A value of -1 requests
 *     the rest of the dimensions in the axis. Can also be a single number,
 *     in which case it specifies the size of the first axis.
 */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */ function slice_(x, begin, size) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "slice");
    if ($x.rank === 0) throw new Error("Slicing scalar is not possible");
    // The following logic allows for more ergonomic calls.
    let begin_;
    if (typeof begin === "number") begin_ = [
        begin,
        ...new Array($x.rank - 1).fill(0)
    ];
    else if (begin.length < $x.rank) begin_ = begin.concat(new Array($x.rank - begin.length).fill(0));
    else begin_ = begin.slice();
    begin_.forEach((d)=>{
        _util.assert(d !== -1, ()=>"slice() does not support negative begin indexing.");
    });
    let size_;
    if (size == null) size_ = new Array($x.rank).fill(-1);
    else if (typeof size === "number") size_ = [
        size,
        ...new Array($x.rank - 1).fill(-1)
    ];
    else if (size.length < $x.rank) size_ = size.concat(new Array($x.rank - size.length).fill(-1));
    else size_ = size;
    size_ = size_.map((d, i)=>{
        if (d >= 0) return d;
        else {
            _util.assert(d === -1, ()=>`Negative size values should be exactly -1 but got ` + `${d} for the slice() size at index ${i}.`);
            return $x.shape[i] - begin_[i];
        }
    });
    _sliceUtil.assertParamsValid($x, begin_, size_);
    const inputShape = $x.shape;
    const grad = (dy)=>{
        // Create an Nx2 padding where the first column represents how many
        // zeros are prepended (at start) for each dimension, and the second
        // column indicates how many zeros are appended (at end).
        // The number of zeros to append is the shape of the input
        // elementwise-subtracted by both the begin vector and sizes vector.
        const paddings = [];
        for(let i = 0; i < dy.rank; i++)paddings.push([
            begin_[i],
            inputShape[i] - begin_[i] - size_[i]
        ]);
        return {
            x: ()=>(0, _pad.pad)(dy, paddings)
        };
    };
    const attrs = {
        begin: begin_,
        size: size_
    };
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.slice($x, begin_, size_), {
        x: $x
    }, grad, "Slice", attrs);
}
const slice = (0, _operation.op)({
    slice_
});
const slice1d = (0, _operation.op)({
    slice1d_
});
const slice2d = (0, _operation.op)({
    slice2d_
});
const slice3d = (0, _operation.op)({
    slice3d_
});
const slice4d = (0, _operation.op)({
    slice4d_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","./pad":"6hj7a","./slice_util":"3jgPu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6hj7a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad", ()=>pad);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Pads a `tf.Tensor` with a given value and paddings.
 *
 * This operation currently only implements the `CONSTANT` mode.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `paddings` is of given length.
 *   - `tf.pad1d`
 *   - `tf.pad2d`
 *   - `tf.pad3d`
 *   - `tf.pad4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.pad([[1, 2]]).print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * @param constantValue The pad value to use. Defaults to 0.
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function pad_(x, paddings, constantValue = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "pad");
    if ($x.rank === 0) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
    const forward = (backend, save)=>{
        save([
            $x
        ]);
        return backend.pad($x, paddings, constantValue);
    };
    const attrs = {
        paddings,
        constantValue
    };
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.PadV2), attrs);
}
const pad = (0, _operation.op)({
    pad_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3jgPu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertParamsValid", ()=>assertParamsValid);
/** Converts a binary mask to an array of axes. Used in stridedSlice(). */ parcelHelpers.export(exports, "maskToAxes", ()=>maskToAxes);
/** Computes the output shape given the strided slice params. */ parcelHelpers.export(exports, "computeOutShape", ()=>computeOutShape);
parcelHelpers.export(exports, "startForAxis", ()=>startForAxis);
parcelHelpers.export(exports, "stopForAxis", ()=>stopForAxis);
/**
 * Returns true if the slice occupies a continous set of elements in the
 * 'flat' space.
 */ parcelHelpers.export(exports, "isSliceContinous", ()=>isSliceContinous);
parcelHelpers.export(exports, "computeFlatOffset", ()=>computeFlatOffset);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function assertParamsValid(input, begin, size) {
    _util.assert(input.rank === begin.length, ()=>`Error in slice${input.rank}D: Length of begin ${begin} must ` + `match the rank of the array (${input.rank}).`);
    _util.assert(input.rank === size.length, ()=>`Error in slice${input.rank}D: Length of size ${size} must ` + `match the rank of the array (${input.rank}).`);
    for(let i = 0; i < input.rank; ++i)_util.assert(begin[i] + size[i] <= input.shape[i], ()=>`Error in slice${input.rank}D: begin[${i}] + size[${i}] ` + `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);
}
function maskToAxes(mask) {
    const axes = [];
    let axis = 0;
    while(mask > 0){
        if (mask & 1) axes.push(axis);
        mask /= 2;
        axis++;
    }
    return axes;
}
function computeOutShape(begin, end, strides) {
    const size = [];
    for(let axis = 0; axis < begin.length; axis++)size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);
    return size;
}
function startForAxis(beginMask, startIndices, strides, inputShape, axis) {
    // Begin with the specified index
    let start = startIndices[axis];
    const stride = strides[axis] || 1;
    // Check the axis bit from right of beginMask or the begin index is not set
    // for the axis.
    if (beginMask & 1 << axis || start == null) {
        if (stride > 0) // Forward iteration - use the first element. These values will get
        // clamped below (Note: We could have set them to 0 and axis_size-1, but
        // use lowest() and max() to maintain symmetry with StopForAxis())
        start = Number.MIN_SAFE_INTEGER;
        else // Backward iteration - use the last element.
        start = Number.MAX_SAFE_INTEGER;
    }
    // Handle negative indices
    const axisSize = inputShape[axis];
    if (start < 0) start += axisSize;
    // Clamping
    start = _util.clamp(0, start, axisSize - 1);
    return start;
}
function stopForAxis(endMask, stopIndices, strides, inputShape, axis) {
    // Begin with the specified index
    let stop = stopIndices[axis];
    const stride = strides[axis] || 1;
    // Check the axis bit from right of endMask or if the stop index is not set
    // for this axis.
    if (endMask & 1 << axis || stop == null) {
        if (stride > 0) // Forward iteration - use the last element. These values will get
        // clamped below
        stop = Number.MAX_SAFE_INTEGER;
        else // Backward iteration - use the first element.
        stop = Number.MIN_SAFE_INTEGER;
    }
    // Handle negative indices
    const axisSize = inputShape[axis];
    if (stop < 0) stop += axisSize;
    // Clamping
    // Because the end index points one past the last element, we need slightly
    // different clamping ranges depending on the direction.
    if (stride > 0) // Forward iteration
    stop = _util.clamp(0, stop, axisSize);
    else // Backward iteration
    stop = _util.clamp(-1, stop, axisSize - 1);
    return stop;
}
function isSliceContinous(shape, begin, size) {
    // Index of the first axis that has size > 1.
    let firstNonOneAxis = size.length;
    for(let i = 0; i < size.length; i++)if (size[i] > 1) {
        firstNonOneAxis = i;
        break;
    }
    for(let i1 = firstNonOneAxis + 1; i1 < size.length; i1++){
        if (begin[i1] > 0 || size[i1] !== shape[i1]) return false;
    }
    return true;
}
function computeFlatOffset(begin, strides) {
    let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;
    for(let i = 0; i < begin.length - 1; i++)flatOffset += begin[i] * strides[i];
    return flatOffset;
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jS5E0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transposeGradConfig", ()=>transposeGradConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelNames = require("../kernel_names");
var _axisUtil = require("../ops/axis_util");
var _transpose = require("../ops/transpose");
const transposeGradConfig = {
    kernelName: (0, _kernelNames.Transpose),
    gradFunc: (dy, saved, attrs)=>{
        const transposeAttrs = attrs;
        const { perm  } = transposeAttrs;
        const undoPerm = _axisUtil.getUndoAxesPermutation(perm);
        return {
            x: ()=>(0, _transpose.transpose)(dy, undoPerm)
        };
    }
};

},{"../kernel_names":"2CzXQ","../ops/axis_util":"1A9rc","../ops/transpose":"5Lger","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lIuHs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PlatformBrowser", ()=>PlatformBrowser);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("../environment");
class PlatformBrowser {
    fetch(path, init) {
        return fetch(path, init);
    }
    now() {
        return performance.now();
    }
    encode(text, encoding) {
        if (encoding !== "utf-8" && encoding !== "utf8") throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);
        if (this.textEncoder == null) this.textEncoder = new TextEncoder();
        return this.textEncoder.encode(text);
    }
    decode(bytes, encoding) {
        return new TextDecoder(encoding).decode(bytes);
    }
}
if ((0, _environment.env)().get("IS_BROWSER")) (0, _environment.env)().setPlatform("browser", new PlatformBrowser());

},{"../environment":"8tlxC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ydqs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getNodeFetch", ()=>getNodeFetch);
// These getters and setters are for testing so we don't export a mutable
// variable.
parcelHelpers.export(exports, "resetSystemFetch", ()=>resetSystemFetch);
parcelHelpers.export(exports, "setSystemFetch", ()=>setSystemFetch);
parcelHelpers.export(exports, "getSystemFetch", ()=>getSystemFetch);
parcelHelpers.export(exports, "PlatformNode", ()=>PlatformNode);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("../environment");
var process = require("process");
const getNodeFetch = {
    // tslint:disable-next-line:no-require-imports
    importFetch: ()=>require("node-fetch")
};
let systemFetch;
function resetSystemFetch() {
    systemFetch = null;
}
function setSystemFetch(fetchFn) {
    systemFetch = fetchFn;
}
function getSystemFetch() {
    return systemFetch;
}
class PlatformNode {
    constructor(){
        // tslint:disable-next-line:no-require-imports
        this.util = require("util");
        // According to the spec, the built-in encoder can do only UTF-8 encoding.
        // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder
        this.textEncoder = new this.util.TextEncoder();
    }
    fetch(path, requestInits) {
        if ((0, _environment.env)().global.fetch != null) return (0, _environment.env)().global.fetch(path, requestInits);
        if (systemFetch == null) systemFetch = getNodeFetch.importFetch();
        return systemFetch(path, requestInits);
    }
    now() {
        const time = process.hrtime();
        return time[0] * 1000 + time[1] / 1000000;
    }
    encode(text, encoding) {
        if (encoding !== "utf-8" && encoding !== "utf8") throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);
        return this.textEncoder.encode(text);
    }
    decode(bytes, encoding) {
        if (bytes.length === 0) return "";
        return new this.util.TextDecoder(encoding).decode(bytes);
    }
}
if ((0, _environment.env)().get("IS_NODE")) (0, _environment.env)().setPlatform("node", new PlatformNode());

},{"../environment":"8tlxC","process":"d5jf4","node-fetch":"jhUEF","util":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"2y2Ef":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "copyModel", ()=>(0, _modelManagement.copyModel));
parcelHelpers.export(exports, "listModels", ()=>(0, _modelManagement.listModels));
parcelHelpers.export(exports, "moveModel", ()=>(0, _modelManagement.moveModel));
parcelHelpers.export(exports, "removeModel", ()=>(0, _modelManagement.removeModel));
parcelHelpers.export(exports, "browserFiles", ()=>(0, _browserFiles.browserFiles));
parcelHelpers.export(exports, "browserHTTPRequest", ()=>(0, _http.browserHTTPRequest));
parcelHelpers.export(exports, "concatenateArrayBuffers", ()=>(0, _ioUtils.concatenateArrayBuffers));
parcelHelpers.export(exports, "decodeWeights", ()=>(0, _ioUtils.decodeWeights));
parcelHelpers.export(exports, "encodeWeights", ()=>(0, _ioUtils.encodeWeights));
parcelHelpers.export(exports, "fromMemory", ()=>(0, _passthrough.fromMemory));
parcelHelpers.export(exports, "getLoadHandlers", ()=>(0, _routerRegistry.getLoadHandlers));
parcelHelpers.export(exports, "getModelArtifactsInfoForJSON", ()=>(0, _ioUtils.getModelArtifactsInfoForJSON));
parcelHelpers.export(exports, "getSaveHandlers", ()=>(0, _routerRegistry.getSaveHandlers));
parcelHelpers.export(exports, "http", ()=>(0, _http.http));
parcelHelpers.export(exports, "isHTTPScheme", ()=>(0, _http.isHTTPScheme));
parcelHelpers.export(exports, "loadWeights", ()=>(0, _weightsLoader.loadWeights));
parcelHelpers.export(exports, "registerLoadRouter", ()=>(0, _routerRegistry.registerLoadRouter));
parcelHelpers.export(exports, "registerSaveRouter", ()=>(0, _routerRegistry.registerSaveRouter));
parcelHelpers.export(exports, "weightsLoaderFactory", ()=>(0, _weightsLoader.weightsLoaderFactory));
parcelHelpers.export(exports, "withSaveHandler", ()=>(0, _passthrough.withSaveHandler));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Importing local_storage and indexed_db is necessary for the routers to be
// registered.
var _indexedDb = require("./indexed_db");
var _localStorage = require("./local_storage");
var _browserFiles = require("./browser_files");
var _http = require("./http");
var _ioUtils = require("./io_utils");
var _passthrough = require("./passthrough");
var _routerRegistry = require("./router_registry");
var _weightsLoader = require("./weights_loader");
var _modelManagement = require("./model_management");

},{"./indexed_db":"jCoGm","./local_storage":"fXcld","./browser_files":"l5Cns","./http":"ihQHl","./io_utils":"iRZ4M","./passthrough":"9R8iF","./router_registry":"76AgW","./weights_loader":"hG5HD","./model_management":"d8VhK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jCoGm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Delete the entire database for tensorflow.js, including the models store.
 */ parcelHelpers.export(exports, "deleteDatabase", ()=>deleteDatabase);
/**
 * IOHandler subclass: Browser IndexedDB.
 *
 * See the doc string of `browserIndexedDB` for more details.
 */ parcelHelpers.export(exports, "BrowserIndexedDB", ()=>BrowserIndexedDB);
parcelHelpers.export(exports, "indexedDBRouter", ()=>indexedDBRouter);
/**
 * Creates a browser IndexedDB IOHandler for saving and loading models.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save('indexeddb://MyModel'));
 * console.log(saveResult);
 * ```
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),
 *   which can be used with, e.g., `tf.Model.save`.
 */ parcelHelpers.export(exports, "browserIndexedDB", ()=>browserIndexedDB);
parcelHelpers.export(exports, "BrowserIndexedDBManager", ()=>BrowserIndexedDBManager);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("../environment");
var _ioUtils = require("./io_utils");
var _modelManagement = require("./model_management");
var _routerRegistry = require("./router_registry");
const DATABASE_NAME = "tensorflowjs";
const DATABASE_VERSION = 1;
// Model data and ModelArtifactsInfo (metadata) are stored in two separate
// stores for efficient access of the list of stored models and their metadata.
// 1. The object store for model data: topology, weights and weight manifests.
const MODEL_STORE_NAME = "models_store";
// 2. The object store for ModelArtifactsInfo, including meta-information such
//    as the type of topology (JSON vs binary), byte size of the topology, byte
//    size of the weights, etc.
const INFO_STORE_NAME = "model_info_store";
async function deleteDatabase() {
    const idbFactory = getIndexedDBFactory();
    return new Promise((resolve, reject)=>{
        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);
        deleteRequest.onsuccess = ()=>resolve();
        deleteRequest.onerror = (error)=>reject(error);
    });
}
function getIndexedDBFactory() {
    if (!(0, _environment.env)().getBool("IS_BROWSER")) // TODO(cais): Add more info about what IOHandler subtypes are available.
    //   Maybe point to a doc page on the web and/or automatically determine
    //   the available IOHandlers and print them in the error message.
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
    // tslint:disable-next-line:no-any
    const theWindow = window || self;
    const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;
    if (factory == null) throw new Error("The current browser does not appear to support IndexedDB.");
    return factory;
}
function setUpDatabase(openRequest) {
    const db = openRequest.result;
    db.createObjectStore(MODEL_STORE_NAME, {
        keyPath: "modelPath"
    });
    db.createObjectStore(INFO_STORE_NAME, {
        keyPath: "modelPath"
    });
}
class BrowserIndexedDB {
    constructor(modelPath){
        this.indexedDB = getIndexedDBFactory();
        if (modelPath == null || !modelPath) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
        this.modelPath = modelPath;
    }
    async save(modelArtifacts) {
        // TODO(cais): Support saving GraphDef models.
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
        return this.databaseAction(this.modelPath, modelArtifacts);
    }
    async load() {
        return this.databaseAction(this.modelPath);
    }
    /**
     * Perform database action to put model artifacts into or read model artifacts
     * from IndexedDB object store.
     *
     * Whether the action is put or get depends on whether `modelArtifacts` is
     * specified. If it is specified, the action will be put; otherwise the action
     * will be get.
     *
     * @param modelPath A unique string path for the model.
     * @param modelArtifacts If specified, it will be the model artifacts to be
     *   stored in IndexedDB.
     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
     *   of `ModelArtifacts`, if the action is get.
     */ databaseAction(modelPath, modelArtifacts) {
        return new Promise((resolve, reject)=>{
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = ()=>setUpDatabase(openRequest);
            openRequest.onsuccess = ()=>{
                const db = openRequest.result;
                if (modelArtifacts == null) {
                    // Read model out from object store.
                    const modelTx = db.transaction(MODEL_STORE_NAME, "readonly");
                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                    const getRequest = modelStore.get(this.modelPath);
                    getRequest.onsuccess = ()=>{
                        if (getRequest.result == null) {
                            db.close();
                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` + `in IndexedDB.`));
                        } else resolve(getRequest.result.modelArtifacts);
                    };
                    getRequest.onerror = (error)=>{
                        db.close();
                        return reject(getRequest.error);
                    };
                    modelTx.oncomplete = ()=>db.close();
                } else {
                    // Put model into object store.
                    const modelArtifactsInfo = (0, _ioUtils.getModelArtifactsInfoForJSON)(modelArtifacts);
                    // First, put ModelArtifactsInfo into info store.
                    const infoTx = db.transaction(INFO_STORE_NAME, "readwrite");
                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);
                    const putInfoRequest = infoStore.put({
                        modelPath: this.modelPath,
                        modelArtifactsInfo
                    });
                    let modelTx1;
                    putInfoRequest.onsuccess = ()=>{
                        // Second, put model data into model store.
                        modelTx1 = db.transaction(MODEL_STORE_NAME, "readwrite");
                        const modelStore = modelTx1.objectStore(MODEL_STORE_NAME);
                        const putModelRequest = modelStore.put({
                            modelPath: this.modelPath,
                            modelArtifacts,
                            modelArtifactsInfo
                        });
                        putModelRequest.onsuccess = ()=>resolve({
                                modelArtifactsInfo
                            });
                        putModelRequest.onerror = (error)=>{
                            // If the put-model request fails, roll back the info entry as
                            // well.
                            infoStore = infoTx.objectStore(INFO_STORE_NAME);
                            const deleteInfoRequest = infoStore.delete(this.modelPath);
                            deleteInfoRequest.onsuccess = ()=>{
                                db.close();
                                return reject(putModelRequest.error);
                            };
                            deleteInfoRequest.onerror = (error)=>{
                                db.close();
                                return reject(putModelRequest.error);
                            };
                        };
                    };
                    putInfoRequest.onerror = (error)=>{
                        db.close();
                        return reject(putInfoRequest.error);
                    };
                    infoTx.oncomplete = ()=>{
                        if (modelTx1 == null) db.close();
                        else modelTx1.oncomplete = ()=>db.close();
                    };
                }
            };
            openRequest.onerror = (error)=>reject(openRequest.error);
        });
    }
}
BrowserIndexedDB.URL_SCHEME = "indexeddb://";
const indexedDBRouter = (url)=>{
    if (!(0, _environment.env)().getBool("IS_BROWSER")) return null;
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));
        else return null;
    }
};
(0, _routerRegistry.IORouterRegistry).registerSaveRouter(indexedDBRouter);
(0, _routerRegistry.IORouterRegistry).registerLoadRouter(indexedDBRouter);
function browserIndexedDB(modelPath) {
    return new BrowserIndexedDB(modelPath);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;
}
class BrowserIndexedDBManager {
    constructor(){
        this.indexedDB = getIndexedDBFactory();
    }
    async listModels() {
        return new Promise((resolve, reject)=>{
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = ()=>setUpDatabase(openRequest);
            openRequest.onsuccess = ()=>{
                const db = openRequest.result;
                const tx = db.transaction(INFO_STORE_NAME, "readonly");
                const store = tx.objectStore(INFO_STORE_NAME);
                // tslint:disable:max-line-length
                // Need to cast `store` as `any` here because TypeScript's DOM
                // library does not have the `getAll()` method even though the
                // method is supported in the latest version of most mainstream
                // browsers:
                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
                // tslint:enable:max-line-length
                // tslint:disable-next-line:no-any
                const getAllInfoRequest = store.getAll();
                getAllInfoRequest.onsuccess = ()=>{
                    const out = {};
                    for (const item of getAllInfoRequest.result)out[item.modelPath] = item.modelArtifactsInfo;
                    resolve(out);
                };
                getAllInfoRequest.onerror = (error)=>{
                    db.close();
                    return reject(getAllInfoRequest.error);
                };
                tx.oncomplete = ()=>db.close();
            };
            openRequest.onerror = (error)=>reject(openRequest.error);
        });
    }
    async removeModel(path) {
        path = maybeStripScheme(path);
        return new Promise((resolve, reject)=>{
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = ()=>setUpDatabase(openRequest);
            openRequest.onsuccess = ()=>{
                const db = openRequest.result;
                const infoTx = db.transaction(INFO_STORE_NAME, "readwrite");
                const infoStore = infoTx.objectStore(INFO_STORE_NAME);
                const getInfoRequest = infoStore.get(path);
                let modelTx;
                getInfoRequest.onsuccess = ()=>{
                    if (getInfoRequest.result == null) {
                        db.close();
                        return reject(new Error(`Cannot find model with path '${path}' ` + `in IndexedDB.`));
                    } else {
                        // First, delete the entry in the info store.
                        const deleteInfoRequest = infoStore.delete(path);
                        const deleteModelData = ()=>{
                            // Second, delete the entry in the model store.
                            modelTx = db.transaction(MODEL_STORE_NAME, "readwrite");
                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                            const deleteModelRequest = modelStore.delete(path);
                            deleteModelRequest.onsuccess = ()=>resolve(getInfoRequest.result.modelArtifactsInfo);
                            deleteModelRequest.onerror = (error)=>reject(getInfoRequest.error);
                        };
                        // Proceed with deleting model data regardless of whether deletion
                        // of info data succeeds or not.
                        deleteInfoRequest.onsuccess = deleteModelData;
                        deleteInfoRequest.onerror = (error)=>{
                            deleteModelData();
                            db.close();
                            return reject(getInfoRequest.error);
                        };
                    }
                };
                getInfoRequest.onerror = (error)=>{
                    db.close();
                    return reject(getInfoRequest.error);
                };
                infoTx.oncomplete = ()=>{
                    if (modelTx == null) db.close();
                    else modelTx.oncomplete = ()=>db.close();
                };
            };
            openRequest.onerror = (error)=>reject(openRequest.error);
        });
    }
}
if ((0, _environment.env)().getBool("IS_BROWSER")) // Wrap the construction and registration, to guard against browsers that
// don't support Local Storage.
try {
    (0, _modelManagement.ModelStoreManagerRegistry).registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());
} catch (err) {}

},{"../environment":"8tlxC","./io_utils":"iRZ4M","./model_management":"d8VhK","./router_registry":"76AgW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRZ4M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Encode a map from names to weight values as an ArrayBuffer, along with an
 * `Array` of `WeightsManifestEntry` as specification of the encoded weights.
 *
 * This function does not perform sharding.
 *
 * This function is the reverse of `decodeWeights`.
 *
 * @param tensors A map ("dict") from names to tensors.
 * @param group Group to which the weights belong (optional).
 * @returns A `Promise` of
 *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s
 *     concatenated.
 *   - An `Array` of `WeightManifestEntry`s, carrying information including
 *     tensor names, `dtype`s and shapes.
 * @throws Error: on unsupported tensor `dtype`.
 */ parcelHelpers.export(exports, "encodeWeights", ()=>encodeWeights);
/**
 * Decode flat ArrayBuffer as weights.
 *
 * This function does not handle sharding.
 *
 * This function is the reverse of `encodeWeights`.
 *
 * @param buffer A flat ArrayBuffer carrying the binary values of the tensors
 *   concatenated in the order specified in `specs`.
 * @param specs Specifications of the names, dtypes and shapes of the tensors
 *   whose value are encoded by `buffer`.
 * @return A map from tensor name to tensor value, with the names corresponding
 *   to names in `specs`.
 * @throws Error, if any of the tensors has unsupported dtype.
 */ parcelHelpers.export(exports, "decodeWeights", ()=>decodeWeights);
/**
 * Concatenate TypedArrays into an ArrayBuffer.
 */ parcelHelpers.export(exports, "concatenateTypedArrays", ()=>concatenateTypedArrays);
/**
 * Calculate the byte length of a JavaScript string.
 *
 * Note that a JavaScript string can contain wide characters, therefore the
 * length of the string is not necessarily equal to the byte length.
 *
 * @param str Input string.
 * @returns Byte length.
 */ parcelHelpers.export(exports, "stringByteLength", ()=>stringByteLength);
/**
 * Encode an ArrayBuffer as a base64 encoded string.
 *
 * @param buffer `ArrayBuffer` to be converted.
 * @returns A string that base64-encodes `buffer`.
 */ parcelHelpers.export(exports, "arrayBufferToBase64String", ()=>arrayBufferToBase64String);
/**
 * Decode a base64 string as an ArrayBuffer.
 *
 * @param str Base64 string.
 * @returns Decoded `ArrayBuffer`.
 */ parcelHelpers.export(exports, "base64StringToArrayBuffer", ()=>base64StringToArrayBuffer);
/**
 * Concatenate a number of ArrayBuffers into one.
 *
 * @param buffers A number of array buffers to concatenate.
 * @returns Result of concatenating `buffers` in order.
 */ parcelHelpers.export(exports, "concatenateArrayBuffers", ()=>concatenateArrayBuffers);
/**
 * Get the basename of a path.
 *
 * Behaves in a way analogous to Linux's basename command.
 *
 * @param path
 */ parcelHelpers.export(exports, "basename", ()=>basename);
/**
 * Populate ModelArtifactsInfo fields for a model with JSON topology.
 * @param modelArtifacts
 * @returns A ModelArtifactsInfo object.
 */ parcelHelpers.export(exports, "getModelArtifactsInfoForJSON", ()=>getModelArtifactsInfoForJSON);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorOps = require("../ops/tensor_ops");
var _util = require("../util");
var _types = require("./types");
var Buffer = require("buffer").Buffer;
/** Number of bytes reserved for the length of the string. (32bit integer). */ const NUM_BYTES_STRING_LENGTH = 4;
async function encodeWeights(tensors, group) {
    // TODO(adarob, cais): Support quantization.
    const specs = [];
    const dataPromises = [];
    const names = Array.isArray(tensors) ? tensors.map((tensor)=>tensor.name) : Object.keys(tensors);
    for(let i = 0; i < names.length; ++i){
        const name = names[i];
        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];
        if (t.dtype !== "float32" && t.dtype !== "int32" && t.dtype !== "bool" && t.dtype !== "string") throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);
        const spec = {
            name,
            shape: t.shape,
            dtype: t.dtype
        };
        if (t.dtype === "string") {
            const utf8bytes = new Promise(async (resolve)=>{
                const vals = await t.bytes();
                const totalNumBytes = vals.reduce((p, c)=>p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;
                const bytes = new Uint8Array(totalNumBytes);
                let offset = 0;
                for(let i = 0; i < vals.length; i++){
                    const val = vals[i];
                    const bytesOfLength = new Uint8Array(new Uint32Array([
                        val.length
                    ]).buffer);
                    bytes.set(bytesOfLength, offset);
                    offset += NUM_BYTES_STRING_LENGTH;
                    bytes.set(val, offset);
                    offset += val.length;
                }
                resolve(bytes);
            });
            dataPromises.push(utf8bytes);
        } else dataPromises.push(t.data());
        if (group != null) spec.group = group;
        specs.push(spec);
    }
    const tensorValues = await Promise.all(dataPromises);
    return {
        data: concatenateTypedArrays(tensorValues),
        specs
    };
}
function decodeWeights(buffer, specs) {
    // TODO(adarob, cais): Support quantization.
    const out = {};
    let offset = 0;
    for (const spec of specs){
        const name = spec.name;
        const dtype = spec.dtype;
        const shape = spec.shape;
        const size = (0, _util.sizeFromShape)(shape);
        let values;
        if ("quantization" in spec) {
            const quantization = spec.quantization;
            if (quantization.dtype !== "uint8" && quantization.dtype !== "uint16") throw new Error(`Weight ${spec.name} has unknown ` + `quantization dtype ${quantization.dtype}. ` + `Supported quantization dtypes are: 'uint8' and 'uint16'.`);
            const quantizationSizeFactor = (0, _types.DTYPE_VALUE_SIZE_MAP)[quantization.dtype];
            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);
            const quantizedArray = quantization.dtype === "uint8" ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);
            if (dtype === "float32") {
                values = new Float32Array(quantizedArray.length);
                for(let i = 0; i < quantizedArray.length; i++){
                    const v = quantizedArray[i];
                    values[i] = v * quantization.scale + quantization.min;
                }
            } else if (dtype === "int32") {
                values = new Int32Array(quantizedArray.length);
                for(let i1 = 0; i1 < quantizedArray.length; i1++){
                    const v1 = quantizedArray[i1];
                    values[i1] = Math.round(v1 * quantization.scale + quantization.min);
                }
            } else throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
            offset += size * quantizationSizeFactor;
        } else if (dtype === "string") {
            const size1 = (0, _util.sizeFromShape)(spec.shape);
            values = [];
            for(let i2 = 0; i2 < size1; i2++){
                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];
                offset += NUM_BYTES_STRING_LENGTH;
                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));
                values.push(bytes);
                offset += byteLength;
            }
        } else {
            const dtypeFactor = (0, _types.DTYPE_VALUE_SIZE_MAP)[dtype];
            const byteBuffer1 = buffer.slice(offset, offset + size * dtypeFactor);
            if (dtype === "float32") values = new Float32Array(byteBuffer1);
            else if (dtype === "int32") values = new Int32Array(byteBuffer1);
            else if (dtype === "bool") values = new Uint8Array(byteBuffer1);
            else throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
            offset += size * dtypeFactor;
        }
        out[name] = (0, _tensorOps.tensor)(values, shape, dtype);
    }
    return out;
}
function concatenateTypedArrays(xs) {
    // TODO(adarob, cais): Support quantization.
    if (xs === null) throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);
    let totalByteLength = 0;
    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'
    // can have a different byte length from that of the `TypedArray` itself,
    // for example, when the `TypedArray` is created from an offset in an
    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match
    // the `TypedArray` in byte length. If an element of `xs` does not show
    // this property, a new `TypedArray` that satisfy this property will be
    // constructed and pushed into `normalizedXs`.
    const normalizedXs = [];
    xs.forEach((x)=>{
        totalByteLength += x.byteLength;
        // tslint:disable:no-any
        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));
        if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);
    // tslint:enable:no-any
    });
    const y = new Uint8Array(totalByteLength);
    let offset = 0;
    normalizedXs.forEach((x)=>{
        y.set(new Uint8Array(x.buffer), offset);
        offset += x.byteLength;
    });
    return y.buffer;
}
// Use Buffer on Node.js instead of Blob/atob/btoa
const useNodeBuffer = typeof Buffer !== "undefined" && (typeof Blob === "undefined" || typeof atob === "undefined" || typeof btoa === "undefined");
function stringByteLength(str) {
    if (useNodeBuffer) return Buffer.byteLength(str);
    return new Blob([
        str
    ]).size;
}
function arrayBufferToBase64String(buffer) {
    if (useNodeBuffer) return Buffer.from(buffer).toString("base64");
    const buf = new Uint8Array(buffer);
    let s = "";
    for(let i = 0, l = buf.length; i < l; i++)s += String.fromCharCode(buf[i]);
    return btoa(s);
}
function base64StringToArrayBuffer(str) {
    if (useNodeBuffer) {
        const buf = Buffer.from(str, "base64");
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    }
    const s = atob(str);
    const buffer = new Uint8Array(s.length);
    for(let i = 0; i < s.length; ++i)buffer.set([
        s.charCodeAt(i)
    ], i);
    return buffer.buffer;
}
function concatenateArrayBuffers(buffers) {
    if (buffers.length === 1) return buffers[0];
    let totalByteLength = 0;
    buffers.forEach((buffer)=>{
        totalByteLength += buffer.byteLength;
    });
    const temp = new Uint8Array(totalByteLength);
    let offset = 0;
    buffers.forEach((buffer)=>{
        temp.set(new Uint8Array(buffer), offset);
        offset += buffer.byteLength;
    });
    return temp.buffer;
}
function basename(path) {
    const SEPARATOR = "/";
    path = path.trim();
    while(path.endsWith(SEPARATOR))path = path.slice(0, path.length - 1);
    const items = path.split(SEPARATOR);
    return items[items.length - 1];
}
function getModelArtifactsInfoForJSON(modelArtifacts) {
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
    return {
        dateSaved: new Date(),
        modelTopologyType: "JSON",
        modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),
        weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),
        weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength
    };
}

},{"../ops/tensor_ops":"1qbPi","../util":"9v6Fb","./types":"2qT38","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2qT38":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DTYPE_VALUE_SIZE_MAP", ()=>DTYPE_VALUE_SIZE_MAP);
const DTYPE_VALUE_SIZE_MAP = {
    "float32": 4,
    "int32": 4,
    "uint16": 2,
    "uint8": 1,
    "bool": 1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("base64-js");
const ieee754 = require("ieee754");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"d8VhK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModelStoreManagerRegistry", ()=>ModelStoreManagerRegistry);
parcelHelpers.export(exports, "moveModel", ()=>moveModel);
parcelHelpers.export(exports, "copyModel", ()=>copyModel);
parcelHelpers.export(exports, "removeModel", ()=>removeModel);
parcelHelpers.export(exports, "listModels", ()=>listModels);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Classes and functions for model management across multiple storage mediums.
 *
 * Supported client actions:
 * - Listing models on all registered storage mediums.
 * - Remove model by URL from any registered storage mediums, by using URL
 *   string.
 * - Moving or copying model from one path to another in the same medium or from
 *   one medium to another, by using URL strings.
 */ var _util = require("../util");
var _routerRegistry = require("./router_registry");
const URL_SCHEME_SUFFIX = "://";
class ModelStoreManagerRegistry {
    constructor(){
        this.managers = {};
    }
    static getInstance() {
        if (ModelStoreManagerRegistry.instance == null) ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();
        return ModelStoreManagerRegistry.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */ static registerManager(scheme, manager) {
        (0, _util.assert)(scheme != null, ()=>"scheme must not be undefined or null.");
        if (scheme.endsWith(URL_SCHEME_SUFFIX)) scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));
        (0, _util.assert)(scheme.length > 0, ()=>"scheme must not be an empty string.");
        const registry = ModelStoreManagerRegistry.getInstance();
        (0, _util.assert)(registry.managers[scheme] == null, ()=>`A model store manager is already registered for scheme '${scheme}'.`);
        registry.managers[scheme] = manager;
    }
    static getManager(scheme) {
        const manager = this.getInstance().managers[scheme];
        if (manager == null) throw new Error(`Cannot find model manager for scheme '${scheme}'`);
        return manager;
    }
    static getSchemes() {
        return Object.keys(this.getInstance().managers);
    }
}
/**
 * Helper method for parsing a URL string into a scheme and a path.
 *
 * @param url E.g., 'localstorage://my-model'
 * @returns A dictionary with two fields: scheme and path.
 *   Scheme: e.g., 'localstorage' in the example above.
 *   Path: e.g., 'my-model' in the example above.
 */ function parseURL(url) {
    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) throw new Error(`The url string provided does not contain a scheme. ` + `Supported schemes are: ` + `${ModelStoreManagerRegistry.getSchemes().join(",")}`);
    return {
        scheme: url.split(URL_SCHEME_SUFFIX)[0],
        path: url.split(URL_SCHEME_SUFFIX)[1]
    };
}
async function cloneModelInternal(sourceURL, destURL, deleteSource = false) {
    (0, _util.assert)(sourceURL !== destURL, ()=>`Old path and new path are the same: '${sourceURL}'`);
    const loadHandlers = (0, _routerRegistry.IORouterRegistry).getLoadHandlers(sourceURL);
    (0, _util.assert)(loadHandlers.length > 0, ()=>`Copying failed because no load handler is found for source URL ${sourceURL}.`);
    (0, _util.assert)(loadHandlers.length < 2, ()=>`Copying failed because more than one (${loadHandlers.length}) ` + `load handlers for source URL ${sourceURL}.`);
    const loadHandler = loadHandlers[0];
    const saveHandlers = (0, _routerRegistry.IORouterRegistry).getSaveHandlers(destURL);
    (0, _util.assert)(saveHandlers.length > 0, ()=>`Copying failed because no save handler is found for destination ` + `URL ${destURL}.`);
    (0, _util.assert)(saveHandlers.length < 2, ()=>`Copying failed because more than one (${loadHandlers.length}) ` + `save handlers for destination URL ${destURL}.`);
    const saveHandler = saveHandlers[0];
    const sourceScheme = parseURL(sourceURL).scheme;
    const sourcePath = parseURL(sourceURL).path;
    const sameMedium = sourceScheme === parseURL(sourceURL).scheme;
    const modelArtifacts = await loadHandler.load();
    // If moving within the same storage medium, remove the old model as soon as
    // the loading is done. Without doing this, it is possible that the combined
    // size of the two models will cause the cloning to fail.
    if (deleteSource && sameMedium) await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);
    const saveResult = await saveHandler.save(modelArtifacts);
    // If moving between mediums, the deletion is done after the save succeeds.
    // This guards against the case in which saving to the destination medium
    // fails.
    if (deleteSource && !sameMedium) await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);
    return saveResult.modelArtifactsInfo;
}
/**
 * List all models stored in registered storage mediums.
 *
 * For a web browser environment, the registered mediums are Local Storage and
 * IndexedDB.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @returns A `Promise` of a dictionary mapping URLs of existing models to
 * their model artifacts info. URLs include medium-specific schemes, e.g.,
 *   'indexeddb://my/model/1'. Model artifacts info include type of the
 * model's topology, byte sizes of the topology, weights, etc.
 */ /**
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ async function listModels() {
    const schemes = ModelStoreManagerRegistry.getSchemes();
    const out = {};
    for (const scheme of schemes){
        const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();
        for(const path in schemeOut){
            const url = scheme + URL_SCHEME_SUFFIX + path;
            out[url] = schemeOut[path];
        }
    }
    return out;
}
/**
 * Remove a model specified by URL from a reigstered storage medium.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @param url A URL to a stored model, with a scheme prefix, e.g.,
 *   'localstorage://my-model-1', 'indexeddb://my/model/2'.
 * @returns ModelArtifactsInfo of the deleted model (if and only if deletion
 *   is successful).
 * @throws Error if deletion fails, e.g., if no model exists at `path`.
 */ /**
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ async function removeModel(url) {
    const schemeAndPath = parseURL(url);
    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);
    return manager.removeModel(schemeAndPath.path);
}
/**
 * Copy a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Copying within a storage medium, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Copying between two storage mediums, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Copy the model, from Local Storage to IndexedDB.
 * await tf.io.copyModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove both models.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of copying.
 * @param destURL Destination URL of copying.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 */ /**
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ async function copyModel(sourceURL, destURL) {
    const deleteSource = false;
    return cloneModelInternal(sourceURL, destURL, deleteSource);
}
/**
 * Move a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Moving within a storage medium, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Moving between two storage mediums, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Move the model, from Local Storage to IndexedDB.
 * await tf.io.moveModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove the moved model.
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of moving.
 * @param destURL Destination URL of moving.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 */ /**
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ async function moveModel(sourceURL, destURL) {
    const deleteSource = true;
    return cloneModelInternal(sourceURL, destURL, deleteSource);
}

},{"../util":"9v6Fb","./router_registry":"76AgW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"76AgW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "IORouterRegistry", ()=>IORouterRegistry);
parcelHelpers.export(exports, "registerSaveRouter", ()=>registerSaveRouter);
parcelHelpers.export(exports, "registerLoadRouter", ()=>registerLoadRouter);
parcelHelpers.export(exports, "getSaveHandlers", ()=>getSaveHandlers);
parcelHelpers.export(exports, "getLoadHandlers", ()=>getLoadHandlers);
class IORouterRegistry {
    constructor(){
        this.saveRouters = [];
        this.loadRouters = [];
    }
    static getInstance() {
        if (IORouterRegistry.instance == null) IORouterRegistry.instance = new IORouterRegistry();
        return IORouterRegistry.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */ static registerSaveRouter(saveRouter) {
        IORouterRegistry.getInstance().saveRouters.push(saveRouter);
    }
    /**
     * Register a load-handler router.
     *
     * @param loadRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `load` method defined or `null`.
     */ static registerLoadRouter(loadRouter) {
        IORouterRegistry.getInstance().loadRouters.push(loadRouter);
    }
    /**
     * Look up IOHandler for saving, given a URL-like string.
     *
     * @param url
     * @returns If only one match is found, an instance of IOHandler with the
     * `save` method defined. If no match is found, `null`.
     * @throws Error, if more than one match is found.
     */ static getSaveHandlers(url) {
        return IORouterRegistry.getHandlers(url, "save");
    }
    /**
     * Look up IOHandler for loading, given a URL-like string.
     *
     * @param url
     * @param loadOptions Optional, custom load options.
     * @returns All valid handlers for `url`, given the currently registered
     *   handler routers.
     */ static getLoadHandlers(url, loadOptions) {
        return IORouterRegistry.getHandlers(url, "load", loadOptions);
    }
    static getHandlers(url, handlerType, loadOptions) {
        const validHandlers = [];
        const routers = handlerType === "load" ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;
        routers.forEach((router)=>{
            const handler = router(url, loadOptions);
            if (handler !== null) validHandlers.push(handler);
        });
        return validHandlers;
    }
}
const registerSaveRouter = (loudRouter)=>IORouterRegistry.registerSaveRouter(loudRouter);
const registerLoadRouter = (loudRouter)=>IORouterRegistry.registerLoadRouter(loudRouter);
const getSaveHandlers = (url)=>IORouterRegistry.getSaveHandlers(url);
const getLoadHandlers = (url, loadOptions)=>IORouterRegistry.getLoadHandlers(url, loadOptions);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fXcld":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Purge all tensorflow.js-saved model artifacts from local storage.
 *
 * @returns Paths of the models purged.
 */ parcelHelpers.export(exports, "purgeLocalStorageArtifacts", ()=>purgeLocalStorageArtifacts);
/**
 * IOHandler subclass: Browser Local Storage.
 *
 * See the doc string to `browserLocalStorage` for more details.
 */ parcelHelpers.export(exports, "BrowserLocalStorage", ()=>BrowserLocalStorage);
parcelHelpers.export(exports, "localStorageRouter", ()=>localStorageRouter);
/**
 * Factory function for local storage IOHandler.
 *
 * This `IOHandler` supports both `save` and `load`.
 *
 * For each model's saved artifacts, four items are saved to local storage.
 *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the
 *     model, such as date saved, type of the topology, size in bytes, etc.
 *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-
 *     style models, this is a stringized JSON.
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the
 *     model, can be used to decode the saved binary weight values (see
 *     item below).
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary
 *     weight values, stored as a base64-encoded string.
 *
 * Saving may throw an `Error` if the total size of the artifacts exceed the
 * browser-specific quota.
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `IOHandler`, which can be used with, e.g.,
 *   `tf.Model.save`.
 */ parcelHelpers.export(exports, "browserLocalStorage", ()=>browserLocalStorage);
parcelHelpers.export(exports, "BrowserLocalStorageManager", ()=>BrowserLocalStorageManager);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("../environment");
var _util = require("../util");
var _ioUtils = require("./io_utils");
var _modelManagement = require("./model_management");
var _routerRegistry = require("./router_registry");
const PATH_SEPARATOR = "/";
const PATH_PREFIX = "tensorflowjs_models";
const INFO_SUFFIX = "info";
const MODEL_TOPOLOGY_SUFFIX = "model_topology";
const WEIGHT_SPECS_SUFFIX = "weight_specs";
const WEIGHT_DATA_SUFFIX = "weight_data";
const MODEL_METADATA_SUFFIX = "model_metadata";
function purgeLocalStorageArtifacts() {
    if (!(0, _environment.env)().getBool("IS_BROWSER") || typeof window === "undefined" || typeof window.localStorage === "undefined") throw new Error("purgeLocalStorageModels() cannot proceed because local storage is unavailable in the current environment.");
    const LS = window.localStorage;
    const purgedModelPaths = [];
    for(let i = 0; i < LS.length; ++i){
        const key = LS.key(i);
        const prefix = PATH_PREFIX + PATH_SEPARATOR;
        if (key.startsWith(prefix) && key.length > prefix.length) {
            LS.removeItem(key);
            const modelName = getModelPathFromKey(key);
            if (purgedModelPaths.indexOf(modelName) === -1) purgedModelPaths.push(modelName);
        }
    }
    return purgedModelPaths;
}
function getModelKeys(path) {
    return {
        info: [
            PATH_PREFIX,
            path,
            INFO_SUFFIX
        ].join(PATH_SEPARATOR),
        topology: [
            PATH_PREFIX,
            path,
            MODEL_TOPOLOGY_SUFFIX
        ].join(PATH_SEPARATOR),
        weightSpecs: [
            PATH_PREFIX,
            path,
            WEIGHT_SPECS_SUFFIX
        ].join(PATH_SEPARATOR),
        weightData: [
            PATH_PREFIX,
            path,
            WEIGHT_DATA_SUFFIX
        ].join(PATH_SEPARATOR),
        modelMetadata: [
            PATH_PREFIX,
            path,
            MODEL_METADATA_SUFFIX
        ].join(PATH_SEPARATOR)
    };
}
/**
 * Get model path from a local-storage key.
 *
 * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'
 *
 * @param key
 */ function getModelPathFromKey(key) {
    const items = key.split(PATH_SEPARATOR);
    if (items.length < 3) throw new Error(`Invalid key format: ${key}`);
    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;
}
class BrowserLocalStorage {
    constructor(modelPath){
        if (!(0, _environment.env)().getBool("IS_BROWSER") || typeof window === "undefined" || typeof window.localStorage === "undefined") // TODO(cais): Add more info about what IOHandler subtypes are
        // available.
        //   Maybe point to a doc page on the web and/or automatically determine
        //   the available IOHandlers and print them in the error message.
        throw new Error("The current environment does not support local storage.");
        this.LS = window.localStorage;
        if (modelPath == null || !modelPath) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
        this.modelPath = modelPath;
        this.keys = getModelKeys(this.modelPath);
    }
    /**
     * Save model artifacts to browser local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @param modelArtifacts The model artifacts to be stored.
     * @returns An instance of SaveResult.
     */ async save(modelArtifacts) {
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
        else {
            const topology = JSON.stringify(modelArtifacts.modelTopology);
            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);
            const modelArtifactsInfo = (0, _ioUtils.getModelArtifactsInfoForJSON)(modelArtifacts);
            try {
                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));
                this.LS.setItem(this.keys.topology, topology);
                this.LS.setItem(this.keys.weightSpecs, weightSpecs);
                this.LS.setItem(this.keys.weightData, (0, _ioUtils.arrayBufferToBase64String)(modelArtifacts.weightData));
                this.LS.setItem(this.keys.modelMetadata, JSON.stringify({
                    format: modelArtifacts.format,
                    generatedBy: modelArtifacts.generatedBy,
                    convertedBy: modelArtifacts.convertedBy,
                    userDefinedMetadata: modelArtifacts.userDefinedMetadata
                }));
                return {
                    modelArtifactsInfo
                };
            } catch (err) {
                // If saving failed, clean up all items saved so far.
                this.LS.removeItem(this.keys.info);
                this.LS.removeItem(this.keys.topology);
                this.LS.removeItem(this.keys.weightSpecs);
                this.LS.removeItem(this.keys.weightData);
                this.LS.removeItem(this.keys.modelMetadata);
                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` + `size quota being exceeded is a possible cause of this failure: ` + `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` + `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` + `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);
            }
        }
    }
    /**
     * Load a model from local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @returns The loaded model (if loading succeeds).
     */ async load() {
        const info = JSON.parse(this.LS.getItem(this.keys.info));
        if (info == null) throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
        if (info.modelTopologyType !== "JSON") throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
        const out = {};
        // Load topology.
        const topology = JSON.parse(this.LS.getItem(this.keys.topology));
        if (topology == null) throw new Error(`In local storage, the topology of model '${this.modelPath}' ` + `is missing.`);
        out.modelTopology = topology;
        // Load weight specs.
        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
        if (weightSpecs == null) throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` + `are missing.`);
        out.weightSpecs = weightSpecs;
        // Load meta-data fields.
        const metadataString = this.LS.getItem(this.keys.modelMetadata);
        if (metadataString != null) {
            const metadata = JSON.parse(metadataString);
            out.format = metadata["format"];
            out.generatedBy = metadata["generatedBy"];
            out.convertedBy = metadata["convertedBy"];
            out.userDefinedMetadata = metadata["userDefinedMetadata"];
        }
        // Load weight data.
        const weightDataBase64 = this.LS.getItem(this.keys.weightData);
        if (weightDataBase64 == null) throw new Error(`In local storage, the binary weight values of model ` + `'${this.modelPath}' are missing.`);
        out.weightData = (0, _ioUtils.base64StringToArrayBuffer)(weightDataBase64);
        return out;
    }
}
BrowserLocalStorage.URL_SCHEME = "localstorage://";
const localStorageRouter = (url)=>{
    if (!(0, _environment.env)().getBool("IS_BROWSER")) return null;
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));
        else return null;
    }
};
(0, _routerRegistry.IORouterRegistry).registerSaveRouter(localStorageRouter);
(0, _routerRegistry.IORouterRegistry).registerLoadRouter(localStorageRouter);
function browserLocalStorage(modelPath) {
    return new BrowserLocalStorage(modelPath);
}
class BrowserLocalStorageManager {
    constructor(){
        (0, _util.assert)((0, _environment.env)().getBool("IS_BROWSER"), ()=>"Current environment is not a web browser");
        (0, _util.assert)(typeof window === "undefined" || typeof window.localStorage !== "undefined", ()=>"Current browser does not appear to support localStorage");
        this.LS = window.localStorage;
    }
    async listModels() {
        const out = {};
        const prefix = PATH_PREFIX + PATH_SEPARATOR;
        const suffix = PATH_SEPARATOR + INFO_SUFFIX;
        for(let i = 0; i < this.LS.length; ++i){
            const key = this.LS.key(i);
            if (key.startsWith(prefix) && key.endsWith(suffix)) {
                const modelPath = getModelPathFromKey(key);
                out[modelPath] = JSON.parse(this.LS.getItem(key));
            }
        }
        return out;
    }
    async removeModel(path) {
        path = maybeStripScheme(path);
        const keys = getModelKeys(path);
        if (this.LS.getItem(keys.info) == null) throw new Error(`Cannot find model at path '${path}'`);
        const info = JSON.parse(this.LS.getItem(keys.info));
        this.LS.removeItem(keys.info);
        this.LS.removeItem(keys.topology);
        this.LS.removeItem(keys.weightSpecs);
        this.LS.removeItem(keys.weightData);
        return info;
    }
}
if ((0, _environment.env)().getBool("IS_BROWSER")) // Wrap the construction and registration, to guard against browsers that
// don't support Local Storage.
try {
    (0, _modelManagement.ModelStoreManagerRegistry).registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());
} catch (err) {}

},{"../environment":"8tlxC","../util":"9v6Fb","./io_utils":"iRZ4M","./model_management":"d8VhK","./router_registry":"76AgW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l5Cns":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserDownloads", ()=>BrowserDownloads);
parcelHelpers.export(exports, "browserDownloadsRouter", ()=>browserDownloadsRouter);
/**
 * Creates an IOHandler that triggers file downloads from the browser.
 *
 * The returned `IOHandler` instance can be used as model exporting methods such
 * as `tf.Model.save` and supports only saving.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * const saveResult = await model.save('downloads://mymodel');
 * // This will trigger downloading of two files:
 * //   'mymodel.json' and 'mymodel.weights.bin'.
 * console.log(saveResult);
 * ```
 *
 * @param fileNamePrefix Prefix name of the files to be downloaded. For use with
 *   `tf.Model`, `fileNamePrefix` should follow either of the following two
 *   formats:
 *   1. `null` or `undefined`, in which case the default file
 *      names will be used:
 *      - 'model.json' for the JSON file containing the model topology and
 *        weights manifest.
 *      - 'model.weights.bin' for the binary file containing the binary weight
 *        values.
 *   2. A single string or an Array of a single string, as the file name prefix.
 *      For example, if `'foo'` is provided, the downloaded JSON
 *      file and binary weights file will be named 'foo.json' and
 *      'foo.weights.bin', respectively.
 * @param config Additional configuration for triggering downloads.
 * @returns An instance of `BrowserDownloads` `IOHandler`.
 */ /**
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ parcelHelpers.export(exports, "browserDownloads", ()=>browserDownloads);
/**
 * Creates an IOHandler that loads model artifacts from user-selected files.
 *
 * This method can be used for loading from files such as user-selected files
 * in the browser.
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * // Note: This code snippet won't run properly without the actual file input
 * //   elements in the HTML DOM.
 *
 * // Suppose there are two HTML file input (`<input type="file" ...>`)
 * // elements.
 * const uploadJSONInput = document.getElementById('upload-json');
 * const uploadWeightsInput = document.getElementById('upload-weights');
 * const model = await tf.loadLayersModel(tf.io.browserFiles(
 *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));
 * ```
 *
 * @param files `File`s to load from. Currently, this function supports only
 *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for
 *   which an `Array` of `File`s is expected (in that order):
 *   - A JSON file containing the model topology and weight manifest.
 *   - Optionally, One or more binary files containing the binary weights.
 *     These files must have names that match the paths in the `weightsManifest`
 *     contained by the aforementioned JSON file, or errors will be thrown
 *     during loading. These weights files have the same format as the ones
 *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`
 *     Python PIP package. If no weights files are provided, only the model
 *     topology will be loaded from the JSON file above.
 * @returns An instance of `Files` `IOHandler`.
 */ /**
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ parcelHelpers.export(exports, "browserFiles", ()=>browserFiles);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * IOHandlers related to files, such as browser-triggered file downloads,
 * user-selected files in browser.
 */ var _environment = require("../environment");
var _ioUtils = require("./io_utils");
var _routerRegistry = require("./router_registry");
const DEFAULT_FILE_NAME_PREFIX = "model";
const DEFAULT_JSON_EXTENSION_NAME = ".json";
const DEFAULT_WEIGHT_DATA_EXTENSION_NAME = ".weights.bin";
function defer(f) {
    return new Promise((resolve)=>setTimeout(resolve)).then(f);
}
class BrowserDownloads {
    constructor(fileNamePrefix){
        if (!(0, _environment.env)().getBool("IS_BROWSER")) // TODO(cais): Provide info on what IOHandlers are available under the
        //   current environment.
        throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);
        if (fileNamePrefix == null || fileNamePrefix.length === 0) fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;
        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;
        this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
    }
    async save(modelArtifacts) {
        if (typeof document === "undefined") throw new Error("Browser downloads are not supported in this environment since `document` is not present");
        const weightsURL = window.URL.createObjectURL(new Blob([
            modelArtifacts.weightData
        ], {
            type: "application/octet-stream"
        }));
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
        else {
            const weightsManifest = [
                {
                    paths: [
                        "./" + this.weightDataFileName
                    ],
                    weights: modelArtifacts.weightSpecs
                }
            ];
            const modelTopologyAndWeightManifest = {
                modelTopology: modelArtifacts.modelTopology,
                format: modelArtifacts.format,
                generatedBy: modelArtifacts.generatedBy,
                convertedBy: modelArtifacts.convertedBy,
                weightsManifest
            };
            const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([
                JSON.stringify(modelTopologyAndWeightManifest)
            ], {
                type: "application/json"
            }));
            // If anchor elements are not provided, create them without attaching them
            // to parents, so that the downloaded file names can be controlled.
            const jsonAnchor = this.jsonAnchor == null ? document.createElement("a") : this.jsonAnchor;
            jsonAnchor.download = this.modelTopologyFileName;
            jsonAnchor.href = modelTopologyAndWeightManifestURL;
            // Trigger downloads by evoking a click event on the download anchors.
            // When multiple downloads are started synchronously, Firefox will only
            // save the last one.
            await defer(()=>jsonAnchor.dispatchEvent(new MouseEvent("click")));
            if (modelArtifacts.weightData != null) {
                const weightDataAnchor = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
                weightDataAnchor.download = this.weightDataFileName;
                weightDataAnchor.href = weightsURL;
                await defer(()=>weightDataAnchor.dispatchEvent(new MouseEvent("click")));
            }
            return {
                modelArtifactsInfo: (0, _ioUtils.getModelArtifactsInfoForJSON)(modelArtifacts)
            };
        }
    }
}
BrowserDownloads.URL_SCHEME = "downloads://";
class BrowserFiles {
    constructor(files){
        if (files == null || files.length < 1) throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);
        this.files = files;
    }
    async load() {
        const jsonFile = this.files[0];
        const weightFiles = this.files.slice(1);
        return new Promise((resolve, reject)=>{
            const jsonReader = new FileReader();
            jsonReader.onload = (event)=>{
                // tslint:disable-next-line:no-any
                const modelJSON = JSON.parse(event.target.result);
                const modelTopology = modelJSON.modelTopology;
                if (modelTopology == null) {
                    reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));
                    return;
                }
                if (weightFiles.length === 0) resolve({
                    modelTopology
                });
                const weightsManifest = modelJSON.weightsManifest;
                if (weightsManifest == null) {
                    reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));
                    return;
                }
                let pathToFile;
                try {
                    pathToFile = this.checkManifestAndWeightFiles(weightsManifest, weightFiles);
                } catch (err) {
                    reject(err);
                    return;
                }
                const weightSpecs = [];
                const paths = [];
                const perFileBuffers = [];
                weightsManifest.forEach((weightsGroup)=>{
                    weightsGroup.paths.forEach((path)=>{
                        paths.push(path);
                        perFileBuffers.push(null);
                    });
                    weightSpecs.push(...weightsGroup.weights);
                });
                weightsManifest.forEach((weightsGroup)=>{
                    weightsGroup.paths.forEach((path)=>{
                        const weightFileReader = new FileReader();
                        weightFileReader.onload = (event)=>{
                            // tslint:disable-next-line:no-any
                            const weightData = event.target.result;
                            const index = paths.indexOf(path);
                            perFileBuffers[index] = weightData;
                            if (perFileBuffers.indexOf(null) === -1) resolve({
                                modelTopology,
                                weightSpecs,
                                weightData: (0, _ioUtils.concatenateArrayBuffers)(perFileBuffers),
                                format: modelJSON.format,
                                generatedBy: modelJSON.generatedBy,
                                convertedBy: modelJSON.convertedBy,
                                userDefinedMetadata: modelJSON.userDefinedMetadata
                            });
                        };
                        weightFileReader.onerror = (error)=>reject(`Failed to weights data from file of path '${path}'.`);
                        weightFileReader.readAsArrayBuffer(pathToFile[path]);
                    });
                });
            };
            jsonReader.onerror = (error)=>reject(`Failed to read model topology and weights manifest JSON ` + `from file '${jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);
            jsonReader.readAsText(jsonFile);
        });
    }
    /**
     * Check the compatibility between weights manifest and weight files.
     */ checkManifestAndWeightFiles(manifest, files) {
        const basenames = [];
        const fileNames = files.map((file)=>(0, _ioUtils.basename)(file.name));
        const pathToFile = {};
        for (const group of manifest)group.paths.forEach((path)=>{
            const pathBasename = (0, _ioUtils.basename)(path);
            if (basenames.indexOf(pathBasename) !== -1) throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);
            basenames.push(pathBasename);
            if (fileNames.indexOf(pathBasename) === -1) throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);
            else pathToFile[path] = files[fileNames.indexOf(pathBasename)];
        });
        if (basenames.length !== files.length) throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${files.length}).`);
        return pathToFile;
    }
}
const browserDownloadsRouter = (url)=>{
    if (!(0, _environment.env)().getBool("IS_BROWSER")) return null;
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));
        else return null;
    }
};
(0, _routerRegistry.IORouterRegistry).registerSaveRouter(browserDownloadsRouter);
function browserDownloads(fileNamePrefix = "model") {
    return new BrowserDownloads(fileNamePrefix);
}
function browserFiles(files) {
    return new BrowserFiles(files);
}

},{"../environment":"8tlxC","./io_utils":"iRZ4M","./router_registry":"76AgW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ihQHl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HTTPRequest", ()=>HTTPRequest);
/**
 * Extract the prefix and suffix of the url, where the prefix is the path before
 * the last file, and suffix is the search params after the last file.
 * ```
 * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'
 * [prefix, suffix] = parseUrl(url)
 * // prefix = 'http://tfhub.dev/model/1/'
 * // suffix = '?tfjs-format=file'
 * ```
 * @param url the model url to be parsed.
 */ parcelHelpers.export(exports, "parseUrl", ()=>parseUrl);
parcelHelpers.export(exports, "isHTTPScheme", ()=>isHTTPScheme);
parcelHelpers.export(exports, "httpRouter", ()=>httpRouter);
/**
 * Creates an IOHandler subtype that sends model artifacts to HTTP server.
 *
 * An HTTP request of the `multipart/form-data` mime type will be sent to the
 * `path` URL. The form data includes artifacts that represent the topology
 * and/or weights of the model. In the case of Keras-style `tf.Model`, two
 * blobs (files) exist in form-data:
 *   - A JSON file consisting of `modelTopology` and `weightsManifest`.
 *   - A binary weights file consisting of the concatenated weight values.
 * These files are in the same format as the one generated by
 * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).
 *
 * The following code snippet exemplifies the client-side code that uses this
 * function:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save(tf.io.http(
 *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));
 * console.log(saveResult);
 * ```
 *
 * If the default `POST` method is to be used, without any custom parameters
 * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:
 *
 * ```js
 * const saveResult = await model.save('http://model-server:5000/upload');
 * ```
 *
 * The following GitHub Gist
 * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864
 * implements a server based on [flask](https://github.com/pallets/flask) that
 * can receive the request. Upon receiving the model artifacts via the requst,
 * this particular server reconsistutes instances of [Keras
 * Models](https://keras.io/models/model/) in memory.
 *
 *
 * @param path A URL path to the model.
 *   Can be an absolute HTTP path (e.g.,
 *   'http://localhost:8000/model-upload)') or a relative path (e.g.,
 *   './model-upload').
 * @param requestInit Request configurations to be used when sending
 *    HTTP request to server using `fetch`. It can contain fields such as
 *    `method`, `credentials`, `headers`, `mode`, etc. See
 *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
 *    for more information. `requestInit` must not have a body, because the
 * body will be set by TensorFlow.js. File blobs representing the model
 * topology (filename: 'model.json') and the weights of the model (filename:
 * 'model.weights.bin') will be appended to the body. If `requestInit` has a
 * `body`, an Error will be thrown.
 * @param loadOptions Optional configuration for the loading. It includes the
 *   following fields:
 *   - weightPathPrefix Optional, this specifies the path prefix for weight
 *     files, by default this is calculated from the path param.
 *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,
 *     the `fetch` from node-fetch can be used here.
 *   - onProgress Optional, progress callback function, fired periodically
 *     before the load is completed.
 * @returns An instance of `IOHandler`.
 */ /**
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */ parcelHelpers.export(exports, "http", ()=>http);
/**
 * Deprecated. Use `tf.io.http`.
 * @param path
 * @param loadOptions
 */ parcelHelpers.export(exports, "browserHTTPRequest", ()=>browserHTTPRequest);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * IOHandler implementations based on HTTP requests in the web browser.
 *
 * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 */ var _environment = require("../environment");
var _util = require("../util");
var _ioUtils = require("./io_utils");
var _routerRegistry = require("./router_registry");
var _weightsLoader = require("./weights_loader");
const OCTET_STREAM_MIME_TYPE = "application/octet-stream";
const JSON_TYPE = "application/json";
class HTTPRequest {
    constructor(path, loadOptions){
        this.DEFAULT_METHOD = "POST";
        if (loadOptions == null) loadOptions = {};
        this.weightPathPrefix = loadOptions.weightPathPrefix;
        this.onProgress = loadOptions.onProgress;
        if (loadOptions.fetchFunc != null) {
            (0, _util.assert)(typeof loadOptions.fetchFunc === "function", ()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)");
            this.fetch = loadOptions.fetchFunc;
        } else this.fetch = (0, _environment.env)().platform.fetch;
        (0, _util.assert)(path != null && path.length > 0, ()=>"URL path for http must not be null, undefined or empty.");
        if (Array.isArray(path)) (0, _util.assert)(path.length === 2, ()=>"URL paths for http must have a length of 2, " + `(actual length is ${path.length}).`);
        this.path = path;
        if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
        this.requestInit = loadOptions.requestInit || {};
    }
    async save(modelArtifacts) {
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
        const init = Object.assign({
            method: this.DEFAULT_METHOD
        }, this.requestInit);
        init.body = new FormData();
        const weightsManifest = [
            {
                paths: [
                    "./model.weights.bin"
                ],
                weights: modelArtifacts.weightSpecs
            }
        ];
        const modelTopologyAndWeightManifest = {
            modelTopology: modelArtifacts.modelTopology,
            format: modelArtifacts.format,
            generatedBy: modelArtifacts.generatedBy,
            convertedBy: modelArtifacts.convertedBy,
            userDefinedMetadata: modelArtifacts.userDefinedMetadata,
            weightsManifest
        };
        init.body.append("model.json", new Blob([
            JSON.stringify(modelTopologyAndWeightManifest)
        ], {
            type: JSON_TYPE
        }), "model.json");
        if (modelArtifacts.weightData != null) init.body.append("model.weights.bin", new Blob([
            modelArtifacts.weightData
        ], {
            type: OCTET_STREAM_MIME_TYPE
        }), "model.weights.bin");
        const response = await this.fetch(this.path, init);
        if (response.ok) return {
            modelArtifactsInfo: (0, _ioUtils.getModelArtifactsInfoForJSON)(modelArtifacts),
            responses: [
                response
            ]
        };
        else throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);
    }
    /**
     * Load model artifacts via HTTP request(s).
     *
     * See the documentation to `tf.io.http` for details on the saved
     * artifacts.
     *
     * @returns The loaded model artifacts (if loading succeeds).
     */ async load() {
        const modelConfigRequest = await this.fetch(this.path, this.requestInit);
        if (!modelConfigRequest.ok) throw new Error(`Request to ${this.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);
        let modelConfig;
        try {
            modelConfig = await modelConfigRequest.json();
        } catch (e) {
            let message = `Failed to parse model JSON of response from ${this.path}.`;
            // TODO(nsthorat): Remove this after some time when we're comfortable that
            // .pb files are mostly gone.
            if (this.path.endsWith(".pb")) message += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.";
            else message += " Please make sure the server is serving valid JSON for this request.";
            throw new Error(message);
        }
        const modelTopology = modelConfig.modelTopology;
        const weightsManifest = modelConfig.weightsManifest;
        const generatedBy = modelConfig.generatedBy;
        const convertedBy = modelConfig.convertedBy;
        const format = modelConfig.format;
        const userDefinedMetadata = modelConfig.userDefinedMetadata;
        // We do not allow both modelTopology and weightsManifest to be missing.
        if (modelTopology == null && weightsManifest == null) throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` + `topology or manifest for weights.`);
        let weightSpecs;
        let weightData;
        if (weightsManifest != null) {
            const results = await this.loadWeights(weightsManifest);
            [weightSpecs, weightData] = results;
        }
        return {
            modelTopology,
            weightSpecs,
            weightData,
            userDefinedMetadata,
            generatedBy,
            convertedBy,
            format
        };
    }
    async loadWeights(weightsManifest) {
        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;
        const [prefix, suffix] = parseUrl(weightPath);
        const pathPrefix = this.weightPathPrefix || prefix;
        const weightSpecs = [];
        for (const entry of weightsManifest)weightSpecs.push(...entry.weights);
        const fetchURLs = [];
        weightsManifest.forEach((weightsGroup)=>{
            weightsGroup.paths.forEach((path)=>{
                fetchURLs.push(pathPrefix + path + suffix);
            });
        });
        const buffers = await (0, _weightsLoader.loadWeightsAsArrayBuffer)(fetchURLs, {
            requestInit: this.requestInit,
            fetchFunc: this.fetch,
            onProgress: this.onProgress
        });
        return [
            weightSpecs,
            (0, _ioUtils.concatenateArrayBuffers)(buffers)
        ];
    }
}
HTTPRequest.URL_SCHEME_REGEX = /^https?:\/\//;
function parseUrl(url) {
    const lastSlash = url.lastIndexOf("/");
    const lastSearchParam = url.lastIndexOf("?");
    const prefix = url.substring(0, lastSlash);
    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : "";
    return [
        prefix + "/",
        suffix
    ];
}
function isHTTPScheme(url) {
    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;
}
const httpRouter = (url, loadOptions)=>{
    if (typeof fetch === "undefined" && (loadOptions == null || loadOptions.fetchFunc == null)) // `http` uses `fetch` or `node-fetch`, if one wants to use it in
    // an environment that is not the browser or node they have to setup a
    // global fetch polyfill.
    return null;
    else {
        let isHTTP = true;
        if (Array.isArray(url)) isHTTP = url.every((urlItem)=>isHTTPScheme(urlItem));
        else isHTTP = isHTTPScheme(url);
        if (isHTTP) return http(url, loadOptions);
    }
    return null;
};
(0, _routerRegistry.IORouterRegistry).registerSaveRouter(httpRouter);
(0, _routerRegistry.IORouterRegistry).registerLoadRouter(httpRouter);
function http(path, loadOptions) {
    return new HTTPRequest(path, loadOptions);
}
function browserHTTPRequest(path, loadOptions) {
    return http(path, loadOptions);
}

},{"../environment":"8tlxC","../util":"9v6Fb","./io_utils":"iRZ4M","./router_registry":"76AgW","./weights_loader":"hG5HD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hG5HD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Reads binary weights data from a number of URLs.
 *
 * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.
 * @param requestOptions RequestInit (options) for the HTTP requests.
 * @param fetchFunc Optional overriding value for the `window.fetch` function.
 * @param onProgress Optional, progress callback function, fired periodically
 *   before the load is completed.
 * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same
 *   length as `fetchURLs`.
 */ parcelHelpers.export(exports, "loadWeightsAsArrayBuffer", ()=>loadWeightsAsArrayBuffer);
/**
 * Reads a weights manifest JSON configuration, fetches the weights and
 * returns them as `Tensor`s.
 *
 * @param manifest The weights manifest JSON.
 * @param filePathPrefix The path prefix for filenames given in the manifest.
 *     Defaults to the empty string.
 * @param weightNames The names of the weights to be fetched.
 */ parcelHelpers.export(exports, "loadWeights", ()=>loadWeights);
/**
 * Creates a function, which reads a weights manifest JSON configuration,
 * fetches the weight files using the specified function and returns them as
 * `Tensor`s.
 *
 * ```js
 * // example for creating a nodejs weight loader, which reads the weight files
 * // from disk using fs.readFileSync
 *
 * import * as fs from 'fs'
 *
 * const fetchWeightsFromDisk = (filePaths: string[]) =>
 *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)
 *
 * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)
 *
 * const manifest = JSON.parse(
 *   fs.readFileSync('./my_model-weights_manifest').toString()
 * )
 * const weightMap = await loadWeights(manifest, './')
 * ```
 * @param fetchWeightsFunction The function used for fetching the weight files.
 * @returns Weight loading function.
 */ parcelHelpers.export(exports, "weightsLoaderFactory", ()=>weightsLoaderFactory);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("../environment");
var _util = require("../util");
var _ioUtils = require("./io_utils");
var _progress = require("./progress");
var _types = require("./types");
async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {
    if (loadOptions == null) loadOptions = {};
    const fetchFunc = loadOptions.fetchFunc == null ? (0, _environment.env)().platform.fetch : loadOptions.fetchFunc;
    // Create the requests for all of the weights in parallel.
    const requests = fetchURLs.map((fetchURL)=>fetchFunc(fetchURL, loadOptions.requestInit, {
            isBinary: true
        }));
    const fetchStartFraction = 0;
    const fetchEndFraction = 0.5;
    const responses = loadOptions.onProgress == null ? await Promise.all(requests) : await (0, _progress.monitorPromisesProgress)(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);
    const bufferPromises = responses.map((response)=>response.arrayBuffer());
    const bufferStartFraction = 0.5;
    const bufferEndFraction = 1;
    const buffers = loadOptions.onProgress == null ? await Promise.all(bufferPromises) : await (0, _progress.monitorPromisesProgress)(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);
    return buffers;
}
async function loadWeights(manifest, filePathPrefix = "", weightNames, requestInit) {
    // TODO(nsthorat): Groups are currently fetched atomically. If you need a
    // single weight from a group, the whole group will be fetched. At a future
    // date, we should support fetching only the individual shards within a
    // group that are needed to reconstruct the requested weight.
    // TODO(cais): Use `decodeWeights` for implementation.
    const fetchWeights = (fetchUrls)=>loadWeightsAsArrayBuffer(fetchUrls, {
            requestInit
        });
    const loadWeights = weightsLoaderFactory(fetchWeights);
    return loadWeights(manifest, filePathPrefix, weightNames);
}
function weightsLoaderFactory(fetchWeightsFunction) {
    return async (manifest, filePathPrefix = "", weightNames)=>{
        // Collect all the groups, weights, and their relative offsets to be
        // fetched.
        const groupIndicesToFetchMap = manifest.map(()=>false);
        const groupWeightsToFetch = {};
        const weightsFound = weightNames != null ? weightNames.map(()=>false) : [];
        const allManifestWeightNames = [];
        manifest.forEach((manifestGroupConfig, groupIndex)=>{
            let groupOffset = 0;
            manifestGroupConfig.weights.forEach((weightsEntry)=>{
                const rawDtype = "quantization" in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;
                const weightsBytes = (0, _types.DTYPE_VALUE_SIZE_MAP)[rawDtype] * _util.sizeFromShape(weightsEntry.shape);
                const enqueueWeightsForFetchingFn = ()=>{
                    groupIndicesToFetchMap[groupIndex] = true;
                    if (groupWeightsToFetch[groupIndex] == null) groupWeightsToFetch[groupIndex] = [];
                    groupWeightsToFetch[groupIndex].push({
                        manifestEntry: weightsEntry,
                        groupOffset,
                        sizeBytes: weightsBytes
                    });
                };
                if (weightNames != null) weightNames.forEach((weightName, weightIndex)=>{
                    if (weightName === weightsEntry.name) {
                        enqueueWeightsForFetchingFn();
                        weightsFound[weightIndex] = true;
                    }
                });
                else enqueueWeightsForFetchingFn();
                allManifestWeightNames.push(weightsEntry.name);
                groupOffset += weightsBytes;
            });
        });
        if (!weightsFound.every((found)=>found)) {
            const weightsNotFound = weightNames.filter((_, i)=>!weightsFound[i]);
            throw new Error(`Could not find weights in manifest with names: ` + `${weightsNotFound.join(", ")}. \n` + `Manifest JSON has weights with names: ` + `${allManifestWeightNames.join(", ")}.`);
        }
        // Convert the one-hot boolean groupId => shouldFetch map to a list of group
        // IDs.
        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i)=>{
            if (shouldFetch) accumulator.push(i);
            return accumulator;
        }, []);
        const fetchUrls = [];
        groupIndicesToFetch.forEach((i)=>{
            manifest[i].paths.forEach((filepath)=>{
                const fetchUrl = filePathPrefix + (!filePathPrefix.endsWith("/") ? "/" : "") + filepath;
                fetchUrls.push(fetchUrl);
            });
        });
        const buffers = await fetchWeightsFunction(fetchUrls);
        const weightsTensorMap = {};
        let bufferIndexOffset = 0;
        groupIndicesToFetch.forEach((i)=>{
            const numBuffers = manifest[i].paths.length;
            let groupBytes = 0;
            for(let i1 = 0; i1 < numBuffers; i1++)groupBytes += buffers[bufferIndexOffset + i1].byteLength;
            // Create a buffer for the whole group.
            const groupBuffer = new ArrayBuffer(groupBytes);
            const groupByteBuffer = new Uint8Array(groupBuffer);
            let groupBufferOffset = 0;
            for(let i2 = 0; i2 < numBuffers; i2++){
                const buffer = new Uint8Array(buffers[bufferIndexOffset + i2]);
                groupByteBuffer.set(buffer, groupBufferOffset);
                groupBufferOffset += buffer.byteLength;
            }
            const weightsEntries = groupWeightsToFetch[i];
            weightsEntries.forEach((weightsEntry)=>{
                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
                const nameToTensorMap = (0, _ioUtils.decodeWeights)(byteBuffer, [
                    weightsEntry.manifestEntry
                ]);
                for(const name in nameToTensorMap)weightsTensorMap[name] = nameToTensorMap[name];
            });
            bufferIndexOffset += numBuffers;
        });
        return weightsTensorMap;
    };
}

},{"../environment":"8tlxC","../util":"9v6Fb","./io_utils":"iRZ4M","./progress":"7GW3I","./types":"2qT38","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7GW3I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Monitor Promise.all progress, fire onProgress callback function.
 *
 * @param promises Promise list going to be monitored
 * @param onProgress Callback function. Fired when a promise resolved.
 * @param startFraction Optional fraction start. Default to 0.
 * @param endFraction Optional fraction end. Default to 1.
 */ parcelHelpers.export(exports, "monitorPromisesProgress", ()=>monitorPromisesProgress);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {
    checkPromises(promises);
    startFraction = startFraction == null ? 0 : startFraction;
    endFraction = endFraction == null ? 1 : endFraction;
    checkFraction(startFraction, endFraction);
    let resolvedPromise = 0;
    const registerMonitor = (promise)=>{
        promise.then((value)=>{
            const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction);
            // pass fraction as parameter to callback function.
            onProgress(fraction);
            return value;
        });
        return promise;
    };
    function checkPromises(promises) {
        (0, _util.assert)(promises != null && Array.isArray(promises) && promises.length > 0, ()=>"promises must be a none empty array");
    }
    function checkFraction(startFraction, endFraction) {
        (0, _util.assert)(startFraction >= 0 && startFraction <= 1, ()=>`Progress fraction must be in range [0, 1], but ` + `got startFraction ${startFraction}`);
        (0, _util.assert)(endFraction >= 0 && endFraction <= 1, ()=>`Progress fraction must be in range [0, 1], but ` + `got endFraction ${endFraction}`);
        (0, _util.assert)(endFraction >= startFraction, ()=>`startFraction must be no more than endFraction, but ` + `got startFraction ${startFraction} and endFraction ` + `${endFraction}`);
    }
    return Promise.all(promises.map(registerMonitor));
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9R8iF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates an IOHandler that loads model artifacts from memory.
 *
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * const model = await tf.loadLayersModel(tf.io.fromMemory(
 *     modelTopology, weightSpecs, weightData));
 * ```
 *
 * @param modelArtifacts a object containing model topology (i.e., parsed from
 *   the JSON format).
 * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
 *   names, shapes, types, and quantization of the weight data.
 * @param weightData A single `ArrayBuffer` containing the weight data,
 *   concatenated in the order described by the weightSpecs.
 * @param trainingConfig Model training configuration. Optional.
 *
 * @returns A passthrough `IOHandler` that simply loads the provided data.
 */ parcelHelpers.export(exports, "fromMemory", ()=>fromMemory);
/**
 * Creates an IOHandler that passes saved model artifacts to a callback.
 *
 * ```js
 * function handleSave(artifacts) {
 *   // ... do something with the artifacts ...
 *   return {modelArtifactsInfo: {...}, ...};
 * }
 *
 * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
 * ```
 *
 * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
 *     `SaveResult`.
 */ parcelHelpers.export(exports, "withSaveHandler", ()=>withSaveHandler);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class PassthroughLoader {
    constructor(modelArtifacts){
        this.modelArtifacts = modelArtifacts;
    }
    async load() {
        return this.modelArtifacts;
    }
}
class PassthroughSaver {
    constructor(saveHandler){
        this.saveHandler = saveHandler;
    }
    async save(modelArtifacts) {
        return this.saveHandler(modelArtifacts);
    }
}
function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {
    if (arguments.length === 1) {
        const isModelArtifacts = modelArtifacts.modelTopology != null || modelArtifacts.weightSpecs != null;
        if (isModelArtifacts) return new PassthroughLoader(modelArtifacts);
        else {
            // Legacy support: with only modelTopology.
            // TODO(cais): Remove this deprecated API.
            console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.");
            return new PassthroughLoader({
                modelTopology: modelArtifacts
            });
        }
    } else {
        // Legacy support.
        // TODO(cais): Remove this deprecated API.
        console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.");
        return new PassthroughLoader({
            modelTopology: modelArtifacts,
            weightSpecs,
            weightData,
            trainingConfig
        });
    }
}
function withSaveHandler(saveHandler) {
    return new PassthroughSaver(saveHandler);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dWBjd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "confusionMatrix", ()=>(0, _confusionMatrix.confusionMatrix));
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Exports under the tf.math.* namespace.
 */ var _confusionMatrix = require("./ops/confusion_matrix");

},{"./ops/confusion_matrix":"1Nmh0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Nmh0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Computes the confusion matrix from true labels and predicted labels.
 *
 * ```js
 * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');
 * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');
 * const numClasses = 3;
 * const out = tf.math.confusionMatrix(labels, predictions, numClasses);
 * out.print();
 * // Expected output matrix:
 * // [[2, 0, 0],
 * //  [0, 1, 1],
 * //  [0, 0, 1]]
 * ```
 *
 * @param labels The target labels, assumed to be 0-based integers
 *   for the classes. The shape is `[numExamples]`, where
 *   `numExamples` is the number of examples included.
 * @param predictions The predicted classes, assumed to be
 *   0-based integers for the classes. Must have the same shape as `labels`.
 * @param numClasses Number of all classes, as an integer.
 *   Its value must be larger than the largest element in `labels` and
 *   `predictions`.
 * @returns The confusion matrix as a int32-type 2D tensor. The value at
 *   row `r` and column `c` is the number of times examples of actual class
 *   `r` were predicted as class `c`.
 */ /** @doc {heading: 'Operations', subheading: 'Evaluation'} */ parcelHelpers.export(exports, "confusionMatrix_", ()=>confusionMatrix_);
parcelHelpers.export(exports, "confusionMatrix", ()=>confusionMatrix);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _oneHot = require("./one_hot");
var _operation = require("./operation");
function confusionMatrix_(labels, predictions, numClasses) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "confusionMatrix");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "confusionMatrix");
    _util.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), ()=>`If provided, numClasses must be a positive integer, ` + `but got ${numClasses}`);
    _util.assert($labels.rank === 1, ()=>`Expected the rank of labels to be 1, but got ${$labels.rank}`);
    _util.assert($predictions.rank === 1, ()=>`Expected the rank of predictions to be 1, ` + `but got ${$predictions.rank}`);
    _util.assert($labels.shape[0] === $predictions.shape[0], ()=>`Mismatch in the number of examples: ` + `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` + `Labels and predictions should have the same number of elements.`);
    _util.assert(numClasses > 0 && Number.isInteger(numClasses), ()=>`numClasses is required to be a positive integer, but got ` + `${numClasses}`);
    // TODO(cais): In the future, if oneHot supports tensors inputs for
    //   `numClasses`, `confusionMatrix` can make `numClasses` optional.
    const oneHotLabels = (0, _oneHot.oneHot)($labels.asType("int32"), numClasses);
    const oneHotPredictions = (0, _oneHot.oneHot)($predictions.asType("int32"), numClasses);
    const oneHotLabelsT = oneHotLabels.transpose();
    return oneHotLabelsT.matMul(oneHotPredictions).asType("int32");
}
const confusionMatrix = (0, _operation.op)({
    confusionMatrix_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./one_hot":"5171s","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5171s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "oneHot", ()=>oneHot);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _arrayOps = require("./array_ops");
var _operation = require("./operation");
/**
 * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take
 * value `onValue` (defaults to 1), while all other locations take value
 * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank
 * `R+1` with the last axis of size `depth`.
 *
 * ```js
 * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();
 * ```
 *
 * @param indices `tf.Tensor` of indices with dtype `int32`.
 * @param depth The depth of the one hot dimension.
 * @param onValue A number used to fill in the output when the index matches
 * the location.
 * @param offValue A number used to fill in the output when the index does
 *     not match the location.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function oneHot_(indices, depth, onValue = 1, offValue = 0) {
    if (depth < 2) throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);
    let $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "oneHot", "int32");
    const outShape = [
        ...$indices.shape,
        depth
    ];
    $indices = $indices.flatten();
    const forward = (backend, save)=>{
        save([
            $indices
        ]);
        return (0, _arrayOps.reshape)(backend.oneHot($indices, depth, onValue, offValue), outShape);
    };
    const inputs = {
        indices: $indices
    };
    const attrs = {
        depth,
        onValue,
        offValue
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.OneHot), attrs);
}
const oneHot = (0, _operation.op)({
    oneHot_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./array_ops":"29MCO","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eNnql":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Draws a `tf.Tensor` of pixel values to a byte array or optionally a
 * canvas.
 *
 * When the dtype of the input is 'float32', we assume values in the range
 * [0-1]. Otherwise, when input is 'int32', we assume values in the range
 * [0-255].
 *
 * Returns a promise that resolves when the canvas has been drawn to.
 *
 * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If
 *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws
 * grayscale. When depth of 3, we draw with the first three components of
 * the depth dimension corresponding to r, g, b and alpha = 1. When depth of
 * 4, all four components of the depth dimension correspond to r, g, b, a.
 * @param canvas The canvas to draw to.
 */ /** @doc {heading: 'Browser', namespace: 'browser'} */ parcelHelpers.export(exports, "toPixels", ()=>toPixels);
parcelHelpers.export(exports, "fromPixels", ()=>fromPixels);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelRegistry = require("../kernel_registry");
var _tensor = require("../tensor");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
var _tensorOps = require("./tensor_ops");
let fromPixels2DContext;
/**
 * Creates a `tf.Tensor` from an image.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * tf.browser.fromPixels(image).print();
 * ```
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 */ /** @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true} */ function fromPixels_(pixels, numChannels = 3) {
    // Sanity checks.
    if (numChannels > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
    if (pixels == null) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
    let isPixelData = false;
    let isImageData = false;
    let isVideo = false;
    let isImage = false;
    let isCanvasLike = false;
    if (pixels.data instanceof Uint8Array) isPixelData = true;
    else if (typeof ImageData !== "undefined" && pixels instanceof ImageData) isImageData = true;
    else if (typeof HTMLVideoElement !== "undefined" && pixels instanceof HTMLVideoElement) isVideo = true;
    else if (typeof HTMLImageElement !== "undefined" && pixels instanceof HTMLImageElement) isImage = true;
    else if (pixels.getContext != null) isCanvasLike = true;
    else throw new Error("pixels passed to tf.browser.fromPixels() must be either an " + `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` + `in browser, or OffscreenCanvas, ImageData in webworker` + ` or {data: Uint32Array, width: number, height: number}, ` + `but was ${pixels.constructor.name}`);
    if (isVideo) {
        const HAVE_CURRENT_DATA_READY_STATE = 2;
        if (isVideo && pixels.readyState < HAVE_CURRENT_DATA_READY_STATE) throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");
    }
    // If the current backend has 'FromPixels' registered, it has a more
    // efficient way of handling pixel uploads, so we call that.
    const kernel = (0, _kernelRegistry.getKernel)("FromPixels", (0, _engine.ENGINE).backendName);
    if (kernel != null) return (0, _engine.ENGINE).runKernel("FromPixels", {
        pixels
    }, {
        numChannels
    });
    const [width, height] = isVideo ? [
        pixels.videoWidth,
        pixels.videoHeight
    ] : [
        pixels.width,
        pixels.height
    ];
    let vals;
    if (isCanvasLike) vals = // tslint:disable-next-line:no-any
    pixels.getContext("2d").getImageData(0, 0, width, height).data;
    else if (isImageData || isPixelData) vals = pixels.data;
    else if (isImage || isVideo) {
        if (fromPixels2DContext == null) fromPixels2DContext = document.createElement("canvas").getContext("2d");
        fromPixels2DContext.canvas.width = width;
        fromPixels2DContext.canvas.height = height;
        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
        vals = fromPixels2DContext.getImageData(0, 0, width, height).data;
    }
    let values;
    if (numChannels === 4) values = new Int32Array(vals);
    else {
        const numPixels = width * height;
        values = new Int32Array(numPixels * numChannels);
        for(let i = 0; i < numPixels; i++)for(let channel = 0; channel < numChannels; ++channel)values[i * numChannels + channel] = vals[i * 4 + channel];
    }
    const outShape = [
        height,
        width,
        numChannels
    ];
    return (0, _tensorOps.tensor3d)(values, outShape, "int32");
}
async function toPixels(img, canvas) {
    let $img = (0, _tensorUtilEnv.convertToTensor)(img, "img", "toPixels");
    if (!(img instanceof (0, _tensor.Tensor))) {
        // Assume int32 if user passed a native array.
        const originalImgTensor = $img;
        $img = originalImgTensor.toInt();
        originalImgTensor.dispose();
    }
    if ($img.rank !== 2 && $img.rank !== 3) throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);
    const [height, width] = $img.shape.slice(0, 2);
    const depth = $img.rank === 2 ? 1 : $img.shape[2];
    if (depth > 4 || depth === 2) throw new Error(`toPixels only supports depth of size ` + `1, 3 or 4 but got ${depth}`);
    const data = await $img.data();
    const minTensor = $img.min();
    const maxTensor = $img.max();
    const vals = await Promise.all([
        minTensor.data(),
        maxTensor.data()
    ]);
    const minVals = vals[0];
    const maxVals = vals[1];
    const min = minVals[0];
    const max = maxVals[0];
    minTensor.dispose();
    maxTensor.dispose();
    if ($img.dtype === "float32") {
        if (min < 0 || max > 1) throw new Error(`Tensor values for a float32 Tensor must be in the ` + `range [0 - 1] but got range [${min} - ${max}].`);
    } else if ($img.dtype === "int32") {
        if (min < 0 || max > 255) throw new Error(`Tensor values for a int32 Tensor must be in the ` + `range [0 - 255] but got range [${min} - ${max}].`);
    } else throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` + ` Please use float32 or int32 tensors.`);
    const multiplier = $img.dtype === "float32" ? 255 : 1;
    const bytes = new Uint8ClampedArray(width * height * 4);
    for(let i = 0; i < height * width; ++i){
        let r, g, b, a;
        if (depth === 1) {
            r = data[i] * multiplier;
            g = data[i] * multiplier;
            b = data[i] * multiplier;
            a = 255;
        } else if (depth === 3) {
            r = data[i * 3] * multiplier;
            g = data[i * 3 + 1] * multiplier;
            b = data[i * 3 + 2] * multiplier;
            a = 255;
        } else if (depth === 4) {
            r = data[i * 4] * multiplier;
            g = data[i * 4 + 1] * multiplier;
            b = data[i * 4 + 2] * multiplier;
            a = data[i * 4 + 3] * multiplier;
        }
        const j = i * 4;
        bytes[j + 0] = Math.round(r);
        bytes[j + 1] = Math.round(g);
        bytes[j + 2] = Math.round(b);
        bytes[j + 3] = Math.round(a);
    }
    if (canvas != null) {
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext("2d");
        const imageData = new ImageData(bytes, width, height);
        ctx.putImageData(imageData, 0, 0);
    }
    if ($img !== img) $img.dispose();
    return bytes;
}
const fromPixels = (0, _operation.op)({
    fromPixels_
});

},{"../engine":"1aEvR","../kernel_registry":"3ziE7","../tensor":"DPGBx","../tensor_util_env":"fsyzK","./operation":"l6IGY","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6p9Tw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Validate gather nd inputs.
 *
 * @param tensor The tensor contains the source values.
 * @param indices The tensor contains the indices to slice the source.
 *
 * @returns [resultShape, numUpdates, sliceSize, strides]
 */ parcelHelpers.export(exports, "prepareAndValidate", ()=>prepareAndValidate);
var _util = require("../util");
function prepareAndValidate(tensor, indices) {
    if (tensor.rank < 1) throw new Error("tf.gatherND() expects the input to be rank 1 or higher," + ` but the rank was ${tensor.rank}.`);
    if (indices.rank < 1) throw new Error("tf.gatherND() expects the indices to be rank 1 or higher," + ` but the rank was ${indices.rank}.`);
    if (indices.dtype !== "int32") throw new Error("tf.gatherND() expects the indices to be int32 type," + ` but the dtype was ${indices.dtype}.`);
    if (indices.shape[indices.rank - 1] > tensor.rank) throw new Error("index innermost dimension length must be <= tensor rank; saw: " + `${indices.shape[indices.rank - 1]} vs. ${tensor.rank}`);
    if (tensor.size === 0) throw new Error("Requested more than 0 entries, but input is empty." + ` Input shape: ${tensor.shape}.`);
    const indicesShape = indices.shape;
    const sliceRank = indicesShape[indicesShape.length - 1];
    // The result shape is
    //   indices.shape[:-1] + params.shape[indices.shape[-1]:]
    let nResult = 1;
    for(let i = 0; i < indicesShape.length - 1; ++i)nResult *= indicesShape[i];
    const inputShape = tensor.shape;
    const resultShape = indicesShape.slice();
    resultShape.pop();
    let sliceSize = 1;
    for(let i1 = sliceRank; i1 < tensor.rank; ++i1){
        sliceSize *= inputShape[i1];
        resultShape.push(inputShape[i1]);
    }
    const strides = [
        ...(0, _util.computeStrides)(tensor.shape).map((stride)=>stride / sliceSize),
        1
    ].slice(0, sliceRank);
    return [
        resultShape,
        nResult,
        sliceSize,
        strides
    ];
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h9rnV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Check whether updates.shape = indices.shape[:batchDim] +
 * shape[sliceDim:]
 *
 * @param x The input tensor.
 */ parcelHelpers.export(exports, "validateUpdateShape", ()=>validateUpdateShape);
/**
 * Validate scatter nd inputs.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 */ parcelHelpers.export(exports, "validateInput", ()=>validateInput);
/**
 * Calculate the shape information for the output.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 *
 * @returns ScatterShapeInfo
 */ parcelHelpers.export(exports, "calculateShapes", ()=>calculateShapes);
var _util = require("../util");
function validateUpdateShape(shape, indices, updates) {
    const sliceDim = indices.rank > 1 ? indices.shape[indices.rank - 1] : 1;
    const batchDim = indices.rank > 1 ? indices.rank - 1 : 1;
    const shapeError = "Must have updates.shape = indices.shape[:batchDim] + " + `shape[sliceDim:], got updates.shape: ${updates.shape}` + `, indices.shape: ${indices.shape}, shape: ${shape}` + `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;
    if (updates.rank < batchDim) throw new Error(shapeError + ` update.rank < ${batchDim}. `);
    if (shape.length < sliceDim + (updates.rank - batchDim)) throw new Error(shapeError + ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);
    if (updates.rank !== batchDim + shape.length - sliceDim) throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);
    for(let d = 0; d < batchDim; ++d){
        if (updates.shape[d] !== indices.shape[d]) throw new Error(shapeError + ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);
    }
    for(let d1 = 0; d1 < updates.rank - batchDim; ++d1){
        if (updates.shape[d1 + batchDim] !== shape[d1 + sliceDim]) throw new Error(shapeError + ` updates.shape[${d1 + batchDim}] (${updates.shape[d1 + batchDim]}) != shape[${d1 + batchDim}] (${shape[d1 + batchDim]})`);
    }
}
function validateInput(updates, indices, shape) {
    if (indices.rank < 1) throw new Error("tf.scatterND() expects the indices to be rank 1 or higher," + ` but the rank was ${indices.rank}.`);
    if (updates.rank < 1) throw new Error("tf.scatterND() expects the updates to be rank 1 or higher," + ` but the rank was ${updates.rank}.`);
    if (indices.dtype !== "int32") throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);
    if (shape.length < 1) throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);
    if (shape.length === 0) {
        if (indices.size === 0) throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);
        if (updates.size === 0) throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);
    }
    validateUpdateShape(shape, indices, updates);
}
function calculateShapes(updates, indices, shape) {
    // Calculate the number of dimensions in indices
    const indicesRank = indices.shape.length;
    const sliceRank = indicesRank > 1 ? indices.shape[indicesRank - 1] : 1;
    // Calculate the number of elements that make up each slice of our updated
    // tensor. This allows us to work with flattened tensors and copy over whole
    // slices at a time.
    const totalNd = shape.length;
    let sliceSize = 1;
    for(let i = sliceRank; i < totalNd; ++i)sliceSize *= shape[i];
    const safeSliceDim = sliceRank < 1 ? 1 : sliceRank;
    const numUpdates = (0, _util.sizeFromShape)(indices.shape) / safeSliceDim;
    const strides = [
        ...(0, _util.computeStrides)(shape.slice(0, sliceRank)),
        1
    ];
    const outputSize = (0, _util.sizeFromShape)(shape);
    return {
        sliceRank,
        numUpdates,
        sliceSize,
        strides,
        outputSize
    };
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"wKqJz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Serializable defines the serialization contract.
 *
 * TFJS requires serializable classes to return their className when asked
 * to avoid issues with minification.
 */ parcelHelpers.export(exports, "Serializable", ()=>Serializable);
/**
 * Maps string keys to class constructors.
 *
 * Used during (de)serialization from the cross-language JSON format, which
 * requires the class name in the serialization format matches the class
 * names as used in Python, should it exist.
 */ parcelHelpers.export(exports, "SerializationMap", ()=>SerializationMap);
/**
 * Register a class with the serialization map of TensorFlow.js.
 *
 * This is often used for registering custom Layers, so they can be
 * serialized and deserialized.
 *
 * Example:
 *
 * ```js
 * class MyCustomLayer extends tf.layers.Layer {
 *   static className = 'MyCustomLayer';
 *
 *   constructor(config) {
 *     super(config);
 *   }
 * }
 * tf.serialization.registerClass(MyCustomLayer);
 * ```
 *
 * @param cls The class to be registered. It must have a public static member
 *   called `className` defined and the value must be a non-empty string.
 */ /** @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true} */ parcelHelpers.export(exports, "registerClass", ()=>registerClass);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("./util");
class Serializable {
    /**
     * Return the class name for this class to use in serialization contexts.
     *
     * Generally speaking this will be the same thing that constructor.name
     * would have returned.  However, the class name needs to be robust
     * against minification for serialization/deserialization to work properly.
     *
     * There's also places such as initializers.VarianceScaling, where
     * implementation details between different languages led to different
     * class hierarchies and a non-leaf node is used for serialization purposes.
     */ getClassName() {
        return this.constructor.className;
    }
    /**
     * Creates an instance of T from a ConfigDict.
     *
     * This works for most descendants of serializable.  A few need to
     * provide special handling.
     * @param cls A Constructor for the class to instantiate.
     * @param config The Configuration for the object.
     */ /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config);
    }
}
class SerializationMap {
    constructor(){
        this.classNameMap = {};
    }
    /**
     * Returns the singleton instance of the map.
     */ static getMap() {
        if (SerializationMap.instance == null) SerializationMap.instance = new SerializationMap();
        return SerializationMap.instance;
    }
    /**
     * Registers the class as serializable.
     */ static register(cls) {
        SerializationMap.getMap().classNameMap[cls.className] = [
            cls,
            cls.fromConfig
        ];
    }
}
function registerClass(cls) {
    (0, _util.assert)(cls.className != null, ()=>`Class being registered does not have the static className ` + `property defined.`);
    (0, _util.assert)(typeof cls.className === "string", ()=>`className is required to be a string, but got type ` + typeof cls.className);
    (0, _util.assert)(cls.className.length > 0, ()=>`Class being registered has an empty-string as its className, ` + `which is disallowed.`);
    SerializationMap.register(cls);
}

},{"./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9tuFM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TEST_EPSILON_FLOAT16", ()=>TEST_EPSILON_FLOAT16);
parcelHelpers.export(exports, "expectArraysClose", ()=>expectArraysClose);
parcelHelpers.export(exports, "testEpsilon", ()=>testEpsilon);
parcelHelpers.export(exports, "expectPromiseToFail", ()=>expectPromiseToFail);
parcelHelpers.export(exports, "expectArraysEqual", ()=>expectArraysEqual);
parcelHelpers.export(exports, "expectNumbersClose", ()=>expectNumbersClose);
parcelHelpers.export(exports, "expectValuesInRange", ()=>expectValuesInRange);
parcelHelpers.export(exports, "expectArrayBuffersEqual", ()=>expectArrayBuffersEqual);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("./engine");
var _tensorUtilEnv = require("./tensor_util_env");
var _util = require("./util");
const TEST_EPSILON_FLOAT32 = 1e-3;
const TEST_EPSILON_FLOAT16 = 1e-1;
function expectArraysClose(actual, expected, epsilon) {
    if (epsilon == null) epsilon = testEpsilon();
    return expectArraysPredicate(actual, expected, (a, b)=>areClose(a, b, epsilon));
}
function testEpsilon() {
    return (0, _engine.ENGINE).backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;
}
function expectArraysPredicate(actual, expected, predicate) {
    let checkClassType = true;
    if ((0, _util.isTypedArray)(actual) || (0, _util.isTypedArray)(expected)) checkClassType = false;
    if ((0, _util.isTypedArray)(actual) && (0, _util.isTypedArray)(expected)) checkClassType = true;
    if (checkClassType) {
        const aType = actual.constructor.name;
        const bType = expected.constructor.name;
        if (aType !== bType) throw new Error(`Arrays are of different type. Actual: ${aType}. ` + `Expected: ${bType}`);
    }
    if (Array.isArray(actual) && Array.isArray(expected)) {
        const actualShape = (0, _tensorUtilEnv.inferShape)(actual);
        const expectedShape = (0, _tensorUtilEnv.inferShape)(expected);
        if (!(0, _util.arraysEqual)(actualShape, expectedShape)) throw new Error(`Arrays have different shapes. ` + `Actual: [${actualShape}]. Expected: [${expectedShape}]`);
    }
    const actualFlat = (0, _util.isTypedArray)(actual) ? actual : (0, _util.flatten)(actual);
    const expectedFlat = (0, _util.isTypedArray)(expected) ? expected : (0, _util.flatten)(expected);
    if (actualFlat.length !== expectedFlat.length) throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` + `expected: ${expectedFlat.length}.\n` + `Actual:   ${actualFlat}.\n` + `Expected: ${expectedFlat}.`);
    for(let i = 0; i < expectedFlat.length; ++i){
        const a = actualFlat[i];
        const e = expectedFlat[i];
        if (!predicate(a, e)) throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\n` + `Actual:   ${actualFlat}.\n` + `Expected: ${expectedFlat}.`);
    }
}
function expectPromiseToFail(fn, done) {
    fn().then(()=>done.fail(), ()=>done());
}
function expectArraysEqual(actual, expected) {
    const exp = typeof expected === "string" || typeof expected === "number" || typeof expected === "boolean" ? [
        expected
    ] : expected;
    if ((0, _util.isString)(actual) || (0, _util.isString)(actual[0]) || (0, _util.isString)(expected) || (0, _util.isString)(expected[0])) // tslint:disable-next-line: triple-equals
    return expectArraysPredicate(actual, exp, (a, b)=>a == b);
    return expectArraysPredicate(actual, expected, (a, b)=>areClose(a, b, 0));
}
function expectNumbersClose(a, e, epsilon) {
    if (epsilon == null) epsilon = testEpsilon();
    if (!areClose(a, e, epsilon)) throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);
}
function areClose(a, e, epsilon) {
    if (!isFinite(a) && !isFinite(e)) return true;
    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) return false;
    return true;
}
function expectValuesInRange(actual, low, high) {
    for(let i = 0; i < actual.length; i++){
        if (actual[i] < low || actual[i] > high) throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);
    }
}
function expectArrayBuffersEqual(actual, expected) {
    // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in
    // a Float32Array solves this issue.
    expect(new Float32Array(actual)).toEqual(new Float32Array(expected));
}

},{"./engine":"1aEvR","./tensor_util_env":"fsyzK","./util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"v1SEt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
const version = "2.0.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8CK58":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV3", ()=>(0, _nonMaxSuppressionImpl.nonMaxSuppressionV3));
parcelHelpers.export(exports, "nonMaxSuppressionV5", ()=>(0, _nonMaxSuppressionImpl.nonMaxSuppressionV5));
parcelHelpers.export(exports, "upcastType", ()=>(0, _types.upcastType));
parcelHelpers.export(exports, "segment_util", ()=>_segmentUtil);
parcelHelpers.export(exports, "castTensor", ()=>castTensor);
parcelHelpers.export(exports, "reshapeTensor", ()=>reshapeTensor);
parcelHelpers.export(exports, "linspaceImpl", ()=>linspaceImpl);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorOps = require("../ops/tensor_ops");
var _util = require("../util");
var _segmentUtil = require("../ops/segment_util");
// Utilities needed by backend consumers of tf-core.
var _axisUtil = require("../ops/axis_util");
parcelHelpers.exportAll(_axisUtil, exports);
var _broadcastUtil = require("../ops/broadcast_util");
parcelHelpers.exportAll(_broadcastUtil, exports);
var _concatUtil = require("../ops/concat_util");
parcelHelpers.exportAll(_concatUtil, exports);
var _convUtil = require("../ops/conv_util");
parcelHelpers.exportAll(_convUtil, exports);
var _reduceUtil = require("../ops/reduce_util");
parcelHelpers.exportAll(_reduceUtil, exports);
var _nonMaxSuppressionImpl = require("./non_max_suppression_impl");
var _types = require("../types");
var _arrayOpsUtil = require("../ops/array_ops_util");
parcelHelpers.exportAll(_arrayOpsUtil, exports);
var _gatherNdUtil = require("../ops/gather_nd_util");
parcelHelpers.exportAll(_gatherNdUtil, exports);
var _scatterNdUtil = require("../ops/scatter_nd_util");
parcelHelpers.exportAll(_scatterNdUtil, exports);
var _seluUtil = require("../ops/selu_util");
parcelHelpers.exportAll(_seluUtil, exports);
var _fusedUtil = require("../ops/fused_util");
parcelHelpers.exportAll(_fusedUtil, exports);
var _erfUtil = require("../ops/erf_util");
parcelHelpers.exportAll(_erfUtil, exports);
var _log = require("../log");
parcelHelpers.exportAll(_log, exports);
var _complexUtil = require("../backends/complex_util");
parcelHelpers.exportAll(_complexUtil, exports);
function castTensor(x, dtype, backend) {
    if (dtype === "complex64") {
        if (x.dtype === "complex64") return x.clone();
        const zerosTensor = (0, _tensorOps.zeros)(x.shape);
        const floatX = x.toFloat();
        const result = backend.complex(floatX, zerosTensor);
        zerosTensor.dispose();
        floatX.dispose();
        return result;
    }
    if (!(0, _util.hasEncodingLoss)(x.dtype, dtype)) // We don't change the underlying data, since we cast to higher
    // precision.
    return (0, _engine.ENGINE).makeTensorFromDataId(x.dataId, x.shape, dtype);
    if (x.dtype === "complex64") {
        const real = backend.real(x);
        const result1 = real.cast(dtype);
        real.dispose();
        return result1;
    }
    if (dtype === "int32") return backend.int(x);
    else if (dtype === "bool") {
        const zero = (0, _tensorOps.scalar)(0, x.dtype);
        const result2 = backend.notEqual(x, zero);
        zero.dispose();
        return result2;
    } else throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);
}
function reshapeTensor(x, shape) {
    return (0, _engine.ENGINE).makeTensorFromDataId(x.dataId, shape, x.dtype);
}
function linspaceImpl(start, stop, num) {
    const step = (stop - start) / (num - 1);
    const values = (0, _util.makeZerosTypedArray)(num, "float32");
    values[0] = start;
    for(let i = 1; i < values.length; i++)values[i] = values[i - 1] + step;
    return (0, _tensorOps.tensor1d)(values, "float32");
}

},{"../engine":"1aEvR","../ops/tensor_ops":"1qbPi","../util":"9v6Fb","../ops/segment_util":"hWYBC","../ops/axis_util":"1A9rc","../ops/broadcast_util":"kQqEF","../ops/concat_util":"4F290","../ops/conv_util":"oHP2H","../ops/reduce_util":"6f6kp","./non_max_suppression_impl":"hzXRp","../types":"aToA9","../ops/array_ops_util":"lpuBH","../ops/gather_nd_util":"6p9Tw","../ops/scatter_nd_util":"h9rnV","../ops/selu_util":"11lT6","../ops/fused_util":"9OXSQ","../ops/erf_util":"jWo3R","../log":"fT4Tx","../backends/complex_util":"bKdDq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWYBC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "segOpComputeOptimalWindowSize", ()=>segOpComputeOptimalWindowSize);
parcelHelpers.export(exports, "computeOutShape", ()=>computeOutShape);
parcelHelpers.export(exports, "collectGatherOpShapeInfo", ()=>collectGatherOpShapeInfo);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
var _reduceUtil = require("./reduce_util");
function segOpComputeOptimalWindowSize(inSize, numSegments) {
    let done = false;
    let res;
    if (inSize <= (0, _reduceUtil.PARALLELIZE_THRESHOLD)) {
        res = inSize;
        done = true;
    } else res = (0, _util.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
    while(!done)if (res > numSegments || res === inSize) done = true;
    else res = (0, _util.nearestDivisor)(inSize, res + 1);
    return res;
}
function computeOutShape(aShape, axis, numSegments) {
    const outShape = [];
    const rank = aShape.length;
    for(let dim = 0; dim < rank; dim++)if (dim !== axis) outShape.push(aShape[dim]);
    else outShape.push(numSegments);
    return outShape;
}
function collectGatherOpShapeInfo(x, indices, axis) {
    const dimSize = x.shape[axis];
    const outputShape = [];
    let batchSize = 1;
    let sliceSize = 1;
    for(let i = 0; i < axis; i++){
        outputShape.push(x.shape[i]);
        batchSize *= x.shape[i];
    }
    for(let i1 = 0; i1 < indices.rank; i1++)outputShape.push(indices.shape[i1]);
    for(let i2 = axis + 1; i2 < x.rank; i2++){
        outputShape.push(x.shape[i2]);
        sliceSize *= x.shape[i2];
    }
    return {
        batchSize,
        sliceSize,
        dimSize,
        outputShape
    };
}

},{"../util":"9v6Fb","./reduce_util":"6f6kp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6f6kp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PARALLELIZE_THRESHOLD", ()=>PARALLELIZE_THRESHOLD);
parcelHelpers.export(exports, "computeOptimalWindowSize", ()=>computeOptimalWindowSize);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Inputs of size above this threshold will be parallelized by calling multiple
 * shader programs.
 */ var _util = require("../util");
const PARALLELIZE_THRESHOLD = 30;
function computeOptimalWindowSize(inSize) {
    if (inSize <= PARALLELIZE_THRESHOLD) return inSize;
    return (0, _util.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hzXRp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV3", ()=>nonMaxSuppressionV3);
parcelHelpers.export(exports, "nonMaxSuppressionV5", ()=>nonMaxSuppressionV5);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.
 */ var _tensorOps = require("../ops/tensor_ops");
var _arrayUtil = require("./array_util");
function nonMaxSuppressionV3(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
    const dummySoftNmsSigma = 0.0;
    const result = nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, dummySoftNmsSigma);
    result.selectedScores.dispose();
    result.numValidOutputs.dispose();
    return result.selectedIndices;
}
function nonMaxSuppressionV5(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
    // For NonMaxSuppressionV5Op, we always return a second output holding
    // corresponding scores.
    const returnScoresTensor = true;
    const result = nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor);
    result.numValidOutputs.dispose();
    return {
        selectedIndices: result.selectedIndices,
        selectedScores: result.selectedScores
    };
}
function nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false) {
    // The list is sorted in ascending order, so that we can always pop the
    // candidate with the largest score in O(1) time.
    const candidates = Array.from(scores).map((score, boxIndex)=>({
            score,
            boxIndex,
            suppressBeginIndex: 0
        })).filter((c)=>c.score > scoreThreshold).sort(ascendingComparator);
    // If softNmsSigma is 0, the outcome of this algorithm is exactly same as
    // before.
    const scale = softNmsSigma > 0 ? -0.5 / softNmsSigma : 0.0;
    const selectedIndices = [];
    const selectedScores = [];
    while(selectedIndices.length < maxOutputSize && candidates.length > 0){
        const candidate = candidates.pop();
        const { score: originalScore , boxIndex , suppressBeginIndex  } = candidate;
        if (originalScore < scoreThreshold) break;
        // Overlapping boxes are likely to have similar scores, therefore we
        // iterate through the previously selected boxes backwards in order to
        // see if candidate's score should be suppressed. We use
        // suppressBeginIndex to track and ensure a candidate can be suppressed
        // by a selected box no more than once. Also, if the overlap exceeds
        // iouThreshold, we simply ignore the candidate.
        let ignoreCandidate = false;
        for(let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j){
            const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);
            if (iou >= iouThreshold) {
                ignoreCandidate = true;
                break;
            }
            candidate.score = candidate.score * suppressWeight(iouThreshold, scale, iou);
            if (candidate.score <= scoreThreshold) break;
        }
        // At this point, if `candidate.score` has not dropped below
        // `scoreThreshold`, then we know that we went through all of the
        // previous selections and can safely update `suppressBeginIndex` to the
        // end of the selected array. Then we can re-insert the candidate with
        // the updated score and suppressBeginIndex back in the candidate list.
        // If on the other hand, `candidate.score` has dropped below the score
        // threshold, we will not add it back to the candidates list.
        candidate.suppressBeginIndex = selectedIndices.length;
        if (!ignoreCandidate) {
            // Candidate has passed all the tests, and is not suppressed, so
            // select the candidate.
            if (candidate.score === originalScore) {
                selectedIndices.push(boxIndex);
                selectedScores.push(candidate.score);
            } else if (candidate.score > scoreThreshold) // Candidate's score is suppressed but is still high enough to be
            // considered, so add back to the candidates list.
            (0, _arrayUtil.binaryInsert)(candidates, candidate, ascendingComparator);
        }
    }
    // NonMaxSuppressionV4 feature: padding output to maxOutputSize.
    const numValidOutputs = selectedIndices.length;
    if (padToMaxOutputSize) {
        selectedIndices.fill(0, numValidOutputs);
        selectedScores.fill(0.0, numValidOutputs);
    }
    return {
        selectedIndices: (0, _tensorOps.tensor1d)(selectedIndices, "int32"),
        selectedScores: (0, _tensorOps.tensor1d)(selectedScores, "float32"),
        numValidOutputs: (0, _tensorOps.scalar)(numValidOutputs, "int32")
    };
}
function intersectionOverUnion(boxes, i, j) {
    const iCoord = boxes.subarray(i * 4, i * 4 + 4);
    const jCoord = boxes.subarray(j * 4, j * 4 + 4);
    const yminI = Math.min(iCoord[0], iCoord[2]);
    const xminI = Math.min(iCoord[1], iCoord[3]);
    const ymaxI = Math.max(iCoord[0], iCoord[2]);
    const xmaxI = Math.max(iCoord[1], iCoord[3]);
    const yminJ = Math.min(jCoord[0], jCoord[2]);
    const xminJ = Math.min(jCoord[1], jCoord[3]);
    const ymaxJ = Math.max(jCoord[0], jCoord[2]);
    const xmaxJ = Math.max(jCoord[1], jCoord[3]);
    const areaI = (ymaxI - yminI) * (xmaxI - xminI);
    const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);
    if (areaI <= 0 || areaJ <= 0) return 0.0;
    const intersectionYmin = Math.max(yminI, yminJ);
    const intersectionXmin = Math.max(xminI, xminJ);
    const intersectionYmax = Math.min(ymaxI, ymaxJ);
    const intersectionXmax = Math.min(xmaxI, xmaxJ);
    const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) * Math.max(intersectionXmax - intersectionXmin, 0.0);
    return intersectionArea / (areaI + areaJ - intersectionArea);
}
// A Gaussian penalty function, this method always returns values in [0, 1].
// The weight is a function of similarity, the more overlap two boxes are, the
// smaller the weight is, meaning highly overlapping boxe will be significantly
// penalized. On the other hand, a non-overlapping box will not be penalized.
function suppressWeight(iouThreshold, scale, iou) {
    const weight = Math.exp(scale * iou * iou);
    return iou <= iouThreshold ? weight : 0.0;
}
function ascendingComparator(c1, c2) {
    // For objects with same scores, we make the object with the larger index go
    // first. In an array that pops from the end, this means that the object with
    // the smaller index will be popped first. This ensures the same output as
    // the TensorFlow python version.
    return c1.score - c2.score || c1.score === c2.score && c2.boxIndex - c1.boxIndex;
}

},{"../ops/tensor_ops":"1qbPi","./array_util":"aIMQN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aIMQN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Inserts a value into a sorted array. This method allows duplicate, meaning it
 * allows inserting duplicate value, in which case, the element will be inserted
 * at the lowest index of the value.
 * @param arr The array to modify.
 * @param element The element to insert.
 * @param comparator Optional. If no comparator is specified, elements are
 * compared using array_util.defaultComparator, which is suitable for Strings
 * and Numbers in ascending arrays. If the array contains multiple instances of
 * the target value, the left-most instance will be returned. To provide a
 * comparator, it should take 2 arguments to compare and return a negative,
 * zero, or a positive number.
 */ parcelHelpers.export(exports, "binaryInsert", ()=>binaryInsert);
/**
 * Searches the array for the target using binary search, returns the index
 * of the found element, or position to insert if element not found. If no
 * comparator is specified, elements are compared using array_
 * util.defaultComparator, which is suitable for Strings and Numbers in
 * ascending arrays. If the array contains multiple instances of the target
 * value, the left-most instance will be returned.
 * @param arr The array to be searched in.
 * @param target The target to be searched for.
 * @param comparator Should take 2 arguments to compare and return a negative,
 *    zero, or a positive number.
 * @return Lowest index of the target value if found, otherwise the insertion
 *    point where the target should be inserted, in the form of
 *    (-insertionPoint - 1).
 */ parcelHelpers.export(exports, "binarySearch", ()=>binarySearch);
function binaryInsert(arr, element, comparator) {
    const index = binarySearch(arr, element, comparator);
    const insertionPoint = index < 0 ? -(index + 1) : index;
    arr.splice(insertionPoint, 0, element);
}
function binarySearch(arr, target, comparator) {
    return binarySearch_(arr, target, comparator || defaultComparator);
}
/**
 * Compares its two arguments for order.
 * @param a The first element to be compared.
 * @param b The second element to be compared.
 * @return A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 */ function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
}
function binarySearch_(arr, target, comparator) {
    let left = 0;
    let right = arr.length;
    let middle = 0;
    let found = false;
    while(left < right){
        middle = left + (right - left >>> 1);
        const compareResult = comparator(target, arr[middle]);
        if (compareResult > 0) left = middle + 1;
        else {
            right = middle;
            // If compareResult is 0, the value is found. We record it is found,
            // and then keep looking because there may be duplicate.
            found = !compareResult;
        }
    }
    return found ? left : -left - 1;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lpuBH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Gets the new shape of the input Tensor after it's been reshaped
 * to:
 * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),
 * inputShape[1], ..., inputShape[N-1]]
 *
 * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */ parcelHelpers.export(exports, "getReshaped", ()=>getReshaped);
/**
 * Gets the permutation that will transpose the dimensions of the
 * reshaped tensor to shape:
 *
 * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,
 * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */ parcelHelpers.export(exports, "getPermuted", ()=>getPermuted);
/**
 * Gets the shape of the reshaped and permuted input Tensor before any cropping
 * is applied.  The new shape will be:
 *
 * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,
 * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */ parcelHelpers.export(exports, "getReshapedPermuted", ()=>getReshapedPermuted);
/**
 * Converts the crops argument into the beginning coordinates of a slice
 * operation.
 */ parcelHelpers.export(exports, "getSliceBeginCoords", ()=>getSliceBeginCoords);
/**
 * Converts the crops argument into the size of a slice operation.  When
 * combined with getSliceBeginCoords this function allows the reshaped and
 * permuted Tensor to be cropped to its final output shape of:
 *
 * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,
 * inputShape[M] * blockShape[M-1] -crops[M-1,0] -
 * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */ parcelHelpers.export(exports, "getSliceSize", ()=>getSliceSize);
function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {
    let reshaped = [];
    if (batchToSpace) {
        reshaped = reshaped.concat(blockShape.slice(0));
        reshaped.push(inputShape[0] / prod);
        reshaped = reshaped.concat(inputShape.slice(1));
    } else {
        reshaped = reshaped.concat(inputShape[0]);
        const spatialLength = blockShape.length;
        for(let i = 0; i < spatialLength; ++i)reshaped = reshaped.concat([
            inputShape[i + 1] / blockShape[i],
            blockShape[i]
        ]);
        reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));
    }
    return reshaped;
}
function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {
    const permuted = [];
    if (batchToSpace) {
        permuted.push(blockShapeRank);
        for(let i = blockShapeRank + 1; i < reshapedRank; ++i)if (i <= 2 * blockShapeRank) {
            permuted.push(i);
            permuted.push(i - (blockShapeRank + 1));
        } else permuted.push(i);
    } else {
        const permutedBeforeBatch = [];
        const permutedAfterBatch = [];
        for(let i1 = 1; i1 < reshapedRank; ++i1)if (i1 >= blockShapeRank * 2 + 1 || i1 % 2 === 1) permutedAfterBatch.push(i1);
        else permutedBeforeBatch.push(i1);
        permuted.push(...permutedBeforeBatch);
        permuted.push(0);
        permuted.push(...permutedAfterBatch);
    }
    return permuted;
}
function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {
    const reshapedPermuted = [];
    if (batchToSpace) reshapedPermuted.push(inputShape[0] / prod);
    else reshapedPermuted.push(inputShape[0] * prod);
    for(let i = 1; i < inputShape.length; ++i)if (i <= blockShape.length) {
        if (batchToSpace) reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);
        else reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);
    } else reshapedPermuted.push(inputShape[i]);
    return reshapedPermuted;
}
function getSliceBeginCoords(crops, blockShape) {
    const sliceBeginCoords = [
        0
    ];
    for(let i = 0; i < blockShape; ++i)sliceBeginCoords.push(crops[i][0]);
    return sliceBeginCoords;
}
function getSliceSize(uncroppedShape, crops, blockShape) {
    const sliceSize = uncroppedShape.slice(0, 1);
    for(let i = 0; i < blockShape; ++i)sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);
    return sliceSize;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"11lT6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SELU_SCALEALPHA", ()=>SELU_SCALEALPHA);
parcelHelpers.export(exports, "SELU_SCALE", ()=>SELU_SCALE);
const SELU_SCALEALPHA = 1.7580993408473768599402175208123;
const SELU_SCALE = 1.0507009873554804934193349852946;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9OXSQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shouldFuse", ()=>shouldFuse);
const shouldFuse = (gradientDepth, activation)=>{
    const gradientMode = gradientDepth > 0;
    return !gradientMode || activation === "linear";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jWo3R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ERF_P", ()=>ERF_P);
parcelHelpers.export(exports, "ERF_A1", ()=>ERF_A1);
parcelHelpers.export(exports, "ERF_A2", ()=>ERF_A2);
parcelHelpers.export(exports, "ERF_A3", ()=>ERF_A3);
parcelHelpers.export(exports, "ERF_A4", ()=>ERF_A4);
parcelHelpers.export(exports, "ERF_A5", ()=>ERF_A5);
const ERF_P = 0.3275911;
const ERF_A1 = 0.254829592;
const ERF_A2 = -0.284496736;
const ERF_A3 = 1.421413741;
const ERF_A4 = -1.453152027;
const ERF_A5 = 1.061405429;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fT4Tx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "warn", ()=>warn);
parcelHelpers.export(exports, "log", ()=>log);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _environment = require("./environment");
function warn(...msg) {
    if (!(0, _environment.env)().getBool("IS_TEST")) console.warn(...msg);
}
function log(...msg) {
    if (!(0, _environment.env)().getBool("IS_TEST")) console.log(...msg);
}

},{"./environment":"8tlxC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bKdDq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Merges real and imaginary Float32Arrays into a single complex Float32Array.
 *
 * The memory layout is interleaved as follows:
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 * complex: [r0, i0, r1, i1, r2, i2]
 *
 * This is the inverse of splitRealAndImagArrays.
 *
 * @param real The real values of the complex tensor values.
 * @param imag The imag values of the complex tensor values.
 * @returns A complex tensor as a Float32Array with merged values.
 */ parcelHelpers.export(exports, "mergeRealAndImagArrays", ()=>mergeRealAndImagArrays);
/**
 * Splits a complex Float32Array into real and imag parts.
 *
 * The memory layout is interleaved as follows:
 * complex: [r0, i0, r1, i1, r2, i2]
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 *
 * This is the inverse of mergeRealAndImagArrays.
 *
 * @param complex The complex tensor values.
 * @returns An object with real and imag Float32Array components of the complex
 *     tensor.
 */ parcelHelpers.export(exports, "splitRealAndImagArrays", ()=>splitRealAndImagArrays);
/**
 * Extracts even indexed complex values in the given array.
 * @param complex The complex tensor values
 */ parcelHelpers.export(exports, "complexWithEvenIndex", ()=>complexWithEvenIndex);
/**
 * Extracts odd indexed comple values in the given array.
 * @param complex The complex tensor values
 */ parcelHelpers.export(exports, "complexWithOddIndex", ()=>complexWithOddIndex);
/**
 * Get the map representing a complex value in the given array.
 * @param complex The complex tensor values.
 * @param index An index of the target complex value.
 */ parcelHelpers.export(exports, "getComplexWithIndex", ()=>getComplexWithIndex);
/**
 * Insert a given complex value into the TypedArray.
 * @param data The array in which the complex value is inserted.
 * @param c The complex value to be inserted.
 * @param index An index of the target complex value.
 */ parcelHelpers.export(exports, "assignToTypedArray", ()=>assignToTypedArray);
/**
 * Make the list of exponent terms used by FFT.
 */ parcelHelpers.export(exports, "exponents", ()=>exponents);
/**
 * Make the exponent term used by FFT.
 */ parcelHelpers.export(exports, "exponent", ()=>exponent);
function mergeRealAndImagArrays(real, imag) {
    if (real.length !== imag.length) throw new Error(`Cannot merge real and imag arrays of different lengths. real:` + `${real.length}, imag: ${imag.length}.`);
    const result = new Float32Array(real.length * 2);
    for(let i = 0; i < result.length; i += 2){
        result[i] = real[i / 2];
        result[i + 1] = imag[i / 2];
    }
    return result;
}
function splitRealAndImagArrays(complex) {
    const real = new Float32Array(complex.length / 2);
    const imag = new Float32Array(complex.length / 2);
    for(let i = 0; i < complex.length; i += 2){
        real[i / 2] = complex[i];
        imag[i / 2] = complex[i + 1];
    }
    return {
        real,
        imag
    };
}
function complexWithEvenIndex(complex) {
    const len = Math.ceil(complex.length / 4);
    const real = new Float32Array(len);
    const imag = new Float32Array(len);
    for(let i = 0; i < complex.length; i += 4){
        real[Math.floor(i / 4)] = complex[i];
        imag[Math.floor(i / 4)] = complex[i + 1];
    }
    return {
        real,
        imag
    };
}
function complexWithOddIndex(complex) {
    const len = Math.floor(complex.length / 4);
    const real = new Float32Array(len);
    const imag = new Float32Array(len);
    for(let i = 2; i < complex.length; i += 4){
        real[Math.floor(i / 4)] = complex[i];
        imag[Math.floor(i / 4)] = complex[i + 1];
    }
    return {
        real,
        imag
    };
}
function getComplexWithIndex(complex, index) {
    const real = complex[index * 2];
    const imag = complex[index * 2 + 1];
    return {
        real,
        imag
    };
}
function assignToTypedArray(data, real, imag, index) {
    data[index * 2] = real;
    data[index * 2 + 1] = imag;
}
function exponents(n, inverse) {
    const real = new Float32Array(n / 2);
    const imag = new Float32Array(n / 2);
    for(let i = 0; i < Math.ceil(n / 2); i++){
        const x = (inverse ? 2 : -2) * Math.PI * (i / n);
        real[i] = Math.cos(x);
        imag[i] = Math.sin(x);
    }
    return {
        real,
        imag
    };
}
function exponent(k, n, inverse) {
    const x = (inverse ? 2 : -2) * Math.PI * (k / n);
    const real = Math.cos(x);
    const imag = Math.sin(x);
    return {
        real,
        imag
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9xKxz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "nonMaxSuppressionV3", ()=>(0, _nonMaxSuppressionImpl.nonMaxSuppressionV3));
parcelHelpers.export(exports, "nonMaxSuppressionV5", ()=>(0, _nonMaxSuppressionImpl.nonMaxSuppressionV5));
parcelHelpers.export(exports, "split", ()=>(0, _splitShared.split));
parcelHelpers.export(exports, "tile", ()=>(0, _tileImpl.tile));
parcelHelpers.export(exports, "topkImpl", ()=>(0, _topkImpl.topkImpl));
parcelHelpers.export(exports, "whereImpl", ()=>(0, _whereImpl.whereImpl));
var _nonMaxSuppressionImpl = require("./non_max_suppression_impl");
var _splitShared = require("./split_shared");
var _tileImpl = require("./tile_impl");
var _topkImpl = require("./topk_impl");
var _whereImpl = require("./where_impl");

},{"./non_max_suppression_impl":"hzXRp","./split_shared":"kFYSD","./tile_impl":"kz720","./topk_impl":"j5MYp","./where_impl":"gWXHH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kFYSD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // TODO(annxingyuan): Use this helper in WASM Split kernel once intermediate
// kernels have been modularized in WebGL and CPU
// https://github.com/tensorflow/tfjs/issues/2822.
/** Shared implementation of the split kernel across WebGL and CPU. */ parcelHelpers.export(exports, "split", ()=>split);
function split(x, sizeSplits, axis) {
    const begin = new Array(x.rank).fill(0);
    const size = x.shape.slice();
    return sizeSplits.map((s)=>{
        const sliceSize = [
            ...size
        ];
        sliceSize[axis] = s;
        const slice = x.slice(begin, sliceSize);
        begin[axis] += s;
        return slice;
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kz720":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tile", ()=>tile);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * An implementation of the tile kernel shared between webgl and cpu for string
 * tensors only.
 */ var _arrayOps = require("../ops/array_ops");
function tile(xBuf, reps) {
    const newShape = new Array(xBuf.rank);
    for(let i = 0; i < newShape.length; i++)newShape[i] = xBuf.shape[i] * reps[i];
    const result = (0, _arrayOps.buffer)(newShape, xBuf.dtype);
    for(let i1 = 0; i1 < result.values.length; ++i1){
        const newLoc = result.indexToLoc(i1);
        const originalLoc = new Array(xBuf.rank);
        for(let j = 0; j < originalLoc.length; j++)originalLoc[j] = newLoc[j] % xBuf.shape[j];
        const originalIndex = xBuf.locToIndex(originalLoc);
        result.values[i1] = xBuf.values[originalIndex];
    }
    return result.toTensor();
}

},{"../ops/array_ops":"29MCO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j5MYp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "topkImpl", ()=>topkImpl);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /** An implementation of the TopK kernel shared between webgl and cpu. */ var _tensorOps = require("../ops/tensor_ops");
var _util = require("../util");
function topkImpl(x, xShape, xDtype, k, sorted) {
    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
    const lastDim = xShape[xShape.length - 1];
    const [batch, size] = [
        x.length / lastDim,
        lastDim
    ];
    const allTopKVals = (0, _util.getTypedArrayFromDType)(xDtype, batch * k);
    const allTopKIndices = (0, _util.getTypedArrayFromDType)("int32", batch * k);
    for(let b = 0; b < batch; b++){
        const offset = b * size;
        const vals = x.subarray(offset, offset + size);
        const valAndInd = [];
        for(let i = 0; i < vals.length; i++)valAndInd.push({
            value: vals[i],
            index: i
        });
        valAndInd.sort((a, b)=>b.value - a.value);
        const outOffset = b * k;
        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);
        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);
        for(let i1 = 0; i1 < k; i1++){
            topKVals[i1] = valAndInd[i1].value;
            topKIndices[i1] = valAndInd[i1].index;
        }
    }
    // Reshape back to the original input shape, except that the last
    // dimension is k.
    const outputShape = xShape.slice();
    outputShape[outputShape.length - 1] = k;
    return [
        (0, _tensorOps.tensor)(allTopKVals, outputShape, xDtype),
        (0, _tensorOps.tensor)(allTopKIndices, outputShape, "int32")
    ];
}

},{"../ops/tensor_ops":"1qbPi","../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gWXHH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "whereImpl", ()=>whereImpl);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /** An implementation of the Where kernel shared between cpu and webgl */ var _arrayOps = require("../ops/array_ops");
function whereImpl(condShape, condVals) {
    const indices = [];
    for(let i = 0; i < condVals.length; i++)if (condVals[i]) indices.push(i);
    const inBuffer = (0, _arrayOps.buffer)(condShape, "int32");
    const out = (0, _arrayOps.buffer)([
        indices.length,
        condShape.length
    ], "int32");
    for(let i1 = 0; i1 < indices.length; i1++){
        const loc = inBuffer.indexToLoc(indices[i1]);
        const offset = i1 * condShape.length;
        out.values.set(loc, offset);
    }
    return out.toTensor();
}

},{"../ops/array_ops":"29MCO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iDElj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Modularized ops.
parcelHelpers.export(exports, "add", ()=>(0, _add.add));
parcelHelpers.export(exports, "addN", ()=>(0, _addN.addN));
parcelHelpers.export(exports, "batchToSpaceND", ()=>(0, _batchToSpaceNd.batchToSpaceND));
parcelHelpers.export(exports, "batchNorm", ()=>(0, _batchnorm.batchNorm));
parcelHelpers.export(exports, "batchNorm2d", ()=>(0, _batchnorm2D.batchNorm2d));
parcelHelpers.export(exports, "batchNorm3d", ()=>(0, _batchnorm3D.batchNorm3d));
parcelHelpers.export(exports, "batchNorm4d", ()=>(0, _batchnorm4D.batchNorm4d));
parcelHelpers.export(exports, "broadcastTo", ()=>(0, _broadcastTo.broadcastTo));
parcelHelpers.export(exports, "clone", ()=>(0, _clone.clone));
parcelHelpers.export(exports, "concat", ()=>(0, _concat.concat));
parcelHelpers.export(exports, "concat1d", ()=>(0, _concat1D.concat1d));
parcelHelpers.export(exports, "concat2d", ()=>(0, _concat2D.concat2d));
parcelHelpers.export(exports, "concat3d", ()=>(0, _concat3D.concat3d));
parcelHelpers.export(exports, "concat4d", ()=>(0, _concat4D.concat4d));
parcelHelpers.export(exports, "conv1d", ()=>(0, _conv1D.conv1d));
parcelHelpers.export(exports, "conv2d", ()=>(0, _conv2D.conv2d));
parcelHelpers.export(exports, "conv2dTranspose", ()=>(0, _conv2DTranspose.conv2dTranspose));
parcelHelpers.export(exports, "conv3d", ()=>(0, _conv3D.conv3d));
parcelHelpers.export(exports, "conv3dTranspose", ()=>(0, _conv3DTranspose.conv3dTranspose));
parcelHelpers.export(exports, "depthToSpace", ()=>(0, _depthToSpace.depthToSpace));
parcelHelpers.export(exports, "depthwiseConv2d", ()=>(0, _depthwiseConv2D.depthwiseConv2d));
parcelHelpers.export(exports, "diag", ()=>(0, _diag.diag));
parcelHelpers.export(exports, "div", ()=>(0, _div.div));
parcelHelpers.export(exports, "divNoNan", ()=>(0, _divNoNan.divNoNan));
parcelHelpers.export(exports, "dot", ()=>(0, _dot.dot));
parcelHelpers.export(exports, "equal", ()=>(0, _equal.equal));
parcelHelpers.export(exports, "eye", ()=>(0, _eye.eye));
parcelHelpers.export(exports, "greater", ()=>(0, _greater.greater));
parcelHelpers.export(exports, "greaterEqual", ()=>(0, _greaterEqual.greaterEqual));
parcelHelpers.export(exports, "less", ()=>(0, _less.less));
parcelHelpers.export(exports, "lessEqual", ()=>(0, _lessEqual.lessEqual));
parcelHelpers.export(exports, "localResponseNormalization", ()=>(0, _localResponseNormalization.localResponseNormalization));
parcelHelpers.export(exports, "matMul", ()=>(0, _matMul.matMul));
parcelHelpers.export(exports, "max", ()=>(0, _max.max));
parcelHelpers.export(exports, "multinomial", ()=>(0, _multinomial.multinomial));
parcelHelpers.export(exports, "notEqual", ()=>(0, _notEqual.notEqual));
parcelHelpers.export(exports, "oneHot", ()=>(0, _oneHot.oneHot));
parcelHelpers.export(exports, "outerProduct", ()=>(0, _outerProduct.outerProduct));
parcelHelpers.export(exports, "pad", ()=>(0, _pad.pad));
parcelHelpers.export(exports, "pad1d", ()=>(0, _pad1D.pad1d));
parcelHelpers.export(exports, "pad2d", ()=>(0, _pad2D.pad2d));
parcelHelpers.export(exports, "pad3d", ()=>(0, _pad3D.pad3d));
parcelHelpers.export(exports, "pad4d", ()=>(0, _pad4D.pad4d));
parcelHelpers.export(exports, "rand", ()=>(0, _rand.rand));
parcelHelpers.export(exports, "randomGamma", ()=>(0, _randomGamma.randomGamma));
parcelHelpers.export(exports, "randomNormal", ()=>(0, _randomNormal.randomNormal));
parcelHelpers.export(exports, "randomUniform", ()=>(0, _randomUniform.randomUniform));
parcelHelpers.export(exports, "separableConv2d", ()=>(0, _separableConv2D.separableConv2d));
parcelHelpers.export(exports, "spaceToBatchND", ()=>(0, _spaceToBatchNd.spaceToBatchND));
parcelHelpers.export(exports, "split", ()=>(0, _split.split));
parcelHelpers.export(exports, "square", ()=>(0, _square.square));
parcelHelpers.export(exports, "squaredDifference", ()=>(0, _squaredDifference.squaredDifference));
parcelHelpers.export(exports, "sub", ()=>(0, _sub.sub));
parcelHelpers.export(exports, "tile", ()=>(0, _tile.tile));
parcelHelpers.export(exports, "truncatedNormal", ()=>(0, _truncatedNormal.truncatedNormal));
parcelHelpers.export(exports, "op", ()=>(0, _operation.op));
parcelHelpers.export(exports, "image", ()=>_imageOps);
parcelHelpers.export(exports, "linalg", ()=>_linalgOps);
parcelHelpers.export(exports, "losses", ()=>_lossOps);
parcelHelpers.export(exports, "spectral", ()=>_spectralOps);
parcelHelpers.export(exports, "fused", ()=>_fusedOps);
parcelHelpers.export(exports, "signal", ()=>_signalOps);
// Second level exports.
var _lossOps = require("./loss_ops");
var _linalgOps = require("./linalg_ops");
var _imageOps = require("./image_ops");
var _spectralOps = require("./spectral_ops");
var _fusedOps = require("./fused_ops");
var _signalOps = require("./signal_ops");
var _add = require("./add");
var _addN = require("./add_n");
var _batchToSpaceNd = require("./batch_to_space_nd");
var _batchnorm = require("./batchnorm");
var _batchnorm2D = require("./batchnorm2d");
var _batchnorm3D = require("./batchnorm3d");
var _batchnorm4D = require("./batchnorm4d");
var _broadcastTo = require("./broadcast_to");
var _clone = require("./clone");
var _concat = require("./concat");
var _concat1D = require("./concat_1d");
var _concat2D = require("./concat_2d");
var _concat3D = require("./concat_3d");
var _concat4D = require("./concat_4d");
var _conv1D = require("./conv1d");
var _conv2D = require("./conv2d");
var _conv2DTranspose = require("./conv2d_transpose");
var _conv3D = require("./conv3d");
var _conv3DTranspose = require("./conv3d_transpose");
var _depthToSpace = require("./depth_to_space");
var _depthwiseConv2D = require("./depthwise_conv2d");
var _diag = require("./diag");
var _div = require("./div");
var _divNoNan = require("./div_no_nan");
var _dot = require("./dot");
var _equal = require("./equal");
var _eye = require("./eye");
var _greater = require("./greater");
var _greaterEqual = require("./greater_equal");
var _less = require("./less");
var _lessEqual = require("./less_equal");
var _localResponseNormalization = require("./local_response_normalization");
var _matMul = require("./mat_mul");
var _max = require("./max");
var _multinomial = require("./multinomial");
var _notEqual = require("./not_equal");
var _oneHot = require("./one_hot");
var _outerProduct = require("./outer_product");
var _pad = require("./pad");
var _pad1D = require("./pad1d");
var _pad2D = require("./pad2d");
var _pad3D = require("./pad3d");
var _pad4D = require("./pad4d");
var _rand = require("./rand");
var _randomGamma = require("./random_gamma");
var _randomNormal = require("./random_normal");
var _randomUniform = require("./random_uniform");
var _separableConv2D = require("./separable_conv2d");
var _spaceToBatchNd = require("./space_to_batch_nd");
var _split = require("./split");
var _square = require("./square");
var _squaredDifference = require("./squared_difference");
var _sub = require("./sub");
var _tile = require("./tile");
var _truncatedNormal = require("./truncated_normal");
var _booleanMask = require("./boolean_mask");
parcelHelpers.exportAll(_booleanMask, exports);
var _complexOps = require("./complex_ops");
parcelHelpers.exportAll(_complexOps, exports);
var _reverse = require("./reverse");
parcelHelpers.exportAll(_reverse, exports);
var _pool = require("./pool");
parcelHelpers.exportAll(_pool, exports);
var _slice = require("./slice");
parcelHelpers.exportAll(_slice, exports);
var _unaryOps = require("./unary_ops");
parcelHelpers.exportAll(_unaryOps, exports);
var _reductionOps = require("./reduction_ops");
parcelHelpers.exportAll(_reductionOps, exports);
var _compare = require("./compare");
parcelHelpers.exportAll(_compare, exports);
var _binaryOps = require("./binary_ops");
parcelHelpers.exportAll(_binaryOps, exports);
var _reluOps = require("./relu_ops");
parcelHelpers.exportAll(_reluOps, exports);
var _logicalOps = require("./logical_ops");
parcelHelpers.exportAll(_logicalOps, exports);
var _arrayOps = require("./array_ops");
parcelHelpers.exportAll(_arrayOps, exports);
var _tensorOps = require("./tensor_ops");
parcelHelpers.exportAll(_tensorOps, exports);
var _transpose = require("./transpose");
parcelHelpers.exportAll(_transpose, exports);
var _softmax = require("./softmax");
parcelHelpers.exportAll(_softmax, exports);
var _norm = require("./norm");
parcelHelpers.exportAll(_norm, exports);
var _segmentOps = require("./segment_ops");
parcelHelpers.exportAll(_segmentOps, exports);
var _lstm = require("./lstm");
parcelHelpers.exportAll(_lstm, exports);
var _movingAverage = require("./moving_average");
parcelHelpers.exportAll(_movingAverage, exports);
var _stridedSlice = require("./strided_slice");
parcelHelpers.exportAll(_stridedSlice, exports);
var _topk = require("./topk");
parcelHelpers.exportAll(_topk, exports);
var _scatterNd = require("./scatter_nd");
parcelHelpers.exportAll(_scatterNd, exports);
parcelHelpers.exportAll(_spectralOps, exports);
var _sparseToDense = require("./sparse_to_dense");
parcelHelpers.exportAll(_sparseToDense, exports);
var _gatherNd = require("./gather_nd");
parcelHelpers.exportAll(_gatherNd, exports);
var _dropout = require("./dropout");
parcelHelpers.exportAll(_dropout, exports);
parcelHelpers.exportAll(_signalOps, exports);
var _inTopK = require("./in_top_k");
parcelHelpers.exportAll(_inTopK, exports);
var _operation = require("./operation");

},{"./loss_ops":"bboI4","./linalg_ops":"2SkFi","./image_ops":"i8DG2","./spectral_ops":"b2WaW","./fused_ops":"jQn57","./signal_ops":"dEkY0","./add":"i4ulI","./add_n":"ei3ol","./batch_to_space_nd":"fvVrh","./batchnorm":"8hFsz","./batchnorm2d":"l93Zr","./batchnorm3d":"aXHC3","./batchnorm4d":"jafZQ","./broadcast_to":"33myr","./clone":"cWcE6","./concat":"jfkcZ","./concat_1d":"dSDh7","./concat_2d":"3UOic","./concat_3d":"8MUc0","./concat_4d":"gYbyt","./conv1d":"9JA7s","./conv2d":"94uN6","./conv2d_transpose":"lxl1Y","./conv3d":"fWVS8","./conv3d_transpose":"1ehOM","./depth_to_space":"6XiCc","./depthwise_conv2d":"kqwkG","./diag":"cjdna","./div":"3bNgZ","./div_no_nan":"8t5q0","./dot":"7yhj3","./equal":"dg46U","./eye":"Rh8TY","./greater":"cdsGN","./greater_equal":"3ztC3","./less":"1Jx3h","./less_equal":"6NYBp","./local_response_normalization":"8x0DH","./mat_mul":"SZp9a","./max":"13F1p","./multinomial":"cyXIJ","./not_equal":"cu4OV","./one_hot":"5171s","./outer_product":"4IFP5","./pad":"6hj7a","./pad1d":"khUzn","./pad2d":"2JSzi","./pad3d":"k2QuB","./pad4d":"eQdLI","./rand":"35P6K","./random_gamma":"Ze5mN","./random_normal":"ilcdV","./random_uniform":"24OwU","./separable_conv2d":"6NvRc","./space_to_batch_nd":"h2QsM","./split":"kOQiE","./square":"52Axi","./squared_difference":"8fw9V","./sub":"mafuF","./tile":"kFneb","./truncated_normal":"ioTIz","./boolean_mask":"7kjVm","./complex_ops":"2VHfg","./reverse":"j7SBT","./pool":"9vxAG","./slice":"ist4s","./unary_ops":"dAJBE","./reduction_ops":"hwfGu","./compare":"fCHhT","./binary_ops":"3wHWX","./relu_ops":"fydAe","./logical_ops":"aneSK","./array_ops":"29MCO","./tensor_ops":"1qbPi","./transpose":"5Lger","./softmax":"lB9jN","./norm":"3lSqt","./segment_ops":"eLEw1","./lstm":"2zpDt","./moving_average":"5NSiX","./strided_slice":"5ngVB","./topk":"lELoV","./scatter_nd":"bfFmC","./sparse_to_dense":"bPJFe","./gather_nd":"8605G","./dropout":"jRq6V","./in_top_k":"jQQbM","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bboI4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Reduction", ()=>Reduction);
parcelHelpers.export(exports, "absoluteDifference", ()=>absoluteDifference);
parcelHelpers.export(exports, "computeWeightedLoss", ()=>computeWeightedLoss);
parcelHelpers.export(exports, "cosineDistance", ()=>cosineDistance);
parcelHelpers.export(exports, "hingeLoss", ()=>hingeLoss);
parcelHelpers.export(exports, "huberLoss", ()=>huberLoss);
parcelHelpers.export(exports, "logLoss", ()=>logLoss);
parcelHelpers.export(exports, "meanSquaredError", ()=>meanSquaredError);
parcelHelpers.export(exports, "sigmoidCrossEntropy", ()=>sigmoidCrossEntropy);
parcelHelpers.export(exports, "softmaxCrossEntropy", ()=>softmaxCrossEntropy);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _gradients = require("../gradients");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _axisUtil = require("./axis_util");
var _binaryOps = require("./binary_ops");
var _operation = require("./operation");
var _tensorOps = require("./tensor_ops");
var Reduction;
(function(Reduction) {
    Reduction[Reduction["NONE"] = 0] = "NONE";
    Reduction[Reduction["MEAN"] = 1] = "MEAN";
    Reduction[Reduction["SUM"] = 2] = "SUM";
    Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Reduction || (Reduction = {}));
/**
 * Computes the weighted loss between two tensors.
 *
 * @param losses Tensor of shape `[batch_size, d1, ... dN]`.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `losses`, and must be broadcastable to `losses` (i.e., all
 *    dimensions must be either `1`, or the same as the corresponding
 *    `losses` dimension).
 */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */ function computeWeightedLoss_(losses, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $losses = (0, _tensorUtilEnv.convertToTensor)(losses, "losses", "computeWeightedLoss");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "computeWeightedLoss");
    const weightedLoss = $weights == null ? $losses : $losses.mul($weights);
    if (reduction === Reduction.NONE) return weightedLoss;
    if (reduction === Reduction.SUM) return weightedLoss.sum();
    if (reduction === Reduction.MEAN) {
        if ($weights == null) return weightedLoss.mean();
        else {
            const broadcastFactor = $losses.size / $weights.size;
            const result = weightedLoss.sum().div($weights.sum());
            return broadcastFactor > 1 ? result.div((0, _tensorOps.scalar)(broadcastFactor)) : result;
        }
    }
    if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {
        if ($weights == null) return weightedLoss.sum().div((0, _tensorOps.scalar)($losses.size));
        else {
            const broadcastedWeights = $weights.mul((0, _tensorOps.ones)($losses.shape));
            const numNonZeros = broadcastedWeights.notEqual((0, _tensorOps.scalar)(0)).sum().toFloat();
            return weightedLoss.sum().div(numNonZeros);
        }
    }
    throw Error(`Unknown reduction: ${reduction}`);
}
/**
 * Computes the absolute difference loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */ function absoluteDifference_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "absoluteDifference");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "absoluteDifference");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "absoluteDifference");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in absoluteDifference: ");
    const losses = $labels.sub($predictions).abs();
    return computeWeightedLoss(losses, $weights, reduction);
}
/**
 * Computes the mean squared error between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */ function meanSquaredError_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "meanSquaredError");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "meanSquaredError");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "meanSquaredError");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in meanSquaredError: ");
    const losses = $labels.squaredDifference($predictions);
    return computeWeightedLoss(losses, $weights, reduction);
}
/**
 * Computes the cosine distance loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param axis The dimension along which the cosine distance is computed.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */ function cosineDistance_(labels, predictions, axis, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "cosineDistance");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "cosineDistance");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "cosineDistance");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in cosineDistance: ");
    const one = (0, _tensorOps.scalar)(1);
    const losses = one.sub($labels.mul($predictions).sum(axis, true));
    return computeWeightedLoss(losses, $weights, reduction);
}
/**
 * Computes the Hinge loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */ function hingeLoss_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
    let $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "hingeLoss");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "hingeLoss");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "hingeLoss");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in hingeLoss: ");
    const one = (0, _tensorOps.scalar)(1);
    // Convert binary labels to (-1, 1)
    $labels = (0, _tensorOps.scalar)(2).mul($labels).sub(one);
    const losses = one.sub($labels.mul($predictions)).relu();
    return computeWeightedLoss(losses, $weights, reduction);
}
/**
 * Computes the log loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param epsilon A small increment to avoid taking log of zero
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */ function logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "logLoss");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "logLoss");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "logLoss");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in logLoss: ");
    const one = (0, _tensorOps.scalar)(1);
    const epsilonScalar = (0, _tensorOps.scalar)(epsilon);
    const losses = $labels.mul($predictions.add(epsilonScalar).log()).neg().sub(one.sub($labels).mul(one.sub($predictions).add(epsilonScalar).log()));
    return computeWeightedLoss(losses, $weights, reduction);
}
function sigmoidCrossEntropyWithLogits_(labels, logits) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "sigmoidCrossEntropyWithLogits");
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "sigmoidCrossEntropyWithLogits");
    (0, _util.assertShapesMatch)($labels.shape, $logits.shape, "Error in sigmoidCrossEntropyWithLogits: ");
    /**
     * Implementation Details:
     *
     * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
     *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
     *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
     *   = (1 - z) * x + log(1 + exp(-x))
     *   = x - x * z + log(1 + exp(-x))
     *
     *   For x < 0, to avoid overflow in exp(-x), we reformulate the above
     *     x - x * z + log(1 + exp(-x))
     *   = log(exp(x)) - x * z + log(1 + exp(-x))
     *   = - x * z + log(1 + exp(x))
     *
     * Hence, to ensure stability and avoid overflow, the implementation uses
     * this equivalent formulation:
     *     max(x, 0) - x * z + log(1 + exp(-abs(x)))
     */ const maxOutput = $logits.relu();
    const outputXTarget = $logits.mul($labels);
    const sigmoidOutput = $logits.abs().neg().exp().log1p();
    return maxOutput.sub(outputXTarget).add(sigmoidOutput);
}
/**
 * Computes the sigmoid cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)
 *                         + 0.5 * labelSmoothing
 *
 * @param multiClassLabels The ground truth output tensor of shape
 * [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 */ /** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */ function sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
    let $multiClassLabels = (0, _tensorUtilEnv.convertToTensor)(multiClassLabels, "multiClassLabels", "sigmoidCrossEntropy");
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "sigmoidCrossEntropy");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "sigmoidCrossEntropy");
    (0, _util.assertShapesMatch)($multiClassLabels.shape, $logits.shape, "Error in sigmoidCrossEntropy: ");
    if (labelSmoothing > 0) {
        const labelSmoothingScalar = (0, _tensorOps.scalar)(labelSmoothing);
        const one = (0, _tensorOps.scalar)(1);
        const half = (0, _tensorOps.scalar)(0.5);
        $multiClassLabels = $multiClassLabels.mul(one.sub(labelSmoothingScalar)).add(half.mul(labelSmoothingScalar));
    }
    const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);
    return computeWeightedLoss(losses, $weights, reduction);
}
/**
 * Computes the huber loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param delta Point where huber loss changes from quadratic to linear.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`.
 */ /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */ function huberLoss_(labels, predictions, weights, delta = 1.0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0, _tensorUtilEnv.convertToTensor)(labels, "labels", "huberLoss");
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "huberLoss");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "huberLoss");
    (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, "Error in huberLoss: ");
    const deltaScalar = (0, _tensorOps.scalar)(delta);
    const error = $predictions.sub($labels).abs();
    const quadratic = (0, _binaryOps.minimum)(error, deltaScalar);
    const linear = error.sub(quadratic);
    const losses = (0, _tensorOps.scalar)(0.5).mul(quadratic.square()).add(deltaScalar.mul(linear));
    return computeWeightedLoss(losses, $weights, reduction);
}
/**
 * Computes softmax cross entropy between logits and labels.
 *
 * Measures the probability error in discrete classification tasks in which
 * the classes are mutually exclusive (each entry is in exactly one class).
 * For example, each CIFAR-10 image is labeled with one and only one label: an
 * image can be a dog or a truck, but not both.
 *
 * `NOTE`: While the classes are mutually exclusive, their probabilities need
 * not be. All that is required is that each row of labels is a valid
 * probability distribution. If they are not, the computation of the gradient
 * will be incorrect.
 *
 * `WARNING`: This op expects unscaled logits, since it performs a softmax on
 * logits internally for efficiency. Do not call this op with the output of
 * softmax, as it will produce incorrect results.
 *
 * logits and labels must have the same shape, e.g. [batch_size, num_classes]
 * and the same dtype.
 * @param labels The labels array.
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 */ function softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {
    if (dim === -1) dim = logits.rank - 1;
    if (dim !== logits.rank - 1) throw Error(`Softmax cross entropy along a non-last dimension is not yet ` + `supported. Labels / logits was rank ${logits.rank} ` + `and dim was ${dim}`);
    // Use a custom gradient for numerical stability.
    const customOp = (0, _gradients.customGrad)((labels, logits, save)=>{
        // Reference:
        //   1. http://cs231n.github.io/linear-classify/#softmax
        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/
        const keepDims = true;
        const lse = logits.logSumExp([
            dim
        ], keepDims);
        const logResult = logits.toFloat().sub(lse);
        save([
            labels,
            logResult
        ]);
        const costVector = logResult.mul(labels).neg();
        const value = costVector.sum([
            dim
        ]);
        const gradFunc = (dy, saved)=>{
            const [labels, logResult] = saved;
            const dyShape = (0, _axisUtil.expandShapeToKeepDim)(dy.shape, [
                dim
            ]);
            return [
                dy.reshape(dyShape).mul(labels.toFloat().sub(logResult.exp())),
                dy.reshape(dyShape).mul(logResult.exp().sub(labels.toFloat())), 
            ];
        };
        return {
            value,
            gradFunc
        };
    });
    return customOp(labels, logits);
}
/**
 * Computes the softmax cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)
 *                         + labelSmoothing / numClasses
 *
 * @param onehotLabels One hot encoded labels
 *    [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or 1, and must be
 *    broadcastable to `loss`  of shape [batch_size]
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 */ /** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */ function softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
    let $onehotLabels = (0, _tensorUtilEnv.convertToTensor)(onehotLabels, "onehotLabels", "softmaxCrossEntropy");
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "softmaxCrossEntropy");
    let $weights = null;
    if (weights != null) $weights = (0, _tensorUtilEnv.convertToTensor)(weights, "weights", "softmaxCrossEntropy");
    (0, _util.assertShapesMatch)($onehotLabels.shape, $logits.shape, "Error in softmaxCrossEntropy: ");
    if (labelSmoothing > 0) {
        const labelSmoothingScalar = (0, _tensorOps.scalar)(labelSmoothing);
        const one = (0, _tensorOps.scalar)(1);
        const numClasses = (0, _tensorOps.scalar)($onehotLabels.shape[1]);
        $onehotLabels = $onehotLabels.mul(one.sub(labelSmoothingScalar)).add(labelSmoothingScalar.div(numClasses));
    }
    const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);
    return computeWeightedLoss(losses, $weights, reduction);
}
const absoluteDifference = (0, _operation.op)({
    absoluteDifference_
});
const computeWeightedLoss = (0, _operation.op)({
    computeWeightedLoss_
});
const cosineDistance = (0, _operation.op)({
    cosineDistance_
});
const hingeLoss = (0, _operation.op)({
    hingeLoss_
});
const huberLoss = (0, _operation.op)({
    huberLoss_
});
const logLoss = (0, _operation.op)({
    logLoss_
});
const meanSquaredError = (0, _operation.op)({
    meanSquaredError_
});
const sigmoidCrossEntropy = (0, _operation.op)({
    sigmoidCrossEntropy_
});
const softmaxCrossEntropy = (0, _operation.op)({
    softmaxCrossEntropy_
});

},{"../gradients":"4PSmY","../tensor_util_env":"fsyzK","../util":"9v6Fb","./axis_util":"1A9rc","./binary_ops":"3wHWX","./operation":"l6IGY","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SkFi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bandPart", ()=>bandPart);
parcelHelpers.export(exports, "gramSchmidt", ()=>gramSchmidt);
parcelHelpers.export(exports, "qr", ()=>qr);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Linear algebra ops.
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _eye = require("./eye");
var _logicalOps = require("./logical_ops");
var _norm = require("./norm");
var _operation = require("./operation");
var _reductionOps = require("./reduction_ops");
var _split = require("./split");
var _sub = require("./sub");
var _tensorOps = require("./tensor_ops");
/**
 * Copy a tensor setting everything outside a central band in each innermost
 * matrix to zero.
 *
 * The band part is computed as follows: Assume input has `k` dimensions
 * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where
 * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
 * The indicator function
 * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`
 * `&& (num_upper < 0 || (n-m) <= num_upper)`
 *
 * ```js
 * const x = tf.tensor2d([[ 0,  1,  2, 3],
 *                        [-1,  0,  1, 2],
 *                        [-2, -1,  0, 1],
 *                        [-3, -2, -1, 0]]);
 * let y = tf.linalg.bandPart(x, 1, -1);
 * y.print(); // [[ 0,  1,  2, 3],
 *            //  [-1,  0,  1, 2],
 *            //  [ 0, -1,  0, 1],
 *            //  [ 0, 0 , -1, 0]]
 * let z = tf.linalg.bandPart(x, 2, 1);
 * z.print(); // [[ 0,  1,  0, 0],
 *            //  [-1,  0,  1, 0],
 *            //  [-2, -1,  0, 1],
 *            //  [ 0, -2, -1, 0]]
 * ```
 *
 * @param x Rank `k` tensor
 * @param numLower Number of subdiagonals to keep.
 *   If negative, keep entire lower triangle.
 * @param numUpper Number of subdiagonals to keep.
 *   If negative, keep entire upper triangle.
 * @returns Rank `k` tensor of the same shape as input.
 *   The extracted banded tensor.
 */ /**
 * @doc {heading:'Operations',
 *       subheading:'Linear Algebra',
 *       namespace:'linalg'}
 */ function bandPart_(a, numLower, numUpper) {
    if (numLower % 1 !== 0) throw new Error(`bandPart(): numLower must be an integer, got ${numLower}.`);
    if (numUpper % 1 !== 0) throw new Error(`bandPart(): numUpper must be an integer, got ${numUpper}.`);
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "bandPart");
    if ($a.rank < 2) throw new Error(`bandPart(): Rank must be at least 2, got ${$a.rank}.`);
    const shape = $a.shape, [M, N] = $a.shape.slice(-2);
    if (!(numLower <= M)) throw new Error(`bandPart(): numLower (${numLower})` + ` must not be greater than the number of rows (${M}).`);
    if (!(numUpper <= N)) throw new Error(`bandPart(): numUpper (${numUpper})` + ` must not be greater than the number of columns (${N}).`);
    if (numLower < 0) numLower = M;
    if (numUpper < 0) numUpper = N;
    const i = (0, _tensorOps.range)(0, M, 1, "int32").reshape([
        -1,
        1
    ]), j = (0, _tensorOps.range)(0, N, 1, "int32"), ij = (0, _sub.sub)(i, j);
    const inBand = (0, _logicalOps.logicalAnd)(ij.lessEqual((0, _tensorOps.scalar)(+numLower, "int32")), ij.greaterEqual((0, _tensorOps.scalar)(-numUpper, "int32")));
    const zero = (0, _tensorOps.zeros)([
        M,
        N
    ], $a.dtype);
    return (0, _arrayOps.stack)((0, _arrayOps.unstack)($a.reshape([
        -1,
        M,
        N
    ])).map((mat)=>(0, _logicalOps.where)(inBand, mat, zero))).reshape(shape);
}
/**
 * Gram-Schmidt orthogonalization.
 *
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * let y = tf.linalg.gramSchmidt(x);
 * y.print();
 * console.log('Othogonalized:');
 * y.dot(y.transpose()).print();  // should be nearly the identity matrix.
 * console.log('First row direction maintained:');
 * const data = await y.array();
 * console.log(data[0][1] / data[0][0]);  // should be nearly 2.
 * ```
 *
 * @param xs The vectors to be orthogonalized, in one of the two following
 *   formats:
 *   - An Array of `tf.Tensor1D`.
 *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows
 *     of `xs`.
 *   In each case, all the vectors must have the same length and the length
 *   must be greater than or equal to the number of vectors.
 * @returns The orthogonalized and normalized vectors or matrix.
 *   Orthogonalization means that the vectors or the rows of the matrix
 *   are orthogonal (zero inner products). Normalization means that each
 *   vector or each row of the matrix has an L2 norm that equals `1`.
 */ /**
 * @doc {heading:'Operations',
 *       subheading:'Linear Algebra',
 *       namespace:'linalg'}
 */ function gramSchmidt_(xs) {
    let inputIsTensor2D;
    if (Array.isArray(xs)) {
        inputIsTensor2D = false;
        (0, _util.assert)(xs != null && xs.length > 0, ()=>"Gram-Schmidt process: input must not be null, undefined, or empty");
        const dim = xs[0].shape[0];
        for(let i = 1; i < xs.length; ++i)(0, _util.assert)(xs[i].shape[0] === dim, ()=>"Gram-Schmidt: Non-unique lengths found in the input vectors: " + `(${xs[i].shape[0]} vs. ${dim})`);
    } else {
        inputIsTensor2D = true;
        xs = (0, _split.split)(xs, xs.shape[0], 0).map((x)=>(0, _arrayOps.squeeze)(x, [
                0
            ]));
    }
    (0, _util.assert)(xs.length <= xs[0].shape[0], ()=>`Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` + `number of dimensions (${xs[0].shape[0]}).`);
    const ys = [];
    const xs1d = xs;
    for(let i1 = 0; i1 < xs.length; ++i1)ys.push((0, _engine.ENGINE).tidy(()=>{
        let x = xs1d[i1];
        if (i1 > 0) for(let j = 0; j < i1; ++j){
            const proj = (0, _reductionOps.sum)(ys[j].mul(x)).mul(ys[j]);
            x = x.sub(proj);
        }
        return x.div((0, _norm.norm)(x, "euclidean"));
    }));
    if (inputIsTensor2D) return (0, _arrayOps.stack)(ys, 0);
    else return ys;
}
/**
 * Compute QR decomposition of m-by-n matrix using Householder transformation.
 *
 * Implementation based on
 *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]
 * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [3, 4]]);
 * let [q, r] = tf.linalg.qr(a);
 * console.log('Q');
 * q.print();
 * console.log('R');
 * r.print();
 * console.log('Orthogonalized');
 * q.dot(q.transpose()).print()  // should be nearly the identity matrix.
 * console.log('Reconstructed');
 * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];
 * ```
 *
 * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose
 *   it has the shape `[..., M, N]`.
 * @param fullMatrices An optional boolean parameter. Defaults to `false`.
 *   If `true`, compute full-sized `Q`. If `false` (the default),
 *   compute only the leading N columns of `Q` and `R`.
 * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,
 *   i.e., its columns all have unit norm and are mutually orthogonal.
 *   If `M >= N`,
 *     If `fullMatrices` is `false` (default),
 *       - `Q` has a shape of `[..., M, N]`,
 *       - `R` has a shape of `[..., N, N]`.
 *     If `fullMatrices` is `true` (default),
 *       - `Q` has a shape of `[..., M, M]`,
 *       - `R` has a shape of `[..., M, N]`.
 *   If `M < N`,
 *     - `Q` has a shape of `[..., M, M]`,
 *     - `R` has a shape of `[..., M, N]`.
 * @throws If the rank of `x` is less than 2.
 */ /**
 * @doc {heading:'Operations',
 *       subheading:'Linear Algebra',
 *       namespace:'linalg'}
 */ function qr_(x, fullMatrices = false) {
    if (x.rank < 2) throw new Error(`qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);
    else if (x.rank === 2) return qr2d(x, fullMatrices);
    else {
        // Rank > 2.
        // TODO(cais): Below we split the input into individual 2D tensors,
        //   perform QR decomposition on them and then stack the results back
        //   together. We should explore whether this can be parallelized.
        const outerDimsProd = x.shape.slice(0, x.shape.length - 2).reduce((value, prev)=>value * prev);
        const x2ds = (0, _arrayOps.unstack)(x.reshape([
            outerDimsProd,
            x.shape[x.shape.length - 2],
            x.shape[x.shape.length - 1]
        ]), 0);
        const q2ds = [];
        const r2ds = [];
        x2ds.forEach((x2d)=>{
            const [q2d, r2d] = qr2d(x2d, fullMatrices);
            q2ds.push(q2d);
            r2ds.push(r2d);
        });
        const q = (0, _arrayOps.stack)(q2ds, 0).reshape(x.shape);
        const r = (0, _arrayOps.stack)(r2ds, 0).reshape(x.shape);
        return [
            q,
            r
        ];
    }
}
function qr2d(x, fullMatrices = false) {
    return (0, _engine.ENGINE).tidy(()=>{
        if (x.shape.length !== 2) throw new Error(`qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);
        const m = x.shape[0];
        const n = x.shape[1];
        let q = (0, _eye.eye)(m); // Orthogonal transform so far.
        let r = x.clone(); // Transformed matrix so far.
        const one2D = (0, _tensorOps.tensor2d)([
            [
                1
            ]
        ], [
            1,
            1
        ]);
        let w = one2D.clone();
        const iters = m >= n ? n : m;
        for(let j = 0; j < iters; ++j){
            // This tidy within the for-loop ensures we clean up temporary
            // tensors as soon as they are no longer needed.
            const rTemp = r;
            const wTemp = w;
            const qTemp = q;
            [w, r, q] = (0, _engine.ENGINE).tidy(()=>{
                // Find H = I - tau * w * w', to put zeros below R(j, j).
                const rjEnd1 = r.slice([
                    j,
                    j
                ], [
                    m - j,
                    1
                ]);
                const normX = rjEnd1.norm();
                const rjj = r.slice([
                    j,
                    j
                ], [
                    1,
                    1
                ]);
                // The sign() function returns 0 on 0, which causes division by zero.
                const s = (0, _tensorOps.tensor2d)([
                    [
                        -1
                    ]
                ]).where(rjj.greater(0), (0, _tensorOps.tensor2d)([
                    [
                        1
                    ]
                ]));
                const u1 = rjj.sub(s.mul(normX));
                const wPre = rjEnd1.div(u1);
                if (wPre.shape[0] === 1) w = one2D.clone();
                else w = one2D.concat(wPre.slice([
                    1,
                    0
                ], [
                    wPre.shape[0] - 1,
                    wPre.shape[1]
                ]), 0);
                const tau = s.matMul(u1).div(normX).neg();
                // -- R := HR, Q := QH.
                const rjEndAll = r.slice([
                    j,
                    0
                ], [
                    m - j,
                    n
                ]);
                const tauTimesW = tau.mul(w);
                const wT = w.transpose();
                if (j === 0) r = rjEndAll.sub(tauTimesW.matMul(wT.matMul(rjEndAll)));
                else {
                    const rTimesTau = rjEndAll.sub(tauTimesW.matMul(wT.matMul(rjEndAll)));
                    r = r.slice([
                        0,
                        0
                    ], [
                        j,
                        n
                    ]).concat(rTimesTau, 0);
                }
                const tawTimesWT = tauTimesW.transpose();
                const qAllJEnd = q.slice([
                    0,
                    j
                ], [
                    m,
                    q.shape[1] - j
                ]);
                if (j === 0) q = qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tawTimesWT));
                else {
                    const qTimesTau = qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tawTimesWT));
                    q = q.slice([
                        0,
                        0
                    ], [
                        m,
                        j
                    ]).concat(qTimesTau, 1);
                }
                return [
                    w,
                    r,
                    q
                ];
            });
            (0, _globals.dispose)([
                rTemp,
                wTemp,
                qTemp
            ]);
        }
        if (!fullMatrices && m > n) {
            q = q.slice([
                0,
                0
            ], [
                m,
                n
            ]);
            r = r.slice([
                0,
                0
            ], [
                n,
                n
            ]);
        }
        return [
            q,
            r
        ];
    });
}
const bandPart = (0, _operation.op)({
    bandPart_
});
const gramSchmidt = (0, _operation.op)({
    gramSchmidt_
});
const qr = (0, _operation.op)({
    qr_
});

},{"../engine":"1aEvR","../globals":"gfrr7","../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./eye":"Rh8TY","./logical_ops":"aneSK","./norm":"3lSqt","./operation":"l6IGY","./reduction_ops":"hwfGu","./split":"kOQiE","./sub":"mafuF","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Rh8TY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eye", ()=>eye);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _arrayOps = require("./array_ops");
var _operation = require("./operation");
var _tile = require("./tile");
/**
 * Create an identity matrix.
 *
 * @param numRows Number of rows.
 * @param numColumns Number of columns. Defaults to `numRows`.
 * @param batchShape If provided, will add the batch shape to the beginning
 *   of the shape of the returned `tf.Tensor` by repeating the identity
 *   matrix.
 * @param dtype Data type.
 * @returns Identity matrix of the specified size and data type, possibly
 *   with batch repetition if `batchShape` is specified.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function eye_(numRows, numColumns, batchShape, dtype = "float32") {
    if (numColumns == null) numColumns = numRows;
    const buff = (0, _arrayOps.buffer)([
        numRows,
        numColumns
    ], dtype);
    const n = numRows <= numColumns ? numRows : numColumns;
    for(let i = 0; i < n; ++i)buff.set(1, i, i);
    const out = buff.toTensor().as2D(numRows, numColumns);
    if (batchShape == null) return out;
    else {
        if (batchShape.length === 1) return (0, _tile.tile)((0, _arrayOps.expandDims)(out, 0), [
            batchShape[0],
            1,
            1
        ]);
        else if (batchShape.length === 2) return (0, _tile.tile)((0, _arrayOps.expandDims)((0, _arrayOps.expandDims)(out, 0), 0), [
            batchShape[0],
            batchShape[1],
            1,
            1
        ]);
        else if (batchShape.length === 3) return (0, _tile.tile)((0, _arrayOps.expandDims)((0, _arrayOps.expandDims)((0, _arrayOps.expandDims)(out, 0), 0), 0), [
            batchShape[0],
            batchShape[1],
            batchShape[2],
            1,
            1
        ]);
        else throw new Error(`eye() currently supports only 1D and 2D ` + // tslint:disable-next-line:no-any
        `batchShapes, but received ${batchShape.length}D.`);
    }
}
const eye = (0, _operation.op)({
    eye_
});

},{"./array_ops":"29MCO","./operation":"l6IGY","./tile":"kFneb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aneSK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalAnd", ()=>logicalAnd);
parcelHelpers.export(exports, "logicalNot", ()=>logicalNot);
parcelHelpers.export(exports, "logicalOr", ()=>logicalOr);
parcelHelpers.export(exports, "logicalXor", ()=>logicalXor);
parcelHelpers.export(exports, "where", ()=>where);
parcelHelpers.export(exports, "whereAsync", ()=>whereAsync);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _whereImpl = require("../backends/where_impl");
var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
var _tensorOps = require("./tensor_ops");
/**
 * Returns the truth value of `NOT x` element-wise.
 *
 * ```js
 * const a = tf.tensor1d([false, true], 'bool');
 *
 * a.logicalNot().print();
 * ```
 *
 * @param x The input tensor. Must be of dtype 'bool'.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function logicalNot_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "logicalNot", "bool");
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.logicalNot($x), {
        $x
    });
}
/**
 * Returns the truth value of `a AND b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalAnd(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function logicalAnd_(a, b) {
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "logicalAnd", "bool");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "logicalAnd", "bool");
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.logicalAnd($a, $b), {
        a: $a,
        b: $b
    }, null, "LogicalAnd");
}
/**
 * Returns the truth value of `a OR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalOr(b).print();
 * ```
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function logicalOr_(a, b) {
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "logicalOr", "bool");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "logicalOr", "bool");
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.logicalOr($a, $b), {
        $a,
        $b
    });
}
/**
 * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalXor(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function logicalXor_(a, b) {
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "logicalXor", "bool");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "logicalXor", "bool");
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    // x ^ y = (x | y) & ~(x & y)
    return logicalOr(a, b).logicalAnd(logicalAnd(a, b).logicalNot());
}
/**
 * Returns the elements, either `a` or `b` depending on the `condition`.
 *
 * If the condition is true, select from `a`, otherwise select from `b`.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const a = tf.tensor1d([1 , 2, 3]);
 * const b = tf.tensor1d([-1, -2, -3]);
 *
 * a.where(cond, b).print();
 * ```
 *
 * @param condition The input condition. Must be of dtype bool.
 * @param a If `condition` is rank 1, `a` may have a higher rank but
 *     its first dimension must match the size of `condition`.
 * @param b A tensor with the same shape and type as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function where_(condition, a, b) {
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "where");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "where");
    const $condition = (0, _tensorUtilEnv.convertToTensor)(condition, "condition", "where", "bool");
    (0, _util.assertShapesMatch)($a.shape, $b.shape, "Error in where: ");
    if ($condition.rank === 1) // If condition rank is 1, then the first dimension must match the size of
    // condition.
    (0, _util.assert)($condition.shape[0] === $a.shape[0], ()=>"The first dimension of `a` must match the size of `condition`.");
    else // A must have the same shape as condition.
    (0, _util.assertShapesMatch)($condition.shape, $b.shape, "Error in where: ");
    // TODO(julianoks): Return null for condition gradient
    // when backprop supports it.
    const grad = (dy, saved)=>{
        const [$condition] = saved;
        return {
            $condition: ()=>(0, _tensorOps.zerosLike)($condition).toFloat(),
            $a: ()=>dy.mul($condition.cast(dy.dtype)),
            $b: ()=>dy.mul($condition.logicalNot().cast(dy.dtype))
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.select($condition, $a, $b);
        save([
            $condition
        ]);
        return res;
    }, {
        $condition,
        $a,
        $b
    }, grad);
}
/**
 * Returns the coordinates of true elements of condition.
 *
 * The coordinates are returned in a 2-D tensor where the first dimension (rows)
 * represents the number of true elements, and the second dimension (columns)
 * represents the coordinates of the true elements. Keep in mind, the shape of
 * the output tensor can vary depending on how many true values there are in
 * input. Indices are output in row-major order. The resulting tensor has the
 * shape `[numTrueElems, condition.rank]`.
 *
 * This is analogous to calling the python `tf.where(cond)` without an x or y.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const result = await tf.whereAsync(cond);
 * result.print();
 * ```
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ async function whereAsync_(condition) {
    const $condition = (0, _tensorUtilEnv.convertToTensor)(condition, "condition", "whereAsync", "bool");
    const vals = await $condition.data();
    const res = (0, _whereImpl.whereImpl)($condition.shape, vals);
    if (condition !== $condition) $condition.dispose();
    return res;
}
const logicalAnd = (0, _operation.op)({
    logicalAnd_
});
const logicalNot = (0, _operation.op)({
    logicalNot_
});
const logicalOr = (0, _operation.op)({
    logicalOr_
});
const logicalXor = (0, _operation.op)({
    logicalXor_
});
const where = (0, _operation.op)({
    where_
});
const whereAsync = whereAsync_;

},{"../backends/where_impl":"gWXHH","../engine":"1aEvR","../tensor_util_env":"fsyzK","../util":"9v6Fb","./broadcast_util":"kQqEF","./operation":"l6IGY","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3lSqt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "norm", ()=>norm);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _axisUtil = require("./axis_util");
var _operation = require("./operation");
var _tensorOps = require("./tensor_ops");
/**
 * Computes the norm of scalar, vectors, and matrices.
 * This function can compute several different vector norms (the 1-norm, the
 * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
 * and matrix norms (Frobenius, 1-norm, and inf-norm).
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.norm().print();  // or tf.norm(x)
 * ```
 *
 * @param x The input array.
 * @param ord Optional. Order of the norm. Supported norm types are
 * following:
 *
 *  | ord        | norm for matrices         | norm for vectors
 *  |------------|---------------------------|---------------------
 *  |'euclidean' |Frobenius norm             |2-norm
 *  |'fro'       |Frobenius norm	           |
 *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
 *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
 *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
 *  |2           |                           |sum(abs(x)^2)^1/2*
 *
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. norm(x, ord) is equivalent
 * to norm(x.reshape([-1]), ord). If axis is a integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm have the same dimensionality
 * as the input.
 */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */ function norm_(x, ord = "euclidean", axis = null, keepDims = false) {
    x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "norm");
    const norm = normImpl(x, ord, axis);
    let keepDimsShape = norm.shape;
    if (keepDims) {
        const axes = (0, _util.parseAxisParam)(axis, x.shape);
        keepDimsShape = _axisUtil.expandShapeToKeepDim(norm.shape, axes);
    }
    return norm.reshape(keepDimsShape);
}
function normImpl(x, p, axis = null) {
    if (x.rank === 0) return x.abs();
    // consider vector when no axis is specified
    if (x.rank !== 1 && axis === null) return normImpl(x.reshape([
        -1
    ]), p, axis);
    // vector
    if (x.rank === 1 || typeof axis === "number" || Array.isArray(axis) && axis.length === 1) {
        if (p === 1) return x.abs().sum(axis);
        if (p === Infinity) return x.abs().max(axis);
        if (p === -Infinity) return x.abs().min(axis);
        if (p === "euclidean" || p === 2) // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2
        return x.abs().pow((0, _tensorOps.scalar)(2, "int32")).sum(axis).sqrt();
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    // matrix (assumption axis[0] < axis[1])
    if (Array.isArray(axis) && axis.length === 2) {
        if (p === 1) return x.abs().sum(axis[0]).max(axis[1] - 1);
        if (p === Infinity) return x.abs().sum(axis[1]).max(axis[0]);
        if (p === -Infinity) return x.abs().sum(axis[1]).min(axis[0]);
        if (p === "fro" || p === "euclidean") // norm(x) = sqrt(sum(pow(x, 2)))
        return x.square().sum(axis).sqrt();
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    throw new Error(`Error in norm: invalid axis: ${axis}`);
}
const norm = (0, _operation.op)({
    norm_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./axis_util":"1A9rc","./operation":"l6IGY","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i8DG2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppression", ()=>(0, _nonMaxSuppression.nonMaxSuppression));
parcelHelpers.export(exports, "resizeBilinear", ()=>resizeBilinear);
parcelHelpers.export(exports, "resizeNearestNeighbor", ()=>resizeNearestNeighbor);
parcelHelpers.export(exports, "nonMaxSuppressionAsync", ()=>nonMaxSuppressionAsync);
parcelHelpers.export(exports, "nonMaxSuppressionWithScore", ()=>nonMaxSuppressionWithScore);
parcelHelpers.export(exports, "nonMaxSuppressionWithScoreAsync", ()=>nonMaxSuppressionWithScoreAsync);
parcelHelpers.export(exports, "cropAndResize", ()=>cropAndResize);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _nonMaxSuppressionImpl = require("../backends/non_max_suppression_impl");
var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _nonmaxUtil = require("./nonmax_util");
var _operation = require("./operation");
var _nonMaxSuppression = require("./non_max_suppression");
/**
 * Bilinear resize a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */ function resizeBilinear_(images, size, alignCorners = false) {
    const $images = (0, _tensorUtilEnv.convertToTensor)(images, "images", "resizeBilinear");
    _util.assert($images.rank === 3 || $images.rank === 4, ()=>`Error in resizeBilinear: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);
    _util.assert(size.length === 2, ()=>`Error in resizeBilinear: new shape must 2D, but got shape ` + `${size}.`);
    let batchImages = $images;
    let reshapedTo4D = false;
    if ($images.rank === 3) {
        reshapedTo4D = true;
        batchImages = $images.as4D(1, $images.shape[0], $images.shape[1], $images.shape[2]);
    }
    const [newHeight, newWidth] = size;
    const forward = (backend, save)=>{
        save([
            batchImages
        ]);
        return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);
    };
    const backward = (dy, saved)=>{
        return {
            x: ()=>(0, _engine.ENGINE).runKernelFunc((backend)=>backend.resizeBilinearBackprop(dy, saved[0], alignCorners), {})
        };
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, {
        x: batchImages
    }, backward, "ResizeBilinear", {
        alignCorners,
        newHeight,
        newWidth
    });
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    return res;
}
/**
 * NearestNeighbor resize a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */ function resizeNearestNeighbor_(images, size, alignCorners = false) {
    const $images = (0, _tensorUtilEnv.convertToTensor)(images, "images", "resizeNearestNeighbor");
    _util.assert($images.rank === 3 || $images.rank === 4, ()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);
    _util.assert(size.length === 2, ()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ` + `${size}.`);
    _util.assert($images.dtype === "float32" || $images.dtype === "int32", ()=>"`images` must have `int32` or `float32` as dtype");
    let batchImages = $images;
    let reshapedTo4D = false;
    if ($images.rank === 3) {
        reshapedTo4D = true;
        batchImages = $images.as4D(1, $images.shape[0], $images.shape[1], $images.shape[2]);
    }
    const [newHeight, newWidth] = size;
    const forward = (backend, save)=>{
        save([
            batchImages
        ]);
        return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);
    };
    const backward = (dy, saved)=>{
        return {
            batchImages: ()=>(0, _engine.ENGINE).runKernelFunc((backend)=>backend.resizeNearestNeighborBackprop(dy, saved[0], alignCorners), {})
        };
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, {
        batchImages
    }, backward);
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    return res;
}
/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */ /** This is the async version of `nonMaxSuppression` */ async function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppressionAsync");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppressionAsync");
    const inputs = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    const boxesAndScores = await Promise.all([
        $boxes.data(),
        $scores.data()
    ]);
    const boxesVals = boxesAndScores[0];
    const scoresVals = boxesAndScores[1];
    const res = (0, _nonMaxSuppressionImpl.nonMaxSuppressionV3)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
    if ($boxes !== boxes) $boxes.dispose();
    if ($scores !== scores) $scores.dispose();
    return res;
}
/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */ function nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppression");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppression");
    const inputs = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    softNmsSigma = inputs.softNmsSigma;
    const attrs = {
        maxOutputSize,
        iouThreshold,
        scoreThreshold,
        softNmsSigma
    };
    const result = (0, _engine.ENGINE).runKernel("NonMaxSuppressionV5", {
        boxes: $boxes,
        scores: $scores
    }, attrs);
    return {
        selectedIndices: result[0],
        selectedScores: result[1]
    };
}
/** This is the async version of `nonMaxSuppressionWithScore` */ async function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppressionAsync");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppressionAsync");
    const inputs = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    softNmsSigma = inputs.softNmsSigma;
    const boxesAndScores = await Promise.all([
        $boxes.data(),
        $scores.data()
    ]);
    const boxesVals = boxesAndScores[0];
    const scoresVals = boxesAndScores[1];
    const res = (0, _nonMaxSuppressionImpl.nonMaxSuppressionV5)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    if ($boxes !== boxes) $boxes.dispose();
    if ($scores !== scores) $scores.dispose();
    return res;
}
/**
 * Extracts crops from the input image tensor and resizes them using bilinear
 * sampling or nearest neighbor sampling (possibly with aspect ratio change)
 * to a common output size specified by crop_size.
 *
 * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,
 *     where imageHeight and imageWidth must be positive, specifying the
 *     batch of images from which to take crops
 * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized
 *     coordinates of the box in the boxInd[i]'th image in the batch
 * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range
 *     `[0, batch)` that specifies the image that the `i`-th box refers to.
 * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`
 *     specifying the size to which all crops are resized to.
 * @param method Optional string from `'bilinear' | 'nearest'`,
 *     defaults to bilinear, which specifies the sampling method for resizing
 * @param extrapolationValue A threshold for deciding when to remove boxes based
 *     on score. Defaults to 0.
 * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`
 */ /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */ function cropAndResize_(image, boxes, boxInd, cropSize, method, extrapolationValue) {
    const $image = (0, _tensorUtilEnv.convertToTensor)(image, "image", "cropAndResize");
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "cropAndResize", "float32");
    const $boxInd = (0, _tensorUtilEnv.convertToTensor)(boxInd, "boxInd", "cropAndResize", "int32");
    method = method || "bilinear";
    extrapolationValue = extrapolationValue || 0;
    const numBoxes = $boxes.shape[0];
    _util.assert($image.rank === 4, ()=>"Error in cropAndResize: image must be rank 4," + `but got rank ${$image.rank}.`);
    _util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, ()=>`Error in cropAndResize: boxes must be have size [${numBoxes},4] ` + `but had shape ${$boxes.shape}.`);
    _util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, ()=>`Error in cropAndResize: boxInd must be have size [${numBoxes}] ` + `but had shape ${$boxes.shape}.`);
    _util.assert(cropSize.length === 2, ()=>`Error in cropAndResize: cropSize must be of length 2, but got ` + `length ${cropSize.length}.`);
    _util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, ()=>`cropSize must be atleast [1,1], but was ${cropSize}`);
    _util.assert(method === "bilinear" || method === "nearest", ()=>`method must be bilinear or nearest, but was ${method}`);
    const forward = (backend, save)=>backend.cropAndResize($image, $boxes, $boxInd, cropSize, method, extrapolationValue);
    const res = (0, _engine.ENGINE).runKernelFunc(forward, {
        images: $image,
        boxes: $boxes,
        boxInd: $boxInd
    }, null, "CropAndResize", {
        method,
        extrapolationValue,
        cropSize
    });
    return res;
}
const resizeBilinear = (0, _operation.op)({
    resizeBilinear_
});
const resizeNearestNeighbor = (0, _operation.op)({
    resizeNearestNeighbor_
});
const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;
const nonMaxSuppressionWithScore = (0, _operation.op)({
    nonMaxSuppressionWithScore_
});
const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;
const cropAndResize = (0, _operation.op)({
    cropAndResize_
});

},{"../backends/non_max_suppression_impl":"hzXRp","../engine":"1aEvR","../tensor_util_env":"fsyzK","../util":"9v6Fb","./nonmax_util":"dNbKV","./operation":"l6IGY","./non_max_suppression":"dBM48","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dNbKV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppSanityCheck", ()=>nonMaxSuppSanityCheck);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
    if (iouThreshold == null) iouThreshold = 0.5;
    if (scoreThreshold == null) scoreThreshold = Number.NEGATIVE_INFINITY;
    if (softNmsSigma == null) softNmsSigma = 0.0;
    const numBoxes = boxes.shape[0];
    maxOutputSize = Math.min(maxOutputSize, numBoxes);
    _util.assert(0 <= iouThreshold && iouThreshold <= 1, ()=>`iouThreshold must be in [0, 1], but was '${iouThreshold}'`);
    _util.assert(boxes.rank === 2, ()=>`boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);
    _util.assert(boxes.shape[1] === 4, ()=>`boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);
    _util.assert(scores.rank === 1, ()=>"scores must be a 1D tensor");
    _util.assert(scores.shape[0] === numBoxes, ()=>`scores has incompatible shape with boxes. Expected ${numBoxes}, ` + `but was ${scores.shape[0]}`);
    _util.assert(0 <= softNmsSigma && softNmsSigma <= 1, ()=>`softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);
    return {
        maxOutputSize,
        iouThreshold,
        scoreThreshold,
        softNmsSigma
    };
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBM48":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppression", ()=>nonMaxSuppression);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _nonmaxUtil = require("./nonmax_util");
var _operation = require("./operation");
function nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
    const $boxes = (0, _tensorUtilEnv.convertToTensor)(boxes, "boxes", "nonMaxSuppression");
    const $scores = (0, _tensorUtilEnv.convertToTensor)(scores, "scores", "nonMaxSuppression");
    const inputs = (0, _nonmaxUtil.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    const attrs = {
        maxOutputSize,
        iouThreshold,
        scoreThreshold
    };
    return (0, _engine.ENGINE).runKernelFunc((b)=>b.nonMaxSuppression($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold), {
        boxes: $boxes,
        scores: $scores
    }, null, (0, _kernelNames.NonMaxSuppressionV3), attrs);
}
const nonMaxSuppression = (0, _operation.op)({
    nonMaxSuppression_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./nonmax_util":"dNbKV","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b2WaW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fft", ()=>fft);
parcelHelpers.export(exports, "ifft", ()=>ifft);
parcelHelpers.export(exports, "rfft", ()=>rfft);
parcelHelpers.export(exports, "irfft", ()=>irfft);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _complexOps = require("../ops/complex_ops");
var _operation = require("../ops/operation");
var _util = require("../util");
var _tensorOps = require("./tensor_ops");
/**
 * Fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the inner-most
 * dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.fft().print();  // tf.spectral.fft(x).print();
 * ```
 * @param input The complex input to compute an fft over.
 */ /**
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */ function fft_(input) {
    (0, _util.assert)(input.dtype === "complex64", ()=>`The dtype for tf.spectral.fft() must be complex64 ` + `but got ${input.dtype}.`);
    // Collapse all outer dimensions to a single batch dimension.
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    const input2D = input.as2D(batch, innerDimensionSize);
    const ret = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.fft(input2D), {
        input
    });
    return ret.reshape(input.shape);
}
/**
 * Inverse fast Fourier transform.
 *
 * Computes the inverse 1-dimensional discrete Fourier transform over the
 * inner-most dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.ifft().print();  // tf.spectral.ifft(x).print();
 * ```
 * @param input The complex input to compute an ifft over.
 */ /**
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */ function ifft_(input) {
    (0, _util.assert)(input.dtype === "complex64", ()=>`The dtype for tf.spectral.ifft() must be complex64 ` + `but got ${input.dtype}.`);
    // Collapse all outer dimensions to a single batch dimension.
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    const input2D = input.as2D(batch, innerDimensionSize);
    const ret = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.ifft(input2D), {
        input
    });
    return ret.reshape(input.shape);
}
/**
 * Real value input fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 *
 * real.rfft().print();
 * ```
 * @param input The real value input to compute an rfft over.
 */ /**
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */ function rfft_(input, fftLength) {
    (0, _util.assert)(input.dtype === "float32", ()=>`The dtype for rfft() must be real value but got ${input.dtype}`);
    let innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    let adjustedInput;
    if (fftLength != null && fftLength < innerDimensionSize) {
        // Need to crop
        const begin = input.shape.map((v)=>0);
        const size = input.shape.map((v)=>v);
        size[input.shape.length - 1] = fftLength;
        adjustedInput = input.slice(begin, size);
        innerDimensionSize = fftLength;
    } else if (fftLength != null && fftLength > innerDimensionSize) {
        // Need to pad with zeros
        const zerosShape = input.shape.map((v)=>v);
        zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;
        adjustedInput = input.concat((0, _tensorOps.zeros)(zerosShape), input.shape.length - 1);
        innerDimensionSize = fftLength;
    } else adjustedInput = input;
    // Complement the input with zero imaginary numbers.
    const zerosInput = adjustedInput.zerosLike();
    const complexInput = (0, _complexOps.complex)(adjustedInput, zerosInput).as2D(batch, innerDimensionSize);
    const ret = fft(complexInput);
    // Exclude complex conjugations. These conjugations are put symmetrically.
    const half = Math.floor(innerDimensionSize / 2) + 1;
    const realValues = (0, _complexOps.real)(ret);
    const imagValues = (0, _complexOps.imag)(ret);
    const realComplexConjugate = realValues.split([
        half,
        innerDimensionSize - half
    ], realValues.shape.length - 1);
    const imagComplexConjugate = imagValues.split([
        half,
        innerDimensionSize - half
    ], imagValues.shape.length - 1);
    const outputShape = adjustedInput.shape.slice();
    outputShape[adjustedInput.shape.length - 1] = half;
    return (0, _complexOps.complex)(realComplexConjugate[0], imagComplexConjugate[0]).reshape(outputShape);
}
/**
 * Inversed real value input fast Fourier transform.
 *
 * Computes the 1-dimensional inversed discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([0, 0, 0]);
 * const x = tf.complex(real, imag);
 *
 * x.irfft().print();
 * ```
 * @param input The real value input to compute an irfft over.
 */ /**
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */ function irfft_(input) {
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    if (innerDimensionSize <= 2) {
        const complexInput = input.as2D(batch, innerDimensionSize);
        const ret = ifft(complexInput);
        return (0, _complexOps.real)(ret);
    } else {
        // The length of unique components of the DFT of a real-valued signal
        // is 2 * (input_len - 1)
        const outputShape = [
            batch,
            2 * (innerDimensionSize - 1)
        ];
        const realInput = (0, _complexOps.real)(input).as2D(batch, innerDimensionSize);
        const imagInput = (0, _complexOps.imag)(input).as2D(batch, innerDimensionSize);
        const realConjugate = realInput.slice([
            0,
            1
        ], [
            batch,
            innerDimensionSize - 2
        ]).reverse(1);
        const imagConjugate = imagInput.slice([
            0,
            1
        ], [
            batch,
            innerDimensionSize - 2
        ]).reverse(1).mul((0, _tensorOps.scalar)(-1));
        const r = realInput.concat(realConjugate, 1);
        const i = imagInput.concat(imagConjugate, 1);
        const complexInput1 = (0, _complexOps.complex)(r, i).as2D(outputShape[0], outputShape[1]);
        const ret1 = ifft(complexInput1);
        return (0, _complexOps.real)(ret1);
    }
}
const fft = (0, _operation.op)({
    fft_
});
const ifft = (0, _operation.op)({
    ifft_
});
const rfft = (0, _operation.op)({
    rfft_
});
const irfft = (0, _operation.op)({
    irfft_
});

},{"../engine":"1aEvR","../ops/complex_ops":"2VHfg","../ops/operation":"l6IGY","../util":"9v6Fb","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jQn57":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matMul", ()=>matMul);
parcelHelpers.export(exports, "conv2d", ()=>conv2d);
parcelHelpers.export(exports, "depthwiseConv2d", ()=>depthwiseConv2d);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _convUtil = require("../ops/conv_util");
var _operation = require("../ops/operation");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _add = require("./add");
var _broadcastUtil = require("./broadcast_util");
var _conv2D = require("./conv2d");
var _conv2DBackpropFilter = require("./conv2d_backprop_filter");
var _conv2DBackpropInput = require("./conv2d_backprop_input");
var _depthwiseConv2D = require("./depthwise_conv2d");
var _depthwiseConv2DNativeBackpropFilter = require("./depthwise_conv2d_native_backprop_filter");
var _depthwiseConv2DNativeBackpropInput = require("./depthwise_conv2d_native_backprop_input");
var _fusedUtil = require("./fused_util");
var _matMul = require("./mat_mul");
var _reluOps = require("./relu_ops");
// Returns gradient for fused activation.
const getFusedDyActivation = (dy, y, activation)=>{
    if (activation == null || activation === "linear") return dy;
    if (activation === "relu") return dy.mul(y.step());
    throw new Error(`Gradient for activation ${activation} has not been ` + `implemented yet.`);
};
// Returns gradient for fused bias.
const getFusedBiasGradient = (bias, dyActivation)=>{
    let res = dyActivation;
    const reduceAxes = _broadcastUtil.getReductionAxes(bias.shape, dyActivation.shape);
    if (reduceAxes.length > 0) res = res.sum(reduceAxes);
    return res.reshape(bias.shape);
};
const applyActivation = (x, activation, preluActivationWeights)=>{
    if (activation === "linear") return x;
    else if (activation === "relu") return (0, _reluOps.relu)(x);
    else if (activation === "elu") return (0, _reluOps.elu)(x);
    else if (activation === "relu6") return (0, _reluOps.relu6)(x);
    else if (activation === "prelu") return (0, _reluOps.prelu)(x, preluActivationWeights);
    throw new Error(`Unknown fused activation ${activation}.`);
};
/**
 * Computes the dot product of two matrices with optional activation and bias.
 *
 * ```js
 * const a = tf.tensor2d([-1, -2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const bias = tf.tensor2d([1, 2], [1, 2]);
 *
 * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();
 * ```
 *
 * @param obj An object with the following properties:
 * - `a` First matrix in dot product operation.
 * - `b` Second matrix in dot product operation.
 * - `transposeA` If true, `a` is transposed before multiplication.
 * - `transposeB` If true, `b` is transposed before multiplication.
 * - `bias` Matrix to be added to the result.
 * - `activation` Name of activation kernel (defaults to `linear`).
 * - `preluActivationWeights` Tensor of prelu weights.
 */ function fusedMatMul_({ a , b , transposeA =false , transposeB =false , bias , activation ="linear" , preluActivationWeights  }) {
    if ((0, _fusedUtil.shouldFuse)((0, _engine.ENGINE).state.gradientDepth, activation) === false) {
        let result = (0, _matMul.matMul)(a, b, transposeA, transposeB);
        if (bias != null) result = (0, _add.add)(result, bias);
        return applyActivation(result, activation, preluActivationWeights);
    }
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "fused matMul");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "fused matMul");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
    const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
    const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
    const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
    const outerDimsA = $a.shape.slice(0, -2);
    const outerDimsB = $b.shape.slice(0, -2);
    const batchDimA = _util.sizeFromShape(outerDimsA);
    const batchDimB = _util.sizeFromShape(outerDimsB);
    _util.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, ()=>`Error in fused matMul: inputs must have the same rank of at least ` + `2, got ranks ${$a.rank} and ${$b.rank}.`);
    _util.assert(_util.arraysEqual(outerDimsA, outerDimsB), ()=>`Error in fused matMul: outer dimensions (${outerDimsA}) and (` + `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} must match.`);
    _util.assert(innerShapeA === innerShapeB, ()=>`Error in fused matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
    const outShape = $a.shape.slice(0, -2).concat([
        outerShapeA,
        outerShapeB
    ]);
    const a3D = transposeA ? $a.as3D(batchDimA, innerShapeA, outerShapeA) : $a.as3D(batchDimA, outerShapeA, innerShapeA);
    const b3D = transposeB ? $b.as3D(batchDimB, outerShapeB, innerShapeB) : $b.as3D(batchDimB, innerShapeB, outerShapeB);
    let $bias;
    if (bias != null) {
        $bias = (0, _tensorUtilEnv.convertToTensor)(bias, "bias", "fused matMul");
        [$bias] = (0, _tensorUtil.makeTypesMatch)($bias, $a);
        _broadcastUtil.assertAndGetBroadcastShape(outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) $preluActivationWeights = (0, _tensorUtilEnv.convertToTensor)(preluActivationWeights, "prelu weights", "fused matMul");
    const grad = (dy, saved)=>{
        const [a3D, b3D, y] = saved;
        const dyActivation = getFusedDyActivation(dy, y, activation);
        let biasGradient = {};
        if (bias != null) biasGradient = {
            bias: ()=>getFusedBiasGradient($bias, dyActivation)
        };
        if (!transposeA && !transposeB) return Object.assign({
            a: ()=>dyActivation.matMul(b3D, false, true),
            b: ()=>a3D.matMul(dyActivation, true, false)
        }, biasGradient);
        else if (!transposeA && transposeB) return Object.assign({
            a: ()=>dyActivation.matMul(b3D, false, false),
            b: ()=>dyActivation.matMul(a3D, true, false)
        }, biasGradient);
        else if (transposeA && !transposeB) return Object.assign({
            a: ()=>b3D.matMul(dyActivation, false, true),
            b: ()=>a3D.matMul(dyActivation, false, false)
        }, biasGradient);
        else return Object.assign({
            a: ()=>b3D.matMul(dyActivation, true, true),
            b: ()=>dyActivation.matMul(a3D, true, true)
        }, biasGradient);
    };
    const inputs = {
        a: a3D,
        b: b3D
    };
    if (bias != null) inputs.bias = $bias;
    if (preluActivationWeights != null) inputs.preluActivationWeights = $preluActivationWeights;
    const inputsToSave = [
        a3D,
        b3D
    ];
    const outputsToSave = [
        true
    ];
    const res = (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.fusedBatchMatMul({
            a: a3D,
            b: b3D,
            transposeA,
            transposeB,
            bias: $bias,
            activation,
            preluActivationWeights: $preluActivationWeights
        });
        save([
            a3D,
            b3D,
            y
        ]);
        return y;
    }, inputs, grad, "_FusedMatMul", {
        transposeA,
        transposeB,
        activation
    }, inputsToSave, outputsToSave);
    return res.reshape(outShape);
}
/**
 * Computes a 2D convolution over the input x, optionally fused with adding a
 * bias and applying an activation.
 *
 * ```js
 * const inputDepth = 2;
 * const inShape = [2, 2, 2, inputDepth];
 * const outputDepth = 2;
 * const fSize = 1;
 * const pad = 0;
 * const strides = 1;
 *
 * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
 * 16], inShape);
 * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,
 * outputDepth]);
 *
 * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',
 * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();
 * ```
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid` output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`) to be
 *     applied
 *      after biasAdd.
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 */ function fusedConv2d_({ x , filter , strides , pad , dataFormat ="NHWC" , dilations =[
    1,
    1
] , dimRoundingMode , bias , activation ="linear" , preluActivationWeights  }) {
    activation = activation || "linear";
    if ((0, _fusedUtil.shouldFuse)((0, _engine.ENGINE).state.gradientDepth, activation) === false) {
        let result = (0, _conv2D.conv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
        if (bias != null) result = (0, _add.add)(result, bias);
        return applyActivation(result, activation, preluActivationWeights);
    }
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv2d");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv2d");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in fused conv2d: input must be rank 4, but got rank ` + `${x4D.rank}.`);
    _util.assert($filter.rank === 4, ()=>`Error in fused conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in fused conv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    _util.assert(x4D.shape[3] === $filter.shape[2], ()=>`Error in conv2d: depth of input (${x4D.shape[3]}) must match ` + `input depth for filter ${$filter.shape[2]}.`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in conv2D: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    _util.assert(dataFormat === "NHWC", ()=>`Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);
    const convInfo = _convUtil.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);
    let $bias;
    if (bias != null) {
        $bias = (0, _tensorUtilEnv.convertToTensor)(bias, "bias", "fused conv2d");
        [$bias] = (0, _tensorUtil.makeTypesMatch)($bias, $x);
        _broadcastUtil.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) $preluActivationWeights = (0, _tensorUtilEnv.convertToTensor)(preluActivationWeights, "prelu weights", "fused conv2d");
    const grad = (dy, saved)=>{
        const [$filter, x4D, y] = saved;
        const dyActivation = getFusedDyActivation(dy, y, activation);
        _util.assert(_convUtil.tupleValuesAreOne(dilations), ()=>"Error in gradient of fused conv2D: " + `dilation rates greater than 1 ` + `are not yet supported in gradients. Got dilations '${dilations}'`);
        let biasGradient = {};
        if (bias != null) biasGradient = {
            bias: ()=>getFusedBiasGradient($bias, dyActivation)
        };
        return Object.assign({
            x: ()=>(0, _conv2DBackpropInput.conv2DBackpropInput)(x4D.shape, dyActivation, $filter, strides, pad),
            filter: ()=>(0, _conv2DBackpropFilter.conv2DBackpropFilter)(x4D, dyActivation, $filter.shape, strides, pad)
        }, biasGradient);
    };
    const inputs = {
        x: x4D,
        filter: $filter
    };
    if (bias != null) inputs.bias = $bias;
    if (preluActivationWeights != null) inputs.preluActivationWeights = $preluActivationWeights;
    const inputsToSave = [
        $filter,
        x4D
    ];
    const outputsToSave = [
        true
    ]; // Save the only output.
    const res = (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.fusedConv2d({
            input: x4D,
            filter: $filter,
            convInfo,
            bias: $bias,
            activation,
            preluActivationWeights: $preluActivationWeights
        });
        save([
            $filter,
            x4D,
            res
        ]);
        return res;
    }, inputs, grad, "FusedConv2D", {
        convInfo,
        activation
    }, inputsToSave, outputsToSave);
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    return res;
}
/**
 * Computes depthwise 2D convolution, optionally fused with adding a
 * bias and applying an activation.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`).
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 */ function fusedDepthwiseConv2d_({ x , filter , strides , pad , dataFormat ="NHWC" , dilations =[
    1,
    1
] , dimRoundingMode , bias , activation ="linear" , preluActivationWeights  }) {
    if ((0, _fusedUtil.shouldFuse)((0, _engine.ENGINE).state.gradientDepth, activation) === false) {
        let result = (0, _depthwiseConv2D.depthwiseConv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
        if (bias != null) result = (0, _add.add)(result, bias);
        return applyActivation(result, activation, preluActivationWeights);
    }
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "depthwiseConv2d");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "depthwiseConv2d");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in fused depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
    _util.assert($filter.rank === 4, ()=>`Error in fused depthwiseConv2d: filter must be rank 4, ` + `but got rank ${$filter.rank}.`);
    _util.assert(x4D.shape[3] === $filter.shape[2], ()=>`Error in fused depthwiseConv2d: number of input channels ` + `(${x4D.shape[3]}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);
    if (dilations == null) dilations = [
        1,
        1
    ];
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in fused depthwiseConv2d: Either strides or dilations must " + `be 1. Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in fused depthwiseConv2d: pad must be an integer when ` + `using dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const convInfo = _convUtil.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true);
    let $bias;
    if (bias != null) {
        $bias = (0, _tensorUtilEnv.convertToTensor)(bias, "bias", "fused conv2d");
        [$bias] = (0, _tensorUtil.makeTypesMatch)($bias, $x);
        _broadcastUtil.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) $preluActivationWeights = (0, _tensorUtilEnv.convertToTensor)(preluActivationWeights, "prelu weights", "fused depthwiseConv2d");
    const grad = (dy, saved)=>{
        _util.assert(_convUtil.tupleValuesAreOne(dilations), ()=>"Error in gradient of fused depthwiseConv2d: dilation rates " + `greater than 1 are not yet supported. Got dilations ` + `'${dilations}'`);
        const [$filter, x4D, y] = saved;
        const dyActivation = getFusedDyActivation(dy, y, activation);
        let biasGradient = {};
        if (bias != null) biasGradient = {
            bias: ()=>getFusedBiasGradient($bias, dyActivation)
        };
        return Object.assign({
            x: ()=>(0, _depthwiseConv2DNativeBackpropInput.depthwiseConv2dNativeBackpropInput)(x4D.shape, dyActivation, $filter, convInfo),
            filter: ()=>(0, _depthwiseConv2DNativeBackpropFilter.depthwiseConv2dNativeBackpropFilter)(x4D, dyActivation, $filter.shape, convInfo)
        }, biasGradient);
    };
    const inputs = {
        x: x4D,
        filter: $filter
    };
    if (bias != null) inputs.bias = $bias;
    if (preluActivationWeights != null) inputs.preluActivationWeights = $preluActivationWeights;
    const inputsToSave = [
        $filter,
        x4D
    ];
    const outputsToSave = [
        true
    ];
    const res = (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.fusedDepthwiseConv2D({
            input: x4D,
            filter: $filter,
            convInfo,
            bias: $bias,
            activation,
            preluActivationWeights: $preluActivationWeights
        });
        save([
            $filter,
            x4D,
            res
        ]);
        return res;
    }, inputs, grad, "FusedDepthwiseConv2D", {
        convInfo,
        activation
    }, inputsToSave, outputsToSave);
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    return res;
}
const matMul = (0, _operation.op)({
    fusedMatMul_
});
const conv2d = (0, _operation.op)({
    fusedConv2d_
});
const depthwiseConv2d = (0, _operation.op)({
    fusedDepthwiseConv2d_
});

},{"../engine":"1aEvR","../ops/conv_util":"oHP2H","../ops/operation":"l6IGY","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","../util":"9v6Fb","./add":"i4ulI","./broadcast_util":"kQqEF","./conv2d":"94uN6","./conv2d_backprop_filter":"dg2XP","./conv2d_backprop_input":"2dggy","./depthwise_conv2d":"kqwkG","./depthwise_conv2d_native_backprop_filter":"d54uU","./depthwise_conv2d_native_backprop_input":"bpcTn","./fused_util":"9OXSQ","./mat_mul":"SZp9a","./relu_ops":"fydAe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqwkG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2d", ()=>depthwiseConv2d);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
/**
 * Depthwise 2D convolution.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function depthwiseConv2d_(x, filter, strides, pad, dataFormat = "NHWC", dilations = [
    1,
    1
], dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "depthwiseConv2d");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "depthwiseConv2d");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _arrayOps.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
    _util.assert($filter.rank === 4, ()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);
    _util.assert(x4D.shape[3] === $filter.shape[2], ()=>`Error in depthwiseConv2d: number of input channels ` + `(${x4D.shape[3]}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in depthwiseConv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const forward = (backend, save)=>{
        if (dilations == null) dilations = [
            1,
            1
        ];
        _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in depthwiseConv2d: Either strides or dilations must be " + `1. Got strides ${strides} and dilations '${dilations}'`);
        const convInfo = _convUtil.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true);
        const res = backend.depthwiseConv2D(x4D, $filter, convInfo);
        save([
            x4D,
            $filter
        ]);
        return res;
    };
    const inputs = {
        x: x4D,
        filter: $filter
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations,
        dimRoundingMode
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.DepthwiseConv2dNative), attrs);
    if (reshapedTo4D) return (0, _arrayOps.reshape)(res, [
        res.shape[1],
        res.shape[2],
        res.shape[3]
    ]);
    return res;
}
const depthwiseConv2d = (0, _operation.op)({
    depthwiseConv2d_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./conv_util":"oHP2H","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fydAe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "elu", ()=>elu);
parcelHelpers.export(exports, "leakyRelu", ()=>leakyRelu);
parcelHelpers.export(exports, "prelu", ()=>prelu);
parcelHelpers.export(exports, "relu", ()=>relu);
parcelHelpers.export(exports, "relu6", ()=>relu6);
parcelHelpers.export(exports, "selu", ()=>selu);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _binaryOps = require("./binary_ops");
var _broadcastUtil = require("./broadcast_util");
var _logicalOps = require("./logical_ops");
var _operation = require("./operation");
var _seluUtil = require("./selu_util");
var _tensorOps = require("./tensor_ops");
/**
 * Computes rectified linear element-wise: `max(x, 0)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.relu().print();  // or tf.relu(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function relu_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "relu");
    if ($x.dtype === "bool") return $x.toInt();
    const grad = (dy, saved)=>{
        const [$x] = saved;
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return {
            x: ()=>(0, _binaryOps.mul)(dy, $x.step().toFloat())
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.relu($x);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "Relu");
}
/**
 * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 8]);
 *
 * x.relu6().print();  // or tf.relu6(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function relu6_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "relu6");
    if ($x.dtype === "bool") return $x.toInt();
    const grad = (dy, saved)=>{
        const [$x] = saved;
        const mask = $x.lessEqual(6).mul($x.step());
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return {
            x: ()=>(0, _binaryOps.mul)(dy, mask.toFloat())
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.relu6($x);
        save([
            $x
        ]);
        return res;
    }, {
        x: $x
    }, grad, "Relu6");
}
/**
 * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 1, -3, 2]);
 *
 * x.elu().print();  // or tf.elu(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function elu_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "elu");
    const grad = (dy, saved)=>{
        const [y] = saved;
        return {
            $x: ()=>(0, _engine.ENGINE).runKernelFunc((backend)=>backend.eluDer(dy, y), {
                    dy,
                    y
                })
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.elu($x);
        save([
            y
        ]);
        return y;
    }, {
        $x
    }, grad);
}
/**
 * Computes scaled exponential linear element-wise.
 *
 * `x < 0 ? scale * alpha * (exp(x) - 1) : x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.selu().print();  // or tf.selu(x)
 * ```
 * @param x The input tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function selu_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "selu");
    const grad = (dy, saved)=>{
        const [$x] = saved;
        return {
            $x: ()=>{
                const mask = $x.greater((0, _tensorOps.scalar)(0));
                const scaleAlpha = (0, _tensorOps.scalar)((0, _seluUtil.SELU_SCALEALPHA));
                const scale = (0, _tensorOps.scalar)((0, _seluUtil.SELU_SCALE));
                const greaterThanZeroDer = dy.mul(scale);
                const lessEqualZeroDer = dy.mul(scaleAlpha).mul($x.toFloat().exp());
                return (0, _logicalOps.where)(mask, greaterThanZeroDer, lessEqualZeroDer);
            }
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.selu($x);
        save([
            $x
        ]);
        return res;
    }, {
        $x
    }, grad);
}
/**
 * Computes leaky rectified linear element-wise.
 *
 * See
 * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](
 *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)
 * ```
 * @param x The input tensor.
 * @param alpha The scaling factor for negative values, defaults to 0.2.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function leakyRelu_(x, alpha = 0.2) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "leakyRelu");
    return (0, _binaryOps.maximum)((0, _tensorOps.scalar)(alpha).mul($x), $x);
}
/**
 * Computes leaky rectified linear element-wise with parametric alphas.
 *
 * `x < 0 ? alpha * x : f(x) = x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 * const alpha = tf.scalar(0.1);
 *
 * x.prelu(alpha).print();  // or tf.prelu(x, alpha)
 * ```
 * @param x The input tensor.
 * @param alpha Scaling factor for negative values.
 */ /** @doc {heading: 'Operations', subheading: 'Basic math'} */ function prelu_(x, alpha) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "prelu");
    const $alpha = (0, _tensorUtilEnv.convertToTensor)(alpha, "alpha", "prelu");
    const grad = (dy, saved)=>{
        const [$x, $alpha] = saved;
        const mask = $x.greater(0);
        return {
            x: ()=>(0, _logicalOps.where)(mask, dy, dy.mul($alpha)),
            alpha: ()=>{
                let res = (0, _logicalOps.where)(mask, (0, _tensorOps.zerosLike)(dy), dy.mul($x));
                const reduceAxes = (0, _broadcastUtil.getReductionAxes)($alpha.shape, dy.shape);
                if (reduceAxes.length > 0) res = res.sum(reduceAxes);
                return res.reshape($alpha.shape);
            }
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.prelu($x, $alpha);
        save([
            $x,
            $alpha
        ]);
        return res;
    }, {
        x: $x,
        alpha: $alpha
    }, grad, "Prelu");
}
const elu = (0, _operation.op)({
    elu_
});
const leakyRelu = (0, _operation.op)({
    leakyRelu_
});
const prelu = (0, _operation.op)({
    prelu_
});
const relu = (0, _operation.op)({
    relu_
});
const relu6 = (0, _operation.op)({
    relu6_
});
const selu = (0, _operation.op)({
    selu_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","./binary_ops":"3wHWX","./broadcast_util":"kQqEF","./logical_ops":"aneSK","./operation":"l6IGY","./selu_util":"11lT6","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dEkY0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hannWindow", ()=>hannWindow);
parcelHelpers.export(exports, "hammingWindow", ()=>hammingWindow);
parcelHelpers.export(exports, "frame", ()=>frame);
parcelHelpers.export(exports, "stft", ()=>stft);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _operation = require("../ops/operation");
var _binaryOps = require("./binary_ops");
var _concat = require("./concat");
var _slice = require("./slice");
var _spectralOps = require("./spectral_ops");
var _tensorOps = require("./tensor_ops");
/**
 * Generate a Hann window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hannWindow(10).print();
 * ```
 * @param The length of window
 */ /**
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */ function hannWindow_(windowLength) {
    return cosineWindow(windowLength, 0.5, 0.5);
}
/**
 * Generate a hamming window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hammingWindow(10).print();
 * ```
 * @param The length of window
 */ /**
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */ function hammingWindow_(windowLength) {
    return cosineWindow(windowLength, 0.54, 0.46);
}
/**
 * Expands input into frames of frameLength.
 * Slides a window size with frameStep.
 *
 * ```js
 * tf.signal.frame([1, 2, 3], 2, 1).print();
 * ```
 * @param signal The input tensor to be expanded
 * @param frameLength Length of each frame
 * @param frameStep The frame hop size in samples.
 * @param padEnd Whether to pad the end of signal with padValue.
 * @param padValue An number to use where the input signal does
 *     not exist when padEnd is True.
 */ /**
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */ function frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {
    let start = 0;
    const output = [];
    while(start + frameLength <= signal.size){
        output.push((0, _slice.slice)(signal, start, frameLength));
        start += frameStep;
    }
    if (padEnd) while(start < signal.size){
        const padLen = start + frameLength - signal.size;
        const pad = (0, _concat.concat)([
            (0, _slice.slice)(signal, start, frameLength - padLen),
            (0, _tensorOps.fill)([
                padLen
            ], padValue)
        ]);
        output.push(pad);
        start += frameStep;
    }
    if (output.length === 0) return (0, _tensorOps.tensor2d)([], [
        0,
        frameLength
    ]);
    return (0, _concat.concat)(output).as2D(output.length, frameLength);
}
/**
 * Computes the Short-time Fourier Transform of signals
 * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform
 *
 * ```js
 * const input = tf.tensor1d([1, 1, 1, 1, 1])
 * tf.signal.stft(input, 3, 1).print();
 * ```
 * @param signal 1-dimensional real value tensor.
 * @param frameLength The window length of samples.
 * @param frameStep The number of samples to step.
 * @param fftLength The size of the FFT to apply.
 * @param windowFn A callable that takes a window length and returns 1-d tensor.
 */ /**
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */ function stft_(signal, frameLength, frameStep, fftLength, windowFn = hannWindow) {
    if (fftLength == null) fftLength = enclosingPowerOfTwo(frameLength);
    const framedSignal = frame(signal, frameLength, frameStep);
    const windowedSignal = (0, _binaryOps.mul)(framedSignal, windowFn(frameLength));
    const output = [];
    for(let i = 0; i < framedSignal.shape[0]; i++)output.push((0, _spectralOps.rfft)(windowedSignal.slice([
        i,
        0
    ], [
        1,
        frameLength
    ]), fftLength));
    return (0, _concat.concat)(output);
}
function enclosingPowerOfTwo(value) {
    // Return 2**N for integer N such that 2**N >= value.
    return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));
}
function cosineWindow(windowLength, a, b) {
    const even = 1 - windowLength % 2;
    const newValues = new Float32Array(windowLength);
    for(let i = 0; i < windowLength; ++i){
        const cosArg = 2.0 * Math.PI * i / (windowLength + even - 1);
        newValues[i] = a - b * Math.cos(cosArg);
    }
    return (0, _tensorOps.tensor1d)(newValues, "float32");
}
const hannWindow = (0, _operation.op)({
    hannWindow_
});
const hammingWindow = (0, _operation.op)({
    hammingWindow_
});
const frame = (0, _operation.op)({
    frame_
});
const stft = (0, _operation.op)({
    stft_
});

},{"../ops/operation":"l6IGY","./binary_ops":"3wHWX","./concat":"jfkcZ","./slice":"ist4s","./spectral_ops":"b2WaW","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ei3ol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addN", ()=>addN);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 *
 * tf.addN([a, b, c]).print();
 * ```
 * @param tensors A list of tensors with the same shape and dtype.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function addN_(tensors) {
    _util.assert(Array.isArray(tensors), ()=>"The argument passed to tf.addN() must be a list of tensors");
    _util.assert(tensors.length >= 1, ()=>`Must pass at least one tensor to tf.addN(), but got ` + `${tensors.length}`);
    const $tensors = tensors.map((t, i)=>(0, _tensorUtilEnv.convertToTensor)(t, `tensors${i}`, "addN"));
    const firstTensor = $tensors[0];
    $tensors.forEach((t)=>{
        if (t.dtype !== firstTensor.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
    });
    $tensors.forEach((t)=>{
        if (!_util.arraysEqual(t.shape, firstTensor.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
    });
    const forward = (backend, save)=>{
        const res = backend.addN($tensors);
        save($tensors);
        return res;
    };
    const inputs = $tensors;
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.AddN));
}
const addN = (0, _operation.op)({
    addN_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8hFsz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchNorm", ()=>batchNorm);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _batchnormUtil = require("./batchnorm_util");
var _operation = require("./operation");
/**
 * Batch normalization.
 *
 * As described in
 * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).
 *
 * Mean, variance, scale, and offset can be of two shapes:
 *   - The same shape as the input.
 *   - In the common case, the depth dimension is the last dimension of x, so
 *     the values would be an `tf.Tensor1D` of shape [depth].
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that parameters passed are of given rank
 *   - `tf.batchNorm2d`
 *   - `tf.batchNorm3d`
 *   - `tf.batchNorm4d`
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */ function batchNorm_(x, mean, variance, offset, scale, varianceEpsilon) {
    if (varianceEpsilon == null) varianceEpsilon = 0.001;
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchNorm");
    const $mean = (0, _tensorUtilEnv.convertToTensor)(mean, "mean", "batchNorm");
    const $variance = (0, _tensorUtilEnv.convertToTensor)(variance, "variance", "batchNorm");
    let $scale;
    if (scale != null) $scale = (0, _tensorUtilEnv.convertToTensor)(scale, "scale", "batchNorm");
    let $offset;
    if (offset != null) $offset = (0, _tensorUtilEnv.convertToTensor)(offset, "offset", "batchNorm");
    _util.assert($mean.rank === $variance.rank, ()=>"Batch normalization gradient requires mean and variance to have equal ranks.");
    _util.assert($offset == null || $mean.rank === $offset.rank, ()=>"Batch normalization gradient requires mean and offset to have equal ranks.");
    _util.assert($scale == null || $mean.rank === $scale.rank, ()=>"Batch normalization gradient requires mean and scale to have equal ranks.");
    const x4D = (0, _batchnormUtil.xAs4D)($x);
    const forward = (backend, save)=>{
        save([
            x4D,
            $mean,
            $variance,
            $scale
        ]);
        return backend.batchNorm(x4D, as1DOr4D($mean), as1DOr4D($variance), as1DOr4D($offset), as1DOr4D($scale), varianceEpsilon);
    };
    const inputs = {
        x: x4D,
        scale: $scale,
        offset: $offset,
        mean: $mean,
        variance: $variance
    };
    const attrs = {
        varianceEpsilon
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.FusedBatchNorm), attrs);
    return (0, _arrayOps.reshape)(res, $x.shape);
}
function as1DOr4D(x) {
    if (x == null) return null;
    if (x.rank === 0) return x.as1D();
    else if (x.rank === 1) return x;
    else if (x.rank === 2) return x.as4D(1, 1, x.shape[0], x.shape[1]);
    else if (x.rank === 3) return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
    return x;
}
const batchNorm = (0, _operation.op)({
    batchNorm_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./batchnorm_util":"cixmY","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cixmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xAs4D", ()=>xAs4D);
function xAs4D(x) {
    let x4D;
    if (x.rank === 0 || x.rank === 1) x4D = x.as4D(1, 1, 1, x.size);
    else if (x.rank === 2) x4D = x.as4D(1, 1, x.shape[0], x.shape[1]);
    else if (x.rank === 3) x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
    else x4D = x;
    return x4D;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l93Zr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchNorm2d", ()=>batchNorm2d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _batchnorm = require("./batchnorm");
var _operation = require("./operation");
/**
 * Batch normalization, strictly for 2D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */ function batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchNorm");
    const $mean = (0, _tensorUtilEnv.convertToTensor)(mean, "mean", "batchNorm");
    const $variance = (0, _tensorUtilEnv.convertToTensor)(variance, "variance", "batchNorm");
    let $scale;
    if (scale != null) $scale = (0, _tensorUtilEnv.convertToTensor)(scale, "scale", "batchNorm");
    let $offset;
    if (offset != null) $offset = (0, _tensorUtilEnv.convertToTensor)(offset, "offset", "batchNorm");
    _util.assert($x.rank === 2, ()=>`Error in batchNorm3D: x must be rank 3 but got rank ` + `${$x.rank}.`);
    _util.assert($mean.rank === 2 || $mean.rank === 1, ()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but ` + `got rank ${$mean.rank}.`);
    _util.assert($variance.rank === 2 || $variance.rank === 1, ()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 ` + `but got rank ${$variance.rank}.`);
    if ($scale != null) _util.assert($scale.rank === 2 || $scale.rank === 1, ()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 ` + `but got rank ${$scale.rank}.`);
    if ($offset != null) _util.assert($offset.rank === 2 || $offset.rank === 1, ()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 ` + `but got rank ${$offset.rank}.`);
    return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm2d = (0, _operation.op)({
    batchNorm2d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./batchnorm":"8hFsz","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXHC3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchNorm3d", ()=>batchNorm3d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _batchnorm = require("./batchnorm");
var _operation = require("./operation");
/**
 * Batch normalization, strictly for 3D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */ function batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchNorm");
    const $mean = (0, _tensorUtilEnv.convertToTensor)(mean, "mean", "batchNorm");
    const $variance = (0, _tensorUtilEnv.convertToTensor)(variance, "variance", "batchNorm");
    let $scale;
    if (scale != null) $scale = (0, _tensorUtilEnv.convertToTensor)(scale, "scale", "batchNorm");
    let $offset;
    if (offset != null) $offset = (0, _tensorUtilEnv.convertToTensor)(offset, "offset", "batchNorm");
    _util.assert($x.rank === 3, ()=>`Error in batchNorm3D: x must be rank 3 but got rank ` + `${$x.rank}.`);
    _util.assert($mean.rank === 3 || $mean.rank === 1, ()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but ` + `got rank ${$mean.rank}.`);
    _util.assert($variance.rank === 3 || $variance.rank === 1, ()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 ` + `but got rank ${$variance.rank}.`);
    if ($scale != null) _util.assert($scale.rank === 3 || $scale.rank === 1, ()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 ` + `but got rank ${$scale.rank}.`);
    if ($offset != null) _util.assert($offset.rank === 3 || $offset.rank === 1, ()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 ` + `but got rank ${$offset.rank}.`);
    return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm3d = (0, _operation.op)({
    batchNorm3d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./batchnorm":"8hFsz","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jafZQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchNorm4d", ()=>batchNorm4d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _batchnorm = require("./batchnorm");
var _operation = require("./operation");
/**
 * Batch normalization, strictly for 4D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */ function batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "batchNorm");
    const $mean = (0, _tensorUtilEnv.convertToTensor)(mean, "mean", "batchNorm");
    const $variance = (0, _tensorUtilEnv.convertToTensor)(variance, "variance", "batchNorm");
    let $scale;
    if (scale != null) $scale = (0, _tensorUtilEnv.convertToTensor)(scale, "scale", "batchNorm");
    let $offset;
    if (offset != null) $offset = (0, _tensorUtilEnv.convertToTensor)(offset, "offset", "batchNorm");
    _util.assert($x.rank === 4, ()=>`Error in batchNorm4D: x must be rank 4 but got rank ` + `${$x.rank}.`);
    _util.assert($mean.rank === 4 || $mean.rank === 1, ()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but ` + `got rank ${$mean.rank}.`);
    _util.assert($variance.rank === 4 || $variance.rank === 1, ()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 ` + `but got rank ${$variance.rank}.`);
    if ($scale != null) _util.assert($scale.rank === 4 || $scale.rank === 1, ()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 ` + `but got rank ${$scale.rank}.`);
    if ($offset != null) _util.assert($offset.rank === 4 || $offset.rank === 1, ()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 ` + `but got rank ${$offset.rank}.`);
    return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm4d = (0, _operation.op)({
    batchNorm4d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./batchnorm":"8hFsz","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"33myr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "broadcastTo", ()=>broadcastTo);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _arrayOps = require("./array_ops");
var _clone = require("./clone");
var _operation = require("./operation");
/**
 * Broadcast an array to a compatible shape NumPy-style.
 *
 * The tensor's shape is compared to the broadcast shape from end to beginning.
 * Ones are prepended to the tensor's shape until is has the same length as
 * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is
 * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then
 * the input tensor is tiled N times along that axis (using tf.tile).
 *
 * @param input The tensor that is to be broadcasted.
 * @param shape The input is to be broadcast to this shape.
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function broadcastTo_(x, shape) {
    let input = (0, _tensorUtilEnv.convertToTensor)(x, "broadcastTo", "x");
    const xShape = input.shape;
    if (shape.some((d)=>!(d > 0) || d % 1 !== 0)) throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);
    if (shape.length < input.rank) throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);
    if (shape.length > input.rank) {
        const newShape = input.shape.slice();
        while(newShape.length < shape.length)newShape.unshift(1);
        input = (0, _arrayOps.reshape)(input, newShape);
    }
    const inputShape = input.shape;
    const reps = Array.from(shape);
    for(let i = shape.length - 1; i >= 0; i--){
        if (inputShape[i] === shape[i]) reps[i] = 1;
        else if (input.shape[i] !== 1) throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);
    }
    const axes = reps.map((n, i)=>n > 1 ? i : -1).filter((i)=>i >= 0);
    if (axes.length === 0) return (0, _clone.clone)(input);
    const forward = (backend)=>backend.tile(input, reps);
    const inputs = {
        x: input
    };
    const attrs = {
        shape,
        inputShape
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.BroadcastTo), attrs);
}
const broadcastTo = (0, _operation.op)({
    broadcastTo_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./array_ops":"29MCO","./clone":"cWcE6","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cWcE6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Creates a new tensor with the same values and shape as the specified
 * tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 *
 * x.clone().print();
 * ```
 *
 * @param x The tensor to clone.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function clone_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "clone", null);
    const forward = ()=>(0, _engine.ENGINE).makeTensorFromDataId($x.dataId, $x.shape, $x.dtype);
    // Note this op is called tf.identity in python. Hence the kernel name used
    // here.
    return (0, _engine.ENGINE).runKernelFunc(forward, {
        x: $x
    }, null, (0, _kernelNames.Identity));
}
const clone = (0, _operation.op)({
    clone_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dSDh7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat1d", ()=>concat1d);
var _concat = require("./concat");
var _operation = require("./operation");
/**
 * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(3) = |r1, g1, b1|
 * B: shape(2) = |r2, g2|
 * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @return The concatenated array.
 */ function concat1d_(tensors) {
    return (0, _concat.concat)(tensors, 0 /* axis */ );
}
const concat1d = (0, _operation.op)({
    concat1d_
});

},{"./concat":"jfkcZ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3UOic":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat2d", ()=>concat2d);
var _concat = require("./concat");
var _operation = require("./operation");
/**
 * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *
 * B: shape(2, 3) = | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * C = tf.concat2d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *                  | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * if axis = 1:
 * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |
 *                   | r2, g2, b2, r4, g4, b4 |
 *
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concatenate along.
 * @return The concatenated array.
 */ function concat2d_(tensors, axis) {
    return (0, _concat.concat)(tensors, axis);
}
const concat2d = (0, _operation.op)({
    concat2d_
});

},{"./concat":"jfkcZ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8MUc0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat3d", ()=>concat3d);
var _concat = require("./concat");
var _operation = require("./operation");
/**
 * Concatenates a list of `tf.Tensor3D`s along an axis.
 * See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *
 * B: shape(2, 1, 3) = | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * C = tf.concat3d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *                     | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * if axis = 1:
 * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |
 *                     | r2, g2, b2, r4, g4, b4 |
 *
 * if axis = 2:
 * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |
 *                      | r2, g2, b2, r4, g4, b4 |
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */ function concat3d_(tensors, axis) {
    return (0, _concat.concat)(tensors, axis);
}
const concat3d = (0, _operation.op)({
    concat3d_
});

},{"./concat":"jfkcZ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gYbyt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat4d", ()=>concat4d);
var _concat = require("./concat");
var _operation = require("./operation");
/**
 * Concatenates a list of `tf.Tensor4D`s along an axis.
 * See `concat` for details.
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */ function concat4d_(tensors, axis) {
    return (0, _concat.concat)(tensors, axis);
}
const concat4d = (0, _operation.op)({
    concat4d_
});

},{"./concat":"jfkcZ","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9JA7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv1d", ()=>conv1d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _conv2D = require("./conv2d");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
/**
 * Computes a 1D convolution over the input x.
 *
 * @param x The input tensor, of rank 3 or rank 2, of shape
 *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.
 * @param filter The filter, rank 3, of shape
 *     `[filterWidth, inDepth, outDepth]`.
 * @param stride The number of entries by which the filter is moved right at
 *     each step.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat An optional string from "NWC", "NCW". Defaults to "NWC",
 *     the data is stored in the order of [batch, in_width, in_channels]. Only
 *     "NWC" is currently supported.
 * @param dilation The dilation rate in which we sample input values in
 *     atrous convolution. Defaults to `1`. If it is greater than 1, then
 *     stride must be `1`.
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function conv1d_(x, filter, stride, pad, dataFormat = "NWC", dilation = 1, dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv1d");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv1d");
    let x3D = $x;
    let reshapedTo3D = false;
    if ($x.rank === 2) {
        reshapedTo3D = true;
        x3D = (0, _arrayOps.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1]
        ]);
    }
    _util.assert(x3D.rank === 3, ()=>`Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);
    _util.assert($filter.rank === 3, ()=>`Error in conv1d: filter must be rank 3, but got rank ` + `${$filter.rank}.`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in conv1d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    _util.assert(x3D.shape[2] === $filter.shape[1], ()=>`Error in conv1d: depth of input (${x3D.shape[2]}) must match ` + `input depth for filter ${$filter.shape[1]}.`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(stride, dilation), ()=>"Error in conv1D: Either stride or dilation must be 1. " + `Got stride ${stride} and dilation '${dilation}'`);
    _util.assert(dataFormat === "NWC", ()=>`Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);
    const filter4D = (0, _arrayOps.reshape)($filter, [
        1,
        $filter.shape[0],
        $filter.shape[1],
        $filter.shape[2]
    ]);
    const input4D = (0, _arrayOps.reshape)(x3D, [
        x3D.shape[0],
        1,
        x3D.shape[1],
        x3D.shape[2]
    ]);
    const strides = [
        1,
        stride
    ];
    const dilations = [
        1,
        dilation
    ];
    const conv2dDataFormat = "NHWC";
    const res = (0, _conv2D.conv2d)(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);
    if (reshapedTo3D) return (0, _arrayOps.reshape)(res, [
        res.shape[2],
        res.shape[3]
    ]);
    return (0, _arrayOps.reshape)(res, [
        res.shape[0],
        res.shape[2],
        res.shape[3]
    ]);
}
const conv1d = (0, _operation.op)({
    conv1d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./conv2d":"94uN6","./conv_util":"oHP2H","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lxl1Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2dTranspose", ()=>conv2dTranspose);
var _tensorUtilEnv = require("../tensor_util_env");
var _conv2DBackpropInput = require("./conv2d_backprop_input");
var _operation = require("./operation");
/**
 * Computes the transposed 2D convolution of an image, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 4 or rank 3, of shape
 *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 4 or rank 3:
 *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.
 * @param strides The strides of the original convolution:
 *     `[strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 * @param dimRoundingMode The rounding mode used when computing output
 *    dimensions if pad is a number. If none is provided, it will not round
 *    and error if the output is of fractional size.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv2dTranspose");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv2dTranspose");
    return (0, _conv2DBackpropInput.conv2DBackpropInput)(outputShape, $x, $filter, strides, pad, "NHWC", dimRoundingMode);
}
const conv2dTranspose = (0, _operation.op)({
    conv2dTranspose_
});

},{"../tensor_util_env":"fsyzK","./conv2d_backprop_input":"2dggy","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fWVS8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3d", ()=>conv3d);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
/**
 * Computes a 3D convolution over the input x.
 *
 * @param x The input tensor, of rank 5 or rank 4, of shape
 *     `[batch, depth, height, width, channels]`. If rank 4,
 * batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.
 *      inChannels must match between input and filter.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat: An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationDepth, dilationHeight,
 *     dilationWidth]` in which we sample input values across the height
 *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.
 *     If `dilations` is a single number, then
 *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater
 *     than 1, then all values of `strides` must be 1.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function conv3d_(x, filter, strides, pad, dataFormat = "NDHWC", dilations = [
    1,
    1,
    1
]) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv3d");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv3d");
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = (0, _arrayOps.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2],
            $x.shape[3]
        ]);
    }
    _util.assert(x5D.rank === 5, ()=>`Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);
    _util.assert($filter.rank === 5, ()=>`Error in conv3d: filter must be rank 5, but got rank ` + `${$filter.rank}.`);
    _util.assert(x5D.shape[4] === $filter.shape[3], ()=>`Error in conv3d: depth of input (${x5D.shape[4]}) must match ` + `input depth for filter ${$filter.shape[3]}.`);
    _util.assert((0, _convUtil.eitherStridesOrDilationsAreOne)(strides, dilations), ()=>"Error in conv3D: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    _util.assert(dataFormat === "NDHWC", ()=>`Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);
    const forward = (backend, save)=>{
        const convInfo = _convUtil.computeConv3DInfo(x5D.shape, $filter.shape, strides, dilations, pad);
        const res = backend.conv3d(x5D, $filter, convInfo);
        save([
            x5D,
            $filter
        ]);
        return res;
    };
    const inputs = {
        x: x5D,
        filter: $filter
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Conv3D), attrs);
    if (reshapedTo5D) return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]);
    return res;
}
const conv3d = (0, _operation.op)({
    conv3d_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./conv_util":"oHP2H","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ehOM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3dTranspose", ()=>conv3dTranspose);
var _tensorUtilEnv = require("../tensor_util_env");
var _conv3DBackpropInput = require("./conv3d_backprop_input");
var _operation = require("./operation");
/**
 * Computes the transposed 3D convolution of a volume, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 5 or rank 4, of shape
 *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 5 or rank 4:
 *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is
 *    assumed.
 * @param strides The strides of the original convolution:
 *     `[strideDepth, strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function conv3dTranspose_(x, filter, outputShape, strides, pad) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "conv3dTranspose");
    const $filter = (0, _tensorUtilEnv.convertToTensor)(filter, "filter", "conv3dTranspose");
    return (0, _conv3DBackpropInput.conv3DBackpropInput)(outputShape, $x, $filter, strides, pad);
}
const conv3dTranspose = (0, _operation.op)({
    conv3dTranspose_
});

},{"../tensor_util_env":"fsyzK","./conv3d_backprop_input":"dmSvt","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6XiCc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthToSpace", ()=>depthToSpace);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Rearranges data from depth into blocks of spatial data. More specifically,
 * this op outputs a copy of the input tensor where values from the `depth`
 * dimension are moved in spatial blocks to the `height` and `width` dimensions.
 * The attr `blockSize` indicates the input block size and how the data is
 * moved.
 *
 *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged
 * into non-overlapping blocks of size `blockSize x blockSize`
 *
 *  - The width the output tensor is `inputWidth * blockSize`, whereas the
 * height is `inputHeight * blockSize`
 *
 *  - The Y, X coordinates within each block of the output image are determined
 * by the high order component of the input channel index
 *
 *  - The depth of the input tensor must be divisible by `blockSize *
 * blockSize`
 *
 * The `dataFormat` attr specifies the layout of the input and output tensors
 * with the following options: "NHWC": [ `batch, height, width, channels` ]
 * "NCHW": [ `batch, channels, height, width` ]
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);
 * const blockSize = 2;
 * const dataFormat = "NHWC";
 *
 * tf.depthToSpace(x, blockSize, dataFormat).print();
 * ```
 *
 * @param x The input tensor of rank 4
 * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to "NHWC"
 */ /** @doc {heading: 'Tensors', subheading: 'Transformations'} */ function depthToSpace_(x, blockSize, dataFormat = "NHWC") {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "depthToSpace");
    const inputHeight = dataFormat === "NHWC" ? $x.shape[1] : $x.shape[2];
    const inputWidth = dataFormat === "NHWC" ? $x.shape[2] : $x.shape[3];
    const inputDepth = dataFormat === "NHWC" ? $x.shape[3] : $x.shape[1];
    _util.assert(inputHeight * blockSize >= 0, ()=>`Negative dimension size caused by overflow when multiplying
    ${inputHeight} and ${blockSize}  for depthToSpace with input shape
    ${$x.shape}`);
    _util.assert(inputWidth * blockSize >= 0, ()=>`Negative dimension size caused by overflow when multiplying
    ${inputWidth} and ${blockSize} for depthToSpace with input shape
        ${$x.shape}`);
    _util.assert(inputDepth % (blockSize * blockSize) === 0, ()=>`Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);
    const forward = (backend)=>backend.depthToSpace($x, blockSize, dataFormat);
    const inputs = {
        x: $x
    };
    const attrs = {
        blockSize,
        dataFormat
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.DepthToSpace), attrs);
}
const depthToSpace = (0, _operation.op)({
    depthToSpace_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cjdna":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diag", ()=>diag);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _arrayOps = require("./array_ops");
var _operation = require("./operation");
/**
 * Returns a diagonal tensor with a given diagonal values.
 *
 * Given a diagonal, this operation returns a tensor with the diagonal and
 * everything else padded with zeros.
 *
 * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor
 * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * tf.diag(x).print()
 * ```
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])
 *
 * tf.diag(x).print()
 * ```
 * @param x The input tensor.
 */ function diag_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "diag").flatten();
    const forward = (backend)=>{
        const result = backend.diag($x);
        const outShape = [
            ...x.shape,
            ...x.shape
        ];
        return (0, _arrayOps.reshape)(result, outShape);
    };
    const inputs = {
        x: $x
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Diag));
}
const diag = (0, _operation.op)({
    diag_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","./array_ops":"29MCO","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8t5q0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divNoNan", ()=>divNoNan);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _div = require("./div");
var _logicalOps = require("./logical_ops");
var _operation = require("./operation");
var _tensorOps = require("./tensor_ops");
/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0
 * if denominator is 0.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 * const c = tf.tensor1d([0, 0, 0, 0]);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 * const c = tf.scalar(0);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function divNoNan_(a, b) {
    // TODO: Make this into its own kernel.
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "div");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "div");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    const divResult = (0, _div.div)($a, $b);
    const zeros = (0, _tensorOps.zerosLike)(divResult);
    const bEqualsZero = $b.equal(zeros);
    return (0, _logicalOps.where)(bEqualsZero, zeros, divResult);
}
const divNoNan = (0, _operation.op)({
    divNoNan_
});

},{"../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./div":"3bNgZ","./logical_ops":"aneSK","./operation":"l6IGY","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yhj3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _matMul = require("./mat_mul");
var _operation = require("./operation");
/**
 * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor2d([[1, 2], [3, 4]]);
 * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 *
 * a.dot(b).print();  // or tf.dot(a, b)
 * b.dot(a).print();
 * b.dot(c).print();
 * ```
 * @param t1 The first tensor in the dot operation.
 * @param t2 The second tensor in the dot operation.
 */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */ function dot_(t1, t2) {
    const $t1 = (0, _tensorUtilEnv.convertToTensor)(t1, "t1", "dot");
    const $t2 = (0, _tensorUtilEnv.convertToTensor)(t2, "t2", "dot");
    _util.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), ()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ` + `${$t1.rank} and ${$t2.rank}.`);
    const t1Inner = $t1.rank === 1 ? $t1.size : $t1.shape[1];
    const t2Inner = $t2.rank === 1 ? $t2.size : $t2.shape[0];
    _util.assert(t1Inner === t2Inner, ()=>`Error in dot: inner dimensions of inputs must match, but got ` + `${t1Inner} and ${t2Inner}.`);
    if ($t1.rank === 1 && $t2.rank === 1) {
        const t12D = (0, _arrayOps.reshape)($t1, [
            1,
            -1
        ]);
        const t22D = (0, _arrayOps.reshape)($t2, [
            -1,
            1
        ]);
        const t1t2 = (0, _matMul.matMul)(t12D, t22D);
        return (0, _arrayOps.reshape)(t1t2, []);
    } else if ($t1.rank === 1 && $t2.rank === 2) {
        const t12D1 = (0, _arrayOps.reshape)($t1, [
            1,
            -1
        ]);
        const t22D1 = (0, _arrayOps.reshape)($t2, [
            $t2.shape[0],
            $t2.shape[1]
        ]);
        const t1t21 = (0, _matMul.matMul)(t12D1, t22D1);
        return (0, _arrayOps.reshape)(t1t21, [
            t1t21.size
        ]);
    } else if ($t1.rank === 2 && $t2.rank === 1) {
        const t22D2 = (0, _arrayOps.reshape)($t2, [
            -1,
            1
        ]);
        const t1t22 = (0, _matMul.matMul)($t1, t22D2);
        return (0, _arrayOps.reshape)(t1t22, [
            t1t22.size
        ]);
    } else {
        const t22D3 = (0, _arrayOps.reshape)($t2, [
            $t2.shape[0],
            $t2.shape[1]
        ]);
        const t1t23 = (0, _matMul.matMul)($t1, t22D3);
        return t1t23;
    }
}
const dot = (0, _operation.op)({
    dot_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./mat_mul":"SZp9a","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dg46U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equal", ()=>equal);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a == b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.equal(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function equal_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "equal");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "equal");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const forward = (backend)=>backend.equal($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Equal));
}
const equal = (0, _operation.op)({
    equal_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cdsGN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "greater", ()=>greater);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a > b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greater(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function greater_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "greater");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "greater");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const forward = (backend)=>backend.greater($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Greater));
}
const greater = (0, _operation.op)({
    greater_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ztC3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "greaterEqual", ()=>greaterEqual);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a >= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greaterEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function greaterEqual_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "greaterEqual");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "greaterEqual");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const forward = (backend, save)=>{
        const res = backend.greaterEqual($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    };
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.GreaterEqual));
}
const greaterEqual = (0, _operation.op)({
    greaterEqual_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Jx3h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "less", ()=>less);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a < b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.less(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function less_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "less");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "less");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const forward = (backend)=>backend.less($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Less));
}
const less = (0, _operation.op)({
    less_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6NYBp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lessEqual", ()=>lessEqual);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a <= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.lessEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function lessEqual_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "lessEqual");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "lessEqual");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const forward = (backend, save)=>{
        const res = backend.lessEqual($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    };
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.LessEqual));
}
const lessEqual = (0, _operation.op)({
    lessEqual_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8x0DH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "localResponseNormalization", ()=>localResponseNormalization);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _operation = require("./operation");
/**
 * Normalizes the activation of a local neighborhood across or within
 * channels.
 *
 * @param x The input tensor. The 4-D input tensor is treated as a 3-D array
 *     of 1D vectors (along the last dimension), and each vector is
 *     normalized independently.
 * @param depthRadius The number of adjacent channels in the 1D normalization
 *     window.
 * @param bias A constant bias term for the basis.
 * @param alpha A scale factor, usually positive.
 * @param beta An exponent.
 */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */ function localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "localResponseNormalization");
    _util.assert($x.rank === 4 || $x.rank === 3, ()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${$x.rank}.`);
    _util.assert(_util.isInt(depthRadius), ()=>`Error in localResponseNormalization: depthRadius must be an ` + `integer but got depthRadius ${depthRadius}.`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0, _arrayOps.reshape)($x, [
            1,
            $x.shape[0],
            $x.shape[1],
            $x.shape[2]
        ]);
    }
    const forward = (backend, save)=>{
        const y = backend.localResponseNormalization4D(x4D, depthRadius, bias, alpha, beta);
        save([
            x4D,
            y
        ]);
        return y;
    };
    const inputs = {
        x: x4D
    };
    const attrs = {
        depthRadius,
        bias,
        alpha,
        beta
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.LRN), attrs);
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    else return res;
}
const localResponseNormalization = (0, _operation.op)({
    localResponseNormalization_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"13F1p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _axisUtil = require("./axis_util");
var _operation = require("./operation");
var _transpose = require("./transpose");
/**
 * Computes the maximum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.max().print();  // or tf.max(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.max(axis).print();  // or tf.max(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 */ /** @doc {heading: 'Operations', subheading: 'Reduction'} */ function max_(x, axis = null, keepDims = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "max");
    const forward = (backend, save)=>{
        const origAxes = _util.parseAxisParam(axis, $x.shape);
        let axes = origAxes;
        const permutedAxes = _axisUtil.getAxesPermutation(axes, $x.rank);
        let maxInput = $x;
        if (permutedAxes != null) {
            maxInput = (0, _transpose.transpose)($x, permutedAxes);
            axes = _axisUtil.getInnerMostAxes(axes.length, maxInput.rank);
        }
        const y = backend.max(maxInput, axes);
        save([
            $x,
            y
        ]);
        if (permutedAxes != null) backend.disposeData(maxInput.dataId);
        return y;
    };
    const inputs = {
        x: $x
    };
    const attrs = {
        reductionIndices: axis,
        keepDims
    };
    const res = (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.Max), attrs);
    if (keepDims) return (0, _arrayOps.reshape)(res, _axisUtil.expandShapeToKeepDim(res.shape, _util.parseAxisParam(axis, $x.shape)));
    return res;
}
const max = (0, _operation.op)({
    max_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./axis_util":"1A9rc","./operation":"l6IGY","./transpose":"5Lger","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyXIJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multinomial", ()=>multinomial);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Creates a `tf.Tensor` with values drawn from a multinomial distribution.
 *
 * ```js
 * const probs = tf.tensor([.75, .25]);
 * tf.multinomial(probs, 3).print();
 * ```
 *
 * @param logits 1D array with unnormalized log-probabilities, or
 *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`
 *     parameter.
 * @param numSamples Number of samples to draw for each row slice.
 * @param seed The seed number.
 * @param normalized Whether the provided `logits` are normalized true
 *     probabilities (sum to 1). Defaults to false.
 * @return 1D array of shape `[numSamples]`, or 2D array of shape
 *     `[batchSize, numSamples]`, depending on the rank of the input.
 */ /** @doc {heading: 'Tensors', subheading: 'Random'} */ function multinomial_(logits, numSamples, seed, normalized = false) {
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "multinomial");
    const numOutcomes = $logits.size;
    const origRank = $logits.rank;
    if (numOutcomes < 2) throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` + `${numOutcomes}.`);
    if (origRank > 2) throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);
    seed = seed || Math.random();
    const logits2D = origRank === 1 ? $logits.as2D(1, -1) : $logits;
    const res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.multinomial(logits2D, normalized, numSamples, seed), {
        logits2D
    });
    return origRank === 1 ? res.as1D() : res;
}
const multinomial = (0, _operation.op)({
    multinomial_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cu4OV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "notEqual", ()=>notEqual);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns the truth value of (a != b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([0, 2, 3]);
 *
 * a.notEqual(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Logical'} */ function notEqual_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "notEqual");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "notEqual");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const forward = (backend)=>backend.notEqual($a, $b);
    const inputs = {
        a: $a,
        b: $b
    };
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.NotEqual));
}
const notEqual = (0, _operation.op)({
    notEqual_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4IFP5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "outerProduct", ()=>outerProduct);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _matMul = require("./mat_mul");
var _operation = require("./operation");
/**
 * Computes the outer product of two vectors, `v1` and `v2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([3, 4, 5]);
 *
 * tf.outerProduct(a, b).print();
 * ```
 * @param v1 The first vector in the outer product operation.
 * @param v2 The second vector in the outer product operation.
 */ /** @doc {heading: 'Operations', subheading: 'Matrices'} */ function outerProduct_(v1, v2) {
    const $v1 = (0, _tensorUtilEnv.convertToTensor)(v1, "v1", "outerProduct");
    const $v2 = (0, _tensorUtilEnv.convertToTensor)(v2, "v2", "outerProduct");
    _util.assert($v1.rank === 1 && $v2.rank === 1, ()=>`Error in outerProduct: inputs must be rank 1, but got ranks ` + `${$v1.rank} and ${$v2.rank}.`);
    const v12D = (0, _arrayOps.reshape)($v1, [
        -1,
        1
    ]);
    const v22D = (0, _arrayOps.reshape)($v2, [
        1,
        -1
    ]);
    return (0, _matMul.matMul)(v12D, v22D);
}
const outerProduct = (0, _operation.op)({
    outerProduct_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./mat_mul":"SZp9a","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"khUzn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad1d", ()=>pad1d);
var _util = require("../util");
var _operation = require("./operation");
var _pad = require("./pad");
/**
 * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.
 */ function pad1d_(x, paddings, constantValue = 0) {
    (0, _util.assert)(paddings.length === 2, ()=>"Invalid number of paddings. Must be length of 2.");
    return (0, _pad.pad)(x, [
        paddings
    ], constantValue);
}
const pad1d = (0, _operation.op)({
    pad1d_
});

},{"../util":"9v6Fb","./operation":"l6IGY","./pad":"6hj7a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2JSzi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad2d", ()=>pad2d);
var _util = require("../util");
var _operation = require("./operation");
var _pad = require("./pad");
/**
 * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.
 */ function pad2d_(x, paddings, constantValue = 0) {
    (0, _util.assert)(paddings.length === 2 && paddings[0].length === 2 && paddings[1].length === 2, ()=>"Invalid number of paddings. Must be length of 2 each.");
    return (0, _pad.pad)(x, paddings, constantValue);
}
const pad2d = (0, _operation.op)({
    pad2d_
});

},{"../util":"9v6Fb","./operation":"l6IGY","./pad":"6hj7a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k2QuB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad3d", ()=>pad3d);
var _util = require("../util");
var _operation = require("./operation");
var _pad = require("./pad");
/**
 * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.
 */ function pad3d_(x, paddings, constantValue = 0) {
    (0, _util.assert)(paddings.length === 3 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2, ()=>"Invalid number of paddings. Must be length of 2 each.");
    return (0, _pad.pad)(x, paddings, constantValue);
}
const pad3d = (0, _operation.op)({
    pad3d_
});

},{"../util":"9v6Fb","./operation":"l6IGY","./pad":"6hj7a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQdLI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pad4d", ()=>pad4d);
var _util = require("../util");
var _operation = require("./operation");
var _pad = require("./pad");
/**
 * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.
 */ function pad4d_(x, paddings, constantValue = 0) {
    (0, _util.assert)(paddings.length === 4 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2 && paddings[3].length === 2, ()=>"Invalid number of paddings. Must be length of 2 each.");
    return (0, _pad.pad)(x, paddings, constantValue);
}
const pad4d = (0, _operation.op)({
    pad4d_
});

},{"../util":"9v6Fb","./operation":"l6IGY","./pad":"6hj7a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"35P6K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rand", ()=>rand);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Creates a `tf.Tensor` with values sampled from a random number generator
 * function defined by the user.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param randFunction A random number generator function which is called
 * for each element in the output tensor.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 */ function rand_(shape, randFunction, dtype) {
    const size = (0, _util.sizeFromShape)(shape);
    let values = null;
    if (dtype == null || dtype === "float32") values = new Float32Array(size);
    else if (dtype === "int32") values = new Int32Array(size);
    else if (dtype === "bool") values = new Uint8Array(size);
    else throw new Error(`Unknown data type ${dtype}`);
    for(let i = 0; i < size; i++)values[i] = randFunction();
    return (0, _engine.ENGINE).makeTensor(values, shape, dtype);
}
const rand = (0, _operation.op)({
    rand_
});

},{"../engine":"1aEvR","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Ze5mN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomGamma", ()=>randomGamma);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _arrayOps = require("./array_ops");
var _operation = require("./operation");
var _randUtil = require("./rand_util");
/**
 * Creates a `tf.Tensor` with values sampled from a gamma distribution.
 *
 * ```js
 * tf.randomGamma([2, 2], 1).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param alpha The shape parameter of the gamma distribution.
 * @param beta The inverse scale parameter of the gamma distribution. Defaults
 *     to 1.
 * @param dtype The data type of the output. Defaults to float32.
 * @param seed The seed for the random number generator.
 */ /** @doc {heading: 'Tensors', subheading: 'Random'} */ function randomGamma_(shape, alpha, beta = 1, dtype = "float32", seed) {
    if (beta == null) beta = 1;
    if (dtype == null) dtype = "float32";
    if (dtype !== "float32" && dtype !== "int32") throw new Error(`Unsupported data type ${dtype}`);
    const rgamma = new (0, _randUtil.RandGamma)(alpha, beta, dtype, seed);
    const res = (0, _arrayOps.buffer)(shape, dtype);
    for(let i = 0; i < res.values.length; i++)res.values[i] = rgamma.nextValue();
    return res.toTensor();
}
const randomGamma = (0, _operation.op)({
    randomGamma_
});

},{"./array_ops":"29MCO","./operation":"l6IGY","./rand_util":"k5jhT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k5jhT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// https://en.wikipedia.org/wiki/Marsaglia_polar_method
parcelHelpers.export(exports, "MPRandGauss", ()=>MPRandGauss);
// Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating
// Gamma Variables."
parcelHelpers.export(exports, "RandGamma", ()=>RandGamma);
parcelHelpers.export(exports, "UniformRandom", ()=>UniformRandom);
parcelHelpers.export(exports, "jarqueBeraNormalityTest", ()=>jarqueBeraNormalityTest);
parcelHelpers.export(exports, "expectArrayInMeanStdRange", ()=>expectArrayInMeanStdRange);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _seedrandom = require("seedrandom");
var _testUtil = require("../test_util");
class MPRandGauss {
    constructor(mean, stdDeviation, dtype, truncated, seed){
        this.mean = mean;
        this.stdDev = stdDeviation;
        this.dtype = dtype;
        this.nextVal = NaN;
        this.truncated = truncated;
        if (this.truncated) {
            this.upper = this.mean + this.stdDev * 2;
            this.lower = this.mean - this.stdDev * 2;
        }
        const seedValue = seed ? seed : Math.random();
        this.random = _seedrandom.alea(seedValue.toString());
    }
    /** Returns next sample from a Gaussian distribution. */ nextValue() {
        if (!isNaN(this.nextVal)) {
            const value = this.nextVal;
            this.nextVal = NaN;
            return value;
        }
        let resultX, resultY;
        let isValid = false;
        while(!isValid){
            let v1, v2, s;
            do {
                v1 = 2 * this.random() - 1;
                v2 = 2 * this.random() - 1;
                s = v1 * v1 + v2 * v2;
            }while (s >= 1 || s === 0);
            const mul = Math.sqrt(-2 * Math.log(s) / s);
            resultX = this.mean + this.stdDev * v1 * mul;
            resultY = this.mean + this.stdDev * v2 * mul;
            if (!this.truncated || this.isValidTruncated(resultX)) isValid = true;
        }
        if (!this.truncated || this.isValidTruncated(resultY)) this.nextVal = this.convertValue(resultY);
        return this.convertValue(resultX);
    }
    /** Handles proper rounding for non-floating-point numbers. */ convertValue(value) {
        if (this.dtype == null || this.dtype === "float32") return value;
        return Math.round(value);
    }
    /** Returns true if less than 2-standard-deviations from the mean. */ isValidTruncated(value) {
        return value <= this.upper && value >= this.lower;
    }
}
class RandGamma {
    constructor(alpha, beta, dtype, seed){
        this.alpha = alpha;
        this.beta = 1 / beta; // convert rate to scale parameter
        this.dtype = dtype;
        const seedValue = seed ? seed : Math.random();
        this.randu = _seedrandom.alea(seedValue.toString());
        this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());
        if (alpha < 1) this.d = alpha + 2 / 3;
        else this.d = alpha - 1 / 3;
        this.c = 1 / Math.sqrt(9 * this.d);
    }
    /** Returns next sample from a gamma distribution. */ nextValue() {
        let x2, v0, v1, x, u, v;
        while(true){
            do {
                x = this.randn.nextValue();
                v = 1 + this.c * x;
            }while (v <= 0);
            v *= v * v;
            x2 = x * x;
            v0 = 1 - 0.331 * x2 * x2;
            v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));
            u = this.randu();
            if (u < v0 || Math.log(u) < v1) break;
        }
        v = 1 / this.beta * this.d * v;
        if (this.alpha < 1) v *= Math.pow(this.randu(), 1 / this.alpha);
        return this.convertValue(v);
    }
    /** Handles proper rounding for non-floating-point numbers. */ convertValue(value) {
        if (this.dtype === "float32") return value;
        return Math.round(value);
    }
}
class UniformRandom {
    constructor(min = 0, max = 1, dtype, seed){
        /** Handles proper rounding for non floating point numbers. */ this.canReturnFloat = ()=>this.dtype == null || this.dtype === "float32";
        this.min = min;
        this.range = max - min;
        this.dtype = dtype;
        if (seed == null) seed = Math.random();
        if (typeof seed === "number") seed = seed.toString();
        if (!this.canReturnFloat() && this.range <= 1) throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);
        this.random = _seedrandom.alea(seed);
    }
    convertValue(value) {
        if (this.canReturnFloat()) return value;
        return Math.round(value);
    }
    nextValue() {
        return this.convertValue(this.min + this.range * this.random());
    }
}
function jarqueBeraNormalityTest(values) {
    // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test
    const n = values.length;
    const s = skewness(values);
    const k = kurtosis(values);
    const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));
    // JB test requires 2-degress of freedom from Chi-Square @ 0.95:
    // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm
    const CHI_SQUARE_2DEG = 5.991;
    if (jb > CHI_SQUARE_2DEG) throw new Error(`Invalid p-value for JB: ${jb}`);
}
function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {
    if (epsilon == null) epsilon = (0, _testUtil.testEpsilon)();
    const actualMean = mean(actual);
    (0, _testUtil.expectNumbersClose)(actualMean, expectedMean, epsilon);
    (0, _testUtil.expectNumbersClose)(standardDeviation(actual, actualMean), expectedStdDev, epsilon);
}
function mean(values) {
    let sum = 0;
    for(let i = 0; i < values.length; i++)sum += values[i];
    return sum / values.length;
}
function standardDeviation(values, mean) {
    let squareDiffSum = 0;
    for(let i = 0; i < values.length; i++){
        const diff = values[i] - mean;
        squareDiffSum += diff * diff;
    }
    return Math.sqrt(squareDiffSum / values.length);
}
function kurtosis(values) {
    // https://en.wikipedia.org/wiki/Kurtosis
    const valuesMean = mean(values);
    const n = values.length;
    let sum2 = 0;
    let sum4 = 0;
    for(let i = 0; i < n; i++){
        const v = values[i] - valuesMean;
        sum2 += Math.pow(v, 2);
        sum4 += Math.pow(v, 4);
    }
    return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);
}
function skewness(values) {
    // https://en.wikipedia.org/wiki/Skewness
    const valuesMean = mean(values);
    const n = values.length;
    let sum2 = 0;
    let sum3 = 0;
    for(let i = 0; i < n; i++){
        const v = values[i] - valuesMean;
        sum2 += Math.pow(v, 2);
        sum3 += Math.pow(v, 3);
    }
    return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 1.5);
}

},{"seedrandom":"kcfU7","../test_util":"9tuFM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kcfU7":[function(require,module,exports) {
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.
// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require("./lib/alea");
// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require("./lib/xor128");
// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require("./lib/xorwow");
// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require("./lib/xorshift7");
// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require("./lib/xor4096");
// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require("./lib/tychei");
// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require("./seedrandom");
sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;
module.exports = sr;

},{"./lib/alea":"c47hP","./lib/xor128":"hy9Go","./lib/xorwow":"8ktBo","./lib/xorshift7":"i5aBa","./lib/xor4096":"7tXtZ","./lib/tychei":"eVmNr","./seedrandom":"lbeKh"}],"c47hP":[function(require,module,exports) {
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -
// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
(function(global, module1, define1) {
    function Alea(seed) {
        var me = this, mash = Mash();
        me.next = function() {
            var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
            me.s0 = me.s1;
            me.s1 = me.s2;
            return me.s2 = t - (me.c = t | 0);
        };
        // Apply the seeding algorithm from Baagoe.
        me.c = 1;
        me.s0 = mash(" ");
        me.s1 = mash(" ");
        me.s2 = mash(" ");
        me.s0 -= mash(seed);
        if (me.s0 < 0) me.s0 += 1;
        me.s1 -= mash(seed);
        if (me.s1 < 0) me.s1 += 1;
        me.s2 -= mash(seed);
        if (me.s2 < 0) me.s2 += 1;
        mash = null;
    }
    function copy(f, t) {
        t.c = f.c;
        t.s0 = f.s0;
        t.s1 = f.s1;
        t.s2 = f.s2;
        return t;
    }
    function impl(seed, opts) {
        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
        prng.int32 = function() {
            return xg.next() * 0x100000000 | 0;
        };
        prng.double = function() {
            return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
        };
        prng.quick = prng;
        if (state) {
            if (typeof state == "object") copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    function Mash() {
        var n = 0xefc8249d;
        var mash = function(data) {
            data = data.toString();
            for(var i = 0; i < data.length; i++){
                n += data.charCodeAt(i);
                var h = 0.02519603282416938 * n;
                n = h >>> 0;
                h -= n;
                h *= n;
                n = h >>> 0;
                h -= n;
                n += h * 0x100000000; // 2^32
            }
            return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
        };
        return mash;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.alea = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"hy9Go":[function(require,module,exports) {
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this, strseed = "";
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        // Set up generator function.
        me.next = function() {
            var t = me.x ^ me.x << 11;
            me.x = me.y;
            me.y = me.z;
            me.z = me.w;
            return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;
        };
        if (seed === (seed | 0)) // Integer seed.
        me.x = seed;
        else // String seed.
        strseed += seed;
        // Mix in string seed, then discard an initial batch of 64 values.
        for(var k = 0; k < strseed.length + 64; k++){
            me.x ^= strseed.charCodeAt(k) | 0;
            me.next();
        }
    }
    function copy(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        return t;
    }
    function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (typeof state == "object") copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.xor128 = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"8ktBo":[function(require,module,exports) {
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this, strseed = "";
        // Set up generator function.
        me.next = function() {
            var t = me.x ^ me.x >>> 2;
            me.x = me.y;
            me.y = me.z;
            me.z = me.w;
            me.w = me.v;
            return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;
        };
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        me.v = 0;
        if (seed === (seed | 0)) // Integer seed.
        me.x = seed;
        else // String seed.
        strseed += seed;
        // Mix in string seed, then discard an initial batch of 64 values.
        for(var k = 0; k < strseed.length + 64; k++){
            me.x ^= strseed.charCodeAt(k) | 0;
            if (k == strseed.length) me.d = me.x << 10 ^ me.x >>> 4;
            me.next();
        }
    }
    function copy(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        t.v = f.v;
        t.d = f.d;
        return t;
    }
    function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (typeof state == "object") copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.xorwow = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"i5aBa":[function(require,module,exports) {
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this;
        // Set up generator function.
        me.next = function() {
            // Update xor generator.
            var X = me.x, i = me.i, t, v, w;
            t = X[i];
            t ^= t >>> 7;
            v = t ^ t << 24;
            t = X[i + 1 & 7];
            v ^= t ^ t >>> 10;
            t = X[i + 3 & 7];
            v ^= t ^ t >>> 3;
            t = X[i + 4 & 7];
            v ^= t ^ t << 7;
            t = X[i + 7 & 7];
            t = t ^ t << 13;
            v ^= t ^ t << 9;
            X[i] = v;
            me.i = i + 1 & 7;
            return v;
        };
        function init(me, seed) {
            var j, w, X = [];
            if (seed === (seed | 0)) // Seed state array using a 32-bit integer.
            w = X[0] = seed;
            else {
                // Seed state using a string.
                seed = "" + seed;
                for(j = 0; j < seed.length; ++j)X[j & 7] = X[j & 7] << 15 ^ seed.charCodeAt(j) + X[j + 1 & 7] << 13;
            }
            // Enforce an array length of 8, not all zeroes.
            while(X.length < 8)X.push(0);
            for(j = 0; j < 8 && X[j] === 0; ++j);
            if (j == 8) w = X[7] = -1;
            else w = X[j];
            me.x = X;
            me.i = 0;
            // Discard an initial 256 values.
            for(j = 256; j > 0; --j)me.next();
        }
        init(me, seed);
    }
    function copy(f, t) {
        t.x = f.x.slice();
        t.i = f.i;
        return t;
    }
    function impl(seed, opts) {
        if (seed == null) seed = +new Date;
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (state.x) copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.xorshift7 = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"7tXtZ":[function(require,module,exports) {
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this;
        // Set up generator function.
        me.next = function() {
            var w = me.w, X = me.X, i = me.i, t, v;
            // Update Weyl generator.
            me.w = w = w + 0x61c88647 | 0;
            // Update xor generator.
            v = X[i + 34 & 127];
            t = X[i = i + 1 & 127];
            v ^= v << 13;
            t ^= t << 17;
            v ^= v >>> 15;
            t ^= t >>> 12;
            // Update Xor generator array state.
            v = X[i] = v ^ t;
            me.i = i;
            // Result is the combination.
            return v + (w ^ w >>> 16) | 0;
        };
        function init(me, seed) {
            var t, v, i, j, w, X = [], limit = 128;
            if (seed === (seed | 0)) {
                // Numeric seeds initialize v, which is used to generates X.
                v = seed;
                seed = null;
            } else {
                // String seeds are mixed into v and X one character at a time.
                seed = seed + "\0";
                v = 0;
                limit = Math.max(limit, seed.length);
            }
            // Initialize circular array and weyl value.
            for(i = 0, j = -32; j < limit; ++j){
                // Put the unicode characters into the array, and shuffle them.
                if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
                // After 32 shuffles, take v as the starting w value.
                if (j === 0) w = v;
                v ^= v << 10;
                v ^= v >>> 15;
                v ^= v << 4;
                v ^= v >>> 13;
                if (j >= 0) {
                    w = w + 0x61c88647 | 0; // Weyl.
                    t = X[j & 127] ^= v + w; // Combine xor and weyl to init array.
                    i = 0 == t ? i + 1 : 0; // Count zeroes.
                }
            }
            // We have detected all zeroes; make the key nonzero.
            if (i >= 128) X[(seed && seed.length || 0) & 127] = -1;
            // Run the generator 512 times to further mix the state before using it.
            // Factoring this as a function slows the main generator, so it is just
            // unrolled here.  The weyl generator is not advanced while warming up.
            i = 127;
            for(j = 512; j > 0; --j){
                v = X[i + 34 & 127];
                t = X[i = i + 1 & 127];
                v ^= v << 13;
                t ^= t << 17;
                v ^= v >>> 15;
                t ^= t >>> 12;
                X[i] = v ^ t;
            }
            // Storing state as object members is faster than using closure variables.
            me.w = w;
            me.X = X;
            me.i = i;
        }
        init(me, seed);
    }
    function copy(f, t) {
        t.i = f.i;
        t.w = f.w;
        t.X = f.X.slice();
        return t;
    }
    function impl(seed, opts) {
        if (seed == null) seed = +new Date;
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (state.X) copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.xor4096 = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"eVmNr":[function(require,module,exports) {
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
(function(global, module1, define1) {
    function XorGen(seed) {
        var me = this, strseed = "";
        // Set up generator function.
        me.next = function() {
            var b = me.b, c = me.c, d = me.d, a = me.a;
            b = b << 25 ^ b >>> 7 ^ c;
            c = c - d | 0;
            d = d << 24 ^ d >>> 8 ^ a;
            a = a - b | 0;
            me.b = b = b << 20 ^ b >>> 12 ^ c;
            me.c = c = c - d | 0;
            me.d = d << 16 ^ c >>> 16 ^ a;
            return me.a = a - b | 0;
        };
        /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */ me.a = 0;
        me.b = 0;
        me.c = -1640531527;
        me.d = 1367130551;
        if (seed === Math.floor(seed)) {
            // Integer seed.
            me.a = seed / 0x100000000 | 0;
            me.b = seed | 0;
        } else // String seed.
        strseed += seed;
        // Mix in string seed, then discard an initial batch of 64 values.
        for(var k = 0; k < strseed.length + 20; k++){
            me.b ^= strseed.charCodeAt(k) | 0;
            me.next();
        }
    }
    function copy(f, t) {
        t.a = f.a;
        t.b = f.b;
        t.c = f.c;
        t.d = f.d;
        return t;
    }
    function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 0x100000000;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / 2097152;
            while (result === 0);
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (typeof state == "object") copy(state, xg);
            prng.state = function() {
                return copy(xg, {});
            };
        }
        return prng;
    }
    if (module1 && module1.exports) module1.exports = impl;
    else if (define1 && define1.amd) define1(function() {
        return impl;
    });
    else this.tychei = impl;
})(this, module, typeof define == "function" && define // present with an AMD loader
);

},{}],"lbeKh":[function(require,module,exports) {
/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/ (function(pool, math) {
    //
    // The following constants are related to IEEE 754 limits.
    //
    var global = this, width = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto; // node.js crypto module, initialized at the bottom.
    //
    // seedrandom()
    // This is the seedrandom function described above.
    //
    function seedrandom(seed, options, callback) {
        var key = [];
        options = options == true ? {
            entropy: true
        } : options || {};
        // Flatten the seed string or build one from local entropy if needed.
        var shortseed = mixkey(flatten(options.entropy ? [
            seed,
            tostring(pool)
        ] : seed == null ? autoseed() : seed, 3), key);
        // Use the seed to initialize an ARC4 generator.
        var arc4 = new ARC4(key);
        // This function returns a random double in [0, 1) that contains
        // randomness in every bit of the mantissa of the IEEE 754 value.
        var prng = function() {
            var n = arc4.g(chunks), d = startdenom, x = 0; //   and no 'extra last byte'.
            while(n < significance){
                n = (n + x) * width; //   shifting numerator and
                d *= width; //   denominator and generating a
                x = arc4.g(1); //   new least-significant-byte.
            }
            while(n >= overflow){
                n /= 2; //   last byte, shift everything
                d /= 2; //   right using integer math until
                x >>>= 1; //   we have exactly the desired bits.
            }
            return (n + x) / d; // Form the number within [0, 1).
        };
        prng.int32 = function() {
            return arc4.g(4) | 0;
        };
        prng.quick = function() {
            return arc4.g(4) / 0x100000000;
        };
        prng.double = prng;
        // Mix the randomness into accumulated entropy.
        mixkey(tostring(arc4.S), pool);
        // Calling convention: what to return as a function of prng, seed, is_math.
        return (options.pass || callback || function(prng, seed, is_math_call, state) {
            if (state) {
                // Load the arc4 state from the given state if it has an S array.
                if (state.S) copy(state, arc4);
                // Only provide the .state method if requested via options.state.
                prng.state = function() {
                    return copy(arc4, {});
                };
            }
            // If called as a method of Math (Math.seedrandom()), mutate
            // Math.random because that is how seedrandom.js has worked since v1.0.
            if (is_math_call) {
                math[rngname] = prng;
                return seed;
            } else return prng;
        })(prng, shortseed, "global" in options ? options.global : this == math, options.state);
    }
    math["seed" + rngname] = seedrandom;
    //
    // ARC4
    //
    // An ARC4 implementation.  The constructor takes a key in the form of
    // an array of at most (width) integers that should be 0 <= x < (width).
    //
    // The g(count) method returns a pseudorandom integer that concatenates
    // the next (count) outputs from ARC4.  Its return value is a number x
    // that is in the range 0 <= x < (width ^ count).
    //
    function ARC4(key) {
        var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
        // The empty key [] is treated as [0].
        if (!keylen) key = [
            keylen++
        ];
        // Set up S using the standard key scheduling algorithm.
        while(i < width)s[i] = i++;
        for(i = 0; i < width; i++){
            s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
            s[j] = t;
        }
        // The "g" method returns the next (count) outputs as one number.
        (me.g = function(count) {
            // Using instance members instead of closure state nearly doubles speed.
            var t, r = 0, i = me.i, j = me.j, s = me.S;
            while(count--){
                t = s[i = mask & i + 1];
                r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];
            }
            me.i = i;
            me.j = j;
            return r;
        // For robust unpredictability, the function call below automatically
        // discards an initial batch of values.  This is called RC4-drop[256].
        // See http://google.com/search?q=rsa+fluhrer+response&btnI
        })(width);
    }
    //
    // copy()
    // Copies internal state of ARC4 to or from a plain object.
    //
    function copy(f, t) {
        t.i = f.i;
        t.j = f.j;
        t.S = f.S.slice();
        return t;
    }
    //
    // flatten()
    // Converts an object tree to nested arrays of strings.
    //
    function flatten(obj, depth) {
        var result = [], typ = typeof obj, prop;
        if (depth && typ == "object") {
            for(prop in obj)try {
                result.push(flatten(obj[prop], depth - 1));
            } catch (e) {}
        }
        return result.length ? result : typ == "string" ? obj : obj + "\0";
    }
    //
    // mixkey()
    // Mixes a string seed into a key that is an array of integers, and
    // returns a shortened string seed that is equivalent to the result key.
    //
    function mixkey(seed, key) {
        var stringseed = seed + "", smear, j = 0;
        while(j < stringseed.length)key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
        return tostring(key);
    }
    //
    // autoseed()
    // Returns an object for autoseeding, using window.crypto and Node crypto
    // module if available.
    //
    function autoseed() {
        try {
            var out;
            if (nodecrypto && (out = nodecrypto.randomBytes)) // The use of 'out' to remember randomBytes makes tight minified code.
            out = out(width);
            else {
                out = new Uint8Array(width);
                (global.crypto || global.msCrypto).getRandomValues(out);
            }
            return tostring(out);
        } catch (e) {
            var browser = global.navigator, plugins = browser && browser.plugins;
            return [
                +new Date,
                global,
                plugins,
                global.screen,
                tostring(pool)
            ];
        }
    }
    //
    // tostring()
    // Converts an array of charcodes to a string
    //
    function tostring(a) {
        return String.fromCharCode.apply(0, a);
    }
    //
    // When seedrandom.js is loaded, we immediately mix a few bits
    // from the built-in RNG into the entropy pool.  Because we do
    // not want to interfere with deterministic PRNG state later,
    // seedrandom will not call math.random on its own again after
    // initialization.
    //
    mixkey(math.random(), pool);
    //
    // Nodejs and AMD support: export the implementation as a module using
    // either convention.
    //
    if (module.exports) {
        module.exports = seedrandom;
        // When in node.js, try using crypto package for autoseeding.
        try {
            nodecrypto = require("crypto");
        } catch (ex) {}
    } else if (typeof define == "function" && define.amd) define(function() {
        return seedrandom;
    });
// End anonymous scope, and pass initial values.
})([], Math // math: package containing random, pow, and seedrandom
);

},{"crypto":"jhUEF"}],"ilcdV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomNormal", ()=>randomNormal);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _arrayOps = require("./array_ops");
var _operation = require("./operation");
var _randUtil = require("./rand_util");
/**
 * Creates a `tf.Tensor` with values sampled from a normal distribution.
 *
 * ```js
 * tf.randomNormal([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output.
 * @param seed The seed for the random number generator.
 */ /** @doc {heading: 'Tensors', subheading: 'Random'} */ function randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
    if (dtype != null && dtype === "bool") throw new Error(`Unsupported data type ${dtype}`);
    const randGauss = new (0, _randUtil.MPRandGauss)(mean, stdDev, dtype, false, seed);
    const res = (0, _arrayOps.buffer)(shape, dtype);
    for(let i = 0; i < res.values.length; i++)res.values[i] = randGauss.nextValue();
    return res.toTensor();
}
const randomNormal = (0, _operation.op)({
    randomNormal_
});

},{"./array_ops":"29MCO","./operation":"l6IGY","./rand_util":"k5jhT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"24OwU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomUniform", ()=>randomUniform);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _arrayOps = require("./array_ops");
var _operation = require("./operation");
var _randUtil = require("./rand_util");
/**
 * Creates a `tf.Tensor` with values sampled from a uniform distribution.
 *
 * The generated values follow a uniform distribution in the range [minval,
 * maxval). The lower bound minval is included in the range, while the upper
 * bound maxval is excluded.
 *
 * ```js
 * tf.randomUniform([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param minval The lower bound on the range of random values to generate.
 *   Defaults to 0.
 * @param maxval The upper bound on the range of random values to generate.
 *   Defaults to 1.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 */ /** @doc {heading: 'Tensors', subheading: 'Random'} */ function randomUniform_(shape, minval = 0, maxval = 1, dtype = "float32", seed) {
    const res = (0, _arrayOps.buffer)(shape, dtype);
    const random = new (0, _randUtil.UniformRandom)(minval, maxval, null, seed);
    for(let i = 0; i < res.values.length; i++)res.values[i] = random.nextValue();
    return res.toTensor();
}
const randomUniform = (0, _operation.op)({
    randomUniform_
});

},{"./array_ops":"29MCO","./operation":"l6IGY","./rand_util":"k5jhT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6NvRc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "separableConv2d", ()=>separableConv2d);
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _conv2D = require("./conv2d");
var _depthwiseConv2D = require("./depthwise_conv2d");
var _operation = require("./operation");
/**
 * 2-D convolution with separable filters.
 *
 * Performs a depthwise convolution that acts separately on channels followed
 * by a pointwise convolution that mixes channels. Note that this is
 * separability between dimensions [1, 2] and 3, not spatial separability
 * between dimensions 1 and 2.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is
 *     the filter used in the first step.
 * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape
 *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is
 *     the filter used in the second step.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [
    1,
    1
], dataFormat = "NHWC") {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "separableConv2d");
    const $depthwiseFilter = (0, _tensorUtilEnv.convertToTensor)(depthwiseFilter, "depthwiseFilter", "separableConv2d");
    const $pointwiseFilter = (0, _tensorUtilEnv.convertToTensor)(pointwiseFilter, "pointwiseFilter", "separableConv2d");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);
    }
    if (dataFormat === "NCHW") throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
    _util.assert(x4D.rank === 4, ()=>`Error in separableConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
    _util.assert($depthwiseFilter.rank === 4, ()=>`Error in separableConv2d: depthwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);
    _util.assert($pointwiseFilter.rank === 4, ()=>`Error in separableConv2d: pointwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);
    _util.assert($pointwiseFilter.shape[0] === 1, ()=>`Error in separableConv2d: the first dimension of pointwise filter ` + ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);
    _util.assert($pointwiseFilter.shape[1] === 1, ()=>`Error in separableConv2d: the second dimension of pointwise ` + `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);
    const inChannels = $depthwiseFilter.shape[2];
    const channelMultiplier = $depthwiseFilter.shape[3];
    _util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, ()=>`Error in separableConv2d: the third dimension of pointwise filter ` + `must be ${inChannels * channelMultiplier}, ` + `but got ${$pointwiseFilter.shape[2]}.`);
    const depthwise = (0, _depthwiseConv2D.depthwiseConv2d)(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);
    const pointwiseStride = 1;
    const res = (0, _conv2D.conv2d)(depthwise, $pointwiseFilter, pointwiseStride, "valid", dataFormat);
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    return res;
}
const separableConv2d = (0, _operation.op)({
    separableConv2d_
});

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./conv2d":"94uN6","./depthwise_conv2d":"kqwkG","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8fw9V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squaredDifference", ()=>squaredDifference);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _kernelNames = require("../kernel_names");
var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _broadcastUtil = require("./broadcast_util");
var _operation = require("./operation");
/**
 * Returns (a - b) * (a - b) element-wise.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * ```js
 * // Broadcast squared difference  a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 */ /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */ function squaredDifference_(a, b) {
    let $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "squaredDifference");
    let $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "squaredDifference");
    [$a, $b] = (0, _tensorUtil.makeTypesMatch)($a, $b);
    (0, _broadcastUtil.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const forward = (backend, save)=>{
        const res = backend.squaredDifference($a, $b);
        save([
            $a,
            $b
        ]);
        return res;
    };
    const inputs = {
        a: $a,
        b: $b
    };
    const attrs = {};
    return (0, _engine.ENGINE).runKernelFunc(forward, inputs, null, (0, _kernelNames.SquaredDifference), attrs);
}
const squaredDifference = (0, _operation.op)({
    squaredDifference_
});

},{"../engine":"1aEvR","../kernel_names":"2CzXQ","../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","./broadcast_util":"kQqEF","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ioTIz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "truncatedNormal", ()=>truncatedNormal);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _arrayOps = require("./array_ops");
var _operation = require("./operation");
var _randUtil = require("./rand_util");
/**
 * Creates a `tf.Tensor` with values sampled from a truncated normal
 * distribution.
 *
 * ```js
 * tf.truncatedNormal([2, 2]).print();
 * ```
 *
 * The generated values follow a normal distribution with specified mean and
 * standard deviation, except that values whose magnitude is more than 2
 * standard deviations from the mean are dropped and re-picked.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output tensor.
 * @param seed The seed for the random number generator.
 */ /** @doc {heading: 'Tensors', subheading: 'Creation'} */ function truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
    if (dtype != null && dtype === "bool") throw new Error(`Unsupported data type $ { dtype }`);
    const randGauss = new (0, _randUtil.MPRandGauss)(mean, stdDev, dtype, true, seed);
    const res = (0, _arrayOps.buffer)(shape, dtype);
    for(let i = 0; i < res.values.length; i++)res.values[i] = randGauss.nextValue();
    return res.toTensor();
}
const truncatedNormal = (0, _operation.op)({
    truncatedNormal_
});

},{"./array_ops":"29MCO","./operation":"l6IGY","./rand_util":"k5jhT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7kjVm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "booleanMaskAsync", ()=>booleanMaskAsync);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _logicalOps = require("./logical_ops");
var _segmentOps = require("./segment_ops");
/**
 * Apply boolean mask to tensor.
 *
 * ```js
 * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);
 * const mask = tf.tensor1d([1, 0, 1], 'bool');
 * const result = await tf.booleanMaskAsync(tensor, mask);
 * result.print();
 * ```
 *
 * @param tensor N-D tensor.
 * @param mask K-D boolean tensor, K <= N and K must be known statically.
 * @param axis A 0-D int Tensor representing the axis in tensor to mask from.
 *     By default, axis is 0 which will mask from the first dimension.
 *     Otherwise K + axis <= N.
 */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */ async function booleanMaskAsync_(tensor, mask, axis) {
    const $tensor = (0, _tensorUtilEnv.convertToTensor)(tensor, "tensor", "boolMask");
    const $mask = (0, _tensorUtilEnv.convertToTensor)(mask, "mask", "boolMask", "bool");
    const axisFrom = axis == null ? 0 : axis;
    const maskDim = $mask.rank;
    const tensorShape = $tensor.shape;
    _util.assert(maskDim > 0, ()=>"mask cannot be scalar");
    _util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);
    let leadingSize = 1;
    for(let i = axisFrom; i < axisFrom + maskDim; i++)leadingSize *= tensorShape[i];
    const targetTensorShape = tensorShape.slice(0, axisFrom).concat([
        leadingSize
    ], tensorShape.slice(axisFrom + maskDim));
    const reshapedTensor = $tensor.reshape(targetTensorShape);
    const reshapedMask = $mask.reshape([
        -1
    ]);
    const positivePositions = await (0, _logicalOps.whereAsync)(reshapedMask);
    const indices = positivePositions.squeeze([
        1
    ]);
    const res = (0, _segmentOps.gather)(reshapedTensor, indices, axisFrom);
    // Ensure no memory leak.
    if (tensor !== $tensor) $tensor.dispose();
    if (mask !== $mask) $mask.dispose();
    indices.dispose();
    reshapedTensor.dispose();
    reshapedMask.dispose();
    positivePositions.dispose();
    return res;
}
const booleanMaskAsync = booleanMaskAsync_;

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./logical_ops":"aneSK","./segment_ops":"eLEw1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eLEw1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gather", ()=>gather);
parcelHelpers.export(exports, "unsortedSegmentSum", ()=>unsortedSegmentSum);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _arrayOps = require("./array_ops");
var _axisUtil = require("./axis_util");
var _binaryOps = require("./binary_ops");
var _greaterEqual = require("./greater_equal");
var _logicalOps = require("./logical_ops");
var _operation = require("./operation");
var _segmentUtil = require("./segment_util");
var _tensorOps = require("./tensor_ops");
/**
 * Computes the sum along segments of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');
 * const numSegments = 3;
 *
 * x.unsortedSegmentSum(segmentIds, numSegments).print()
 * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)
 * ```
 * @param x The `tf.Tensor` that will be summed along its segments.
 * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s
 * dimension along the `axis`.  Maps each element of `x` to a segment.
 * @param numSegments The number of distinct `segmentIds`.
 */ /** @doc {heading: 'Operations', subheading: 'Segment'} */ function unsortedSegmentSum_(x, segmentIds, numSegments) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "unsortedSegmentSum");
    const $segmentIds = (0, _tensorUtilEnv.convertToTensor)(segmentIds, "segmentIds", "unsortedSegmentSum", "int32");
    (0, _util.assert)((0, _util.isInt)(numSegments), ()=>"numSegments must be of dtype int");
    const gradFunc = (dy, saved)=>{
        const [$segmentIds] = saved;
        const derX = ()=>{
            return gatherDropNegatives(dy, $segmentIds);
        };
        return {
            $x: derX
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.unsortedSegmentSum($x, $segmentIds, numSegments);
        save([
            $segmentIds
        ]);
        return res;
    }, {
        $x
    }, gradFunc);
}
/**
 * Gather slices from tensor `x`'s axis `axis` according to `indices`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const indices = tf.tensor1d([1, 3, 3], 'int32');
 *
 * x.gather(indices).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const indices = tf.tensor1d([1, 1, 0], 'int32');
 *
 * x.gather(indices).print();
 * ```
 * @param x The input tensor whose slices to be gathered.
 * @param indices The indices of the values to extract.
 * @param axis The axis over which to select values. Defaults to 0.
 */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */ function gather_(x, indices, axis = 0) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "gather");
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "gather", "int32");
    axis = (0, _util.parseAxisParam)(axis, $x.shape)[0];
    const shapeInfo = (0, _segmentUtil.collectGatherOpShapeInfo)($x, $indices, axis);
    const grad = (dy, saved)=>{
        const [$indices] = saved;
        const derX = ()=>{
            const paramsShape = $x.shape;
            const indicesSize = $indices.size;
            const outerShape = paramsShape.slice(0, axis);
            const outerDims = outerShape.length;
            const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);
            const innerDims = innerShape.length;
            const outerAxesIndices = arrayRange(0, outerDims);
            const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);
            const valuesShape = arrayConcat([
                outerShape,
                [
                    indicesSize
                ],
                innerShape
            ]);
            const values = dy.reshape(valuesShape);
            const reshapedIndices = $indices.reshape([
                indicesSize
            ]);
            const transposeDims = arrayConcat([
                [
                    outerDims
                ],
                outerAxesIndices,
                innerAxesIndices
            ]);
            const valuesTranspose = values.transpose(transposeDims);
            let paramsGrad = unsortedSegmentSum(valuesTranspose, reshapedIndices, $x.shape[axis]);
            const invertTransposeDims = (0, _axisUtil.getUndoAxesPermutation)(transposeDims);
            paramsGrad = paramsGrad.transpose(invertTransposeDims);
            return paramsGrad;
        };
        return {
            x: derX,
            indices: ()=>$indices
        };
    };
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const res = backend.gather($x, $indices.flatten(), axis);
        save([
            $indices
        ]);
        return res;
    }, {
        x: $x,
        indices: $indices
    }, grad, "Gather", {
        axis
    }).reshape(shapeInfo.outputShape);
}
function arrayRange(start, stop) {
    const result = [];
    for(let i = start; i < stop; ++i)result.push(i);
    return result;
}
function arrayConcat(arrays) {
    const result = [];
    for(let i = 0; i < arrays.length; ++i)for(let j = 0; j < arrays[i].length; ++j)result.push(arrays[i][j]);
    return result;
}
function gatherDropNegatives(x, indices) {
    // Helper function for unsorted segment ops. Gathers params for
    // positive segment ids and gathers 0 for inputs with negative segment id.
    // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py
    const zeroClippedIndices = (0, _binaryOps.maximum)(indices, (0, _tensorOps.zerosLike)(indices));
    const gathered = gather(x, zeroClippedIndices);
    let isPositive = (0, _greaterEqual.greaterEqual)(indices, (0, _tensorOps.scalar)(0, "int32"));
    const numIters = gathered.rank - isPositive.rank;
    for(let i = 0; i < numIters; ++i)isPositive = (0, _arrayOps.expandDims)(isPositive, i + 1);
    isPositive = (0, _logicalOps.logicalAnd)(isPositive, (0, _tensorOps.ones)(gathered.shape, "bool"));
    const zeroSlice = (0, _tensorOps.zerosLike)(gathered);
    return (0, _logicalOps.where)(isPositive, gathered, zeroSlice);
}
const gather = (0, _operation.op)({
    gather_
});
const unsortedSegmentSum = (0, _operation.op)({
    unsortedSegmentSum_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","../util":"9v6Fb","./array_ops":"29MCO","./axis_util":"1A9rc","./binary_ops":"3wHWX","./greater_equal":"3ztC3","./logical_ops":"aneSK","./operation":"l6IGY","./segment_util":"hWYBC","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j7SBT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reverse", ()=>reverse);
parcelHelpers.export(exports, "reverse1d", ()=>reverse1d);
parcelHelpers.export(exports, "reverse2d", ()=>reverse2d);
parcelHelpers.export(exports, "reverse3d", ()=>reverse3d);
parcelHelpers.export(exports, "reverse4d", ()=>reverse4d);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * Reverses a `tf.Tensor1D`.
 *
 * @param x The input tensor.
 */ function reverse1d_(x) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    _util.assert($x.rank === 1, ()=>`Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);
    return reverse($x, 0);
}
/**
 * Reverses a `tf.Tensor2D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */ function reverse2d_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    _util.assert($x.rank === 2, ()=>`Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);
    return reverse($x, axis);
}
/**
 * Reverses a `tf.Tensor3D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */ function reverse3d_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    _util.assert($x.rank === 3, ()=>`Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);
    return reverse($x, axis);
}
/**
 * Reverses a `tf.Tensor4D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */ function reverse4d_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    _util.assert($x.rank === 4, ()=>`Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);
    return reverse($x, axis);
}
/**
 * Reverses a `tf.Tensor` along a specified axis.
 *
 * Also available are stricter rank-specific methods that assert that `x` is
 * of the given rank:
 *   - `tf.reverse1d`
 *   - `tf.reverse2d`
 *   - `tf.reverse3d`
 *   - `tf.reverse4d`
 *
 * Except `tf.reverse1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.reverse().print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.reverse(axis).print();
 * ```
 * @param x The input tensor to be reversed.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */ /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */ function reverse_(x, axis) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "reverse");
    if ($x.rank === 0) return $x.clone();
    const axes = _util.parseAxisParam(axis, $x.shape);
    const grad = (dy)=>{
        return {
            $x: ()=>dy.reverse(axes)
        };
    };
    const res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.reverse($x, axes), {
        $x
    }, grad);
    return res.reshapeAs($x);
}
const reverse = (0, _operation.op)({
    reverse_
});
const reverse1d = (0, _operation.op)({
    reverse1d_
});
const reverse2d = (0, _operation.op)({
    reverse2d_
});
const reverse3d = (0, _operation.op)({
    reverse3d_
});
const reverse4d = (0, _operation.op)({
    reverse4d_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9vxAG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPool", ()=>maxPool);
parcelHelpers.export(exports, "avgPool", ()=>avgPool);
parcelHelpers.export(exports, "pool", ()=>pool);
parcelHelpers.export(exports, "maxPool3d", ()=>maxPool3d);
parcelHelpers.export(exports, "avgPool3d", ()=>avgPool3d);
parcelHelpers.export(exports, "maxPoolWithArgmax", ()=>maxPoolWithArgmax);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _batchToSpaceNd = require("./batch_to_space_nd");
var _convUtil = require("./conv_util");
var _operation = require("./operation");
var _spaceToBatchNd = require("./space_to_batch_nd");
/**
 * Computes the 2D max pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */ function maxPoolImpl_(x, filterSize, strides, dilations, pad, dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "maxPool");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);
    }
    if (dilations == null) dilations = [
        1,
        1
    ];
    _util.assert(x4D.rank === 4, ()=>`Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in maxPool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in maxPool: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const convInfo = _convUtil.computePool2DInfo(x4D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && _util.arraysEqual(convInfo.inShape, convInfo.outShape)) return $x.clone();
    const grad = (dy, saved)=>{
        const [x4D, y] = saved;
        return {
            x: ()=>maxPoolBackprop(dy, x4D, y, filterSize, strides, dilations, pad)
        };
    };
    const inputsToSave = [
        x4D
    ];
    const res = (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.maxPool(x4D, convInfo);
        save([
            x4D,
            y
        ]);
        return y;
    }, {
        x: x4D
    }, grad, "MaxPool", convInfo, inputsToSave);
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    return res;
}
/**
 * Computes the 2D max pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function maxPool_(x, filterSize, strides, pad, dimRoundingMode) {
    return maxPoolImpl_(x, filterSize, strides, 1, pad, dimRoundingMode);
}
/**
 * Computes the 2D average pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */ function avgPoolImpl_(x, filterSize, strides, dilations, pad, dimRoundingMode) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "avgPool", "float32");
    if (dilations == null) dilations = [
        1,
        1
    ];
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in avgPool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);
    }
    _util.assert(x4D.rank === 4, ()=>`Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in avgPool: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const convInfo = _convUtil.computePool2DInfo(x4D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && _util.arraysEqual(convInfo.inShape, convInfo.outShape)) return $x.clone();
    const grad = (dy)=>{
        return {
            x: ()=>avgPoolBackprop(dy, x4D, filterSize, strides, dilations, pad)
        };
    };
    let res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.avgPool(x4D, convInfo), {
        x: x4D
    }, grad, "AvgPool", convInfo);
    res = res.cast($x.dtype);
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    return res;
}
/**
 * Computes the 2D average pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function avgPool_(x, filterSize, strides, pad, dimRoundingMode) {
    return avgPoolImpl_(x, filterSize, strides, 1, pad, dimRoundingMode);
}
/**
 * Performs an N-D pooling operation
 *
 * @param input The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param windowShape The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param poolingType The type of pooling, either 'max' or 'avg'.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function pool_(input, windowShape, poolingType, pad, dilations, strides) {
    if (dilations == null) dilations = [
        1,
        1
    ];
    if (strides == null) strides = 1;
    if (pad === 0) pad = "valid";
    const $x = (0, _tensorUtilEnv.convertToTensor)(input, "x", "maxPool");
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);
    }
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in pool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = _convUtil.computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);
    const dilation = [
        convInfo.dilationHeight,
        convInfo.dilationWidth
    ];
    // The following implementation does batchToSpace(pool(spaceToBatch(x)))
    // whenever dilation > 1 since the TF kernels do not support dilation > 1.
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037
    let basePadding;
    if (pad === "same") basePadding = withSpaceToBatchBasePaddings([
        convInfo.filterHeight,
        convInfo.filterWidth
    ], dilation);
    else basePadding = [
        [
            0,
            0
        ],
        [
            0,
            0
        ]
    ];
    const isDilationOne = dilation[0] === 1 && dilation[1] === 1;
    const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([
        convInfo.inHeight,
        convInfo.inWidth
    ], dilation, basePadding);
    const convertedPad = isDilationOne ? pad : "valid";
    const convertedX = isDilationOne ? x4D : (0, _spaceToBatchNd.spaceToBatchND)(x4D, dilation, adjustedPadding);
    const forwardOp = poolingType === "avg" ? ()=>avgPoolImpl_(convertedX, windowShape, strides, 1 /* dilation */ , convertedPad) : ()=>maxPoolImpl_(convertedX, windowShape, strides, 1 /* dilation */ , convertedPad);
    const y = forwardOp();
    const res = isDilationOne ? y : (0, _batchToSpaceNd.batchToSpaceND)(y, dilation, adjustedCrops);
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    return res;
}
/**
 * Computes the backprop of a 2D max pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The original input image, of rank 4, of shape
 *     [batchSize, height, width, channels].
 * @param output The original output image, of rank 4, of shape
 *     [batchSize, outHeight, outWidth, channels].
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */ function maxPoolBackprop(dy, input, output, filterSize, strides, dilations, pad, dimRoundingMode) {
    const $dy = (0, _tensorUtilEnv.convertToTensor)(dy, "dy", "maxPoolBackprop");
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "maxPoolBackprop");
    const $output = (0, _tensorUtilEnv.convertToTensor)(output, "output", "maxPoolBackprop");
    _util.assert($input.rank === $dy.rank, ()=>`Rank of input (${$input.rank}) does not match rank of dy ` + `(${$dy.rank})`);
    if (dilations == null) dilations = [
        1,
        1
    ];
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in maxPoolBackProp: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    _util.assert($dy.rank === 4, ()=>`Error in maxPoolBackprop: dy must be rank 4 but got rank ` + `${$dy.rank}.`);
    _util.assert($input.rank === 4, ()=>`Error in maxPoolBackprop: input must be rank 4 but got rank ` + `${$input.rank}.`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in maxPoolBackprop: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const convInfo = _convUtil.computePool2DInfo($input.shape, filterSize, strides, dilations, pad, dimRoundingMode);
    const res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.maxPoolBackprop($dy, $input, $output, convInfo), {
        $dy,
        $input
    });
    return res;
}
/**
 * Computes the backprop of an 2D avg pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The input image, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */ function avgPoolBackprop(dy, input, filterSize, strides, dilations, pad) {
    const $dy = (0, _tensorUtilEnv.convertToTensor)(dy, "dy", "avgPoolBackprop");
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "avgPoolBackprop");
    _util.assert($input.rank === $dy.rank, ()=>`Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);
    if (dilations == null) dilations = [
        1,
        1
    ];
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in avgPoolBackprop: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    let input4D = $input;
    let dy4D = $dy;
    let reshapedTo4D = false;
    if ($input.rank === 3) {
        reshapedTo4D = true;
        input4D = $input.as4D(1, $input.shape[0], $input.shape[1], $input.shape[2]);
        dy4D = $dy.as4D(1, $dy.shape[0], $dy.shape[1], $dy.shape[2]);
    }
    _util.assert(dy4D.rank === 4, ()=>`Error in avgPoolBackprop: dy must be rank 4 but got rank ` + `${dy4D.rank}.`);
    _util.assert(input4D.rank === 4, ()=>`Error in avgPoolBackprop: input must be rank 4 but got rank ` + `${input4D.rank}.`);
    const convInfo = _convUtil.computePool2DInfo(input4D.shape, filterSize, strides, dilations, pad);
    const res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.avgPoolBackprop(dy4D, input4D, convInfo), {
        dy4D,
        input4D
    });
    if (reshapedTo4D) return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    return res;
}
// Helper function to compute crops and paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184
function requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {
    const padStart = basePadding.map((b)=>b[0]);
    const origPadEnd = basePadding.map((b)=>b[1]);
    const fullInputShape = inputShape.concat(padStart, origPadEnd);
    const padEndExtra = blockShape.map((b, i)=>(b - fullInputShape[i] % b) % b);
    const padEnd = origPadEnd.map((s, i)=>s + padEndExtra[i]);
    const paddings = blockShape.map((_, i)=>[
            padStart[i],
            padEnd[i]
        ]);
    const crops = blockShape.map((_, i)=>[
            0,
            padEndExtra[i]
        ]);
    return [
        paddings,
        crops
    ];
}
// Helper function to compute base paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524
function withSpaceToBatchBasePaddings(filterShape, dilation) {
    // Spatial dimensions of the filters and the upsampled filters in which we
    // introduce (rate - 1) zeros between consecutive filter values.
    const dilatedFilterShape = filterShape.map((s, i)=>{
        return s + (s - 1) * (dilation[i] - 1);
    });
    const padExtraShape = dilatedFilterShape.map((s)=>s - 1);
    // When padding is odd, we pad more at end, following the same
    // convention as conv2d.
    const padExtraStart = padExtraShape.map((s)=>Math.floor(s / 2));
    const padExtraEnd = padExtraShape.map((s, i)=>s - padExtraStart[i]);
    return padExtraShape.map((_, i)=>{
        return [
            padExtraStart[i],
            padExtraEnd[i]
        ];
    });
}
/**
 * Computes the 3D average pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.avgPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations The dilation rates:
 *     `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = "NDHWC", dilations) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "avgPool3d", "float32");
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = $x.as5D(1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]);
    }
    if (dilations == null) dilations = [
        1,
        1,
        1
    ];
    _util.assert(x5D.rank === 5, ()=>`Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
    _util.assert(dataFormat === "NDHWC", ()=>`Error in avgPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in avgPool3d: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in avgPool3d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const convInfo = _convUtil.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
    const grad = (dy)=>{
        return {
            x: ()=>avgPool3dBackprop(dy, x5D, filterSize, strides, dilations, pad, dimRoundingMode)
        };
    };
    let res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.avgPool3d(x5D, convInfo), {
        x: x5D
    }, grad);
    res = res.cast(x5D.dtype);
    if (reshapedTo5D) return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]);
    return res;
}
/**
 * Computes the backprop of a 3d avg pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates:
 *     `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */ function avgPool3dBackprop(dy, input, filterSize, strides, dilations, pad, dimRoundingMode) {
    const $dy = (0, _tensorUtilEnv.convertToTensor)(dy, "dy", "avgPool3dBackprop");
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "avgPool3dBackprop");
    let dy5D = $dy;
    let input5D = $input;
    let reshapedTo5D = false;
    if ($input.rank === 4) {
        reshapedTo5D = true;
        dy5D = $dy.as5D(1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]);
        input5D = $input.as5D(1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]);
    }
    _util.assert(dy5D.rank === 5, ()=>`Error in avgPool3dBackprop: dy must be rank 5 but got rank ` + `${dy5D.rank}.`);
    _util.assert(input5D.rank === 5, ()=>`Error in avgPool3dBackprop: input must be rank 5 but got rank ` + `${input5D.rank}.`);
    if (dilations == null) dilations = [
        1,
        1,
        1
    ];
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in avgPool3dBackprop: Either strides or dilations " + `must be 1. Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in maxPool3dBackprop: pad must be an integer when ` + `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const convInfo = _convUtil.computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
    const res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.avgPool3dBackprop(dy5D, input5D, convInfo), {
        dy5D,
        input5D
    });
    if (reshapedTo5D) return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]);
    return res;
}
/**
 * Computes the 3D max pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.maxPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode The rounding mode used when computing output
 *     dimensions if pad is a number. If none is provided, it will not round
 *     and error if the output is of fractional size.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations The dilation rates:
 *     `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function maxPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = "NDHWC", dilations) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "maxPool3d");
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = $x.as5D(1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]);
    }
    if (dilations == null) dilations = [
        1,
        1,
        1
    ];
    _util.assert(x5D.rank === 5, ()=>`Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
    _util.assert(dataFormat === "NDHWC", ()=>`Error in maxPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in maxPool3d: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in maxPool3d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const convInfo = _convUtil.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
    const grad = (dy, saved)=>{
        const [x5D, y] = saved;
        return {
            x: ()=>maxPool3dBackprop(dy, x5D, y, filterSize, strides, dilations, pad, dimRoundingMode)
        };
    };
    const res = (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.maxPool3d(x5D, convInfo);
        save([
            x5D,
            y
        ]);
        return y;
    }, {
        x: x5D
    }, grad);
    if (reshapedTo5D) return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]);
    return res;
}
/**
 * Computes the backprop of a 3d max pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank 4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param output The original output image, of rank 5 of shape
 *     [batchSize, outDepth, outHeight, outWidth, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates:
 *     `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
 *     rounding mode used when computing output dimensions if pad is a
 *     number. If none is provided, it will not round and error if the output
 *     is of fractional size.
 */ function maxPool3dBackprop(dy, input, output, filterSize, strides, dilations, pad, dimRoundingMode) {
    const $dy = (0, _tensorUtilEnv.convertToTensor)(dy, "dy", "maxPool3dBackprop");
    const $input = (0, _tensorUtilEnv.convertToTensor)(input, "input", "maxPool3dBackprop");
    const $output = (0, _tensorUtilEnv.convertToTensor)(output, "output", "maxPool3dBackprop");
    let dy5D = $dy;
    let input5D = $input;
    let output5D = $output;
    let reshapedTo5D = false;
    if ($input.rank === 4) {
        reshapedTo5D = true;
        dy5D = $dy.as5D(1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]);
        input5D = $input.as5D(1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]);
        output5D = $output.as5D(1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]);
    }
    _util.assert(dy5D.rank === 5, ()=>`Error in maxPool3dBackprop: dy must be rank 5 but got rank ` + `${dy5D.rank}.`);
    _util.assert(input5D.rank === 5, ()=>`Error in maxPool3dBackprop: input must be rank 5 but got rank ` + `${input5D.rank}.`);
    _util.assert(output5D.rank === 5, ()=>`Error in maxPool3dBackprop: output must be rank 5 but got rank ` + `${output5D.rank}.`);
    if (dilations == null) dilations = [
        1,
        1,
        1
    ];
    _util.assert(_convUtil.eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in maxPool3dBackprop: Either strides or dilations " + `must be 1. Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) _util.assert(_util.isInt(pad), ()=>`Error in maxPool3dBackprop: pad must be an integer when ` + `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    const convInfo = _convUtil.computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
    const res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.maxPool3dBackprop(dy5D, input5D, output5D, convInfo), {
        dy5D,
        input5D
    });
    if (reshapedTo5D) return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]);
    return res;
}
/**
 * Computes the 2D max pooling of an image with Argmax index.
 * The indices in argmax are flattened, so that a maximum value at position `[b,
 * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if
 * include_batch_in_index is False; `((b * height + y) * width + x) * channels
 * +c` if include_batch_in_index is True.
 *
 * The indices returned are always in `[0, height) x [0, width)` before
 * flattening.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param includeBatchIndex Defaults to False. Whether to include batch
 *    dimension in flattened index of argmax.
 */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ /** @doc {heading: 'Operations', subheading: 'Convolution'} */ function maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "maxPoolWithArgmax");
    const attrs = {
        filterSize,
        strides,
        pad,
        includeBatchInIndex
    };
    const result = (0, _engine.ENGINE).runKernel("MaxPoolWithArgmax", {
        x: $x
    }, attrs);
    return {
        result: result[0],
        indexes: result[1]
    };
}
const maxPool = (0, _operation.op)({
    maxPool_
});
const avgPool = (0, _operation.op)({
    avgPool_
});
const pool = (0, _operation.op)({
    pool_
});
const maxPool3d = (0, _operation.op)({
    maxPool3d_
});
const avgPool3d = (0, _operation.op)({
    avgPool3d_
});
const maxPoolWithArgmax = (0, _operation.op)({
    maxPoolWithArgmax_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","../util":"9v6Fb","./batch_to_space_nd":"fvVrh","./conv_util":"oHP2H","./operation":"l6IGY","./space_to_batch_nd":"h2QsM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCHhT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalStrict", ()=>equalStrict);
parcelHelpers.export(exports, "greaterEqualStrict", ()=>greaterEqualStrict);
parcelHelpers.export(exports, "greaterStrict", ()=>greaterStrict);
parcelHelpers.export(exports, "lessEqualStrict", ()=>lessEqualStrict);
parcelHelpers.export(exports, "lessStrict", ()=>lessStrict);
parcelHelpers.export(exports, "notEqualStrict", ()=>notEqualStrict);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _globals = require("../globals");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _operation = require("./operation");
/**
 * @deprecated
 * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same
 * shape.
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same shape and dtype as
 *     `a`.
 */ function notEqualStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "notEqualStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "notEqualStrict");
    (0, _util.assertShapesMatch)($a.shape, $b.shape, "Error in notEqualStrict: ");
    return $a.notEqual($b);
}
/**
 * @deprecated
 * Strict version of `tf.less` that forces `a` and `b` to be of the same
 * shape.
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same shape and dtype as
 *     `a`.
 */ function lessStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "lessStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "lessStrict");
    (0, _util.assertShapesMatch)($a.shape, $b.shape, "Error in lessStrict: ");
    return $a.less($b);
}
function equalStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "equalStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "equalStrict");
    (0, _util.assertShapesMatch)($a.shape, $b.shape, "Error in equalStrict: ");
    return $a.equal($b);
}
function lessEqualStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "lessEqualStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "lessEqualStrict");
    (0, _util.assertShapesMatch)($a.shape, $b.shape, "Error in lessEqualStrict: ");
    return $a.lessEqual($b);
}
function greaterStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "greaterStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "greaterStrict");
    (0, _util.assertShapesMatch)($a.shape, $b.shape, "Error in greaterStrict: ");
    return $a.greater($b);
}
function greaterEqualStrict_(a, b) {
    (0, _globals.deprecationWarn)("strict variants of ops have been deprecated and will be removed in future");
    const $a = (0, _tensorUtilEnv.convertToTensor)(a, "a", "greaterEqualStrict");
    const $b = (0, _tensorUtilEnv.convertToTensor)(b, "b", "greaterEqualStrict");
    (0, _util.assertShapesMatch)($a.shape, $b.shape, "Error in greaterEqualStrict: ");
    return $a.greaterEqual($b);
}
const equalStrict = (0, _operation.op)({
    equalStrict_
});
const greaterEqualStrict = (0, _operation.op)({
    greaterEqualStrict_
});
const greaterStrict = (0, _operation.op)({
    greaterStrict_
});
const lessEqualStrict = (0, _operation.op)({
    lessEqualStrict_
});
const lessStrict = (0, _operation.op)({
    lessStrict_
});
const notEqualStrict = (0, _operation.op)({
    notEqualStrict_
});

},{"../globals":"gfrr7","../tensor_util_env":"fsyzK","../util":"9v6Fb","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lB9jN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "softmax", ()=>softmax);
parcelHelpers.export(exports, "logSoftmax", ()=>logSoftmax);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _gradients = require("../gradients");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the softmax normalized vector given the logits.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */ function softmax_(logits, dim = -1) {
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "softmax", "float32");
    if (dim === -1) dim = $logits.rank - 1;
    if (dim !== $logits.rank - 1) throw Error("Softmax along a non-last dimension is not yet supported. " + `Logits was rank ${$logits.rank} and dim was ${dim}`);
    const inputsToSave = [];
    const outputsToSave = [
        true
    ];
    return (0, _engine.ENGINE).runKernelFunc((backend, save)=>{
        const y = backend.softmax($logits, dim);
        save([
            y
        ]);
        return y;
    }, {
        logits: $logits
    }, (dy, saved)=>{
        const [y] = saved;
        const dyTimesY = dy.mul(y);
        const keepDims = true;
        return {
            logits: ()=>dyTimesY.sub(dyTimesY.sum([
                    dim
                ], keepDims).mul(y))
        };
    }, "Softmax", {
        dim
    }, inputsToSave, outputsToSave);
}
/**
 * Computes the log softmax.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param axis The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */ function logSoftmax_(logits, axis = -1) {
    const $logits = (0, _tensorUtilEnv.convertToTensor)(logits, "logits", "logSoftmax");
    if (axis === -1) axis = $logits.rank - 1;
    if (axis !== $logits.rank - 1) throw Error("Log Softmax along a non-last dimension is not yet supported. " + `Logits was rank ${$logits.rank} and axis was ${axis}`);
    const customOp = (0, _gradients.customGrad)((logits, save)=>{
        const keepDims = true;
        const xMax = logits.max(axis, true);
        const shifted = logits.sub(xMax);
        const value = shifted.toFloat().sub(shifted.exp().sum(axis, keepDims).log());
        save([
            value
        ]);
        const gradFunc = (dy, saved)=>{
            const [value] = saved;
            const softmax = value.exp();
            return dy.sub(dy.sum(axis, keepDims).mul(softmax));
        };
        return {
            value,
            gradFunc
        };
    });
    return customOp($logits);
}
const softmax = (0, _operation.op)({
    softmax_
});
const logSoftmax = (0, _operation.op)({
    logSoftmax_
});

},{"../engine":"1aEvR","../gradients":"4PSmY","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zpDt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "basicLSTMCell", ()=>basicLSTMCell);
parcelHelpers.export(exports, "multiRNNCell", ()=>multiRNNCell);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Computes the next states and outputs of a stack of LSTMCells.
 *
 * Each cell output is used as input to the next cell.
 *
 * Returns `[cellState, cellOutput]`.
 *
 * Derived from tf.contrib.rn.MultiRNNCell.
 *
 * @param lstmCells Array of LSTMCell functions.
 * @param data The input to the cell.
 * @param c Array of previous cell states.
 * @param h Array of previous cell outputs.
 */ /** @doc {heading: 'Operations', subheading: 'RNN'} */ function multiRNNCell_(lstmCells, data, c, h) {
    const $data = (0, _tensorUtilEnv.convertToTensor)(data, "data", "multiRNNCell");
    const $c = (0, _tensorUtilEnv.convertToTensorArray)(c, "c", "multiRNNCell");
    const $h = (0, _tensorUtilEnv.convertToTensorArray)(h, "h", "multiRNNCell");
    let input = $data;
    const newStates = [];
    for(let i = 0; i < lstmCells.length; i++){
        const output = lstmCells[i](input, $c[i], $h[i]);
        newStates.push(output[0]);
        newStates.push(output[1]);
        input = output[1];
    }
    const newC = [];
    const newH = [];
    for(let i1 = 0; i1 < newStates.length; i1 += 2){
        newC.push(newStates[i1]);
        newH.push(newStates[i1 + 1]);
    }
    return [
        newC,
        newH
    ];
}
/**
 * Computes the next state and output of a BasicLSTMCell.
 *
 * Returns `[newC, newH]`.
 *
 * Derived from tf.contrib.rnn.BasicLSTMCell.
 *
 * @param forgetBias Forget bias for the cell.
 * @param lstmKernel The weights for the cell.
 * @param lstmBias The bias for the cell.
 * @param data The input to the cell.
 * @param c Previous cell state.
 * @param h Previous cell output.
 */ /** @doc {heading: 'Operations', subheading: 'RNN'} */ function basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {
    const $forgetBias = (0, _tensorUtilEnv.convertToTensor)(forgetBias, "forgetBias", "basicLSTMCell");
    const $lstmKernel = (0, _tensorUtilEnv.convertToTensor)(lstmKernel, "lstmKernel", "basicLSTMCell");
    const $lstmBias = (0, _tensorUtilEnv.convertToTensor)(lstmBias, "lstmBias", "basicLSTMCell");
    const $data = (0, _tensorUtilEnv.convertToTensor)(data, "data", "basicLSTMCell");
    const $c = (0, _tensorUtilEnv.convertToTensor)(c, "c", "basicLSTMCell");
    const $h = (0, _tensorUtilEnv.convertToTensor)(h, "h", "basicLSTMCell");
    const combined = $data.concat($h, 1);
    const weighted = combined.matMul($lstmKernel);
    const res = weighted.add($lstmBias);
    // i = input_gate, j = new_input, f = forget_gate, o = output_gate
    const batchSize = res.shape[0];
    const sliceCols = res.shape[1] / 4;
    const sliceSize = [
        batchSize,
        sliceCols
    ];
    const i = res.slice([
        0,
        0
    ], sliceSize);
    const j = res.slice([
        0,
        sliceCols
    ], sliceSize);
    const f = res.slice([
        0,
        sliceCols * 2
    ], sliceSize);
    const o = res.slice([
        0,
        sliceCols * 3
    ], sliceSize);
    const newC = i.sigmoid().mul(j.tanh()).add($c.mul($forgetBias.add(f).sigmoid()));
    const newH = newC.tanh().mul(o.sigmoid());
    return [
        newC,
        newH
    ];
}
const basicLSTMCell = (0, _operation.op)({
    basicLSTMCell_
});
const multiRNNCell = (0, _operation.op)({
    multiRNNCell_
});

},{"../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5NSiX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "movingAverage", ()=>movingAverage);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtil = require("../tensor_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _binaryOps = require("./binary_ops");
var _operation = require("./operation");
var _tensorOps = require("./tensor_ops");
/**
 * Compute the moving average of a variable.
 *
 * Without zeroDebias, the moving average operation is defined by:
 *   `v += delta`
 * where
 *   `delta = (1 - decay) * (x - v)`
 *
 * With zeroDebias (default), the `delta` term is scaled to debias the
 * effect of the (assumed) zero-initialization of `v`.
 *   `delta /= (1 - decay ^ step)`
 *
 * For more details on the zero-debiasing algorithm, see:
 *   https://arxiv.org/abs/1412.6980
 *
 * Note that this function is completely stateless and does not keep track of
 * step count. The step count needs to be maintained by the caller and passed
 * in as `step`.
 *
 * @param v The current moving average value.
 * @param x New input value, must have the same shape and dtype as `v`.
 * @param decay The decay factor. Typical values are 0.95 and 0.99.
 * @param step Step count.
 * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).
 * @returns The new moving average value.
 */ /** @doc {heading: 'Operations', subheading: 'Moving Average'} */ function movingAverage_(v, x, decay, step, zeroDebias = true) {
    const $v = (0, _tensorUtilEnv.convertToTensor)(v, "v", "movingAverage");
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "movingAverage");
    const $decay = (0, _tensorUtilEnv.convertToTensor)(decay, "decay", "movingAverage");
    (0, _tensorUtil.assertTypesMatch)($v, $x);
    _util.assert(_util.arraysEqual($v.shape, $x.shape), ()=>"Shape mismatch in v and x");
    const one = (0, _tensorOps.scalar)(1);
    const oneMinusDecay = one.sub($decay);
    let update = $x.sub($v).mul(oneMinusDecay);
    if (zeroDebias) {
        _util.assert(step != null, ()=>"When using zeroDebias: true, step is required.");
        const $step = (0, _tensorUtilEnv.convertToTensor)(step, "step", "movingAverage");
        update = update.div(one.sub((0, _binaryOps.pow)($decay, $step)));
    }
    return $v.add(update);
}
const movingAverage = (0, _operation.op)({
    movingAverage_
});

},{"../tensor_util":"kUGKD","../tensor_util_env":"fsyzK","../util":"9v6Fb","./binary_ops":"3wHWX","./operation":"l6IGY","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ngVB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stridedSlice", ()=>stridedSlice);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
var _slice = require("./slice");
var _sliceUtil = require("./slice_util");
/**
 * Extracts a strided slice of a tensor.
 *
 * Roughly speaking, this op extracts a slice of size (end-begin)/stride from
 * the given input tensor (x). Starting at the location specified by begin the
 * slice continues by adding stride to the index until all dimensions are not
 * less than end. Note that a stride can be negative, which causes a reverse
 * slice.
 *
 * ```js
 * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],
 *    [3, 2, 3]);
 * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]
 * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],
 *                                                     // [4, 4, 4]]]
 * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],
 *                                                     // [3, 3, 3]]]
 * ```
 *
 * @param x The tensor to stride slice.
 * @param begin The coordinates to start the slice from.
 * @param end: The coordinates to end the slice at.
 * @param strides: The size of the slice.
 * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param endMask: If the ith bit of endMask is set, end[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param shrinkAxisMask: a bitmask where bit i implies that
 * the ith specification should shrink the dimensionality. begin and end must
 * imply a slice of size 1 in the dimension.
 */ /** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */ function stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {
    if (strides == null) strides = new Array(begin.length);
    if (ellipsisMask !== 0) throw new Error("ellipsis mask is not yet supported");
    let $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "stridedSlice");
    // Expand the dims of x based on the newAxisMask.
    const expandAxes = (0, _sliceUtil.maskToAxes)(newAxisMask);
    const newShape = $x.shape.slice();
    expandAxes.forEach((axis)=>{
        begin[axis] = 0;
        end[axis] = 1;
        newShape.splice(axis, 0, 1);
    });
    $x = $x.reshape(newShape);
    // Normalize the start, end and strides.
    for(let axis = 0; axis < $x.rank; axis++){
        begin[axis] = (0, _sliceUtil.startForAxis)(beginMask, begin, strides, $x.shape, axis);
        end[axis] = (0, _sliceUtil.stopForAxis)(endMask, end, strides, $x.shape, axis);
        strides[axis] = strides[axis] || 1;
    }
    const shrinkAxes = (0, _sliceUtil.maskToAxes)(shrinkAxisMask);
    // Adjust the ends based on the shrink mask.
    shrinkAxes.forEach((axis)=>{
        end[axis] = begin[axis] + 1;
        strides[axis] = 1;
    });
    // Figure out the output shape.
    const size = (0, _sliceUtil.computeOutShape)(begin, end, strides);
    // Remove the axes based on shrinkMask.
    const outShape = size.filter((_, axis)=>shrinkAxes.indexOf(axis) === -1);
    const nonStrided = strides.every((v)=>v === 1);
    if (nonStrided) return (0, _slice.slice)($x, begin, size).reshape(outShape);
    const res = (0, _engine.ENGINE).runKernelFunc((backend)=>backend.stridedSlice($x, begin, end, strides), {
        $x
    });
    return res.reshape(outShape);
}
const stridedSlice = (0, _operation.op)({
    stridedSlice_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","./operation":"l6IGY","./slice":"ist4s","./slice_util":"3jgPu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lELoV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "topk", ()=>topk);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Finds the values and indices of the `k` largest entries along the last
 * dimension.
 *
 * If the input is a vector (rank=1), finds the k largest entries in the vector
 * and outputs their values and indices as vectors. Thus values[j] is the j-th
 * largest entry in input, and its index is indices[j].
 * For higher rank inputs, computes the top k entries along the last dimension.
 *
 * If two elements are equal, the lower-index element appears first.
 *
 * ```js
 * const a = tf.tensor2d([[1, 5], [4, 3]]);
 * const {values, indices} = tf.topk(a);
 * values.print();
 * indices.print();
 * ```
 * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.
 * @param k Number of top elements to look for along the last dimension.
 * @param sorted If true, the resulting `k` elements will be sorted by the
 *     values in descending order.
 */ /** @doc {heading: 'Operations', subheading: 'Evaluation'} */ function topk_(x, k = 1, sorted = true) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "topk");
    if ($x.rank === 0) throw new Error("topk() expects the input to be of rank 1 or higher");
    const lastDim = $x.shape[$x.shape.length - 1];
    if (k > lastDim) throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` + `but got ${k}`);
    const [values, indices] = (0, _engine.ENGINE).runKernelFunc((b)=>b.topk($x, k, sorted), {
        $x
    });
    return {
        values,
        indices
    };
}
const topk = (0, _operation.op)({
    topk_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bfFmC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scatterND", ()=>scatterND);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
var _scatterNdUtil = require("./scatter_nd_util");
/**
 * Creates a new tensor by applying sparse updates to individual
 * values or slices within a zero tensor of the given shape tensor according to
 * indices. This operator is the inverse of the `tf.gatherND` operator which
 * extracts values or slices from a given tensor.
 *
 * ```js
 * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');
 * const updates = tf.tensor1d([9, 10, 11, 12]);
 * const shape = [8];
 * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]
 * ```
 *
 * @param indices The tensor contains the indices into the output tensor.
 * @param updates The tensor contains the value for the indices.
 * @param shape: The shape of the output tensor.
 */ /** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */ function scatterND_(indices, updates, shape) {
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "scatterND", "int32");
    const $updates = (0, _tensorUtilEnv.convertToTensor)(updates, "updates", "scatterND");
    _scatterNdUtil.validateInput($updates, $indices, shape);
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.scatterND($indices, $updates, shape), {
        indices: $indices,
        updates: $updates
    }, null, "ScatterNd", {
        shape
    });
}
const scatterND = (0, _operation.op)({
    scatterND_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","./operation":"l6IGY","./scatter_nd_util":"h9rnV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bPJFe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseToDense", ()=>sparseToDense);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _sparseToDenseUtil = require("../ops/sparse_to_dense_util");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Converts a sparse representation into a dense tensor.
 *
 * Builds an array dense with shape outputShape such that:
 *
 * // If sparseIndices is scalar
 * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)
 *
 * // If sparseIndices is a vector, then for each i
 * dense[sparseIndices[i]] = sparseValues[i]
 *
 * // If sparseIndices is an n by d matrix, then for each i in [0, n)
 * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]
 * All other values in dense are set to defaultValue. If sparseValues is a
 * scalar, all sparse indices are set to this single value.
 *
 * If indices are repeated the final value is summed over all values for those
 * indices.
 *
 * ```js
 * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');
 * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');
 * const shape = [8];
 * tf.sparseToDense(indices, values, shape).print();
 * ```
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape Shape of the dense output tensor. the type is inferred.
 * @param defaultValue Scalar. Value to set for indices not specified in
 * sparseIndices. Defaults to zero.
 */ /** @doc {heading: 'Operations', subheading: 'Normalization'} */ function sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {
    const $sparseIndices = (0, _tensorUtilEnv.convertToTensor)(sparseIndices, "sparseIndices", "sparseToDense", "int32");
    const $sparseValues = (0, _tensorUtilEnv.convertToTensor)(sparseValues, "sparseValues", "sparseToDense");
    const $defaultValue = (0, _tensorUtilEnv.convertToTensor)(defaultValue, "defaultValue", "sparseToDense", $sparseValues.dtype);
    _sparseToDenseUtil.validateInput($sparseIndices, $sparseValues, outputShape, $defaultValue);
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.sparseToDense($sparseIndices, $sparseValues, outputShape, $defaultValue), {
        $sparseIndices,
        $sparseValues,
        $defaultValue
    });
}
const sparseToDense = (0, _operation.op)({
    sparseToDense_
});

},{"../engine":"1aEvR","../ops/sparse_to_dense_util":"bANPZ","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bANPZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Validate sparseToDense inputs.
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape number[]. Shape of the dense output tensor.
 * @param validateIndices boolean. indice validation is not supported, error
 * will be thrown if it is set.
 */ parcelHelpers.export(exports, "validateInput", ()=>validateInput);
function validateInput(sparseIndices, sparseValues, outputShape, defaultValues) {
    if (sparseIndices.dtype !== "int32") throw new Error("tf.sparseToDense() expects the indices to be int32 type," + ` but the dtype was ${sparseIndices.dtype}.`);
    if (sparseIndices.rank > 2) throw new Error("sparseIndices should be a scalar, vector, or matrix," + ` but got shape ${sparseIndices.shape}.`);
    const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;
    const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;
    if (outputShape.length !== numDims) throw new Error("outputShape has incorrect number of elements:," + ` ${outputShape.length}, should be: ${numDims}.`);
    const numValues = sparseValues.size;
    if (!(sparseValues.rank === 0 || sparseValues.rank === 1 && numValues === numElems)) throw new Error("sparseValues has incorrect shape " + `${sparseValues.shape}, should be [] or [${numElems}]`);
    if (sparseValues.dtype !== defaultValues.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8605G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gatherND", ()=>gatherND);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _tensorUtilEnv = require("../tensor_util_env");
var _operation = require("./operation");
/**
 * Gather slices from input tensor into a Tensor with shape specified by
 * `indices`.
 *
 * `indices` is an K-dimensional integer tensor, best thought of as a
 * (K-1)-dimensional tensor of indices into input, where each element defines a
 * slice of input:
 * output[\\(i_0, ..., i_{K-2}\\)] = input[indices[\\(i_0, ..., i_{K-2}\\)]]
 *
 * Whereas in `tf.gather`, `indices` defines slices into the first dimension of
 * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions
 * of input, where N = indices.shape[-1].
 *
 * The last dimension of indices can be at most the rank of input:
 * indices.shape[-1] <= input.rank
 *
 * The last dimension of `indices` corresponds to elements
 * (if indices.shape[-1] == input.rank) or slices
 * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of
 * input.
 * The output tensor has shape
 * indices.shape[:-1] + input.shape[indices.shape[-1]:]
 *
 * Note that on CPU, if an out of bound index is found, an error is returned. On
 * GPU, if an out of bound index is found, a 0 is stored in the corresponding
 * output value.
 *
 * ```js
 * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');
 * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);
 * tf.gatherND(input, indices).print() // [10, 11]
 * ```
 *
 * @param x The tensor from which to gather values.
 * @param indices Index tensor, must be of type int32.
 */ /** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */ function gatherND_(x, indices) {
    const $indices = (0, _tensorUtilEnv.convertToTensor)(indices, "indices", "gatherND", "int32");
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "gatherND");
    return (0, _engine.ENGINE).runKernelFunc((backend)=>backend.gatherND($x, $indices), {
        x: $x,
        indices: $indices
    }, null, "GatherNd");
}
const gatherND = (0, _operation.op)({
    gatherND_
});

},{"../engine":"1aEvR","../tensor_util_env":"fsyzK","./operation":"l6IGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jRq6V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dropout", ()=>dropout);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensor = require("../tensor");
var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _dropoutUtil = require("./dropout_util");
var _operation = require("./operation");
var _randomUniform = require("./random_uniform");
/**
 * Computes dropout.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 2, 1]);
 * const rate = 0.75;
 * const output = tf.dropout(x, rate);
 * output.print();
 * ```
 *
 * @param x A floating point Tensor or TensorLike.
 * @param rate A float in the range [0, 1). The probability that each element
 *   of x is discarded.
 * @param noiseShape An array of numbers of type int32, representing the
 * shape for randomly generated keep/drop flags. If the noiseShape has null
 * value, it will be automatically replaced with the x's relative dimension
 * size. Optional.
 * @param seed Used to create random seeds. Optional.
 * @returns A Tensor of the same shape of x.
 */ /** @doc {heading: 'Operations', subheading: 'Dropout'} */ function dropout_(x, rate, noiseShape, seed) {
    const $x = (0, _tensorUtilEnv.convertToTensor)(x, "x", "dropout");
    _util.assert($x.dtype === "float32", ()=>`x has to be a floating point tensor since it's going to be ` + `scaled, but got a ${$x.dtype} tensor instead.`);
    _util.assert(rate >= 0 && rate < 1, ()=>`rate must be a float in the range [0, 1), but got ${rate}.`);
    if (rate === 0) return x instanceof (0, _tensor.Tensor) ? $x.clone() : $x;
    const $noiseShape = (0, _dropoutUtil.getNoiseShape)($x, noiseShape);
    const keepProb = 1 - rate;
    const multiplier = (0, _randomUniform.randomUniform)($noiseShape, 0, 1, "float32", seed).add(keepProb).floor().div(keepProb);
    return $x.mul(multiplier);
}
const dropout = (0, _operation.op)({
    dropout_
});

},{"../tensor":"DPGBx","../tensor_util_env":"fsyzK","../util":"9v6Fb","./dropout_util":"4f0M1","./operation":"l6IGY","./random_uniform":"24OwU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4f0M1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Normalize noise shape based on provided tensor and noise shape.
 *
 * @param x Tensor.
 * @param noiseShape The shape for the randomly generated keep/drop flags, as
 *   an array of numbers. Optional.
 * @returns Normalized noise shape.
 */ parcelHelpers.export(exports, "getNoiseShape", ()=>getNoiseShape);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _util = require("../util");
function getNoiseShape(x, noiseShape) {
    if (noiseShape == null) return x.shape.slice();
    if (_util.arraysEqual(x.shape, noiseShape)) return noiseShape;
    if (x.shape.length === noiseShape.length) {
        const newDimension = [];
        for(let i = 0; i < x.shape.length; i++)if (noiseShape[i] == null && x.shape[i] != null) newDimension.push(x.shape[i]);
        else newDimension.push(noiseShape[i]);
        return newDimension;
    }
    return noiseShape;
}

},{"../util":"9v6Fb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jQQbM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inTopKAsync", ()=>inTopKAsync);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tensorUtilEnv = require("../tensor_util_env");
var _util = require("../util");
var _tensorOps = require("./tensor_ops");
/**
 * Returns whether the targets are in the top K predictions.
 *
 * ```js
 * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);
 * const targets = tf.tensor1d([2, 0]);
 * const precision = await tf.inTopKAsync(predictions, targets);
 * precision.print();
 * ```
 * @param predictions 2-D or higher `tf.Tensor` with last dimension being
 *     at least `k`.
 * @param targets 1-D or higher `tf.Tensor`.
 * @param k Optional Number of top elements to look at for computing precision,
 *     default to 1.
 */ /** @doc {heading: 'Operations', subheading: 'Evaluation'} */ async function inTopKAsync_(predictions, targets, k = 1) {
    const $predictions = (0, _tensorUtilEnv.convertToTensor)(predictions, "predictions", "inTopK");
    const $targets = (0, _tensorUtilEnv.convertToTensor)(targets, "targets", "inTopK");
    (0, _util.assert)($predictions.rank > 1, ()=>"inTopK() expects the predictions to be of rank 2 or higher, " + `but got ${$predictions.rank}`);
    (0, _util.assert)($predictions.rank - 1 === $targets.rank, ()=>`predictions rank should be 1 larger than ` + `targets rank, but got predictions rank ` + `${$predictions.rank} and targets rank ${$targets.rank}`);
    (0, _util.assertShapesMatch)($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, ` + "except the last dimension.");
    const lastDim = $predictions.shape[$predictions.shape.length - 1];
    (0, _util.assert)(k > 0 && k <= lastDim, ()=>`'k' passed to inTopK() must be > 0 && <= the predictions last ` + `dimension (${lastDim}), but got ${k}`);
    const predictionsVals = await $predictions.data();
    const targetsVals = await $targets.data();
    // Reshape predictionsVals into a 2d tensor [batch, lastDim]
    // and look up topK along lastDim.
    const [batch, size] = [
        predictionsVals.length / lastDim,
        lastDim
    ];
    const precision = (0, _util.getTypedArrayFromDType)("bool", batch);
    for(let b = 0; b < batch; b++){
        const offset = b * size;
        const vals = predictionsVals.subarray(offset, offset + size);
        const valAndInd = [];
        for(let i = 0; i < vals.length; i++)valAndInd.push({
            value: vals[i],
            index: i
        });
        valAndInd.sort((a, b)=>b.value - a.value);
        precision[b] = 0;
        for(let i1 = 0; i1 < k; i1++)if (valAndInd[i1].index === targetsVals[b]) {
            precision[b] = 1;
            break;
        }
    }
    if (predictions !== $predictions) $predictions.dispose();
    if (targets !== $targets) $targets.dispose();
    // Output precision has the same shape as targets.
    return (0, _tensorOps.tensor)(precision, $targets.shape, "bool");
}
const inTopKAsync = inTopKAsync_;

},{"../tensor_util_env":"fsyzK","../util":"9v6Fb","./tensor_ops":"1qbPi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6DEHx":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _add = require("./add");
var _batchnorm = require("./batchnorm");
var _broadcastTo = require("./broadcast_to");
var _batchToSpaceNd = require("./batch_to_space_nd");
var _max = require("./max");
var _concat = require("./concat");
var _conv1D = require("./conv1d");
var _conv2D = require("./conv2d");
var _conv2DTranspose = require("./conv2d_transpose");
var _depthToSpace = require("./depth_to_space");
var _depthwiseConv2D = require("./depthwise_conv2d");
var _depthwiseConv2DDeprecated = require("./depthwise_conv2D_deprecated");
var _div = require("./div");
var _divNoNan = require("./div_no_nan");
var _dot = require("./dot");
var _equal = require("./equal");
var _greater = require("./greater");
var _greaterEqual = require("./greater_equal");
var _less = require("./less");
var _lessEqual = require("./less_equal");
var _localResponseNormalization = require("./local_response_normalization");
var _matMul = require("./mat_mul");
var _oneHot = require("./one_hot");
var _notEqual = require("./not_equal");
var _pad = require("./pad");
var _separableConv2D = require("./separable_conv2d");
var _split = require("./split");
var _squaredDifference = require("./squared_difference");
var _spaceToBatchNd = require("./space_to_batch_nd");
var _sub = require("./sub");
var _tile = require("./tile");
var _transpose = require("./transpose");

},{"./add":"hoWtl","./batchnorm":"2TULk","./broadcast_to":"bQhEY","./batch_to_space_nd":"ezIn2","./max":"44dPI","./concat":"elnde","./conv1d":"ba4FW","./conv2d":"1DScu","./conv2d_transpose":"3cygV","./depth_to_space":"woIN4","./depthwise_conv2d":"64DZ2","./depthwise_conv2D_deprecated":"7bS9M","./div":"2hvCw","./div_no_nan":"lD3NX","./dot":"5CtkH","./equal":"01cXF","./greater":"bDC6T","./greater_equal":"1gih8","./less":"dC4XC","./less_equal":"boVUu","./local_response_normalization":"cJZuv","./mat_mul":"7x3Nk","./one_hot":"iykMk","./not_equal":"48Ejc","./pad":"bAsiP","./separable_conv2d":"hd11X","./split":"eGSBx","./squared_difference":"fu9rq","./space_to_batch_nd":"HFQw6","./sub":"6om7F","./tile":"kvBRN","./transpose":"jD70y"}],"hoWtl":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _add = require("../../ops/add");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.add = function(b) {
    this.throwIfDisposed();
    return (0, _add.add)(this, b);
};

},{"../../ops/add":"i4ulI","../../tensor":"DPGBx"}],"2TULk":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _batchnorm = require("../../ops/batchnorm");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.batchNorm = function(mean, variance, offset, scale, varianceEpsilon) {
    this.throwIfDisposed();
    return (0, _batchnorm.batchNorm)(this, mean, variance, offset, scale, varianceEpsilon);
};

},{"../../ops/batchnorm":"8hFsz","../../tensor":"DPGBx"}],"bQhEY":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _broadcastTo = require("../../ops/broadcast_to");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.broadcastTo = function(shape) {
    this.throwIfDisposed();
    return (0, _broadcastTo.broadcastTo)(this, shape);
};

},{"../../ops/broadcast_to":"33myr","../../tensor":"DPGBx"}],"ezIn2":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _batchToSpaceNd = require("../../ops/batch_to_space_nd");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.batchToSpaceND = function(blockShape, crops) {
    this.throwIfDisposed();
    return (0, _batchToSpaceNd.batchToSpaceND)(this, blockShape, crops);
};

},{"../../ops/batch_to_space_nd":"fvVrh","../../tensor":"DPGBx"}],"44dPI":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _max = require("../../ops/max");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.max = function(axis, keepDims) {
    this.throwIfDisposed();
    return (0, _max.max)(this, axis, keepDims);
};

},{"../../ops/max":"13F1p","../../tensor":"DPGBx"}],"elnde":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _concat = require("../../ops/concat");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.concat = function(x, axis) {
    this.throwIfDisposed();
    if (x instanceof (0, _tensor.Tensor)) x = [
        x
    ];
    return (0, _concat.concat)([
        this,
        ...x
    ], axis);
};

},{"../../ops/concat":"jfkcZ","../../tensor":"DPGBx"}],"ba4FW":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _conv1D = require("../../ops/conv1d");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.conv1d = function(filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
    this.throwIfDisposed();
    return (0, _conv1D.conv1d)(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);
};

},{"../../ops/conv1d":"9JA7s","../../tensor":"DPGBx"}],"1DScu":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _conv2D = require("../../ops/conv2d");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.conv2d = function(filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
    this.throwIfDisposed();
    return (0, _conv2D.conv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};

},{"../../ops/conv2d":"94uN6","../../tensor":"DPGBx"}],"3cygV":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _conv2DTranspose = require("../../ops/conv2d_transpose");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.conv2dTranspose = function(filter, outputShape, strides, pad, dimRoundingMode) {
    this.throwIfDisposed();
    return (0, _conv2DTranspose.conv2dTranspose)(this, filter, outputShape, strides, pad, dimRoundingMode);
};

},{"../../ops/conv2d_transpose":"lxl1Y","../../tensor":"DPGBx"}],"woIN4":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _depthToSpace = require("../../ops/depth_to_space");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.depthToSpace = function(blockSize, dataFormat) {
    this.throwIfDisposed();
    return (0, _depthToSpace.depthToSpace)(this, blockSize, dataFormat);
};

},{"../../ops/depth_to_space":"6XiCc","../../tensor":"DPGBx"}],"64DZ2":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _depthwiseConv2D = require("../../ops/depthwise_conv2d");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.depthwiseConv2d = function(filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
    this.throwIfDisposed();
    return (0, _depthwiseConv2D.depthwiseConv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};

},{"../../ops/depthwise_conv2d":"kqwkG","../../tensor":"DPGBx"}],"7bS9M":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _globals = require("../../globals");
var _depthwiseConv2D = require("../../ops/depthwise_conv2d");
var _tensor = require("../../tensor");
/**
 * @deprecated Use `depthwiseConv2d` instead.
 */ (0, _tensor.Tensor).prototype.depthwiseConv2D = function(filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
    (0, _globals.deprecationWarn)("depthwiseConv2D is deprecated, use depthwiseConv2d instead");
    this.throwIfDisposed();
    return (0, _depthwiseConv2D.depthwiseConv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};

},{"../../globals":"gfrr7","../../ops/depthwise_conv2d":"kqwkG","../../tensor":"DPGBx"}],"2hvCw":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _div = require("../../ops/div");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.div = function(b) {
    this.throwIfDisposed();
    return (0, _div.div)(this, b);
};

},{"../../ops/div":"3bNgZ","../../tensor":"DPGBx"}],"lD3NX":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _divNoNan = require("../../ops/div_no_nan");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.divNoNan = function(b) {
    this.throwIfDisposed();
    return (0, _divNoNan.divNoNan)(this, b);
};

},{"../../ops/div_no_nan":"8t5q0","../../tensor":"DPGBx"}],"5CtkH":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _dot = require("../../ops/dot");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.dot = function(b) {
    this.throwIfDisposed();
    return (0, _dot.dot)(this, b);
};

},{"../../ops/dot":"7yhj3","../../tensor":"DPGBx"}],"01cXF":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _equal = require("../../ops/equal");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.equal = function(b) {
    this.throwIfDisposed();
    return (0, _equal.equal)(this, b);
};

},{"../../ops/equal":"dg46U","../../tensor":"DPGBx"}],"bDC6T":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _greater = require("../../ops/greater");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.greater = function(b) {
    this.throwIfDisposed();
    return (0, _greater.greater)(this, b);
};

},{"../../ops/greater":"cdsGN","../../tensor":"DPGBx"}],"1gih8":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _greaterEqual = require("../../ops/greater_equal");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.greaterEqual = function(b) {
    this.throwIfDisposed();
    return (0, _greaterEqual.greaterEqual)(this, b);
};

},{"../../ops/greater_equal":"3ztC3","../../tensor":"DPGBx"}],"dC4XC":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _less = require("../../ops/less");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.less = function(b) {
    this.throwIfDisposed();
    return (0, _less.less)(this, b);
};

},{"../../ops/less":"1Jx3h","../../tensor":"DPGBx"}],"boVUu":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _lessEqual = require("../../ops/less_equal");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.lessEqual = function(b) {
    this.throwIfDisposed();
    return (0, _lessEqual.lessEqual)(this, b);
};

},{"../../ops/less_equal":"6NYBp","../../tensor":"DPGBx"}],"cJZuv":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _localResponseNormalization = require("../../ops/local_response_normalization");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.localResponseNormalization = function(depthRadius, bias, alpha, beta) {
    this.throwIfDisposed();
    return (0, _localResponseNormalization.localResponseNormalization)(this, depthRadius, bias, alpha, beta);
};

},{"../../ops/local_response_normalization":"8x0DH","../../tensor":"DPGBx"}],"7x3Nk":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _matMul = require("../../ops/mat_mul");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.matMul = function(b, transposeA, transposeB) {
    this.throwIfDisposed();
    return (0, _matMul.matMul)(this, b, transposeA, transposeB);
};

},{"../../ops/mat_mul":"SZp9a","../../tensor":"DPGBx"}],"iykMk":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _oneHot = require("../../ops/one_hot");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.oneHot = function(depth, onValue = 1, offValue = 0) {
    this.throwIfDisposed();
    return (0, _oneHot.oneHot)(this, depth, onValue, offValue);
};

},{"../../ops/one_hot":"5171s","../../tensor":"DPGBx"}],"48Ejc":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _notEqual = require("../../ops/not_equal");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.notEqual = function(b) {
    this.throwIfDisposed();
    return (0, _notEqual.notEqual)(this, b);
};

},{"../../ops/not_equal":"cu4OV","../../tensor":"DPGBx"}],"bAsiP":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _pad = require("../../ops/pad");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.pad = function(paddings, constantValue) {
    this.throwIfDisposed();
    return (0, _pad.pad)(this, paddings, constantValue);
};

},{"../../ops/pad":"6hj7a","../../tensor":"DPGBx"}],"hd11X":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _separableConv2D = require("../../ops/separable_conv2d");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.separableConv2d = function(depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {
    this.throwIfDisposed();
    return (0, _separableConv2D.separableConv2d)(this, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat);
};

},{"../../ops/separable_conv2d":"6NvRc","../../tensor":"DPGBx"}],"eGSBx":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _split = require("../../ops/split");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.split = function(numOrSizeSplits, axis) {
    this.throwIfDisposed();
    return (0, _split.split)(this, numOrSizeSplits, axis);
};

},{"../../ops/split":"kOQiE","../../tensor":"DPGBx"}],"fu9rq":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _squaredDifference = require("../../ops/squared_difference");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.squaredDifference = function(b) {
    this.throwIfDisposed();
    return (0, _squaredDifference.squaredDifference)(this, b);
};

},{"../../ops/squared_difference":"8fw9V","../../tensor":"DPGBx"}],"HFQw6":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _spaceToBatchNd = require("../../ops/space_to_batch_nd");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.spaceToBatchND = function(blockShape, paddings) {
    this.throwIfDisposed();
    return (0, _spaceToBatchNd.spaceToBatchND)(this, blockShape, paddings);
};

},{"../../ops/space_to_batch_nd":"h2QsM","../../tensor":"DPGBx"}],"6om7F":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _sub = require("../../ops/sub");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.sub = function(b) {
    this.throwIfDisposed();
    return (0, _sub.sub)(this, b);
};

},{"../../ops/sub":"mafuF","../../tensor":"DPGBx"}],"kvBRN":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tile = require("../../ops/tile");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.tile = function(reps) {
    this.throwIfDisposed();
    return (0, _tile.tile)(this, reps);
};

},{"../../ops/tile":"kFneb","../../tensor":"DPGBx"}],"jD70y":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _transpose = require("../../ops/transpose");
var _tensor = require("../../tensor");
(0, _tensor.Tensor).prototype.transpose = function(perm) {
    this.throwIfDisposed();
    return (0, _transpose.transpose)(this, perm);
};

},{"../../ops/transpose":"5Lger","../../tensor":"DPGBx"}],"7LYeo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "AdadeltaOptimizer", ()=>AdadeltaOptimizer);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _ops = require("../ops/ops");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class AdadeltaOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, rho, epsilon = null){
        super();
        this.learningRate = learningRate;
        this.rho = rho;
        this.epsilon = epsilon;
        this.accumulatedGrads = [];
        this.accumulatedUpdates = [];
        if (epsilon == null) this.epsilon = (0, _engine.ENGINE).backend.epsilon();
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        variableNames.forEach((name, i)=>{
            const value = (0, _engine.ENGINE).registeredVariables[name];
            const trainable = false;
            if (this.accumulatedGrads[i] == null) this.accumulatedGrads[i] = {
                originalName: `${name}/accum_grad`,
                variable: (0, _globals.tidy)(()=>(0, _ops.zerosLike)(value).variable(trainable))
            };
            if (this.accumulatedUpdates[i] == null) this.accumulatedUpdates[i] = {
                originalName: `${name}/accum_var`,
                variable: (0, _globals.tidy)(()=>(0, _ops.zerosLike)(value).variable(trainable))
            };
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            const accumulatedGrad = this.accumulatedGrads[i].variable;
            const accumulatedUpdate = this.accumulatedUpdates[i].variable;
            (0, _globals.tidy)(()=>{
                const newAccumulatedGrad = accumulatedGrad.mul(this.rho).add(gradient.square().mul(1 - this.rho));
                const updates = accumulatedUpdate.add(this.epsilon).sqrt().div(accumulatedGrad.add(this.epsilon).sqrt()).mul(gradient);
                const newAccumulatedUpdate = accumulatedUpdate.mul(this.rho).add(updates.square().mul(1 - this.rho));
                accumulatedGrad.assign(newAccumulatedGrad);
                accumulatedUpdate.assign(newAccumulatedUpdate);
                const newValue = updates.mul(-this.learningRate).add(value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedUpdates != null) {
            (0, _globals.dispose)(this.accumulatedGrads.map((v)=>v.variable));
            (0, _globals.dispose)(this.accumulatedUpdates.map((v)=>v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [
            ...this.accumulatedGrads,
            ...this.accumulatedUpdates
        ];
        return [
            await this.saveIterations()
        ].concat(variables.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const variableCount = weightValues.length / 2;
        const trainable = false;
        this.accumulatedGrads = weightValues.slice(0, variableCount).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedUpdates = weightValues.slice(variableCount, variableCount * 2).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "rho": this.rho,
            "epsilon": this.epsilon
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["rho"], config["epsilon"]);
    }
}
/** @nocollapse */ AdadeltaOptimizer.className = "Adadelta"; // Name matters for Python compatibility.
(0, _serialization.registerClass)(AdadeltaOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/ops":"iDElj","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jFpqK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */ parcelHelpers.export(exports, "Optimizer", ()=>Optimizer);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _globals = require("../globals");
var _gradients = require("../gradients");
var _ops = require("../ops/ops");
var _serialization = require("../serialization");
class Optimizer extends (0, _serialization.Serializable) {
    /**
     * Executes `f()` and minimizes the scalar output of `f()` by computing
     * gradients of y with respect to the list of trainable variables provided by
     * `varList`. If no list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to minimize.
     * @param returnCost Whether to return the scalar cost value produced by
     * executing `f()`.
     * @param varList An optional list of variables to update. If specified, only
     * the trainable variables in varList will be updated by minimize. Defaults to
     * all trainable variables.
     */ /** @doc {heading: 'Training', subheading: 'Optimizers'} */ minimize(f, returnCost = false, varList) {
        const { value , grads  } = this.computeGradients(f, varList);
        if (varList != null) {
            const gradArray = varList.map((v)=>({
                    name: v.name,
                    tensor: grads[v.name]
                }));
            this.applyGradients(gradArray);
        } else this.applyGradients(grads);
        // Dispose gradients.
        (0, _globals.dispose)(grads);
        if (returnCost) return value;
        else {
            value.dispose();
            return null;
        }
    }
    /**
     * The number of iterations that this optimizer instance has been invoked for.
     */ get iterations() {
        if (this.iterations_ == null) this.iterations_ = 0;
        return this.iterations_;
    }
    incrementIterations() {
        this.iterations_ = this.iterations + 1;
    }
    /**
     * Executes f() and computes the gradient of the scalar output of f() with
     * respect to the list of trainable variables provided by `varList`. If no
     * list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to use for computing
     * gradients with respect to variables.
     * @param varList An optional list of variables to compute gradients with
     * respect to. If specified, only the trainable variables in varList will have
     * gradients computed with respect to. Defaults to all trainable variables.
     */ computeGradients(f, varList) {
        return (0, _gradients.variableGrads)(f, varList);
    }
    /**
     * Dispose the variables (if any) owned by this optimizer instance.
     */ dispose() {
        if (this.iterations_ != null) (0, _globals.dispose)(this.iterations_);
    }
    async saveIterations() {
        if (this.iterations_ == null) this.iterations_ = 0;
        return {
            name: "iter",
            // TODO(cais): Use 'int64' type when available.
            tensor: (0, _ops.scalar)(this.iterations_, "int32")
        };
    }
    async getWeights() {
        throw new Error("getWeights() is not implemented for this optimizer yet.");
    }
    async setWeights(weightValues) {
        throw new Error(`setWeights() is not implemented for this optimizer class ` + `${this.getClassName()}`);
    }
    /**
     * Extract the first element of the weight values and set it
     * as the iterations counter variable of this instance of optimizer.
     *
     * @param weightValues
     * @returns Weight values with the first element consumed and excluded.
     */ async extractIterations(weightValues) {
        this.iterations_ = (await weightValues[0].tensor.data())[0];
        return weightValues.slice(1);
    }
}
Object.defineProperty(Optimizer, Symbol.hasInstance, {
    value: (instance)=>{
        return instance.minimize != null && instance.computeGradients != null && instance.applyGradients != null;
    }
});

},{"../globals":"gfrr7","../gradients":"4PSmY","../ops/ops":"iDElj","../serialization":"wKqJz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1K352":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "AdagradOptimizer", ()=>AdagradOptimizer);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _ops = require("../ops/ops");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class AdagradOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, initialAccumulatorValue = 0.1){
        super();
        this.learningRate = learningRate;
        this.initialAccumulatorValue = initialAccumulatorValue;
        this.accumulatedGrads = [];
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        variableNames.forEach((name, i)=>{
            const value = (0, _engine.ENGINE).registeredVariables[name];
            if (this.accumulatedGrads[i] == null) {
                const trainable = false;
                this.accumulatedGrads[i] = {
                    originalName: `${name}/accumulator`,
                    variable: (0, _globals.tidy)(()=>(0, _ops.fill)(value.shape, this.initialAccumulatorValue).variable(trainable))
                };
            }
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            const accumulatedGrad = this.accumulatedGrads[i].variable;
            (0, _globals.tidy)(()=>{
                const newAccumulatedGrad = accumulatedGrad.add(gradient.square());
                accumulatedGrad.assign(newAccumulatedGrad);
                const newValue = gradient.div(newAccumulatedGrad.add((0, _engine.ENGINE).backend.epsilon()).sqrt()).mul(-this.learningRate).add(value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedGrads != null) (0, _globals.dispose)(this.accumulatedGrads.map((v)=>v.variable));
    }
    async getWeights() {
        // Order matters for Python compatibility.
        return [
            await this.saveIterations()
        ].concat(this.accumulatedGrads.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const trainable = false;
        this.accumulatedGrads = weightValues.map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "initialAccumulatorValue": this.initialAccumulatorValue
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["initialAccumulatorValue"]);
    }
}
/** @nocollapse */ AdagradOptimizer.className = "Adagrad"; // Note: Name matters for Python compatibility.
(0, _serialization.registerClass)(AdagradOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/ops":"iDElj","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lKjPX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AdamOptimizer", ()=>AdamOptimizer);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _ops = require("../ops/ops");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class AdamOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, beta1, beta2, epsilon = null){
        super();
        this.learningRate = learningRate;
        this.beta1 = beta1;
        this.beta2 = beta2;
        this.epsilon = epsilon;
        this.accumulatedFirstMoment = [];
        this.accumulatedSecondMoment = [];
        (0, _globals.tidy)(()=>{
            // accB* will be updated by batch.
            this.accBeta1 = (0, _ops.scalar)(beta1).variable();
            this.accBeta2 = (0, _ops.scalar)(beta2).variable();
        });
        if (epsilon == null) this.epsilon = (0, _engine.ENGINE).backend.epsilon();
    }
    applyGradients(variableGradients) {
        const varNames = Array.isArray(variableGradients) ? variableGradients.map((v)=>v.name) : Object.keys(variableGradients);
        (0, _globals.tidy)(()=>{
            const oneMinusAccBeta1 = (0, _ops.sub)(1, this.accBeta1);
            const oneMinusAccBeta2 = (0, _ops.sub)(1, this.accBeta2);
            varNames.forEach((name, i)=>{
                const value = (0, _engine.ENGINE).registeredVariables[name];
                const trainable = false;
                if (this.accumulatedFirstMoment[i] == null) this.accumulatedFirstMoment[i] = {
                    originalName: `${name}/m`,
                    variable: (0, _globals.tidy)(()=>(0, _ops.zerosLike)(value).variable(trainable))
                };
                if (this.accumulatedSecondMoment[i] == null) this.accumulatedSecondMoment[i] = {
                    originalName: `${name}/v`,
                    variable: (0, _globals.tidy)(()=>(0, _ops.zerosLike)(value).variable(trainable))
                };
                const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
                if (gradient == null) return;
                const firstMoment = this.accumulatedFirstMoment[i].variable;
                const secondMoment = this.accumulatedSecondMoment[i].variable;
                const newFirstMoment = firstMoment.mul(this.beta1).add(gradient.mul(1 - this.beta1));
                const newSecondMoment = secondMoment.mul(this.beta2).add(gradient.square().mul(1 - this.beta2));
                const biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);
                const biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);
                firstMoment.assign(newFirstMoment);
                secondMoment.assign(newSecondMoment);
                const newValue = biasCorrectedFirstMoment.div(biasCorrectedSecondMoment.sqrt().add(this.epsilon)).mul(-this.learningRate).add(value);
                value.assign(newValue);
            });
            this.accBeta1.assign(this.accBeta1.mul(this.beta1));
            this.accBeta2.assign(this.accBeta2.mul(this.beta2));
        });
        this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose();
        this.accBeta2.dispose();
        if (this.accumulatedFirstMoment != null) (0, _globals.dispose)(this.accumulatedFirstMoment.map((v)=>v.variable));
        if (this.accumulatedSecondMoment != null) (0, _globals.dispose)(this.accumulatedSecondMoment.map((v)=>v.variable));
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [
            ...this.accumulatedFirstMoment,
            ...this.accumulatedSecondMoment
        ];
        return [
            await this.saveIterations()
        ].concat(variables.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        (0, _globals.tidy)(()=>{
            this.accBeta1.assign((0, _ops.pow)(this.beta1, this.iterations_ + 1));
            this.accBeta2.assign((0, _ops.pow)(this.beta2, this.iterations_ + 1));
        });
        const variableCount = weightValues.length / 2;
        const trainable = false;
        this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "beta1": this.beta1,
            "beta2": this.beta2,
            "epsilon": this.epsilon
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["beta1"], config["beta2"], config["epsilon"]);
    }
}
/** @nocollapse */ AdamOptimizer.className = "Adam"; // Note: Name matters for Python compatibility.
(0, _serialization.registerClass)(AdamOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/ops":"iDElj","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d9QP5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AdamaxOptimizer", ()=>AdamaxOptimizer);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _ops = require("../ops/ops");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class AdamaxOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0){
        super();
        this.learningRate = learningRate;
        this.beta1 = beta1;
        this.beta2 = beta2;
        this.epsilon = epsilon;
        this.decay = decay;
        this.accumulatedFirstMoment = [];
        this.accumulatedWeightedInfNorm = [];
        (0, _globals.tidy)(()=>{
            this.iteration = (0, _ops.scalar)(0).variable();
            this.accBeta1 = (0, _ops.scalar)(beta1).variable();
        });
        if (epsilon == null) this.epsilon = (0, _engine.ENGINE).backend.epsilon();
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        (0, _globals.tidy)(()=>{
            const oneMinusAccBeta1 = (0, _ops.sub)(1, this.accBeta1);
            const lr = (0, _ops.div)(-this.learningRate, this.iteration.mul(this.decay).add(1));
            variableNames.forEach((name, i)=>{
                const value = (0, _engine.ENGINE).registeredVariables[name];
                const trainable = false;
                if (this.accumulatedFirstMoment[i] == null) this.accumulatedFirstMoment[i] = {
                    originalName: `${name}/m`,
                    variable: (0, _ops.zerosLike)(value).variable(trainable)
                };
                if (this.accumulatedWeightedInfNorm[i] == null) this.accumulatedWeightedInfNorm[i] = {
                    originalName: `${name}/v`,
                    variable: (0, _ops.zerosLike)(value).variable(trainable)
                };
                const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
                if (gradient == null) return;
                const firstMoment = this.accumulatedFirstMoment[i].variable;
                const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;
                const newFirstMoment = firstMoment.mul(this.beta1).add(gradient.mul(1 - this.beta1));
                const ut0 = weightedInfNorm.mul(this.beta2);
                const ut1 = gradient.abs();
                const newWeightedInfNorm = ut0.maximum(ut1);
                firstMoment.assign(newFirstMoment);
                weightedInfNorm.assign(newWeightedInfNorm);
                const newValue = lr.div(oneMinusAccBeta1).mul(newFirstMoment.div(newWeightedInfNorm.add(this.epsilon))).add(value);
                value.assign(newValue);
            });
            this.iteration.assign(this.iteration.add(1));
            this.accBeta1.assign(this.accBeta1.mul(this.beta1));
        });
        this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose();
        this.iteration.dispose();
        if (this.accumulatedFirstMoment != null) (0, _globals.dispose)(this.accumulatedFirstMoment.map((v)=>v.variable));
        if (this.accumulatedWeightedInfNorm != null) (0, _globals.dispose)(this.accumulatedWeightedInfNorm.map((v)=>v.variable));
    }
    async getWeights() {
        throw new Error("getWeights() is not implemented for Adamax yet.");
    }
    async setWeights(weightValues) {
        throw new Error("setWeights() is not implemented for Adamax yet.");
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "beta1": this.beta1,
            "beta2": this.beta2,
            "epsilon": this.epsilon,
            "decay": this.decay
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["beta1"], config["beta2"], config["epsilon"], config["decay"]);
    }
}
/** @nocollapse */ AdamaxOptimizer.className = "Adamax"; // Note: Name matters for Python compatbility.
(0, _serialization.registerClass)(AdamaxOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/ops":"iDElj","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5ywAZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "MomentumOptimizer", ()=>MomentumOptimizer);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _ops = require("../ops/ops");
var _serialization = require("../serialization");
var _sgdOptimizer = require("./sgd_optimizer");
class MomentumOptimizer extends (0, _sgdOptimizer.SGDOptimizer) {
    constructor(learningRate, momentum, useNesterov = false){
        super(learningRate);
        this.learningRate = learningRate;
        this.momentum = momentum;
        this.useNesterov = useNesterov;
        this.accumulations = [];
        this.m = (0, _ops.scalar)(this.momentum);
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        variableNames.forEach((name, i)=>{
            const value = (0, _engine.ENGINE).registeredVariables[name];
            if (this.accumulations[i] == null) {
                const trainable = false;
                this.accumulations[i] = {
                    originalName: `${name}/momentum`,
                    variable: (0, _globals.tidy)(()=>(0, _ops.zerosLike)(value).variable(trainable))
                };
            }
            const accumulation = this.accumulations[i].variable;
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            (0, _globals.tidy)(()=>{
                let newValue;
                const newAccumulation = this.m.mul(accumulation).add(gradient);
                if (this.useNesterov) newValue = this.c.mul(gradient.add(newAccumulation.mul(this.m))).add(value);
                else newValue = this.c.mul(newAccumulation).add(value);
                accumulation.assign(newAccumulation);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        this.m.dispose();
        if (this.accumulations != null) (0, _globals.dispose)(this.accumulations.map((v)=>v.variable));
    }
    /**
     * Sets the momentum of the optimizer.
     *
     * @param momentum
     */ setMomentum(momentum) {
        this.momentum = momentum;
    }
    async getWeights() {
        // Order matters for Python compatibility.
        return [
            await this.saveIterations()
        ].concat(this.accumulations.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const trainable = false;
        this.accumulations = weightValues.map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "momentum": this.momentum,
            "useNesterov": this.useNesterov
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["momentum"], config["useNesterov"]);
    }
}
/** @nocollapse */ MomentumOptimizer.className = "Momentum"; // Name matters for Python compatibility.
(0, _serialization.registerClass)(MomentumOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/ops":"iDElj","../serialization":"wKqJz","./sgd_optimizer":"h9wSb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h9wSb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "SGDOptimizer", ()=>SGDOptimizer);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _ops = require("../ops/ops");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class SGDOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate){
        super();
        this.learningRate = learningRate;
        this.setLearningRate(learningRate);
    }
    applyGradients(variableGradients) {
        const varNames = Array.isArray(variableGradients) ? variableGradients.map((v)=>v.name) : Object.keys(variableGradients);
        varNames.forEach((name, i)=>{
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            const value = (0, _engine.ENGINE).registeredVariables[name];
            (0, _globals.tidy)(()=>{
                const newValue = this.c.mul(gradient).add(value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    /**
     * Sets the learning rate of the optimizer.
     */ setLearningRate(learningRate) {
        this.learningRate = learningRate;
        if (this.c != null) this.c.dispose();
        this.c = (0, _globals.keep)((0, _ops.scalar)(-learningRate));
    }
    dispose() {
        this.c.dispose();
    }
    async getWeights() {
        return [
            await this.saveIterations()
        ];
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        if (weightValues.length !== 0) throw new Error("SGD optimizer does not have settable weights.");
    }
    getConfig() {
        return {
            "learningRate": this.learningRate
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"]);
    }
}
/** @nocollapse */ SGDOptimizer.className = "SGD"; // Note: Name matters for Python compatibility.
(0, _serialization.registerClass)(SGDOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/ops":"iDElj","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"21qx8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @doclink Optimizer */ parcelHelpers.export(exports, "RMSPropOptimizer", ()=>RMSPropOptimizer);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _engine = require("../engine");
var _globals = require("../globals");
var _ops = require("../ops/ops");
var _serialization = require("../serialization");
var _optimizer = require("./optimizer");
class RMSPropOptimizer extends (0, _optimizer.Optimizer) {
    constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false){
        super();
        this.learningRate = learningRate;
        this.decay = decay;
        this.momentum = momentum;
        this.epsilon = epsilon;
        this.accumulatedMeanSquares = [];
        this.accumulatedMoments = [];
        this.accumulatedMeanGrads = [];
        this.centered = centered;
        if (epsilon == null) this.epsilon = (0, _engine.ENGINE).backend.epsilon();
        if (learningRate == null) throw new Error(`learningRate for RMSPropOptimizer must be defined.`);
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ? variableGradients.map((item)=>item.name) : Object.keys(variableGradients);
        variableNames.forEach((name, i)=>{
            const value = (0, _engine.ENGINE).registeredVariables[name];
            const trainable = false;
            if (this.accumulatedMeanSquares[i] == null) this.accumulatedMeanSquares[i] = {
                originalName: `${name}/rms`,
                variable: (0, _globals.tidy)(()=>(0, _ops.zerosLike)(value).variable(trainable))
            };
            if (this.accumulatedMoments[i] == null) this.accumulatedMoments[i] = {
                originalName: `${name}/momentum`,
                variable: (0, _globals.tidy)(()=>(0, _ops.zerosLike)(value).variable(trainable))
            };
            if (this.accumulatedMeanGrads[i] == null && this.centered) this.accumulatedMeanGrads[i] = {
                originalName: `${name}/mg`,
                variable: (0, _globals.tidy)(()=>(0, _ops.zerosLike)(value).variable(trainable))
            };
            const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];
            if (gradient == null) return;
            const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;
            const accumulatedMoments = this.accumulatedMoments[i].variable;
            (0, _globals.tidy)(()=>{
                const newAccumulatedMeanSquare = accumulatedMeanSquare.mul(this.decay).add(gradient.square().mul(1 - this.decay));
                if (this.centered) {
                    const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;
                    // Centered gradient
                    const newAccumulatedMeanGrad = accumulatedMeanGrad.mul(this.decay).add(gradient.mul(1 - this.decay));
                    const newAccumulatedMoments = accumulatedMoments.mul(this.momentum).add(gradient.mul(this.learningRate).div(newAccumulatedMeanSquare.sub(newAccumulatedMeanGrad.square().add(this.epsilon)).sqrt()));
                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
                    accumulatedMeanGrad.assign(newAccumulatedMeanGrad);
                    accumulatedMoments.assign(newAccumulatedMoments);
                    const newValue = value.sub(newAccumulatedMoments);
                    value.assign(newValue);
                } else {
                    // Plain gradient
                    const newAccumulatedMeanSquare1 = accumulatedMeanSquare.mul(this.decay).add(gradient.square().mul(1 - this.decay));
                    const newAccumulatedMoments1 = accumulatedMoments.mul(this.momentum).add(gradient.mul(this.learningRate).div(newAccumulatedMeanSquare1.add(this.epsilon).sqrt()));
                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare1);
                    accumulatedMoments.assign(newAccumulatedMoments1);
                    const newValue1 = value.sub(newAccumulatedMoments1);
                    value.assign(newValue1);
                }
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedMeanSquares != null) (0, _globals.dispose)(this.accumulatedMeanSquares.map((v)=>v.variable));
        if (this.accumulatedMeanGrads != null && this.centered) (0, _globals.dispose)(this.accumulatedMeanGrads.map((v)=>v.variable));
        if (this.accumulatedMoments != null) (0, _globals.dispose)(this.accumulatedMoments.map((v)=>v.variable));
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [
            ...this.accumulatedMeanSquares,
            ...this.accumulatedMoments
        ];
        if (this.centered) variables.push(...this.accumulatedMeanGrads);
        return [
            await this.saveIterations()
        ].concat(variables.map((v)=>({
                name: v.originalName,
                tensor: v.variable
            })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;
        const trainable = false;
        this.accumulatedMeanSquares = weightValues.slice(0, variableCount).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedMoments = weightValues.slice(variableCount, variableCount * 2).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        if (this.centered) this.accumulatedMeanGrads = weightValues.slice(variableCount * 2, variableCount * 3).map((v)=>({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            "learningRate": this.learningRate,
            "decay": this.decay,
            "momentum": this.momentum,
            "epsilon": this.epsilon,
            "centered": this.centered
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config["learningRate"], config["decay"], config["momentum"], config["epsilon"], config["centered"]);
    }
}
/** @nocollapse */ RMSPropOptimizer.className = "RMSProp"; // Note: Name matters for Python compatibility.
(0, _serialization.registerClass)(RMSPropOptimizer);

},{"../engine":"1aEvR","../globals":"gfrr7","../ops/ops":"iDElj","../serialization":"wKqJz","./optimizer":"jFpqK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hMjG0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "train", ()=>train);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // So typings can propagate.
var _adadeltaOptimizer = require("./optimizers/adadelta_optimizer");
var _adagradOptimizer = require("./optimizers/adagrad_optimizer");
var _adamOptimizer = require("./optimizers/adam_optimizer");
var _adamaxOptimizer = require("./optimizers/adamax_optimizer");
var _momentumOptimizer = require("./optimizers/momentum_optimizer");
var _optimizerConstructors = require("./optimizers/optimizer_constructors");
var _rmspropOptimizer = require("./optimizers/rmsprop_optimizer");
var _sgdOptimizer = require("./optimizers/sgd_optimizer");
const train = {
    sgd: (0, _optimizerConstructors.OptimizerConstructors).sgd,
    momentum: (0, _optimizerConstructors.OptimizerConstructors).momentum,
    adadelta: (0, _optimizerConstructors.OptimizerConstructors).adadelta,
    adagrad: (0, _optimizerConstructors.OptimizerConstructors).adagrad,
    rmsprop: (0, _optimizerConstructors.OptimizerConstructors).rmsprop,
    adamax: (0, _optimizerConstructors.OptimizerConstructors).adamax,
    adam: (0, _optimizerConstructors.OptimizerConstructors).adam
};

},{"./optimizers/adadelta_optimizer":"7LYeo","./optimizers/adagrad_optimizer":"1K352","./optimizers/adam_optimizer":"lKjPX","./optimizers/adamax_optimizer":"d9QP5","./optimizers/momentum_optimizer":"5ywAZ","./optimizers/optimizer_constructors":"2Pbck","./optimizers/rmsprop_optimizer":"21qx8","./optimizers/sgd_optimizer":"h9wSb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Pbck":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OptimizerConstructors", ()=>OptimizerConstructors);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _adadeltaOptimizer = require("./adadelta_optimizer");
var _adagradOptimizer = require("./adagrad_optimizer");
var _adamOptimizer = require("./adam_optimizer");
var _adamaxOptimizer = require("./adamax_optimizer");
var _momentumOptimizer = require("./momentum_optimizer");
var _rmspropOptimizer = require("./rmsprop_optimizer");
var _sgdOptimizer = require("./sgd_optimizer");
class OptimizerConstructors {
    /**
     * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
     *
     * ```js
     * // Fit a quadratic function by learning the coefficients a, b, c.
     * const xs = tf.tensor1d([0, 1, 2, 3]);
     * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
     *
     * const a = tf.scalar(Math.random()).variable();
     * const b = tf.scalar(Math.random()).variable();
     * const c = tf.scalar(Math.random()).variable();
     *
     * // y = a * x^2 + b * x + c.
     * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
     * const loss = (pred, label) => pred.sub(label).square().mean();
     *
     * const learningRate = 0.01;
     * const optimizer = tf.train.sgd(learningRate);
     *
     * // Train the model.
     * for (let i = 0; i < 10; i++) {
     *   optimizer.minimize(() => loss(f(xs), ys));
     * }
     *
     * // Make predictions.
     * console.log(
     *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
     * const preds = f(xs).dataSync();
     * preds.forEach((pred, i) => {
     *   console.log(`x: ${i}, pred: ${pred}`);
     * });
     * ```
     *
     * @param learningRate The learning rate to use for the SGD algorithm.
     */ /**
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static sgd(learningRate) {
        return new (0, _sgdOptimizer.SGDOptimizer)(learningRate);
    }
    /**
     * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
     * descent.
     *
     * See
     * [http://proceedings.mlr.press/v28/sutskever13.pdf](
     * http://proceedings.mlr.press/v28/sutskever13.pdf)
     *
     * @param learningRate The learning rate to use for the Momentum gradient
     * descent algorithm.
     * @param momentum The momentum to use for the momentum gradient descent
     * algorithm.
     */ /**
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static momentum(learningRate, momentum, useNesterov = false) {
        return new (0, _momentumOptimizer.MomentumOptimizer)(learningRate, momentum, useNesterov);
    }
    /**
     * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
     * descent. This implementation uses plain momentum and is not centered
     * version of RMSProp.
     *
     * See
     * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
     * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
     *
     * @param learningRate The learning rate to use for the RMSProp gradient
     * descent algorithm.
     * @param decay The discounting factor for the history/coming gradient.
     * @param momentum The momentum to use for the RMSProp gradient descent
     * algorithm.
     * @param epsilon Small value to avoid zero denominator.
     * @param centered If true, gradients are normalized by the estimated
     * variance of the gradient.
     */ /**
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static rmsprop(learningRate, decay = .9, momentum = 0.0, epsilon = null, centered = false) {
        return new (0, _rmspropOptimizer.RMSPropOptimizer)(learningRate, decay, momentum, epsilon, centered);
    }
    /**
     * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adam gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     */ /**
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static adam(learningRate = 0.001, beta1 = 0.9, beta2 = 0.999, epsilon = null) {
        return new (0, _adamOptimizer.AdamOptimizer)(learningRate, beta1, beta2, epsilon);
    }
    /**
     * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
     * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
     *
     * @param learningRate The learning rate to use for the Adadelta gradient
     * descent algorithm.
     * @param rho The learning rate decay over each update.
     * @param epsilon A constant epsilon used to better condition the grad
     * update.
     */ /**
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static adadelta(learningRate = .001, rho = .95, epsilon = null) {
        return new (0, _adadeltaOptimizer.AdadeltaOptimizer)(learningRate, rho, epsilon);
    }
    /**
     * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adamax gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     * @param decay The learning rate decay over each update.
     */ /**
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static adamax(learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon = null, decay = 0.0) {
        return new (0, _adamaxOptimizer.AdamaxOptimizer)(learningRate, beta1, beta2, epsilon, decay);
    }
    /**
     * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
     * See
     * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
     * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
     * or
     * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
     * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
     *
     * @param learningRate The learning rate to use for the Adagrad gradient
     * descent algorithm.
     * @param initialAccumulatorValue Starting value for the accumulators, must be
     * positive.
     */ /**
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */ static adagrad(learningRate, initialAccumulatorValue = 0.1) {
        return new (0, _adagradOptimizer.AdagradOptimizer)(learningRate, initialAccumulatorValue);
    }
}

},{"./adadelta_optimizer":"7LYeo","./adagrad_optimizer":"1K352","./adam_optimizer":"lKjPX","./adamax_optimizer":"d9QP5","./momentum_optimizer":"5ywAZ","./rmsprop_optimizer":"21qx8","./sgd_optimizer":"h9wSb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kHUPK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nextFrame", ()=>nextFrame);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const delayCallback = (()=>{
    if (typeof requestAnimationFrame !== "undefined") return requestAnimationFrame;
    else if (typeof setImmediate !== "undefined") return setImmediate;
    return (f)=>f(); // no delays
})();
/**
 * Returns a promise that resolve when a requestAnimationFrame has completed.
 *
 * On Node.js this uses setImmediate instead of requestAnimationFrame.
 *
 * This is simply a sugar method so that users can do the following:
 * `await tf.nextFrame();`
 */ /** @doc {heading: 'Performance', subheading: 'Timing'} */ function nextFrame() {
    return new Promise((resolve)=>delayCallback(()=>resolve()));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2CVFT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EPSILON_FLOAT32", ()=>EPSILON_FLOAT32);
parcelHelpers.export(exports, "EPSILON_FLOAT16", ()=>EPSILON_FLOAT16);
/** Convenient class for storing tensor-related data. */ parcelHelpers.export(exports, "DataStorage", ()=>DataStorage);
/**
 * The interface that defines the kernels that should be implemented when
 * adding a new backend. New backends don't need to implement every one of the
 * methods, this can be done gradually (throw an error for unimplemented
 * methods).
 */ parcelHelpers.export(exports, "KernelBackend", ()=>KernelBackend);
const EPSILON_FLOAT32 = 1e-7;
const EPSILON_FLOAT16 = 1e-4;
class DataStorage {
    constructor(backend, dataMover){
        this.backend = backend;
        this.dataMover = dataMover;
        this.data = new WeakMap();
        this.dataIdsCount = 0;
    }
    get(dataId) {
        if (!this.data.has(dataId)) this.dataMover.moveData(this.backend, dataId);
        return this.data.get(dataId);
    }
    set(dataId, value) {
        this.dataIdsCount++;
        this.data.set(dataId, value);
    }
    has(dataId) {
        return this.data.has(dataId);
    }
    delete(dataId) {
        this.dataIdsCount--;
        return this.data.delete(dataId);
    }
    numDataIds() {
        return this.dataIdsCount;
    }
}
class KernelBackend {
    time(f) {
        return notYetImplemented("time");
    }
    read(dataId) {
        return notYetImplemented("read");
    }
    readSync(dataId) {
        return notYetImplemented("readSync");
    }
    numDataIds() {
        return notYetImplemented("numDataIds");
    }
    disposeData(dataId) {
        return notYetImplemented("disposeData");
    }
    write(values, shape, dtype) {
        return notYetImplemented("write");
    }
    move(dataId, values, shape, dtype) {
        return notYetImplemented("move");
    }
    memory() {
        return notYetImplemented("memory");
    }
    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */ floatPrecision() {
        return notYetImplemented("floatPrecision");
    }
    /** Returns the smallest representable number.  */ epsilon() {
        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
    }
    batchMatMul(a, b, transposeA, transposeB) {
        return notYetImplemented("batchMatMul");
    }
    fusedBatchMatMul({ a , b , transposeA , transposeB , bias , activation , preluActivationWeights  }) {
        return notYetImplemented("fusedBatchMatMul");
    }
    slice(x, begin, size) {
        return notYetImplemented("slice");
    }
    stridedSlice(x, begin, end, strides) {
        return notYetImplemented("stridedSlice");
    }
    unstack(x, axis) {
        return notYetImplemented("unstack");
    }
    reverse(a, axis) {
        return notYetImplemented("reverse");
    }
    concat(tensors, axis) {
        return notYetImplemented("concat");
    }
    neg(a) {
        return notYetImplemented("neg");
    }
    add(a, b) {
        return notYetImplemented("add");
    }
    addN(tensors) {
        return notYetImplemented("addN");
    }
    subtract(a, b) {
        return notYetImplemented("subtract");
    }
    multiply(a, b) {
        return notYetImplemented("multiply");
    }
    realDivide(a, b) {
        return notYetImplemented("realDivide");
    }
    floorDiv(a, b) {
        return notYetImplemented("floorDiv");
    }
    sum(x, axes) {
        return notYetImplemented("sum");
    }
    prod(x, axes) {
        return notYetImplemented("prod");
    }
    unsortedSegmentSum(x, segmentIds, numSegments) {
        return notYetImplemented("unsortedSegmentSum");
    }
    argMin(x, axis) {
        return notYetImplemented("argMin");
    }
    argMax(x, axis) {
        return notYetImplemented("argMax");
    }
    equal(a, b) {
        return notYetImplemented("equal");
    }
    notEqual(a, b) {
        return notYetImplemented("notEqual");
    }
    less(a, b) {
        return notYetImplemented("less");
    }
    lessEqual(a, b) {
        return notYetImplemented("lessEqual");
    }
    greater(a, b) {
        return notYetImplemented("greater");
    }
    greaterEqual(a, b) {
        return notYetImplemented("greaterEqual");
    }
    logicalNot(a) {
        return notYetImplemented("logicalNot");
    }
    logicalAnd(a, b) {
        return notYetImplemented("logicalAnd");
    }
    logicalOr(a, b) {
        return notYetImplemented("logicalOr");
    }
    where(condition) {
        return notYetImplemented("where");
    }
    select(condition, a, b) {
        return notYetImplemented("select");
    }
    topk(x, k, sorted) {
        return notYetImplemented("topk");
    }
    min(x, axes) {
        return notYetImplemented("min");
    }
    minimum(a, b) {
        return notYetImplemented("minimum");
    }
    mod(a, b) {
        return notYetImplemented("mod");
    }
    max(x, axes) {
        return notYetImplemented("max");
    }
    maximum(a, b) {
        return notYetImplemented("maximum");
    }
    all(x, axes) {
        return notYetImplemented("all");
    }
    any(x, axes) {
        return notYetImplemented("any");
    }
    squaredDifference(a, b) {
        return notYetImplemented("squaredDifference");
    }
    ceil(x) {
        return notYetImplemented("ceil");
    }
    floor(x) {
        return notYetImplemented("floor");
    }
    round(x) {
        return notYetImplemented("round");
    }
    sign(x) {
        return notYetImplemented("sign");
    }
    isNaN(x) {
        return notYetImplemented("isNaN");
    }
    isInf(x) {
        return notYetImplemented("isInf");
    }
    isFinite(x) {
        return notYetImplemented("isFinite");
    }
    pow(a, b) {
        return notYetImplemented("pow");
    }
    exp(x) {
        return notYetImplemented("exp");
    }
    expm1(x) {
        return notYetImplemented("expm1");
    }
    softmax(x, dim) {
        return notYetImplemented("softmax");
    }
    log(x) {
        return notYetImplemented("log");
    }
    log1p(x) {
        return notYetImplemented("log1p");
    }
    sqrt(x) {
        return notYetImplemented("sqrt");
    }
    rsqrt(x) {
        return notYetImplemented("rsqrt");
    }
    square(x) {
        return notYetImplemented("square");
    }
    reciprocal(x) {
        return notYetImplemented("reciprocal");
    }
    relu(x) {
        return notYetImplemented("relu");
    }
    relu6(x) {
        return notYetImplemented("relu6");
    }
    prelu(x, a) {
        return notYetImplemented("prelu");
    }
    elu(x) {
        return notYetImplemented("elu");
    }
    eluDer(dy, y) {
        return notYetImplemented("eluDer");
    }
    selu(x) {
        return notYetImplemented("selu");
    }
    int(x) {
        return notYetImplemented("int");
    }
    clip(x, min, max) {
        return notYetImplemented("clip");
    }
    abs(x) {
        return notYetImplemented("abs");
    }
    complexAbs(x) {
        return notYetImplemented("complexAbs");
    }
    sigmoid(x) {
        return notYetImplemented("sigmoid");
    }
    softplus(x) {
        return notYetImplemented("softplus");
    }
    sin(x) {
        return notYetImplemented("sin");
    }
    cos(x) {
        return notYetImplemented("cos");
    }
    tan(x) {
        return notYetImplemented("tan");
    }
    asin(x) {
        return notYetImplemented("asin");
    }
    acos(x) {
        return notYetImplemented("acos");
    }
    atan(x) {
        return notYetImplemented("atan");
    }
    atan2(a, b) {
        return notYetImplemented("atan2");
    }
    sinh(x) {
        return notYetImplemented("sinh");
    }
    cosh(x) {
        return notYetImplemented("cosh");
    }
    tanh(x) {
        return notYetImplemented("tanh");
    }
    asinh(x) {
        return notYetImplemented("asinh");
    }
    acosh(x) {
        return notYetImplemented("acosh");
    }
    atanh(x) {
        return notYetImplemented("atanh");
    }
    erf(x) {
        return notYetImplemented("erf");
    }
    step(x, alpha) {
        return notYetImplemented("step");
    }
    fusedConv2d({ input , filter , convInfo , bias , activation , preluActivationWeights  }) {
        return notYetImplemented("fusedConv2d");
    }
    conv2d(x, filter, convInfo) {
        return notYetImplemented("conv2d");
    }
    conv2dDerInput(dy, filter, convInfo) {
        return notYetImplemented("conv2dDerInput");
    }
    conv2dDerFilter(x, dY, convInfo) {
        return notYetImplemented("conv2dDerFilter");
    }
    fusedDepthwiseConv2D({ input , filter , convInfo , bias , activation , preluActivationWeights  }) {
        return notYetImplemented("fusedDepthwiseConv2D");
    }
    depthwiseConv2D(input, filter, convInfo) {
        return notYetImplemented("depthwiseConv2D");
    }
    depthwiseConv2DDerInput(dy, filter, convInfo) {
        return notYetImplemented("depthwiseConv2DDerInput");
    }
    depthwiseConv2DDerFilter(x, dY, convInfo) {
        return notYetImplemented("depthwiseConv2DDerFilter");
    }
    conv3d(x, filter, convInfo) {
        return notYetImplemented("conv3d");
    }
    conv3dDerInput(dy, filter, convInfo) {
        return notYetImplemented("conv3dDerInput");
    }
    conv3dDerFilter(x, dY, convInfo) {
        return notYetImplemented("conv3dDerFilter");
    }
    maxPool(x, convInfo) {
        return notYetImplemented("maxPool");
    }
    maxPoolBackprop(dy, x, y, convInfo) {
        return notYetImplemented("maxPoolBackprop");
    }
    avgPool(x, convInfo) {
        return notYetImplemented("avgPool");
    }
    avgPoolBackprop(dy, x, convInfo) {
        return notYetImplemented("avgPoolBackprop");
    }
    avgPool3d(x, convInfo) {
        return notYetImplemented("avgPool3d");
    }
    avgPool3dBackprop(dy, x, convInfo) {
        return notYetImplemented("avgPool3dBackprop");
    }
    maxPool3d(x, convInfo) {
        return notYetImplemented("maxPool3d");
    }
    maxPool3dBackprop(dy, x, y, convInfo) {
        return notYetImplemented("maxPool3dBackprop");
    }
    reshape(x, shape) {
        return notYetImplemented("reshape");
    }
    cast(x, dtype) {
        return notYetImplemented("cast");
    }
    tile(x, reps) {
        return notYetImplemented("tile");
    }
    pad(x, paddings, constantValue) {
        return notYetImplemented("pad");
    }
    transpose(x, perm) {
        return notYetImplemented("transpose");
    }
    gather(x, indices, axis) {
        return notYetImplemented("gather");
    }
    gatherND(x, indices) {
        return notYetImplemented("gatherND");
    }
    scatterND(indices, updates, shape) {
        return notYetImplemented("scatterND");
    }
    batchToSpaceND(x, blockShape, crops) {
        return notYetImplemented("batchToSpaceND");
    }
    spaceToBatchND(x, blockShape, paddings) {
        return notYetImplemented("spaceToBatchND");
    }
    resizeBilinear(x, newHeight, newWidth, alignCorners) {
        return notYetImplemented("resizeBilinear");
    }
    resizeBilinearBackprop(dy, x, alignCorners) {
        return notYetImplemented("resizeBilinearBackprop");
    }
    resizeNearestNeighbor(x, newHEight, newWidth, alignCorners) {
        return notYetImplemented("resizeNearestNeighbor");
    }
    resizeNearestNeighborBackprop(dy, x, alignCorners) {
        return notYetImplemented("resizeNearestNeighborBackprop");
    }
    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {
        return notYetImplemented("batchNorm");
    }
    localResponseNormalization4D(x, radius, bias, alpha, beta) {
        return notYetImplemented("localResponseNormalization4D");
    }
    LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {
        return notYetImplemented("LRNGrad");
    }
    multinomial(logits, normalized, numSamples, seed) {
        return notYetImplemented("multinomial");
    }
    oneHot(indices, depth, onValue, offValue) {
        return notYetImplemented("oneHot");
    }
    cumsum(x, axis, exclusive, reverse) {
        return notYetImplemented("cumsum");
    }
    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
        return notYetImplemented("nonMaxSuppression");
    }
    fft(x) {
        return notYetImplemented("fft");
    }
    ifft(x) {
        return notYetImplemented("ifft");
    }
    complex(real, imag) {
        return notYetImplemented("complex");
    }
    real(input) {
        return notYetImplemented("real");
    }
    imag(input) {
        return notYetImplemented("imag");
    }
    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {
        return notYetImplemented("cropAndResize");
    }
    depthToSpace(x, blockSize, dataFormat) {
        return notYetImplemented("depthToSpace");
    }
    // Aligns with the "SplitV" kernel in TensorFlow.
    split(value, sizeSplits, axis) {
        return notYetImplemented("split");
    }
    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {
        return notYetImplemented("sparseToDense");
    }
    diag(x) {
        return notYetImplemented("diag");
    }
    fill(shape, value, dtype) {
        return notYetImplemented("fill");
    }
    onesLike(x) {
        return notYetImplemented("onesLike");
    }
    zerosLike(x) {
        return notYetImplemented("zerosLike");
    }
    linspace(start, stop, num) {
        return notYetImplemented("linspace");
    }
    dispose() {
        return notYetImplemented("dispose");
    }
}
function notYetImplemented(kernelName) {
    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` + `Did you forget to import the kernel?`);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bQ73n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Here we implement a simple asynchronous iterator.
// This lets us avoid using either third-party stream libraries or
// recent TypeScript language support requiring polyfills.
/**
 * Create a `LazyIterator` from an array of items.
 */ parcelHelpers.export(exports, "iteratorFromItems", ()=>iteratorFromItems);
/**
 * Create a `LazyIterator` of incrementing integers.
 */ parcelHelpers.export(exports, "iteratorFromIncrementing", ()=>iteratorFromIncrementing);
/**
 * Create a `LazyIterator` from a function.
 *
 * ```js
 * let i = -1;
 * const func = () =>
 *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};
 * const iter = tf.data.iteratorFromFunction(func);
 * await iter.forEachAsync(e => console.log(e));
 * ```
 *
 * @param func A function that produces data on each call.
 */ parcelHelpers.export(exports, "iteratorFromFunction", ()=>iteratorFromFunction);
/**
 * Create a `LazyIterator` by concatenating underlying streams, which are
 * themselves provided as a stream.
 *
 * This can also be thought of as a "stream flatten" operation.
 *
 * @param baseIterators A stream of streams to be concatenated.
 * @param baseErrorHandler An optional function that can intercept `Error`s
 *   raised during a `next()` call on the base stream.  This function can decide
 *   whether the error should be propagated, whether the error should be
 *   ignored, or whether the base stream should be terminated.
 */ parcelHelpers.export(exports, "iteratorFromConcatenated", ()=>iteratorFromConcatenated);
/**
 * Create a `LazyIterator` by concatenating streams produced by calling a
 * stream-generating function a given number of times.
 *
 * Since a `LazyIterator` is read-once, it cannot be repeated, but this
 * function can be used to achieve a similar effect:
 *
 *   LazyIterator.ofConcatenatedFunction(() => new MyIterator(), 6);
 *
 * @param iteratorFunc: A function that produces a new stream on each call.
 * @param count: The number of times to call the function.
 * @param baseErrorHandler An optional function that can intercept `Error`s
 *   raised during a `next()` call on the base stream.  This function can decide
 *   whether the error should be propagated, whether the error should be
 *   ignored, or whether the base stream should be terminated.
 */ parcelHelpers.export(exports, "iteratorFromConcatenatedFunction", ()=>iteratorFromConcatenatedFunction);
/**
 * Create a `LazyIterator` by zipping together an array, dict, or nested
 * structure of `LazyIterator`s (and perhaps additional constants).
 *
 * The underlying streams must provide elements in a consistent order such
 * that they correspond.
 *
 * Typically, the underlying streams should have the same number of
 * elements. If they do not, the behavior is determined by the
 * `mismatchMode` argument.
 *
 * The nested structure of the `iterators` argument determines the
 * structure of elements in the resulting iterator.
 *
 * @param iterators: An array or object containing LazyIterators at the
 * leaves.
 * @param mismatchMode: Determines what to do when one underlying iterator
 * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)
 * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`
 * causes the zipped iterator to terminate with the furst underlying
 * streams, so elements remaining on the longer streams are ignored.
 * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling
 * in nulls for the exhausted streams, until all streams are exhausted.
 */ parcelHelpers.export(exports, "iteratorFromZipped", ()=>iteratorFromZipped);
/**
 * An asynchronous iterator, providing lazy access to a potentially
 * unbounded stream of elements.
 *
 * Iterator can be obtained from a dataset:
 * `const iter = await dataset.iterator();`
 */ parcelHelpers.export(exports, "LazyIterator", ()=>LazyIterator);
// Iterators that maintain a queue of pending items
// ============================================================================
/**
 * A base class for transforming streams that operate by maintaining an
 * output queue of elements that are ready to return via next().  This is
 * commonly required when the transformation is 1-to-many:  A call to next()
 * may trigger a call to the underlying stream, which will produce many
 * mapped elements of this stream-- of which we need to return only one, so
 * we have to queue the rest.
 */ parcelHelpers.export(exports, "OneToManyIterator", ()=>OneToManyIterator);
/**
 * Provides a `LazyIterator` that concatenates a stream of underlying
 * streams.
 *
 * Doing this in a concurrency-safe way requires some trickery.  In
 * particular, we want this stream to return the elements from the
 * underlying streams in the correct order according to when next() was
 * called, even if the resulting Promises resolve in a different order.
 */ parcelHelpers.export(exports, "ChainedIterator", ()=>ChainedIterator);
parcelHelpers.export(exports, "ZipMismatchMode", ()=>ZipMismatchMode);
// Iterators that maintain a ring buffer of pending promises
// ============================================================================
/**
 * A stream that prefetches a given number of items from an upstream source,
 * returning them in FIFO order.
 *
 * Note this prefetches Promises, but makes no guarantees about when those
 * Promises resolve.
 */ parcelHelpers.export(exports, "PrefetchIterator", ()=>PrefetchIterator);
/**
 * A stream that performs a sliding-window random shuffle on an upstream
 * source. This is like a `PrefetchIterator` except that the items are
 * returned in randomized order.  Mixing naturally improves as the buffer
 * size increases.
 */ parcelHelpers.export(exports, "ShuffleIterator", ()=>ShuffleIterator);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _seedrandom = require("seedrandom");
var _deepClone = require("../util/deep_clone");
var _deepMap = require("../util/deep_map");
var _growingRingBuffer = require("../util/growing_ring_buffer");
var _ringBuffer = require("../util/ring_buffer");
function iteratorFromItems(items) {
    return new ArrayIterator(items);
}
function iteratorFromIncrementing(start) {
    let i = start;
    return iteratorFromFunction(()=>({
            value: i++,
            done: false
        }));
}
function iteratorFromFunction(func) {
    return new FunctionCallIterator(func);
}
function iteratorFromConcatenated(baseIterators, baseErrorHandler) {
    return new ChainedIterator(baseIterators, baseErrorHandler);
}
function iteratorFromConcatenatedFunction(iteratorFunc, count, baseErrorHandler) {
    return iteratorFromConcatenated(iteratorFromFunction(iteratorFunc).take(count), baseErrorHandler);
}
function iteratorFromZipped(iterators, mismatchMode = ZipMismatchMode.FAIL) {
    return new ZipIterator(iterators, mismatchMode);
}
class LazyIterator {
    /**
     * Collect all remaining elements of a bounded stream into an array.
     * Obviously this will succeed only for small streams that fit in memory.
     * Useful for testing.
     *
     * @returns A Promise for an array of stream elements, which will resolve
     *   when the stream is exhausted.
     */ async toArray() {
        const result = [];
        let x = await this.next();
        while(!x.done){
            result.push(x.value);
            x = await this.next();
        }
        return result;
    }
    /**
     * Collect all elements of this dataset into an array with prefetching 100
     * elements. This is useful for testing, because the prefetch changes the
     * order in which the Promises are resolved along the processing pipeline.
     * This may help expose bugs where results are dependent on the order of
     * Promise resolution rather than on the logical order of the stream (i.e.,
     * due to hidden mutable state).
     *
     * @returns A Promise for an array of stream elements, which will resolve
     *   when the stream is exhausted.
     */ async toArrayForTest() {
        const stream = this.prefetch(100);
        const result = [];
        let x = await stream.next();
        while(!x.done){
            result.push(x.value);
            x = await stream.next();
        }
        return result;
    }
    /**
     * Draw items from the stream until it is exhausted.
     *
     * This can be useful when the stream has side effects but no output.  In
     * that case, calling this function guarantees that the stream will be
     * fully processed.
     */ async resolveFully() {
        let x = await this.next();
        while(!x.done)x = await this.next();
    }
    /**
     * Draw items from the stream until it is exhausted, or a predicate fails.
     *
     * This can be useful when the stream has side effects but no output.  In
     * that case, calling this function guarantees that the stream will be
     * fully processed.
     */ async resolveWhile(predicate) {
        let x = await this.next();
        let shouldContinue = predicate(x.value);
        while(!x.done && shouldContinue){
            x = await this.next();
            shouldContinue = predicate(x.value);
        }
    }
    /**
     * Handles errors thrown on this stream using a provided handler function.
     *
     * @param handler A function that handles any `Error` thrown during a `next()`
     *   call and returns true if the stream should continue (dropping the failed
     *   call) or false if the stream should quietly terminate.  If the handler
     *   itself throws (or rethrows) an `Error`, that will be propagated.
     *
     * @returns A `LazyIterator` of elements passed through from upstream,
     *   possibly filtering or terminating on upstream `next()` calls that
     *   throw an `Error`.
     */ handleErrors(handler) {
        return new ErrorHandlingLazyIterator(this, handler);
    }
    // TODO(soergel): Implement reduce() etc.
    /**
     * Filters this stream according to `predicate`.
     *
     * @param predicate A function mapping a stream element to a boolean or a
     * `Promise` for one.
     *
     * @returns A `LazyIterator` of elements for which the predicate was true.
     */ filter(predicate) {
        return new FilterIterator(this, predicate);
    }
    /**
     * Maps this stream through a 1-to-1 transform.
     *
     * @param transform A function mapping a stream element to a transformed
     *   element.
     *
     * @returns A `LazyIterator` of transformed elements.
     */ map(transform) {
        return new MapIterator(this, transform);
    }
    /**
     * Maps this stream through an async 1-to-1 transform.
     *
     * @param transform A function mapping a stream element to a `Promise` for a
     *   transformed stream element.
     *
     * @returns A `LazyIterator` of transformed elements.
     */ mapAsync(transform) {
        return new AsyncMapIterator(this, transform);
    }
    /**
     * Maps this stream through a 1-to-1 transform, forcing serial execution.
     *
     * @param transform A function mapping a stream element to a transformed
     *   element.
     *
     * @returns A `LazyIterator` of transformed elements.
     */ serialMapAsync(transform) {
        return new AsyncMapIterator(this, transform).serial();
    }
    /**
     * Maps this stream through a 1-to-many transform.
     *
     * @param transform A function mapping a stream element to an array of
     *   transformed elements.
     *
     * @returns A `DataStream` of transformed elements.
     */ flatmap(transform) {
        return new FlatmapIterator(this, transform);
    }
    /**
     * Apply a function to every element of the stream.
     *
     * @param f A function to apply to each stream element.
     */ async forEachAsync(f) {
        return this.map(f).resolveFully();
    }
    /**
     * Apply a function to every element of the stream, forcing serial execution.
     *
     * @param f A function to apply to each stream element.  Should return 'true'
     *   to indicate that the stream should continue, or 'false' to cause it to
     *   terminate.
     */ async serialForEach(f) {
        return this.serialMapAsync(f).resolveWhile((x)=>x === true);
    }
    /**
     * Groups elements into batches, represented as arrays of elements.
     *
     * We can think of the elements of this iterator as 'rows' (even if they are
     * nested structures).  By the same token, consecutive values for a given
     * key within the elements form a 'column'.  This matches the usual sense of
     * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
     *
     * Thus, "Row-major" means that the resulting batch is simply a collection of
     * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major
     * form, which is needed for vectorized computation.
     *
     * @param batchSize The number of elements desired per batch.
     * @param smallLastBatch Whether to emit the final batch when it has fewer
     *   than batchSize elements. Default true.
     * @returns A `LazyIterator` of batches of elements, represented as arrays
     *   of the original element type.
     */ rowMajorBatch(batchSize, smallLastBatch = true) {
        return new RowMajorBatchIterator(this, batchSize, smallLastBatch);
    }
    /**
     * Groups elements into batches, represented in column-major form.
     *
     * We can think of the elements of this iterator as 'rows' (even if they are
     * nested structures).  By the same token, consecutive values for a given
     * key within the elements form a 'column'.  This matches the usual sense of
     * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
     *
     * Thus, "column-major" means that the resulting batch is a (potentially
     * nested) structure representing the columns.  Each column entry, then,
     * contains a collection of the values found in that column for a range of
     * input elements.  This representation allows for vectorized computation, in
     * contrast to the row-major form.
     *
     * The inputs should all have the same nested structure (i.e., of arrays and
     * dicts).  The result is a single object with the same nested structure,
     * where the leaves are arrays collecting the values of the inputs at that
     * location (or, optionally, the result of a custom function applied to those
     * arrays).
     *
     * @param batchSize The number of elements desired per batch.
     * @param smallLastBatch Whether to emit the final batch when it has fewer
     *   than batchSize elements. Default true.
     * @param zipFn: (optional) A function that expects an array of elements at a
     *   single node of the object tree, and returns a `DeepMapResult`.  The
     *   `DeepMapResult` either provides a result value for that node (i.e.,
     *   representing the subtree), or indicates that the node should be processed
     *   recursively.  The default zipFn recurses as far as possible and places
     *   arrays at the leaves.
     * @returns A `LazyIterator` of batches of elements, represented as an object
     *   with collections at the leaves.
     */ columnMajorBatch(batchSize, smallLastBatch = true, // tslint:disable-next-line:no-any
    zipFn = (0, _deepMap.zipToList)) {
        // First collect the desired number of input elements as a row-major batch.
        const rowBatches = this.rowMajorBatch(batchSize, smallLastBatch);
        // Now 'rotate' or 'pivot' the data, collecting all values from each column
        // in the batch (i.e., for each key within the elements) into an array.
        return rowBatches.map((x)=>(0, _deepMap.deepZip)(x, zipFn));
    }
    /**
     * Concatenate this `LazyIterator` with another.
     *
     * @param iterator A `LazyIterator` to be concatenated onto this one.
     * @param baseErrorHandler An optional function that can intercept `Error`s
     *   raised during a `next()` call on the base stream.  This function can
     *   decide whether the error should be propagated, whether the error should
     *   be ignored, or whether the base stream should be terminated.
     * @returns A `LazyIterator`.
     */ concatenate(iterator, baseErrorHandler) {
        return new ChainedIterator(iteratorFromItems([
            this,
            iterator
        ]), baseErrorHandler);
    }
    /**
     * Limits this stream to return at most `count` items.
     *
     * @param count The maximum number of items to provide from the stream. If
     * a negative or undefined value is given, the entire stream is returned
     *   unaltered.
     */ take(count) {
        if (count < 0 || count == null) return this;
        return new TakeIterator(this, count);
    }
    /**
     * Skips the first `count` items in this stream.
     *
     * @param count The number of items to skip.  If a negative or undefined
     * value is given, the entire stream is returned unaltered.
     */ skip(count) {
        if (count < 0 || count == null) return this;
        return new SkipIterator(this, count);
    }
    /**
     * Prefetch the first `bufferSize` items in this stream.
     *
     * Note this prefetches Promises, but makes no guarantees about when those
     * Promises resolve.
     *
     * @param bufferSize: An integer specifying the number of elements to be
     *   prefetched.
     */ prefetch(bufferSize) {
        return new PrefetchIterator(this, bufferSize);
    }
    // TODO(soergel): deep sharded shuffle, where supported
    /**
     * Randomly shuffles the elements of this stream.
     *
     * @param bufferSize: An integer specifying the number of elements from
     * this stream from which the new stream will sample.
     * @param seed: (Optional.) An integer specifying the random seed that
     * will be used to create the distribution.
     */ shuffle(windowSize, seed) {
        return new ShuffleIterator(this, windowSize, seed);
    }
    /**
     * Force an iterator to execute serially: each next() call will await the
     * prior one, so that they cannot execute concurrently.
     */ serial() {
        return new SerialIterator(this);
    }
}
// ============================================================================
// The following private classes serve to implement the chainable methods
// on LazyIterator.  Unfortunately they can't be placed in separate files,
// due to resulting trouble with circular imports.
// ============================================================================
// Iterators that just extend LazyIterator directly
// ============================================================================
class ArrayIterator extends LazyIterator {
    constructor(items){
        super();
        this.items = items;
        this.trav = 0;
    }
    summary() {
        return `Array of ${this.items.length} items`;
    }
    async next() {
        if (this.trav >= this.items.length) return {
            value: null,
            done: true
        };
        const item = this.items[this.trav];
        this.trav++;
        return {
            value: (0, _deepClone.deepClone)(item),
            done: false
        };
    }
}
class FunctionCallIterator extends LazyIterator {
    constructor(nextFn){
        super();
        this.nextFn = nextFn;
    }
    summary() {
        return `Function call`;
    }
    async next() {
        try {
            return this.nextFn();
        } catch (e) {
            // Modify the error message but leave the stack trace intact
            e.message = `Error thrown while iterating through a dataset: ${e.message}`;
            throw e;
        }
    }
}
class SerialIterator extends LazyIterator {
    constructor(upstream){
        super();
        this.upstream = upstream;
        this.lastRead = Promise.resolve({
            value: null,
            done: false
        });
    }
    summary() {
        return `${this.upstream.summary()} -> Serial`;
    }
    async next() {
        // This sets this.lastRead to a new Promise right away, as opposed to
        // saying `await this.lastRead; this.lastRead = this.serialNext();` which
        // would not work because this.nextRead would be updated only after the
        // promise resolves.
        this.lastRead = this.lastRead.then(()=>this.serialNext());
        return this.lastRead;
    }
    async serialNext() {
        return this.upstream.next();
    }
}
class SkipIterator extends LazyIterator {
    constructor(upstream, maxCount){
        super();
        this.upstream = upstream;
        this.maxCount = maxCount;
        // Local state that should not be clobbered by out-of-order execution.
        this.count = 0;
        this.lastRead = Promise.resolve({
            value: null,
            done: false
        });
    }
    summary() {
        return `${this.upstream.summary()} -> Skip`;
    }
    async next() {
        // This sets this.lastRead to a new Promise right away, as opposed to
        // saying `await this.lastRead; this.lastRead = this.serialNext();` which
        // would not work because this.nextRead would be updated only after the
        // promise resolves.
        this.lastRead = this.lastRead.then(()=>this.serialNext());
        return this.lastRead;
    }
    async serialNext() {
        // TODO(soergel): consider tradeoffs of reading in parallel, eg.
        // collecting next() promises in an Array and then waiting for
        // Promise.all() of those. Benefit: pseudo-parallel execution.  Drawback:
        // maybe delayed GC.
        while((this.count++) < this.maxCount){
            const skipped = await this.upstream.next();
            // short-circuit if upstream is already empty
            if (skipped.done) return skipped;
            _tfjsCore.dispose(skipped.value);
        }
        return this.upstream.next();
    }
}
class TakeIterator extends LazyIterator {
    constructor(upstream, maxCount){
        super();
        this.upstream = upstream;
        this.maxCount = maxCount;
        this.count = 0;
    }
    summary() {
        return `${this.upstream.summary()} -> Take`;
    }
    async next() {
        if ((this.count++) >= this.maxCount) return {
            value: null,
            done: true
        };
        return this.upstream.next();
    }
}
// Note this batch just groups items into row-wise element arrays.
// Rotating these to a column-wise representation happens only at the dataset
// level.
class RowMajorBatchIterator extends LazyIterator {
    constructor(upstream, batchSize, enableSmallLastBatch = true){
        super();
        this.upstream = upstream;
        this.batchSize = batchSize;
        this.enableSmallLastBatch = enableSmallLastBatch;
        this.lastRead = Promise.resolve({
            value: null,
            done: false
        });
    }
    summary() {
        return `${this.upstream.summary()} -> RowMajorBatch`;
    }
    async next() {
        // This sets this.lastRead to a new Promise right away, as opposed to
        // saying `await this.lastRead; this.lastRead = this.serialNext();` which
        // would not work because this.nextRead would be updated only after the
        // promise resolves.
        this.lastRead = this.lastRead.then(()=>this.serialNext());
        return this.lastRead;
    }
    async serialNext() {
        const batch = [];
        while(batch.length < this.batchSize){
            const item = await this.upstream.next();
            if (item.done) {
                if (this.enableSmallLastBatch && batch.length > 0) return {
                    value: batch,
                    done: false
                };
                return {
                    value: null,
                    done: true
                };
            }
            batch.push(item.value);
        }
        return {
            value: batch,
            done: false
        };
    }
}
class FilterIterator extends LazyIterator {
    constructor(upstream, predicate){
        super();
        this.upstream = upstream;
        this.predicate = predicate;
        this.lastRead = Promise.resolve({
            value: null,
            done: false
        });
    }
    summary() {
        return `${this.upstream.summary()} -> Filter`;
    }
    async next() {
        // This sets this.lastRead to a new Promise right away, as opposed to
        // saying `await this.lastRead; this.lastRead = this.serialNext();` which
        // would not work because this.nextRead would be updated only after the
        // promise resolves.
        this.lastRead = this.lastRead.then(()=>this.serialNext());
        return this.lastRead;
    }
    async serialNext() {
        while(true){
            const item = await this.upstream.next();
            if (item.done || this.predicate(item.value)) return item;
            _tfjsCore.dispose(item.value);
        }
    }
}
class MapIterator extends LazyIterator {
    constructor(upstream, transform){
        super();
        this.upstream = upstream;
        this.transform = transform;
    }
    summary() {
        return `${this.upstream.summary()} -> Map`;
    }
    async next() {
        const item = await this.upstream.next();
        if (item.done) return {
            value: null,
            done: true
        };
        const inputTensors = _tfjsCore.tensor_util.getTensorsInContainer(item.value);
        // Careful: the transform may mutate the item in place.
        // That's why we have to remember the input Tensors above, and then
        // below dispose only those that were not passed through to the output.
        // Note too that the transform function is responsible for tidying
        // any intermediate Tensors.  Here we are concerned only about the
        // inputs.
        const mapped = this.transform(item.value);
        const outputTensors = _tfjsCore.tensor_util.getTensorsInContainer(mapped);
        // TODO(soergel) faster intersection
        // TODO(soergel) move to tf.disposeExcept(in, out)?
        for (const t of inputTensors)if (!_tfjsCore.tensor_util.isTensorInList(t, outputTensors)) t.dispose();
        return {
            value: mapped,
            done: false
        };
    }
}
class ErrorHandlingLazyIterator extends LazyIterator {
    constructor(upstream, handler){
        super();
        this.upstream = upstream;
        this.handler = handler;
        this.count = 0;
        this.lastRead = Promise.resolve({
            value: null,
            done: false
        });
    }
    summary() {
        return `${this.upstream.summary()} -> handleErrors`;
    }
    async next() {
        // This sets this.lastRead to a new Promise right away, as opposed to
        // saying `await this.lastRead; this.lastRead = this.serialNext();` which
        // would not work because this.nextRead would be updated only after the
        // promise resolves.
        this.lastRead = this.lastRead.then(()=>this.serialNext());
        return this.lastRead;
    }
    async serialNext() {
        while(true)try {
            return await this.upstream.next();
        } catch (e) {
            if (!this.handler(e)) return {
                value: null,
                done: true
            };
        // If the handler returns true, loop and fetch the next upstream item.
        // If the upstream iterator throws an endless stream of errors, and if
        // the handler says to ignore them, then we loop forever here.  That is
        // the correct behavior-- it's up to the handler to decide when to stop.
        }
    }
}
class AsyncMapIterator extends LazyIterator {
    constructor(upstream, transform){
        super();
        this.upstream = upstream;
        this.transform = transform;
    }
    summary() {
        return `${this.upstream.summary()} -> AsyncMap`;
    }
    async next() {
        const item = await this.upstream.next();
        if (item.done) return {
            value: null,
            done: true
        };
        const inputTensors = _tfjsCore.tensor_util.getTensorsInContainer(item.value);
        // Careful: the transform may mutate the item in place.
        // That's why we have to remember the input Tensors above, and then
        // below dispose only those that were not passed through to the output.
        // Note too that the transform function is responsible for tidying
        // any intermediate Tensors.  Here we are concerned only about the
        // inputs.
        const mapped = await this.transform(item.value);
        const outputTensors = _tfjsCore.tensor_util.getTensorsInContainer(mapped);
        // TODO(soergel) faster intersection
        // TODO(soergel) move to tf.disposeExcept(in, out)?
        for (const t of inputTensors)if (!_tfjsCore.tensor_util.isTensorInList(t, outputTensors)) t.dispose();
        return {
            value: mapped,
            done: false
        };
    }
}
class OneToManyIterator extends LazyIterator {
    constructor(){
        super();
        this.outputQueue = new (0, _growingRingBuffer.GrowingRingBuffer)();
        this.lastRead = Promise.resolve({
            value: null,
            done: false
        });
    }
    async next() {
        // This sets this.lastRead to a new Promise right away, as opposed to
        // saying `await this.lastRead; this.lastRead = this.serialNext();` which
        // would not work because this.nextRead would be updated only after the
        // promise resolves.
        this.lastRead = this.lastRead.then(()=>this.serialNext());
        return this.lastRead;
    }
    async serialNext() {
        // Fetch so that the queue contains at least one item if possible.
        // If the upstream source is exhausted, AND there are no items left in
        // the output queue, then this stream is also exhausted.
        while(this.outputQueue.length() === 0){
            // TODO(soergel): consider parallel reads.
            if (!await this.pump()) return {
                value: null,
                done: true
            };
        }
        return {
            value: this.outputQueue.shift(),
            done: false
        };
    }
}
class FlatmapIterator extends OneToManyIterator {
    constructor(upstream, transform){
        super();
        this.upstream = upstream;
        this.transform = transform;
    }
    summary() {
        return `${this.upstream.summary()} -> Flatmap`;
    }
    async pump() {
        const item = await this.upstream.next();
        if (item.done) return false;
        const inputTensors = _tfjsCore.tensor_util.getTensorsInContainer(item.value);
        // Careful: the transform may mutate the item in place.
        // that's why we have to remember the input Tensors above, and then
        // below dispose only those that were not passed through to the output.
        // Note too that the transform function is responsible for tidying any
        // intermediate Tensors.  Here we are concerned only about the inputs.
        const mappedArray = this.transform(item.value);
        const outputTensors = _tfjsCore.tensor_util.getTensorsInContainer(mappedArray);
        this.outputQueue.pushAll(mappedArray);
        // TODO(soergel) faster intersection, and deduplicate outputTensors
        // TODO(soergel) move to tf.disposeExcept(in, out)?
        for (const t of inputTensors)if (!_tfjsCore.tensor_util.isTensorInList(t, outputTensors)) t.dispose();
        return true;
    }
}
class ChainedIterator extends LazyIterator {
    constructor(iterators, baseErrorHandler){
        super();
        this.baseErrorHandler = baseErrorHandler;
        // Strict Promise execution order:
        // a next() call may not even begin until the previous one completes.
        this.lastRead = null;
        // Local state that should not be clobbered by out-of-order execution.
        this.iterator = null;
        this.moreIterators = iterators;
    }
    summary() {
        const upstreamSummaries = "TODO: fill in upstream of chained summaries";
        return `${upstreamSummaries} -> Chained`;
    }
    async next() {
        this.lastRead = this.readFromChain(this.lastRead);
        return this.lastRead;
    }
    async readFromChain(lastRead) {
        // Must await on the previous read since the previous read may have advanced
        // the stream of streams, from which we need to read.
        // This is unfortunate since we can't parallelize reads. Which means
        // prefetching of chained streams is a no-op.
        // One solution is to prefetch immediately upstream of this.
        await lastRead;
        if (this.iterator == null) {
            const iteratorResult = await this.moreIterators.next();
            if (iteratorResult.done) // No more streams to stream from.
            return {
                value: null,
                done: true
            };
            this.iterator = iteratorResult.value;
            if (this.baseErrorHandler != null) this.iterator = this.iterator.handleErrors(this.baseErrorHandler);
        }
        const itemResult = await this.iterator.next();
        if (itemResult.done) {
            this.iterator = null;
            return this.readFromChain(lastRead);
        }
        return itemResult;
    }
}
var ZipMismatchMode;
(function(ZipMismatchMode) {
    ZipMismatchMode[ZipMismatchMode["FAIL"] = 0] = "FAIL";
    ZipMismatchMode[ZipMismatchMode["SHORTEST"] = 1] = "SHORTEST";
    ZipMismatchMode[ZipMismatchMode["LONGEST"] = 2] = "LONGEST"; // use nulls for exhausted streams; use up the longest stream.
})(ZipMismatchMode || (ZipMismatchMode = {}));
/**
 * Provides a `LazyIterator` that zips together an array, dict, or nested
 * structure of `LazyIterator`s (and perhaps additional constants).
 *
 * The underlying streams must provide elements in a consistent order such
 * that they correspond.
 *
 * Typically, the underlying streams should have the same number of
 * elements. If they do not, the behavior is determined by the
 * `mismatchMode` argument.
 *
 * The nested structure of the `iterators` argument determines the
 * structure of elements in the resulting iterator.
 *
 * Doing this in a concurrency-safe way requires some trickery.  In
 * particular, we want this stream to return the elements from the
 * underlying streams in the correct order according to when next() was
 * called, even if the resulting Promises resolve in a different order.
 *
 * @param iterators: An array or object containing LazyIterators at the
 * leaves.
 * @param mismatchMode: Determines what to do when one underlying iterator
 * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)
 * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`
 * causes the zipped iterator to terminate with the furst underlying
 * streams, so elements remaining on the longer streams are ignored.
 * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling
 * in nulls for the exhausted streams, until all streams are exhausted.
 */ class ZipIterator extends LazyIterator {
    constructor(iterators, mismatchMode = ZipMismatchMode.FAIL){
        super();
        this.iterators = iterators;
        this.mismatchMode = mismatchMode;
        this.count = 0;
        this.currentPromise = null;
    }
    summary() {
        const upstreamSummaries = "TODO: fill in upstream of zip summaries";
        return `{${upstreamSummaries}} -> Zip`;
    }
    async nextState(afterState) {
        // This chaining ensures that the underlying next() are not even called
        // before the previous ones have resolved.
        await afterState;
        // Collect underlying iterator "done" signals as a side effect in
        // getNext()
        let numIterators = 0;
        let iteratorsDone = 0;
        function getNext(container) {
            if (container instanceof LazyIterator) {
                const result = container.next();
                return {
                    value: result.then((x)=>{
                        numIterators++;
                        if (x.done) iteratorsDone++;
                        return x.value;
                    }),
                    recurse: false
                };
            } else return {
                value: null,
                recurse: true
            };
        }
        const mapped = await (0, _deepMap.deepMapAndAwaitAll)(this.iterators, getNext);
        if (numIterators === iteratorsDone) // The streams have all ended.
        return {
            value: null,
            done: true
        };
        if (iteratorsDone > 0) switch(this.mismatchMode){
            case ZipMismatchMode.FAIL:
                throw new Error("Zipped streams should have the same length. " + `Mismatched at element ${this.count}.`);
            case ZipMismatchMode.SHORTEST:
                return {
                    value: null,
                    done: true
                };
            case ZipMismatchMode.LONGEST:
            default:
        }
        this.count++;
        return {
            value: mapped,
            done: false
        };
    }
    async next() {
        this.currentPromise = this.nextState(this.currentPromise);
        return this.currentPromise;
    }
}
class PrefetchIterator extends LazyIterator {
    constructor(upstream, bufferSize){
        super();
        this.upstream = upstream;
        this.bufferSize = bufferSize;
        this.buffer = new (0, _ringBuffer.RingBuffer)(bufferSize);
    }
    summary() {
        return `${this.upstream.summary()} -> Prefetch`;
    }
    /**
     * Refill the prefetch buffer.  Returns only after the buffer is full, or
     * the upstream source is exhausted.
     */ refill() {
        while(!this.buffer.isFull()){
            const v = this.upstream.next();
            this.buffer.push(v);
        }
    }
    next() {
        this.refill();
        // This shift will never throw an error because the buffer is always
        // full after a refill. If the stream is exhausted, the buffer will be
        // full of Promises that will resolve to the end-of-stream signal.
        return this.buffer.shift();
    }
}
class ShuffleIterator extends PrefetchIterator {
    constructor(upstream, windowSize, seed){
        super(upstream, windowSize);
        this.upstream = upstream;
        this.windowSize = windowSize;
        // Local state that should not be clobbered by out-of-order execution.
        this.upstreamExhausted = false;
        this.random = _seedrandom.alea(seed || _tfjsCore.util.now().toString());
        this.lastRead = Promise.resolve({
            value: null,
            done: false
        });
    }
    async next() {
        // This sets this.lastRead to a new Promise right away, as opposed to
        // saying `await this.lastRead; this.lastRead = this.serialNext();` which
        // would not work because this.nextRead would be updated only after the
        // promise resolves.
        this.lastRead = this.lastRead.then(()=>this.serialNext());
        return this.lastRead;
    }
    randomInt(max) {
        return Math.floor(this.random() * max);
    }
    chooseIndex() {
        return this.randomInt(this.buffer.length());
    }
    async serialNext() {
        // TODO(soergel): consider performance
        if (!this.upstreamExhausted) this.refill();
        while(!this.buffer.isEmpty()){
            const chosenIndex = this.chooseIndex();
            const result = await this.buffer.shuffleExcise(chosenIndex);
            if (result.done) this.upstreamExhausted = true;
            else {
                this.refill();
                return result;
            }
        }
        return {
            value: null,
            done: true
        };
    }
}

},{"@tensorflow/tfjs-core":"2votT","seedrandom":"kcfU7","../util/deep_clone":"04rw9","../util/deep_map":"iwr3N","../util/growing_ring_buffer":"ccMmC","../util/ring_buffer":"2WUhK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"04rw9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deepClone", ()=>deepClone);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _deepMap = require("./deep_map");
function deepClone(container) {
    return (0, _deepMap.deepMap)(container, cloneIfTensor);
}
// tslint:disable-next-line: no-any
function cloneIfTensor(item) {
    if (item instanceof _tfjsCore.Tensor) return {
        value: item.clone(),
        recurse: false
    };
    else if ((0, _deepMap.isIterable)(item)) return {
        value: null,
        recurse: true
    };
    else return {
        value: item,
        recurse: false
    };
}

},{"@tensorflow/tfjs-core":"2votT","./deep_map":"iwr3N","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iwr3N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Apply a mapping function to a nested structure in a recursive manner.
 *
 * The result of the mapping is an object with the same nested structure (i.e.,
 * of arrays and dicts) as the input, except that some subtrees are replaced,
 * according to the results of the mapping function.
 *
 * Mappings are memoized.  Thus, if the nested structure contains the same
 * object in multiple positions, the output will contain the same mapped object
 * in those positions.  Cycles are not supported, however.
 *
 * @param input: The object to which to apply the mapping function.
 * @param mapFn: A function that expects a single node of the object tree, and
 *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a
 *   replacement value for that node (i.e., replacing the subtree), or indicates
 *   that the node should be processed recursively.
 */ parcelHelpers.export(exports, "deepMap", ()=>deepMap);
// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion
// with zip()
/**
 * Zip nested structures together in a recursive manner.
 *
 * This has the effect of transposing or pivoting data, e.g. converting it from
 * a row-major representation to a column-major representation.
 *
 * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns
 * `{a: [1, 3], b: [2, 4]}`.
 *
 * The inputs should all have the same nested structure (i.e., of arrays and
 * dicts).  The result is a single object with the same nested structure, where
 * the leaves are arrays collecting the values of the inputs at that location
 * (or, optionally, the result of a custom function applied to those arrays).
 *
 * @param inputs: An array of the objects to zip together.
 * @param zipFn: (optional) A function that expects an array of elements at a
 *   single node of the object tree, and returns a `DeepMapResult`.  The
 *   `DeepMapResult` either provides a result value for that node (i.e.,
 *   representing the subtree), or indicates that the node should be processed
 *   recursively.  The default zipFn recurses as far as possible and places
 *   arrays at the leaves.
 */ parcelHelpers.export(exports, "deepZip", ()=>deepZip);
// tslint:disable-next-line:no-any
parcelHelpers.export(exports, "zipToList", ()=>zipToList);
/**
 * Apply an async mapping function to a nested structure in a recursive manner.
 *
 * This first creates a nested structure of Promises, and then awaits all of
 * those, resulting in a single Promise for a resolved nested structure.
 *
 * The result of the mapping is an object with the same nested structure (i.e.,
 * of arrays and dicts) as the input, except that some subtrees are replaced,
 * according to the results of the mapping function.
 *
 * Mappings are memoized.  Thus, if the nested structure contains the same
 * object in multiple positions, the output will contain the same mapped object
 * in those positions.  Cycles are not supported, however.
 *
 * @param input: The object to which to apply the mapping function.
 * @param mapFn: A function that expects a single node of the object tree, and
 *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides
 *   a `Promise` for a replacement value for that node (i.e., replacing the
 *   subtree), or indicates that the node should be processed recursively.  Note
 *   that the decision whether or not to recurse must be made immediately; only
 *   the mapped value may be promised.
 */ parcelHelpers.export(exports, "deepMapAndAwaitAll", ()=>deepMapAndAwaitAll);
/**
 * Determine whether the argument is iterable.
 *
 * @returns true if the argument is an array or any non-Tensor object.
 */ // tslint:disable-next-line:no-any
parcelHelpers.export(exports, "isIterable", ()=>isIterable);
/**
 * Determine whether the argument can be converted to Tensor.
 *
 * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does
 * not.
 *
 * @returns true if the argument can be converted to Tensor.
 */ // tslint:disable-next-line:no-any
parcelHelpers.export(exports, "canTensorify", ()=>canTensorify);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function deepMap(input, mapFn) {
    return deepMapInternal(input, mapFn);
}
/**
 * @param seen: A Map of known object mappings (i.e., memoized results of
 *   `mapFn()`)
 * @param containedIn: An set containing objects on the reference path currently
 *   being processed (used to detect cycles).
 */ function deepMapInternal(input, mapFn, seen = new Map(), containedIn = new Set()) {
    if (input == null) return null;
    if (containedIn.has(input)) throw new Error("Circular references are not supported.");
    if (seen.has(input)) return seen.get(input);
    const result = mapFn(input);
    if (result.recurse && result.value !== null) throw new Error("A deep map function may not return both a value and recurse=true.");
    if (!result.recurse) {
        seen.set(input, result.value);
        return result.value;
    } else if (isIterable(input)) {
        // tslint:disable-next-line:no-any
        const mappedIterable = Array.isArray(input) ? [] : {};
        containedIn.add(input);
        for(const k in input){
            const child = input[k];
            const childResult = deepMapInternal(child, mapFn, seen, containedIn);
            mappedIterable[k] = childResult;
        }
        containedIn.delete(input);
        return mappedIterable;
    } else throw new Error(`Can't recurse into non-iterable type: ${input}`);
}
function deepZip(inputs, zipFn = zipToList) {
    return deepZipInternal(inputs, zipFn);
}
/**
 * @param containedIn: An set containing objects on the reference path currently
 *   being processed (used to detect cycles).
 */ function deepZipInternal(inputs, zipFn, containedIn = new Set()) {
    // The recursion follows the structure of input 0; it's assumed that all the
    // other inputs have the same structure.
    const input = inputs[0];
    if (containedIn.has(input)) throw new Error("Circular references are not supported.");
    const result = zipFn(inputs);
    if (result.recurse && result.value !== null) throw new Error("A deep zip function may not return both a value and recurse=true.");
    if (!result.recurse) return result.value;
    else if (isIterable(input)) {
        // tslint:disable-next-line:no-any
        const mappedIterable = Array.isArray(input) ? [] : {};
        containedIn.add(input);
        for(const k in input){
            const children = inputs.map((x)=>x[k]);
            const childResult = deepZipInternal(children, zipFn, containedIn);
            mappedIterable[k] = childResult;
        }
        containedIn.delete(input);
        return mappedIterable;
    } else throw new Error(`Can't recurse into non-iterable type: ${input}`);
}
function zipToList(x) {
    if (x === null) return null;
    // TODO(soergel): validate array type?
    if (isIterable(x[0])) return {
        value: null,
        recurse: true
    };
    else return {
        value: x,
        recurse: false
    };
}
async function deepMapAndAwaitAll(input, mapFn) {
    const seen = new Map();
    // First do a normal deepMap, collecting Promises in 'seen' as a side effect.
    deepMapInternal(input, mapFn, seen);
    // Replace the Promises in 'seen' in place.
    // Note TypeScript provides no async map iteration, and regular map iteration
    // is broken too, so sadly we have to do Array.from() to make it work.
    // (There's no advantage to Promise.all(), and that would be tricky anyway.)
    for (const key of Array.from(seen.keys())){
        const value = seen.get(key);
        if (value instanceof Promise) {
            const mappedValue = await value;
            seen.set(key, mappedValue);
        }
    }
    // Normal deepMap again, this time filling in the resolved values.
    // It's unfortunate that we have to do two passes.
    // TODO(soergel): test performance and think harder about a fast solution.
    const result = deepMapInternal(input, mapFn, seen);
    return result;
}
function isIterable(obj) {
    return obj != null && !ArrayBuffer.isView(obj) && (Array.isArray(obj) || typeof obj === "object" && !(obj instanceof _tfjsCore.Tensor));
}
function canTensorify(obj) {
    return obj == null || isPrimitive(obj) || Array.isArray(obj) || typeof obj === "object" && obj instanceof _tfjsCore.Tensor || _tfjsCore.util.isTypedArray(obj);
}
/**
 * Returns true if the given `value` is a primitive type. Otherwise returns
 * false. This is equivalant to node util.isPrimitive
 */ function isPrimitive(value) {
    return value === null || typeof value !== "object" && typeof value !== "function";
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ccMmC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GrowingRingBuffer", ()=>GrowingRingBuffer);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _ringBuffer = require("./ring_buffer");
class GrowingRingBuffer extends (0, _ringBuffer.RingBuffer) {
    /**
     * Constructs a `GrowingRingBuffer`.
     */ constructor(){
        super(GrowingRingBuffer.INITIAL_CAPACITY);
    }
    isFull() {
        return false;
    }
    push(value) {
        if (super.isFull()) this.expand();
        super.push(value);
    }
    unshift(value) {
        if (super.isFull()) this.expand();
        super.unshift(value);
    }
    /**
     * Doubles the capacity of the buffer.
     */ expand() {
        const newCapacity = this.capacity * 2;
        const newData = new Array(newCapacity);
        const len = this.length();
        // Rotate the buffer to start at index 0 again, since we can't just
        // allocate more space at the end.
        for(let i = 0; i < len; i++)newData[i] = this.get(this.wrap(this.begin + i));
        this.data = newData;
        this.capacity = newCapacity;
        this.doubledCapacity = 2 * this.capacity;
        this.begin = 0;
        this.end = len;
    }
}
GrowingRingBuffer.INITIAL_CAPACITY = 32;

},{"./ring_buffer":"2WUhK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2WUhK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ /**
 * A ring buffer, providing O(1) FIFO, LIFO, and related operations.
 */ parcelHelpers.export(exports, "RingBuffer", ()=>RingBuffer);
class RingBuffer {
    /**
     * Constructs a `RingBuffer`.
     * @param capacity The number of items that the buffer can accomodate.
     */ constructor(capacity){
        this.capacity = capacity;
        // Note we store the indices in the range 0 <= index < 2*capacity.
        // This allows us to distinguish the full from the empty case.
        // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/
        this.begin = 0; // inclusive
        this.end = 0; // exclusive
        if (capacity == null) throw new RangeError("Can't create a ring buffer of unknown capacity.");
        if (capacity < 1) throw new RangeError("Can't create ring buffer of capacity < 1.");
        this.data = new Array(capacity);
        this.doubledCapacity = 2 * capacity;
    }
    /**
     * Map any index into the range 0 <= index < 2*capacity.
     */ wrap(index) {
        // don't trust % on negative numbers
        while(index < 0)index += this.doubledCapacity;
        return index % this.doubledCapacity;
    }
    get(index) {
        if (index < 0) throw new RangeError("Can't get item at a negative index.");
        return this.data[index % this.capacity];
    }
    set(index, value) {
        if (index < 0) throw new RangeError("Can't set item at a negative index.");
        this.data[index % this.capacity] = value;
    }
    /**
     * Returns the current number of items in the buffer.
     */ length() {
        let length = this.end - this.begin;
        if (length < 0) length = this.doubledCapacity + length;
        return length;
    }
    /**
     * Reports whether the buffer is full.
     * @returns true if the number of items in the buffer equals its capacity, and
     *   false otherwise.
     */ isFull() {
        return this.length() === this.capacity;
    }
    /**
     * Reports whether the buffer is empty.
     * @returns true if the number of items in the buffer equals zero, and
     *   false otherwise.
     */ isEmpty() {
        return this.length() === 0;
    }
    /**
     * Adds an item to the end of the buffer.
     */ push(value) {
        if (this.isFull()) throw new RangeError("Ring buffer is full.");
        this.set(this.end, value);
        this.end = this.wrap(this.end + 1);
    }
    /**
     * Adds many items to the end of the buffer, in order.
     */ pushAll(values) {
        for (const value of values)this.push(value);
    }
    /**
     * Removes and returns the last item in the buffer.
     */ pop() {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        this.end = this.wrap(this.end - 1);
        const result = this.get(this.end);
        this.set(this.end, undefined);
        return result;
    }
    /**
     * Adds an item to the beginning of the buffer.
     */ unshift(value) {
        if (this.isFull()) throw new RangeError("Ring buffer is full.");
        this.begin = this.wrap(this.begin - 1);
        this.set(this.begin, value);
    }
    /**
     * Removes and returns the first item in the buffer.
     */ shift() {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        const result = this.get(this.begin);
        this.set(this.begin, undefined);
        this.begin = this.wrap(this.begin + 1);
        return result;
    }
    /**
     * Removes and returns a specific item in the buffer, and moves the last item
     * to the vacated slot.  This is useful for implementing a shuffling stream.
     * Note that this operation necessarily scrambles the original order.
     *
     * @param relativeIndex: the index of the item to remove, relative to the
     *   first item in the buffer (e.g., hiding the ring nature of the underlying
     *   storage).
     */ shuffleExcise(relativeIndex) {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        const index = this.wrap(this.begin + relativeIndex);
        const result = this.get(index);
        this.set(index, this.pop());
        return result;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4dv1S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Represents a potentially large collection of delimited text records.
 *
 * The produced `TensorContainer`s each contain one key-value pair for
 * every column of the table.  When a field is empty in the incoming data, the
 * resulting value is `undefined`, or throw error if it is required.  Values
 * that can be parsed as numbers are emitted as type `number`, other values
 * are parsed as `string`.
 *
 * The results are not batched.
 */ /** @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'} */ parcelHelpers.export(exports, "CSVDataset", ()=>CSVDataset) // TODO(soergel): add more basic datasets for parity with tf.data
 // tf.data.FixedLengthRecordDataset()
 // tf.data.TFRecordDataset()
;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _dataset = require("../dataset");
var _textLineDataset = require("./text_line_dataset");
const CODE_QUOTE = '"';
const STATE_OUT = Symbol("out");
const STATE_FIELD = Symbol("field");
const STATE_QUOTE = Symbol("quote");
const STATE_QUOTE_AFTER_QUOTE = Symbol("quoteafterquote");
const STATE_WITHIN_QUOTE_IN_QUOTE = Symbol("quoteinquote");
class CSVDataset extends (0, _dataset.Dataset) {
    /**
     * Create a `CSVDataset`.
     *
     * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.
     * @param csvConfig (Optional) A CSVConfig object that contains configurations
     *     of reading and decoding from CSV file(s).
     *
     *     hasHeader: (Optional) A boolean value that indicates whether the first
     *     row of provided CSV file is a header line with column names, and should
     *     not be included in the data. Defaults to `true`.
     *
     *     columnNames: (Optional) A list of strings that corresponds to
     *     the CSV column names, in order. If provided, it ignores the column
     *     names inferred from the header row. If not provided, infers the column
     *     names from the first row of the records. If hasHeader is false and
     *     columnNames is not provided, this method throws an error.
     *
     *     columnConfigs: (Optional) A dictionary whose key is column names, value
     *     is an object stating if this column is required, column's data type,
     *     default value, and if this column is label. If provided, keys must
     *     correspond to names provided in columnNames or inferred from the file
     *     header lines. If isLabel is true any column, returns an array of two
     *     items: the first item is a dict of features key/value pairs, the second
     *     item is a dict of labels key/value pairs. If no feature is marked as
     *     label, returns a dict of features only.
     *
     *     configuredColumnsOnly (Optional) If true, only columns provided in
     *     columnConfigs will be parsed and provided during iteration.
     *
     *     delimiter (Optional) The string used to parse each line of the input
     *     file. Defaults to `,`.
     */ constructor(input, csvConfig){
        super();
        this.input = input;
        this.hasHeader = true;
        this.fullColumnNames = null;
        this.columnNamesValidated = false;
        this.columnConfigs = null;
        this.configuredColumnsOnly = false;
        this.delimiter = ",";
        this.delimWhitespace = false;
        this.base = new (0, _textLineDataset.TextLineDataset)(input);
        if (!csvConfig) csvConfig = {};
        this.hasHeader = csvConfig.hasHeader === false ? false : true;
        this.fullColumnNames = csvConfig.columnNames;
        this.columnConfigs = csvConfig.columnConfigs;
        this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;
        if (csvConfig.delimWhitespace) {
            (0, _tfjsCore.util).assert(csvConfig.delimiter == null, ()=>"Delimiter should not be provided when delimWhitespace is true.");
            this.delimWhitespace = true;
            this.delimiter = " ";
        } else this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ",";
    }
    /**
     * Returns column names of the csv dataset. If `configuredColumnsOnly` is
     * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is
     * false and `columnNames` is provided, `columnNames`. If
     * `configuredColumnsOnly` is false and `columnNames` is not provided, return
     * all column names parsed from the csv file. For example usage please go to
     * `tf.data.csv`.
     */ /** @doc {heading: 'Data', subheading: 'Classes'} */ async columnNames() {
        if (!this.columnNamesValidated) await this.setColumnNames();
        return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;
    }
    /* 1) If `columnNames` is provided as string[], use this string[] as output
     * keys in corresponding order. The length must match the number of inferred
     * columns if `hasHeader` is true .
     * 2) If `columnNames` is not provided, parse header line as `columnNames` if
     * hasHeader is true. If `hasHeader` is false, throw an error.
     * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must
     * exist in parsed `columnNames`.
     */ async setColumnNames() {
        const columnNamesFromFile = await this.maybeReadHeaderLine();
        if (!this.fullColumnNames && !columnNamesFromFile) // Throw an error if columnNames is not provided and no header line.
        throw new Error("Column names must be provided if there is no header line.");
        else if (this.fullColumnNames && columnNamesFromFile) // Check provided columnNames match header line.
        (0, _tfjsCore.util).assert(columnNamesFromFile.length === this.fullColumnNames.length, ()=>"The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from " + "file (" + columnNamesFromFile.length.toString() + ").");
        if (!this.fullColumnNames) this.fullColumnNames = columnNamesFromFile;
        // Check if there are duplicate column names.
        const counts = this.fullColumnNames.reduce((countAcc, name)=>{
            countAcc[name] = countAcc[name] + 1 || 1;
            return countAcc;
        }, {});
        const duplicateNames = Object.keys(counts).filter((name)=>counts[name] > 1);
        (0, _tfjsCore.util).assert(duplicateNames.length === 0, ()=>"Duplicate column names found: " + duplicateNames.toString());
        // Check if keys in columnConfigs match columnNames.
        if (this.columnConfigs) for (const key of Object.keys(this.columnConfigs)){
            const index = this.fullColumnNames.indexOf(key);
            if (index === -1) throw new Error('The key "' + key + '" provided in columnConfigs does not match any of the column ' + "names (" + this.fullColumnNames.toString() + ").");
        }
        this.columnNamesValidated = true;
    }
    async maybeReadHeaderLine() {
        if (this.hasHeader) {
            const iter = await this.base.iterator();
            const firstElement = await iter.next();
            if (firstElement.done) throw new Error("No data was found for CSV parsing.");
            const firstLine = firstElement.value;
            const headers = this.parseRow(firstLine, false);
            return headers;
        } else return null;
    }
    async iterator() {
        if (!this.columnNamesValidated) await this.setColumnNames();
        let lines = await this.base.iterator();
        if (this.hasHeader) // We previously read the first line to get the columnNames.
        // Now that we're providing data, skip it.
        lines = lines.skip(1);
        return lines.map((x)=>this.makeDataElement(x));
    }
    makeDataElement(line) {
        const values = this.parseRow(line);
        const features = {};
        const labels = {};
        for(let i = 0; i < this.fullColumnNames.length; i++){
            const key = this.fullColumnNames[i];
            const config = this.columnConfigs ? this.columnConfigs[key] : null;
            if (this.configuredColumnsOnly && !config) continue;
            else {
                const value = values[i];
                let parsedValue = null;
                if (value === "") {
                    // If default value is provided, use it. If default value is not
                    // provided, set as undefined.
                    if (config && config.default !== undefined) parsedValue = config.default;
                    else if (config && (config.required || config.isLabel)) throw new Error(`Required column ${key} is empty in this line: ${line}`);
                    else parsedValue = undefined;
                } else {
                    // A value is present, so parse it based on type
                    const valueAsNum = Number(value);
                    if (isNaN(valueAsNum)) {
                        // The value is a string and this column is declared as boolean
                        // in config, parse it as boolean.
                        if (config && config.dtype === "bool") parsedValue = this.getBoolean(value);
                        else // Set value as string
                        parsedValue = value;
                    } else if (!config || !config.dtype) // If this value is a number and no type config is provided, return
                    // it as number.
                    parsedValue = valueAsNum;
                    else // If this value is a number and data type is provided, parse it
                    // according to provided data type.
                    switch(config.dtype){
                        case "float32":
                            parsedValue = valueAsNum;
                            break;
                        case "int32":
                            parsedValue = Math.floor(valueAsNum);
                            break;
                        case "bool":
                            parsedValue = this.getBoolean(value);
                            break;
                        default:
                            parsedValue = valueAsNum;
                    }
                }
                // Check if this column is label.
                config && config.isLabel ? labels[key] = parsedValue : features[key] = parsedValue;
            }
        }
        // If label exists, return an object of features and labels as {xs:features,
        // ys:labels}, otherwise return features only.
        if (Object.keys(labels).length === 0) return features;
        else return {
            xs: features,
            ys: labels
        };
    }
    getBoolean(value) {
        if (value === "1" || value.toLowerCase() === "true") return 1;
        else return 0;
    }
    // adapted from https://beta.observablehq.com/@mbostock/streaming-csv
    parseRow(line, validateElementCount = true) {
        const result = [];
        let readOffset = 0;
        const readLength = line.length;
        let currentState = STATE_OUT;
        // Goes through the line to parse quote.
        for(let i = 0; i < readLength; i++)switch(currentState){
            // Before enter a new field
            case STATE_OUT:
                switch(line.charAt(i)){
                    // Enter a quoted field
                    case CODE_QUOTE:
                        readOffset = i + 1;
                        currentState = STATE_QUOTE;
                        break;
                    // Read an empty field
                    case this.delimiter:
                        readOffset = i + 1;
                        // If delimiter is white space and configured to collapse
                        // multiple white spaces, ignore this white space.
                        if (this.delimiter === " " && this.delimWhitespace) break;
                        result.push("");
                        currentState = STATE_OUT;
                        break;
                    // Enter an unquoted field
                    default:
                        currentState = STATE_FIELD;
                        readOffset = i;
                        break;
                }
                break;
            // In an unquoted field
            case STATE_FIELD:
                switch(line.charAt(i)){
                    // Exit an unquoted field, add it to result
                    case this.delimiter:
                        result.push(line.substring(readOffset, i));
                        currentState = STATE_OUT;
                        readOffset = i + 1;
                        break;
                    default:
                }
                break;
            // In a quoted field
            case STATE_QUOTE:
                switch(line.charAt(i)){
                    // Read a quote after a quote
                    case CODE_QUOTE:
                        currentState = STATE_QUOTE_AFTER_QUOTE;
                        break;
                    default:
                }
                break;
            // This state means it's right after a second quote in a field
            case STATE_QUOTE_AFTER_QUOTE:
                switch(line.charAt(i)){
                    // Finished a quoted field
                    case this.delimiter:
                        result.push(line.substring(readOffset, i - 1));
                        currentState = STATE_OUT;
                        readOffset = i + 1;
                        break;
                    // Finished a quoted part in a quoted field
                    case CODE_QUOTE:
                        currentState = STATE_QUOTE;
                        break;
                    // In a quoted part in a quoted field
                    default:
                        currentState = STATE_WITHIN_QUOTE_IN_QUOTE;
                        break;
                }
                break;
            case STATE_WITHIN_QUOTE_IN_QUOTE:
                switch(line.charAt(i)){
                    // Exit a quoted part in a quoted field
                    case CODE_QUOTE:
                        currentState = STATE_QUOTE;
                        break;
                    default:
                }
                break;
            default:
        }
        // Adds last item based on if it is quoted.
        if (currentState === STATE_QUOTE_AFTER_QUOTE) result.push(line.substring(readOffset, readLength - 1));
        else result.push(line.substring(readOffset));
        // Check if each row has the same number of elements as column names.
        if (validateElementCount && result.length !== this.fullColumnNames.length) throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${result}`);
        return result;
    }
}

},{"@tensorflow/tfjs-core":"2votT","../dataset":"4dvRW","./text_line_dataset":"2AA44","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2AA44":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Represents a potentially large collection of text lines.
 *
 * The results are not batched.
 */ parcelHelpers.export(exports, "TextLineDataset", ()=>TextLineDataset);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _dataset = require("../dataset");
class TextLineDataset extends (0, _dataset.Dataset) {
    /**
     * Create a `TextLineDataset`.
     *
     * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.
     */ constructor(input){
        super();
        this.input = input;
    }
    async iterator() {
        const inputIterator = await this.input.iterator();
        const utf8Iterator = inputIterator.decodeUTF8();
        const lineIterator = utf8Iterator.split("\n").map((line)=>{
            // Windows/DOS format text file has extra line breaker at the end of line.
            if (line.endsWith("\r")) line = line.slice(0, -1);
            return line;
        });
        return lineIterator;
    }
}

},{"../dataset":"4dvRW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"814R1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL
 * or local path if it's in Node environment.
 *
 * Note: If isLabel in columnConfigs is `true` for at least one column, the
 * element in returned `CSVDataset` will be an object of
 * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys
 * is a dict of labels key/value pairs. If no column is marked as label,
 * returns a dict of features only.
 *
 * ```js
 * const csvUrl =
 * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';
 *
 * async function run() {
 *   // We want to predict the column "medv", which represents a median value of
 *   // a home (in $1000s), so we mark it as a label.
 *   const csvDataset = tf.data.csv(
 *     csvUrl, {
 *       columnConfigs: {
 *         medv: {
 *           isLabel: true
 *         }
 *       }
 *     });
 *
 *   // Number of features is the number of column names minus one for the label
 *   // column.
 *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;
 *
 *   // Prepare the Dataset for training.
 *   const flattenedDataset =
 *     csvDataset
 *     .map(({xs, ys}) =>
 *       {
 *         // Convert xs(features) and ys(labels) from object form (keyed by
 *         // column name) to array form.
 *         return {xs:Object.values(xs), ys:Object.values(ys)};
 *       })
 *     .batch(10);
 *
 *   // Define the model.
 *   const model = tf.sequential();
 *   model.add(tf.layers.dense({
 *     inputShape: [numOfFeatures],
 *     units: 1
 *   }));
 *   model.compile({
 *     optimizer: tf.train.sgd(0.000001),
 *     loss: 'meanSquaredError'
 *   });
 *
 *   // Fit the model using the prepared Dataset
 *   return model.fitDataset(flattenedDataset, {
 *     epochs: 10,
 *     callbacks: {
 *       onEpochEnd: async (epoch, logs) => {
 *         console.log(epoch + ':' + logs.loss);
 *       }
 *     }
 *   });
 * }
 *
 * await run();
 * ```
 *
 * @param source URL or local path to get CSV file. If it's a local path, it
 * must have prefix `file://` and it only works in node environment.
 * @param csvConfig (Optional) A CSVConfig object that contains configurations
 *     of reading and decoding from CSV file(s).
 */ /**
 * @doc {
 *   heading: 'Data',
 *   subheading: 'Creation',
 *   namespace: 'data',
 *   configParamIndices: [1]
 *  }
 */ parcelHelpers.export(exports, "csv", ()=>csv);
/**
 * Create a `Dataset` that produces each element by calling a provided function.
 *
 * Note that repeated iterations over this `Dataset` may produce different
 * results, because the function will be called anew for each element of each
 * iteration.
 *
 * Also, beware that the sequence of calls to this function may be out of order
 * in time with respect to the logical order of the Dataset. This is due to the
 * asynchronous lazy nature of stream processing, and depends on downstream
 * transformations (e.g. .shuffle()). If the provided function is pure, this is
 * no problem, but if it is a closure over a mutable state (e.g., a traversal
 * pointer), then the order of the produced elements may be scrambled.
 *
 * ```js
 * let i = -1;
 * const func = () =>
 *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};
 * const ds = tf.data.func(func);
 * await ds.forEachAsync(e => console.log(e));
 * ```
 *
 * @param f A function that produces one data element on each call.
 */ parcelHelpers.export(exports, "func", ()=>func);
/**
 * Create a `Dataset` that produces each element from provided JavaScript
 * generator, which is a function*
 * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),
 * or a function that returns an
 * iterator
 * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).
 *
 * The returned iterator should have `.next()` function that returns element in
 * format of `{value: TensorContainer, done:boolean}`.
 *
 * Example of creating a dataset from an iterator factory:
 * ```js
 * function makeIterator() {
 *   const numElements = 10;
 *   let index = 0;
 *
 *   const iterator = {
 *     next: () => {
 *       let result;
 *       if (index < numElements) {
 *         result = {value: index, done: false};
 *         index++;
 *         return result;
 *       }
 *       return {value: index, done: true};
 *     }
 *   };
 *   return iterator;
 * }
 * const ds = tf.data.generator(makeIterator);
 * await ds.forEachAsync(e => console.log(e));
 * ```
 *
 * Example of creating a dataset from a generator:
 * ```js
 * function* dataGenerator() {
 *   const numElements = 10;
 *   let index = 0;
 *   while (index < numElements) {
 *     const x = index;
 *     index++;
 *     yield x;
 *   }
 * }
 *
 * const ds = tf.data.generator(dataGenerator);
 * await ds.forEachAsync(e => console.log(e));
 * ```
 *
 * @param generator A Javascript generator function that returns a JavaScript
 *     iterator.
 */ /**
 * @doc {
 *   heading: 'Data',
 *   subheading: 'Creation',
 *   namespace: 'data',
 *   configParamIndices: [1]
 *  }
 */ parcelHelpers.export(exports, "generator", ()=>generator);
/**
 * Create an iterator that generate `Tensor`s from webcam video stream. This API
 * only works in Browser environment when the device has webcam.
 *
 * Note: this code snippet only works when the device has a webcam. It will
 * request permission to open the webcam when running.
 * ```js
 * const videoElement = document.createElement('video');
 * videoElement.width = 100;
 * videoElement.height = 100;
 * const cam = await tf.data.webcam(videoElement);
 * const img = await cam.capture();
 * img.print();
 * cam.stop();
 * ```
 *
 * @param webcamVideoElement A `HTMLVideoElement` used to play video from
 *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will
 *     be created. In that case, `resizeWidth` and `resizeHeight` must be
 *     provided to set the generated tensor shape.
 * @param webcamConfig A `WebcamConfig` object that contains configurations of
 *     reading and manipulating data from webcam video stream.
 */ /**
 * @doc {
 *   heading: 'Data',
 *   subheading: 'Creation',
 *   namespace: 'data',
 *   ignoreCI: true
 *  }
 */ parcelHelpers.export(exports, "webcam", ()=>webcam);
/**
 * Create an iterator that generate frequency-domain spectrogram `Tensor`s from
 * microphone audio stream with browser's native FFT. This API only works in
 * browser environment when the device has microphone.
 *
 * Note: this code snippet only works when the device has a microphone. It will
 * request permission to open the microphone when running.
 * ```js
 * const mic = await tf.data.microphone({
 *   fftSize: 1024,
 *   columnTruncateLength: 232,
 *   numFramesPerSpectrogram: 43,
 *   sampleRateHz:44100,
 *   includeSpectrogram: true,
 *   includeWaveform: true
 * });
 * const audioData = await mic.capture();
 * const spectrogramTensor = audioData.spectrogram;
 * spectrogramTensor.print();
 * const waveformTensor = audioData.waveform;
 * waveformTensor.print();
 * mic.stop();
 * ```
 *
 * @param microphoneConfig A `MicrophoneConfig` object that contains
 *     configurations of reading audio data from microphone.
 */ /**
 * @doc {
 *   heading: 'Data',
 *   subheading: 'Creation',
 *   namespace: 'data',
 *   ignoreCI: true
 *  }
 */ parcelHelpers.export(exports, "microphone", ()=>microphone);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _dataset = require("./dataset");
var _csvDataset = require("./datasets/csv_dataset");
var _lazyIterator = require("./iterators/lazy_iterator");
var _microphoneIterator = require("./iterators/microphone_iterator");
var _webcamIterator = require("./iterators/webcam_iterator");
var _urlDataSource = require("./sources/url_data_source");
function csv(source, csvConfig = {}) {
    return new (0, _csvDataset.CSVDataset)(new (0, _urlDataSource.URLDataSource)(source), csvConfig);
}
function func(f) {
    const iter = (0, _lazyIterator.iteratorFromFunction)(f);
    return (0, _dataset.datasetFromIteratorFn)(async ()=>iter);
}
function generator(generator) {
    return (0, _dataset.datasetFromIteratorFn)(async ()=>{
        const gen = await generator();
        return (0, _lazyIterator.iteratorFromFunction)(()=>gen.next());
    });
}
async function webcam(webcamVideoElement, webcamConfig) {
    return (0, _webcamIterator.WebcamIterator).create(webcamVideoElement, webcamConfig);
}
async function microphone(microphoneConfig) {
    return (0, _microphoneIterator.MicrophoneIterator).create(microphoneConfig);
}

},{"./dataset":"4dvRW","./datasets/csv_dataset":"4dv1S","./iterators/lazy_iterator":"bQ73n","./iterators/microphone_iterator":"ezFbM","./iterators/webcam_iterator":"93uQh","./sources/url_data_source":"3aHDT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ezFbM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Provide a stream of tensors from microphone audio stream. The tensors are
 * representing audio data as frequency-domain spectrogram generated with
 * browser's native FFT. Tensors representing time-domain waveform is available
 * based on configuration. Only works in browser environment.
 */ parcelHelpers.export(exports, "MicrophoneIterator", ()=>MicrophoneIterator);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _lazyIterator = require("./lazy_iterator");
class MicrophoneIterator extends (0, _lazyIterator.LazyIterator) {
    constructor(microphoneConfig){
        super();
        this.microphoneConfig = microphoneConfig;
        this.isClosed = false;
        this.fftSize = microphoneConfig.fftSize || 1024;
        const fftSizeLog2 = Math.log2(this.fftSize);
        if (this.fftSize < 0 || fftSizeLog2 < 4 || fftSizeLog2 > 14 || !Number.isInteger(fftSizeLog2)) throw new Error(`Invalid fftSize: it must be a power of 2 between ` + `2 to 4 and 2 to 14, but got ${this.fftSize}`);
        this.numFrames = microphoneConfig.numFramesPerSpectrogram || 43;
        this.sampleRateHz = microphoneConfig.sampleRateHz;
        this.columnTruncateLength = microphoneConfig.columnTruncateLength || this.fftSize;
        this.audioTrackConstraints = microphoneConfig.audioTrackConstraints;
        this.smoothingTimeConstant = microphoneConfig.smoothingTimeConstant || 0;
        this.includeSpectrogram = microphoneConfig.includeSpectrogram === false ? false : true;
        this.includeWaveform = microphoneConfig.includeWaveform === true ? true : false;
        if (!this.includeSpectrogram && !this.includeWaveform) throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
    }
    summary() {
        return `microphone`;
    }
    // Construct a MicrophoneIterator and start the audio stream.
    static async create(microphoneConfig = {}) {
        if ((0, _tfjsCore.env)().get("IS_NODE")) throw new Error("microphone API is only supported in browser environment.");
        const microphoneIterator = new MicrophoneIterator(microphoneConfig);
        // Call async function start() to initialize the audio stream.
        await microphoneIterator.start();
        return microphoneIterator;
    }
    // Start the audio stream and FFT.
    async start() {
        try {
            this.stream = await navigator.mediaDevices.getUserMedia({
                audio: this.audioTrackConstraints == null ? true : this.audioTrackConstraints,
                video: false
            });
        } catch (e) {
            throw new Error(`Error thrown while initializing video stream: ${e.message}`);
        }
        if (!this.stream) throw new Error("Could not obtain audio from microphone.");
        const ctxConstructor = // tslint:disable-next-line:no-any
        window.AudioContext || window.webkitAudioContext;
        this.audioContext = new ctxConstructor();
        if (!this.sampleRateHz) // If sample rate is not provided, use the available sample rate on
        // device.
        this.sampleRateHz = this.audioContext.sampleRate;
        else if (this.audioContext.sampleRate !== this.sampleRateHz) throw new Error(`Mismatch in sampling rate: ` + `Expected: ${this.sampleRateHz}; ` + `Actual: ${this.audioContext.sampleRate}`);
        const streamSource = this.audioContext.createMediaStreamSource(this.stream);
        this.analyser = this.audioContext.createAnalyser();
        this.analyser.fftSize = this.fftSize * 2;
        this.analyser.smoothingTimeConstant = this.smoothingTimeConstant;
        streamSource.connect(this.analyser);
        this.freqData = new Float32Array(this.fftSize);
        this.timeData = new Float32Array(this.fftSize);
        return;
    }
    async next() {
        if (this.isClosed) return {
            value: null,
            done: true
        };
        let spectrogramTensor;
        let waveformTensor;
        const audioDataQueue = await this.getAudioData();
        if (this.includeSpectrogram) {
            const freqData = this.flattenQueue(audioDataQueue.freqDataQueue);
            spectrogramTensor = this.getTensorFromAudioDataArray(freqData, [
                this.numFrames,
                this.columnTruncateLength,
                1
            ]);
        }
        if (this.includeWaveform) {
            const timeData = this.flattenQueue(audioDataQueue.timeDataQueue);
            waveformTensor = this.getTensorFromAudioDataArray(timeData, [
                this.numFrames * this.fftSize,
                1
            ]);
        }
        return {
            value: {
                "spectrogram": spectrogramTensor,
                "waveform": waveformTensor
            },
            done: false
        };
    }
    // Capture one result from the audio stream, and extract the value from
    // iterator.next() result.
    async capture() {
        return (await this.next()).value;
    }
    async getAudioData() {
        const freqDataQueue = [];
        const timeDataQueue = [];
        let currentFrames = 0;
        return new Promise((resolve)=>{
            const intervalID = setInterval(()=>{
                if (this.includeSpectrogram) {
                    this.analyser.getFloatFrequencyData(this.freqData);
                    // If the audio stream is initializing, return empty queue.
                    if (this.freqData[0] === -Infinity) resolve({
                        freqDataQueue,
                        timeDataQueue
                    });
                    freqDataQueue.push(this.freqData.slice(0, this.columnTruncateLength));
                }
                if (this.includeWaveform) {
                    this.analyser.getFloatTimeDomainData(this.timeData);
                    timeDataQueue.push(this.timeData.slice());
                }
                // Clean interval and return when all frames have been collected
                if (++currentFrames === this.numFrames) {
                    clearInterval(intervalID);
                    resolve({
                        freqDataQueue,
                        timeDataQueue
                    });
                }
            }, this.fftSize / this.sampleRateHz * 1e3);
        });
    }
    // Stop the audio stream and pause the iterator.
    stop() {
        if (!this.isClosed) {
            this.isClosed = true;
            this.analyser.disconnect();
            this.audioContext.close();
            if (this.stream != null && this.stream.getTracks().length > 0) this.stream.getTracks()[0].stop();
        }
    }
    // Override toArray() function to prevent collecting.
    toArray() {
        throw new Error("Can not convert infinite audio stream to array.");
    }
    // Return audio sampling rate in Hz
    getSampleRate() {
        return this.sampleRateHz;
    }
    flattenQueue(queue) {
        const frameSize = queue[0].length;
        const freqData = new Float32Array(queue.length * frameSize);
        queue.forEach((data, i)=>freqData.set(data, i * frameSize));
        return freqData;
    }
    getTensorFromAudioDataArray(freqData, shape) {
        const vals = new Float32Array((0, _tfjsCore.util).sizeFromShape(shape));
        // If the data is less than the output shape, the rest is padded with zeros.
        vals.set(freqData, vals.length - freqData.length);
        return (0, _tfjsCore.tensor)(vals, shape);
    }
}

},{"@tensorflow/tfjs-core":"2votT","./lazy_iterator":"bQ73n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"93uQh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Provide a stream of image tensors from webcam video stream. Only works in
 * browser environment.
 */ parcelHelpers.export(exports, "WebcamIterator", ()=>WebcamIterator);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _lazyIterator = require("./lazy_iterator");
class WebcamIterator extends (0, _lazyIterator.LazyIterator) {
    constructor(webcamVideoElement, webcamConfig){
        super();
        this.webcamVideoElement = webcamVideoElement;
        this.webcamConfig = webcamConfig;
        this.isClosed = true;
        this.resize = false;
        if (this.needToResize()) {
            this.resize = true;
            this.cropSize = [
                this.webcamConfig.resizeHeight,
                this.webcamConfig.resizeWidth
            ];
            this.cropBoxInd = (0, _tfjsCore.tensor1d)([
                0
            ], "int32");
            if (this.webcamConfig.centerCrop) {
                // Calculate the box based on resizing shape.
                const widthCroppingRatio = this.webcamConfig.resizeWidth * 1.0 / this.webcamVideoElement.width;
                const heightCroppingRatio = this.webcamConfig.resizeHeight * 1.0 / this.webcamVideoElement.height;
                const widthCropStart = (1 - widthCroppingRatio) / 2;
                const heightCropStart = (1 - heightCroppingRatio) / 2;
                const widthCropEnd = widthCropStart + widthCroppingRatio;
                const heightCropEnd = heightCroppingRatio + heightCropStart;
                this.cropBox = (0, _tfjsCore.tensor2d)([
                    heightCropStart,
                    widthCropStart,
                    heightCropEnd,
                    widthCropEnd
                ], [
                    1,
                    4
                ]);
            } else this.cropBox = (0, _tfjsCore.tensor2d)([
                0,
                0,
                1,
                1
            ], [
                1,
                4
            ]);
        }
    }
    summary() {
        return `webcam`;
    }
    // Construct a WebcamIterator and start it's video stream.
    static async create(webcamVideoElement, webcamConfig = {}) {
        if ((0, _tfjsCore.env)().get("IS_NODE")) throw new Error("tf.data.webcam is only supported in browser environment.");
        if (!webcamVideoElement) {
            // If webcam video element is not provided, create a hidden video element
            // with provided width and height.
            webcamVideoElement = document.createElement("video");
            if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
            webcamVideoElement.width = webcamConfig.resizeWidth;
            webcamVideoElement.height = webcamConfig.resizeHeight;
        }
        const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig);
        // Call async function to initialize the video stream.
        await webcamIterator.start();
        return webcamIterator;
    }
    // Async function to start video stream.
    async start() {
        if (this.webcamConfig.facingMode) (0, _tfjsCore.util).assert(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", ()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. ` + `Please provide 'user' or 'environment'`);
        try {
            this.stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    deviceId: this.webcamConfig.deviceId,
                    facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user",
                    width: this.webcamVideoElement.width,
                    height: this.webcamVideoElement.height
                }
            });
        } catch (e) {
            // Modify the error message but leave the stack trace intact
            e.message = `Error thrown while initializing video stream: ${e.message}`;
            throw e;
        }
        if (!this.stream) throw new Error("Could not obtain video from webcam.");
        // Older browsers may not have srcObject
        try {
            this.webcamVideoElement.srcObject = this.stream;
        } catch (error) {
            console.log(error);
            this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
        }
        // Start the webcam video stream
        this.webcamVideoElement.play();
        this.isClosed = false;
        return new Promise((resolve)=>{
            // Add event listener to make sure the webcam has been fully initialized.
            this.webcamVideoElement.onloadedmetadata = ()=>{
                resolve();
            };
        });
    }
    async next() {
        if (this.isClosed) return {
            value: null,
            done: true
        };
        let img;
        try {
            img = (0, _tfjsCore.browser).fromPixels(this.webcamVideoElement);
        } catch (e) {
            throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`);
        }
        if (this.resize) try {
            return {
                value: this.cropAndResizeFrame(img),
                done: false
            };
        } catch (e1) {
            throw new Error(`Error thrown cropping the video: ${e1.message}`);
        } finally{
            img.dispose();
        }
        else return {
            value: img,
            done: false
        };
    }
    needToResize() {
        // If resizeWidth and resizeHeight are provided, and different from the
        // width and height of original HTMLVideoElement, then resizing and cropping
        // is required.
        if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) return true;
        return false;
    }
    // Cropping and resizing each frame based on config
    cropAndResizeFrame(img) {
        return (0, _tfjsCore.tidy)(()=>{
            const expandedImage = img.toFloat().expandDims(0);
            let resizedImage;
            resizedImage = (0, _tfjsCore.image).cropAndResize(expandedImage, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear");
            // Extract image from batch cropping.
            const shape = resizedImage.shape;
            return resizedImage.reshape(shape.slice(1));
        });
    }
    // Capture one frame from the video stream, and extract the value from
    // iterator.next() result.
    async capture() {
        return (await this.next()).value;
    }
    // Stop the video stream and pause webcam iterator.
    stop() {
        const tracks = this.stream.getTracks();
        tracks.forEach((track)=>track.stop());
        try {
            this.webcamVideoElement.srcObject = null;
        } catch (error) {
            console.log(error);
            this.webcamVideoElement.src = null;
        }
        this.isClosed = true;
    }
    // Override toArray() function to prevent collecting.
    toArray() {
        throw new Error("Can not convert infinite video stream to array.");
    }
}

},{"@tensorflow/tfjs-core":"2votT","./lazy_iterator":"bQ73n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3aHDT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
 * Represents a URL readable as a stream of binary data chunks.
 */ parcelHelpers.export(exports, "URLDataSource", ()=>URLDataSource);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _datasource = require("../datasource");
var _urlChunkIterator = require("../iterators/url_chunk_iterator");
var _sourceUtil = require("../util/source_util");
var _fileDataSource = require("./file_data_source");
class URLDataSource extends (0, _datasource.DataSource) {
    /**
     * Create a `URLDataSource`.
     *
     * @param url A source URL string, or a `Request` object.
     * @param options Options passed to the underlying `FileChunkIterator`s,
     *   such as {chunksize: 1024}.
     */ constructor(url, fileOptions = {}){
        super();
        this.url = url;
        this.fileOptions = fileOptions;
    }
    // TODO(soergel): provide appropriate caching options.  Currently this
    // will download the URL anew for each call to iterator().  Since we have
    // to treat the downloaded file as a blob/buffer anyway, we may as well retain
    // it-- but that raises GC issues.  Also we may want a persistent disk cache.
    async iterator() {
        if ((0, _sourceUtil.isLocalPath)(this.url)) return new (0, _fileDataSource.FileDataSource)(this.url, this.fileOptions).iterator();
        else return (0, _urlChunkIterator.urlChunkIterator)(this.url, this.fileOptions);
    }
}

},{"../datasource":"fSFRE","../iterators/url_chunk_iterator":"elnOG","../util/source_util":"efYXr","./file_data_source":"ixSKZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fSFRE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ /**
 * Represents a data source readable as a stream of binary data chunks.
 *
 * Because `Dataset`s can be read repeatedly (via `Dataset.iterator()`), this
 * provides a means to repeatedly create streams from the underlying data
 * sources.
 */ parcelHelpers.export(exports, "DataSource", ()=>DataSource) // TODO(soergel): consider convenience factory functions here
 // in combination with chainable source->dataset above, e.g.:
 // tf.data.url(...).asCsvDataset().shuffle().batch()
;
class DataSource {
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"elnOG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Provide a stream of chunks from a URL.
 *
 * Note this class first downloads the entire file into memory before providing
 * the first element from the stream.  This is because the Fetch API does not
 * yet reliably provide a reader stream for the response body.
 */ parcelHelpers.export(exports, "urlChunkIterator", ()=>urlChunkIterator);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _fileChunkIterator = require("./file_chunk_iterator");
async function urlChunkIterator(url, options = {}) {
    let urlString;
    let requestInit;
    if (typeof url === "string") urlString = url;
    else {
        urlString = url.url;
        requestInit = getRequestInitFromRequest(url);
    }
    const response = await (0, _tfjsCore.util).fetch(urlString, requestInit);
    if (response.ok) {
        const uint8Array = new Uint8Array(await response.arrayBuffer());
        return new (0, _fileChunkIterator.FileChunkIterator)(uint8Array, options);
    } else throw new Error(response.statusText);
}
// Generate RequestInit from Request to match tf.util.fetch signature.
const getRequestInitFromRequest = (request)=>{
    const init = {
        method: request.method,
        headers: request.headers,
        body: request.body,
        mode: request.mode,
        credentials: request.credentials,
        cache: request.cache,
        redirect: request.redirect,
        referrer: request.referrer,
        integrity: request.integrity
    };
    return init;
};

},{"@tensorflow/tfjs-core":"2votT","./file_chunk_iterator":"dEmiy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dEmiy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Provide a stream of chunks from a File, Blob, or Uint8Array.
 * @param file The source File, Blob or Uint8Array.
 * @param options Optional settings controlling file reading.
 * @returns a lazy Iterator of Uint8Arrays containing sequential chunks of the
 *   input File, Blob or Uint8Array.
 */ parcelHelpers.export(exports, "FileChunkIterator", ()=>FileChunkIterator);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ // inspired by https://github.com/maxogden/filereader-stream
var _tfjsCore = require("@tensorflow/tfjs-core");
var _byteChunkIterator = require("./byte_chunk_iterator");
class FileChunkIterator extends (0, _byteChunkIterator.ByteChunkIterator) {
    constructor(file, options = {}){
        super();
        this.file = file;
        this.options = options;
        (0, _tfjsCore.util).assert(file instanceof Uint8Array || ((0, _tfjsCore.env)().get("IS_BROWSER") ? file instanceof File || file instanceof Blob : false), ()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.");
        this.offset = options.offset || 0;
        // default 1MB chunk has tolerable perf on large files
        this.chunkSize = options.chunkSize || 1048576;
    }
    summary() {
        return `FileChunks ${this.file}`;
    }
    async next() {
        if (this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size)) return {
            value: null,
            done: true
        };
        const chunk = new Promise((resolve, reject)=>{
            const end = this.offset + this.chunkSize;
            if (this.file instanceof Uint8Array) // Note if end > this.uint8Array.byteLength, we just get a small last
            // chunk.
            resolve(new Uint8Array(this.file.slice(this.offset, end)));
            else {
                // This branch assumes that this.file type is File or Blob, which
                // means it is in the browser environment.
                // TODO(soergel): is this a performance issue?
                const fileReader = new FileReader();
                fileReader.onload = (event)=>{
                    let data = fileReader.result;
                    // Not sure we can trust the return type of
                    // FileReader.readAsArrayBuffer See e.g.
                    // https://github.com/node-file-api/FileReader/issues/2
                    if (data instanceof ArrayBuffer) data = new Uint8Array(data);
                    if (!(data instanceof Uint8Array)) return reject(new TypeError("FileReader returned unknown type."));
                    resolve(data);
                };
                fileReader.onabort = (event)=>{
                    return reject(new Error("Aborted"));
                };
                fileReader.onerror = (event)=>{
                    return reject(new Error(event.type));
                };
                // TODO(soergel): better handle onabort, onerror
                // Note if end > this.file.size, we just get a small last chunk.
                const slice = this.file.slice(this.offset, end);
                // We can't use readAsText here (even if we know the file is text)
                // because the slice boundary may fall within a multi-byte character.
                fileReader.readAsArrayBuffer(slice);
            }
            this.offset = end;
        });
        return {
            value: await chunk,
            done: false
        };
    }
}

},{"@tensorflow/tfjs-core":"2votT","./byte_chunk_iterator":"dBtme","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBtme":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ByteChunkIterator", ()=>ByteChunkIterator);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _lazyIterator = require("./lazy_iterator");
var _stringIterator = require("./string_iterator");
var Buffer = require("buffer").Buffer;
class ByteChunkIterator extends (0, _lazyIterator.LazyIterator) {
    /**
     * Decode a stream of UTF8-encoded byte arrays to a stream of strings.
     *
     * The byte arrays producetd from the ByteChunkIterator on which this is
     * called will be interpreted as concatenated.  No assumptions are made about
     * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a
     * character may span the boundary between chunks.  This naturally happens,
     * for instance, when reading fixed-size byte arrays from a file.
     */ decodeUTF8() {
        return new Utf8Iterator(this);
    }
}
// ============================================================================
// The following private classes serve to implement the chainable methods
// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,
// due to resulting trouble with circular imports.
// ============================================================================
// We wanted multiple inheritance, e.g.
//   class Utf8Iterator extends QueueIterator<string>, StringIterator
// but the TypeScript mixin approach is a bit hacky, so we take this adapter
// approach instead.
class Utf8Iterator extends (0, _stringIterator.StringIterator) {
    constructor(upstream){
        super();
        this.upstream = upstream;
        this.impl = new Utf8IteratorImpl(upstream);
    }
    summary() {
        return this.impl.summary();
    }
    async next() {
        return this.impl.next();
    }
}
/**
 * Decode a stream of UTF8-encoded byte arrays to a stream of strings.
 *
 * This is tricky because the incoming byte array boundaries may disrupt a
 * multi-byte UTF8 character. Thus any incomplete character data at the end of
 * a chunk must be carried over and prepended to the next chunk before
 * decoding. Luckily with native decoder, TextDecoder in browser and
 * string_decoder in node, byte array boundaries are handled automatically.
 *
 * In the context of an input pipeline for machine learning, UTF8 decoding is
 * needed to parse text files containing training examples or prediction
 * requests (e.g., formatted as CSV or JSON). We cannot use the built-in
 * decoding provided by FileReader.readAsText() because here we are in a
 * streaming context, which FileReader does not support.
 *
 * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded
 *   text, which should be interpreted as concatenated.  No assumptions are
 *   made about the boundaries of the incoming chunks, so a multi-byte UTF8
 *   encoding of a character may span the boundary between chunks.  This
 *   naturally happens, for instance, when reading fixed-size byte arrays from a
 *   file.
 */ class Utf8IteratorImpl extends (0, _lazyIterator.OneToManyIterator) {
    constructor(upstream){
        super();
        this.upstream = upstream;
        if ((0, _tfjsCore.env)().get("IS_BROWSER")) this.decoder = new TextDecoder("utf-8");
        else {
            // tslint:disable-next-line:no-require-imports
            const { StringDecoder  } = require("string_decoder");
            this.decoder = new StringDecoder("utf8");
        }
    }
    summary() {
        return `${this.upstream.summary()} -> Utf8`;
    }
    async pump() {
        const chunkResult = await this.upstream.next();
        let chunk;
        if (chunkResult.done) return false;
        else chunk = chunkResult.value;
        let text;
        if ((0, _tfjsCore.env)().get("IS_BROWSER")) text = this.decoder.decode(chunk, {
            stream: true
        });
        else text = this.decoder.write(Buffer.from(chunk.buffer));
        this.outputQueue.push(text);
        return true;
    }
}

},{"@tensorflow/tfjs-core":"2votT","./lazy_iterator":"bQ73n","./string_iterator":"eiqcR","buffer":"fCgem","string_decoder":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eiqcR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringIterator", ()=>StringIterator);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _lazyIterator = require("./lazy_iterator");
class StringIterator extends (0, _lazyIterator.LazyIterator) {
    /**
     * Splits a string stream on a given separator.
     *
     * It is assumed that the incoming chunk boundaries have no semantic meaning,
     * so conceptually the incoming stream is treated simply as the concatenation
     * of its elements.
     *
     * The outgoing stream provides chunks corresponding to the results of the
     * standard string split() operation (even if such a chunk spanned incoming
     * chunks).  The separators are not included.
     *
     * A typical usage is to split a text file (represented as a stream with
     * arbitrary chunk boundaries) into lines.
     *
     * @param upstream A readable stream of strings that can be treated as
     *   concatenated.
     * @param separator A character to split on.
     */ split(separator) {
        return new SplitIterator(this, separator);
    }
}
// ============================================================================
// The following private classes serve to implement the chainable methods
// on StringIterator.  Unfortunately they can't be placed in separate files, due
// to resulting trouble with circular imports.
// ============================================================================
// We wanted multiple inheritance, e.g.
//   class SplitIterator extends QueueIterator<string>, StringIterator
// but the TypeScript mixin approach is a bit hacky, so we take this adapter
// approach instead.
class SplitIterator extends StringIterator {
    constructor(upstream, separator){
        super();
        this.upstream = upstream;
        this.impl = new SplitIteratorImpl(upstream, separator);
    }
    summary() {
        return this.impl.summary();
    }
    async next() {
        return this.impl.next();
    }
}
class SplitIteratorImpl extends (0, _lazyIterator.OneToManyIterator) {
    constructor(upstream, separator){
        super();
        this.upstream = upstream;
        this.separator = separator;
        // A partial string at the end of an upstream chunk
        this.carryover = "";
    }
    summary() {
        return `${this.upstream.summary()} -> Split('${this.separator}')`;
    }
    async pump() {
        const chunkResult = await this.upstream.next();
        if (chunkResult.done) {
            if (this.carryover === "") return false;
            // Pretend that the pump succeeded in order to emit the small last batch.
            // The next pump() call will actually fail.
            this.outputQueue.push(this.carryover);
            this.carryover = "";
            return true;
        }
        const lines = chunkResult.value.split(this.separator);
        // Note the behavior: " ab ".split(' ') === ['', 'ab', '']
        // Thus the carryover may be '' if the separator falls on a chunk
        // boundary; this produces the correct result.
        lines[0] = this.carryover + lines[0];
        for (const line of lines.slice(0, -1))this.outputQueue.push(line);
        this.carryover = lines[lines.length - 1];
        return true;
    }
}

},{"./lazy_iterator":"bQ73n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"efYXr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ // Skip tslint any type check cause this method is aiming to check type of
// input.
// tslint:disable-next-line:no-any
parcelHelpers.export(exports, "isLocalPath", ()=>isLocalPath);
function isLocalPath(source) {
    return typeof source === "string" && source.substr(0, 7) === "file://";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ixSKZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Represents a file, blob, or Uint8Array readable as a stream of binary data
 * chunks.
 */ parcelHelpers.export(exports, "FileDataSource", ()=>FileDataSource);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _datasource = require("../datasource");
var _fileChunkIterator = require("../iterators/file_chunk_iterator");
var _sourceUtil = require("../util/source_util");
class FileDataSource extends (0, _datasource.DataSource) {
    /**
     * Create a `FileDataSource`.
     *
     * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to
     *     read. Local file only works in node environment.
     * @param options Options passed to the underlying `FileChunkIterator`s,
     *   such as {chunksize: 1024}.
     */ constructor(input, options = {}){
        super();
        this.input = input;
        this.options = options;
    }
    async iterator() {
        if ((0, _sourceUtil.isLocalPath)(this.input) && (0, _tfjsCore.env)().get("IS_NODE")) {
            // tslint:disable-next-line:no-require-imports
            const fs = require("fs");
            this.input = fs.readFileSync(this.input.substr(7));
        }
        // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming
        // with file in browser.
        return new (0, _fileChunkIterator.FileChunkIterator)(this.input, this.options);
    }
}

},{"@tensorflow/tfjs-core":"2votT","../datasource":"fSFRE","../iterators/file_chunk_iterator":"dEmiy","../util/source_util":"efYXr","fs":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3MzF8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
const version = "2.0.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"alTEC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _base = require("./base");
var _registerAllKernels = require("./register_all_kernels");
// All exports from this package should be in base.
parcelHelpers.exportAll(_base, exports);
// Side effects for default initialization of MathBackendCPU
(0, _tfjsCore.registerBackend)("cpu", ()=>new (0, _base.MathBackendCPU)(), 1 /* priority */ );

},{"@tensorflow/tfjs-core":"2votT","./base":"gHXpH","./register_all_kernels":"5JcZT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHXpH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MathBackendCPU", ()=>(0, _backendCpu.MathBackendCPU));
parcelHelpers.export(exports, "version_cpu", ()=>(0, _version.version));
parcelHelpers.export(exports, "shared", ()=>_shared);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /*
 * base.ts contains all the exports from tfjs-backend-cpu
 * that do not trigger side effects.
 */ var _shared = require("./shared");
var _backendCpu = require("./backend_cpu");
var _version = require("./version");

},{"./shared":"bDxeV","./backend_cpu":"grqpM","./version":"iQSdN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bDxeV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Shared kernel impls for use in other backends.
parcelHelpers.export(exports, "maxImpl", ()=>(0, _maxImpl.maxImpl));
parcelHelpers.export(exports, "transposeImpl", ()=>(0, _transposeImpl.transposeImpl));
var _maxImpl = require("./kernels/Max_impl");
var _transposeImpl = require("./kernels/Transpose_impl");

},{"./kernels/Max_impl":"hvZsa","./kernels/Transpose_impl":"fwwXp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hvZsa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxImpl", ()=>maxImpl);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function maxImpl(aVals, reduceSize, outShape, dtype) {
    const vals = (0, _tfjsCore.util).getTypedArrayFromDType(dtype, (0, _tfjsCore.util).sizeFromShape(outShape));
    for(let i = 0; i < vals.length; ++i){
        const offset = i * reduceSize;
        let max = aVals[offset];
        for(let j = 0; j < reduceSize; ++j){
            const value = aVals[offset + j];
            if (value > max) max = value;
        }
        vals[i] = max;
    }
    return vals;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fwwXp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transposeImpl", ()=>transposeImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function transposeImpl(xVals, xShape, dtype, perm, newShape) {
    const xRank = xShape.length;
    const xSize = (0, _tfjsCore.util).sizeFromShape(xShape);
    const xStrides = (0, _tfjsCore.util).computeStrides(xShape);
    const newStrides = (0, _tfjsCore.util).computeStrides(newShape);
    const result = (0, _tfjsCore.util).getTypedArrayFromDType(dtype, (0, _tfjsCore.util).sizeFromShape(newShape));
    for(let i = 0; i < xSize; ++i){
        const loc = (0, _tfjsCore.util).indexToLoc(i, xRank, xStrides);
        // Permute location.
        const newLoc = new Array(loc.length);
        for(let i1 = 0; i1 < newLoc.length; i1++)newLoc[i1] = loc[perm[i1]];
        const newIndex = (0, _tfjsCore.util).locToIndex(newLoc, xRank, newStrides);
        result[newIndex] = xVals[i];
    }
    return result;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"grqpM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MathBackendCPU", ()=>MathBackendCPU);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _seedrandom = require("seedrandom");
var _cpuUtil = require("./cpu_util");
var _poolUtils = require("./utils/pool_utils");
const nonMaxSuppressionV3 = (0, _tfjsCore.kernel_impls).nonMaxSuppressionV3;
const split = (0, _tfjsCore.kernel_impls).split;
const tile = (0, _tfjsCore.kernel_impls).tile;
const topkImpl = (0, _tfjsCore.kernel_impls).topkImpl;
const whereImpl = (0, _tfjsCore.kernel_impls).whereImpl;
function mapActivation(backend, x, activation, preluActivationWeights) {
    if (activation === "linear") return backend.linear(x);
    else if (activation === "relu") return backend.relu(x);
    else if (activation === "elu") return backend.elu(x);
    else if (activation === "relu6") return backend.relu6(x);
    else if (activation === "prelu") return backend.prelu(x, preluActivationWeights);
    throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);
}
class MathBackendCPU extends (0, _tfjsCore.KernelBackend) {
    constructor(){
        super();
        this.blockSize = 48;
        this.firstUse = true;
        this.data = new (0, _tfjsCore.DataStorage)(this, (0, _tfjsCore.engine)());
    }
    write(values, shape, dtype) {
        if (this.firstUse) {
            this.firstUse = false;
            if ((0, _tfjsCore.env)().get("IS_NODE")) (0, _tfjsCore.backend_util).warn("\n============================\nHi there \uD83D\uDC4B. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================");
        }
        const dataId = {};
        this.data.set(dataId, {
            values,
            dtype
        });
        return dataId;
    }
    move(dataId, values, shape, dtype) {
        this.data.set(dataId, {
            values,
            dtype
        });
    }
    numDataIds() {
        return this.data.numDataIds();
    }
    async read(dataId) {
        return this.readSync(dataId);
    }
    readSync(dataId) {
        const { dtype , complexTensors  } = this.data.get(dataId);
        if (dtype === "complex64") {
            const realValues = this.readSync(complexTensors.real.dataId);
            const imagValues = this.readSync(complexTensors.imag.dataId);
            return (0, _tfjsCore.backend_util).mergeRealAndImagArrays(realValues, imagValues);
        }
        return this.data.get(dataId).values;
    }
    bufferSync(t) {
        const data = this.readSync(t.dataId);
        let decodedData = data;
        if (t.dtype === "string") try {
            // Decode the bytes into string.
            decodedData = data.map((d)=>(0, _tfjsCore.util).decodeString(d));
        } catch (_a) {
            throw new Error("Failed to decode encoded string bytes into utf-8");
        }
        return _tfjsCore.buffer(t.shape, t.dtype, decodedData);
    }
    makeOutput(values, shape, dtype) {
        const dataId = this.write(values, shape, dtype);
        return (0, _tfjsCore.engine)().makeTensorFromDataId(dataId, shape, dtype, this);
    }
    disposeData(dataId) {
        if (this.data.has(dataId)) {
            const { complexTensors  } = this.data.get(dataId);
            if (complexTensors != null) {
                complexTensors.real.dispose();
                complexTensors.imag.dispose();
            }
            this.data.delete(dataId);
        }
    }
    async time(f) {
        const start = (0, _tfjsCore.util).now();
        f();
        const kernelMs = (0, _tfjsCore.util).now() - start;
        return {
            kernelMs
        };
    }
    memory() {
        return {
            // Unreliable due to automatic gc. The numbers above are cumulative.
            unreliable: true,
            reasons: [
                "The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."
            ]
        };
    }
    complex(real, imag) {
        const result = this.makeOutput(null, real.shape, "complex64");
        const resultData = this.data.get(result.dataId);
        // The backend owns the reference to the underlying real and imaginary
        // clones. These will explicitly get disposed when the complex tensor is
        // disposed.
        resultData.complexTensors = {
            real: (0, _tfjsCore.engine)().keep(real.clone()),
            imag: (0, _tfjsCore.engine)().keep(imag.clone())
        };
        return result;
    }
    real(input) {
        const resultData = this.data.get(input.dataId);
        return resultData.complexTensors.real.clone();
    }
    imag(input) {
        const resultData = this.data.get(input.dataId);
        return resultData.complexTensors.imag.clone();
    }
    slice(x, begin, size) {
        (0, _cpuUtil.assertNotComplex)(x, "slice");
        const isContinous = (0, _tfjsCore.slice_util).isSliceContinous(x.shape, begin, size);
        if (isContinous) {
            const flatOffset = (0, _tfjsCore.slice_util).computeFlatOffset(begin, x.strides);
            const length = (0, _tfjsCore.util).sizeFromShape(size);
            const vals = this.readSync(x.dataId);
            return _tfjsCore.tensor(vals.subarray(flatOffset, flatOffset + length), size, x.dtype);
        }
        const buffer = _tfjsCore.buffer(size, x.dtype);
        const xBuf = this.bufferSync(x);
        for(let i = 0; i < buffer.size; ++i){
            const loc = buffer.indexToLoc(i);
            const xLoc = loc.map((idx, j)=>idx + begin[j]);
            buffer.values[i] = xBuf.get(...xLoc);
        }
        return buffer.toTensor();
    }
    stridedSlice(x, begin, end, strides) {
        (0, _cpuUtil.assertNotComplex)(x, "stridedSlice");
        const outShape = (0, _tfjsCore.slice_util).computeOutShape(begin, end, strides);
        if (outShape.some((axis)=>axis === 0)) return _tfjsCore.tensor([], outShape);
        const buffer = _tfjsCore.buffer(outShape, x.dtype);
        const xBuf = this.bufferSync(x);
        for(let i = 0; i < buffer.size; i++){
            const loc = buffer.indexToLoc(i);
            const newLoc = new Array(loc.length);
            for(let j = 0; j < newLoc.length; j++)newLoc[j] = loc[j] * strides[j] + begin[j];
            buffer.set(xBuf.get(...newLoc), ...loc);
        }
        return buffer.toTensor();
    }
    diag(x) {
        const xVals = this.readSync(x.dataId);
        const buffer = _tfjsCore.buffer([
            x.size,
            x.size
        ], x.dtype);
        const vals = buffer.values;
        for(let i = 0; i < xVals.length; i++)vals[i * x.size + i] = xVals[i];
        return buffer.toTensor();
    }
    unstack(x, axis) {
        const num = x.shape[axis];
        const outShape = new Array(x.rank - 1);
        let outIndex = 0;
        for(let i = 0; i < x.rank; i++)if (i !== axis) outShape[outIndex++] = x.shape[i];
        const begin = new Array(x.rank).fill(0);
        const size = x.shape.slice();
        size[axis] = 1;
        const res = new Array(num);
        for(let i1 = 0; i1 < res.length; i1++){
            begin[axis] = i1;
            res[i1] = this.slice(x, begin, size).reshape(outShape);
        }
        return res;
    }
    reverse(x, axis) {
        (0, _cpuUtil.assertNotComplex)(x, "reverse");
        const buffer = _tfjsCore.buffer(x.shape, x.dtype);
        const xBuf = this.bufferSync(x);
        for(let i = 0; i < buffer.size; i++){
            const outLoc = buffer.indexToLoc(i);
            const inLoc = outLoc.slice();
            axis.forEach((ax)=>inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);
            buffer.set(xBuf.get(...inLoc), ...outLoc);
        }
        return buffer.toTensor();
    }
    concat(tensors, axis) {
        if (tensors[0].dtype === "complex64") {
            const reals = tensors.map((t)=>_tfjsCore.real(t));
            const imags = tensors.map((t)=>_tfjsCore.imag(t));
            return _tfjsCore.complex(this.concat(reals, axis), this.concat(imags, axis));
        }
        const tensors2D = tensors.map((t)=>{
            const innerSize = (0, _tfjsCore.util).sizeFromShape(t.shape.slice(axis));
            return t.as2D(-1, innerSize);
        });
        const outShape = (0, _tfjsCore.backend_util).computeOutShape(tensors2D.map((t)=>t.shape), 1 /* axis
          */ );
        const values = _tfjsCore.buffer(outShape, tensors[0].dtype).values;
        if (tensors2D[0].shape[0] === 1) {
            // Use built-in TypedArray.set() method for speed.
            let offset = 0;
            tensors2D.forEach((t)=>{
                values.set(this.readSync(t.dataId), offset);
                offset += t.size;
            });
        } else {
            let colOffset = 0;
            tensors2D.forEach((t)=>{
                const tVals = this.readSync(t.dataId);
                let tIdx = 0;
                for(let row = 0; row < t.shape[0]; ++row){
                    const resIdx = row * outShape[1] + colOffset;
                    for(let col = 0; col < t.shape[1]; ++col)values[resIdx + col] = tVals[tIdx++];
                }
                colOffset += t.shape[1];
            });
        }
        const finalOutShape = (0, _tfjsCore.backend_util).computeOutShape(tensors.map((t)=>t.shape), axis);
        return _tfjsCore.tensor(values, finalOutShape, tensors[0].dtype);
    }
    neg(x) {
        (0, _cpuUtil.assertNotComplex)(x, "neg");
        return this.multiply(_tfjsCore.scalar(-1), x);
    }
    add(a, b) {
        if (a.dtype === "complex64" || b.dtype === "complex64") return this.broadcastedBinaryComplexOp(a.cast("complex64"), b.cast("complex64"), (aReal, aImag, bReal, bImag)=>{
            return {
                real: aReal + bReal,
                imag: aImag + bImag
            };
        });
        return this.broadcastedBinaryOp(a, b, (0, _tfjsCore.upcastType)(a.dtype, b.dtype), (aValue, bValue)=>aValue + bValue);
    }
    addN(tensors) {
        (0, _cpuUtil.assertNotComplex)(tensors, "addN");
        const vals = tensors.map((t)=>this.readSync(t.dataId));
        const result = _tfjsCore.buffer(tensors[0].shape, tensors[0].dtype);
        const resultVals = result.values;
        for(let i = 0; i < tensors.length; i++){
            const currVals = vals[i];
            for(let j = 0; j < resultVals.length; j++)resultVals[j] += currVals[j];
        }
        return result.toTensor();
    }
    softmax(logits, dim) {
        const axes = (0, _tfjsCore.util).parseAxisParam([
            dim
        ], logits.shape);
        // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel
        // modularization.
        const maxLogit = (0, _tfjsCore.max)(logits, axes);
        const expandedShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(maxLogit.shape, axes);
        const a = this.subtract(logits, maxLogit.reshape(expandedShape));
        const b = this.exp(a);
        const sumExp = this.sum(b, axes).reshape(expandedShape);
        // TODO(annxingyuan): Call divImpl rather than op as part of softmax
        // kernel modularization.
        return _tfjsCore.div(b, sumExp);
    }
    subtract(a, b) {
        if (a.dtype === "complex64" || b.dtype === "complex64") return this.broadcastedBinaryComplexOp(a.cast("complex64"), b.cast("complex64"), (aReal, aImag, bReal, bImag)=>{
            return {
                real: aReal - bReal,
                imag: aImag - bImag
            };
        });
        return this.broadcastedBinaryOp(a, b, (0, _tfjsCore.upcastType)(a.dtype, b.dtype), (aValue, bValue)=>aValue - bValue);
    }
    pow(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "pow");
        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue)=>Math.pow(aValue, bValue));
    }
    batchMatMul(a, b, transposeA, transposeB) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "matMul");
        const sharedDim = transposeA ? a.shape[1] : a.shape[2];
        const leftDim = transposeA ? a.shape[2] : a.shape[1];
        const rightDim = transposeB ? b.shape[1] : b.shape[2];
        const batchDim = a.shape[0];
        const aValues = this.readSync(a.dataId);
        const bValues = this.readSync(b.dataId);
        const [aBatch, aOuterStep, aInnerStep] = transposeA ? [
            a.strides[0],
            1,
            a.strides[1]
        ] : [
            a.strides[0],
            a.strides[1],
            1
        ];
        const [bInnerStep, bOuterStep, bBatch] = transposeB ? [
            1,
            b.strides[1],
            b.strides[0]
        ] : [
            b.strides[1],
            1,
            b.strides[0]
        ];
        const size = leftDim * rightDim;
        const result = _tfjsCore.buffer([
            batchDim,
            leftDim,
            rightDim
        ], a.dtype);
        const resVals = result.values;
        const blockSize = this.blockSize;
        for(let b1 = 0; b1 < batchDim; b1++)for(let i0 = 0; i0 < leftDim; i0 += blockSize){
            for(let j0 = 0; j0 < rightDim; j0 += blockSize)for(let k0 = 0; k0 < sharedDim; k0 += blockSize){
                // for when blockSize doesn't evenly divide the input
                const iBlock = Math.min(i0 + blockSize, leftDim);
                const jBlock = Math.min(j0 + blockSize, rightDim);
                const kBlock = Math.min(k0 + blockSize, sharedDim);
                for(let i = i0; i < iBlock; i++)for(let j = j0; j < jBlock; j++){
                    let sum = 0.0;
                    for(let k = k0; k < kBlock; k++)sum += aValues[b1 * aBatch + i * aOuterStep + k * aInnerStep] * bValues[k * bInnerStep + j * bOuterStep + b1 * bBatch];
                    resVals[b1 * size + (i * rightDim + j)] += sum;
                }
            }
        }
        return result.toTensor();
    }
    fusedBatchMatMul({ a , b , transposeA , transposeB , bias , activation , preluActivationWeights  }) {
        let result = this.batchMatMul(a, b, transposeA, transposeB);
        if (bias) result = this.add(result, bias);
        if (activation) result = mapActivation(this, result, activation, preluActivationWeights);
        return result;
    }
    multiply(a, b) {
        if (a.dtype === "complex64" || b.dtype === "complex64") return this.broadcastedBinaryComplexOp(a.cast("complex64"), b.cast("complex64"), (aReal, aImag, bReal, bImag)=>{
            return {
                real: aReal * bReal - aImag * bImag,
                imag: aReal * bImag + aImag * bReal
            };
        });
        return this.broadcastedBinaryOp(a, b, (0, _tfjsCore.upcastType)(a.dtype, b.dtype), (aValue, bValue)=>aValue * bValue);
    }
    floorDiv(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "floorDiv");
        const op = (a, b)=>Math.floor(a / b);
        const outputDtype = "int32";
        return this.broadcastedBinaryOp(a, b, outputDtype, op);
    }
    sum(x, axes) {
        (0, _cpuUtil.assertNotComplex)(x, "sum");
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("sum", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const resultDtype = (0, _tfjsCore.upcastType)(x.dtype, "int32");
        const result = _tfjsCore.zeros(outShape, resultDtype);
        const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const vals = this.readSync(result.dataId);
        const aVals = this.readSync(x.dataId);
        for(let i = 0; i < vals.length; ++i){
            const offset = i * reduceSize;
            let sum = 0;
            for(let j = 0; j < reduceSize; ++j)sum += aVals[offset + j];
            vals[i] = sum;
        }
        return result;
    }
    prod(x, axes) {
        (0, _cpuUtil.assertNotComplex)(x, "sum");
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const resultDtype = (0, _tfjsCore.upcastType)(x.dtype, "int32");
        const result = _tfjsCore.zeros(outShape, resultDtype);
        const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const vals = this.readSync(result.dataId);
        const aVals = this.readSync(x.dataId);
        for(let i = 0; i < vals.length; ++i){
            const offset = i * reduceSize;
            let prod = 1;
            for(let j = 0; j < reduceSize; ++j)prod *= aVals[offset + j];
            vals[i] = prod;
        }
        return result;
    }
    unsortedSegmentSum(x, segmentIds, numSegments) {
        (0, _cpuUtil.assertNotComplex)(x, "unsortedSegmentSum");
        const res = [];
        // Reshape the segment id's so that they can be broadcast with
        // x. The new shape should be [segmentIds.shape, 1, ..., 1]
        const numIters = x.rank - segmentIds.rank;
        for(let i = 0; i < numIters; ++i)segmentIds = segmentIds.expandDims(i + 1);
        for(let i1 = 0; i1 < numSegments; ++i1){
            const segmentId = _tfjsCore.scalar(i1, "int32");
            const mask = _tfjsCore.equal(segmentId, segmentIds).asType("float32");
            const sum = mask.mul(x).sum(0);
            res.push(sum);
        }
        return _tfjsCore.stack(res);
    }
    argMin(x, axis) {
        (0, _cpuUtil.assertNotComplex)(x, "argMin");
        const axes = [
            axis
        ];
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("argMin", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const result = _tfjsCore.zeros(outShape, "int32");
        const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const vals = this.readSync(result.dataId);
        const aVals = this.readSync(x.dataId);
        for(let i = 0; i < vals.length; ++i){
            const offset = i * reduceSize;
            let min = aVals[offset];
            let minIndex = 0;
            for(let j = 0; j < reduceSize; ++j){
                const value = aVals[offset + j];
                if (value < min) {
                    min = value;
                    minIndex = j;
                }
            }
            vals[i] = minIndex;
        }
        return result;
    }
    argMax(x, axis) {
        (0, _cpuUtil.assertNotComplex)(x, "argMax");
        const axes = [
            axis
        ];
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("argMax", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const result = _tfjsCore.zeros(outShape, "int32");
        const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const vals = this.readSync(result.dataId);
        const aVals = this.readSync(x.dataId);
        for(let i = 0; i < vals.length; ++i){
            const offset = i * reduceSize;
            let max = aVals[offset];
            let maxIndex = 0;
            for(let j = 0; j < reduceSize; ++j){
                const value = aVals[offset + j];
                if (value > max) {
                    max = value;
                    maxIndex = j;
                }
            }
            vals[i] = maxIndex;
        }
        return result;
    }
    cumsum(x, axis, exclusive, reverse) {
        (0, _cpuUtil.assertNotComplex)(x, "cumsum");
        if (axis !== x.rank - 1) throw new Error(`backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` + `but got axis=${axis}`);
        const resultDtype = (0, _tfjsCore.upcastType)(x.dtype, "int32");
        const result = _tfjsCore.zeros(x.shape, resultDtype);
        const vals = this.readSync(result.dataId);
        const aVals = this.readSync(x.dataId);
        const finalDim = x.shape[x.rank - 1];
        const indexAdjuster = reverse ? (i, j)=>i + finalDim - j - 1 : (i, j)=>i + j;
        for(let i = 0; i < aVals.length; i += finalDim)for(let j = 0; j < finalDim; j++){
            const idx = indexAdjuster(i, j);
            if (j === 0) vals[idx] = exclusive ? 0 : aVals[idx];
            else {
                const prevIdx = indexAdjuster(i, j - 1);
                vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];
            }
        }
        return result;
    }
    equal(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "equal");
        return this.broadcastedBinaryOp(a, b, "bool", (aVal, bVal)=>{
            return aVal === bVal ? 1 : 0;
        });
    }
    notEqual(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "notEqual");
        return this.broadcastedBinaryOp(a, b, "bool", (aVal, bVal)=>{
            return aVal !== bVal ? 1 : 0;
        });
    }
    less(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "less");
        return this.broadcastedBinaryOp(a, b, "bool", (aVal, bVal)=>{
            return aVal < bVal ? 1 : 0;
        });
    }
    lessEqual(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "lessEqual");
        return this.broadcastedBinaryOp(a, b, "bool", (aVal, bVal)=>{
            return aVal <= bVal ? 1 : 0;
        });
    }
    greater(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "greater");
        return this.broadcastedBinaryOp(a, b, "bool", (aVal, bVal)=>{
            return aVal > bVal ? 1 : 0;
        });
    }
    greaterEqual(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "greaterEqual");
        return this.broadcastedBinaryOp(a, b, "bool", (aVal, bVal)=>{
            return aVal >= bVal ? 1 : 0;
        });
    }
    logicalNot(x) {
        (0, _cpuUtil.assertNotComplex)(x, "logicalNot");
        const values = this.readSync(x.dataId);
        const newValues = new Uint8Array(values.length);
        for(let i = 0; i < values.length; ++i)newValues[i] = values[i] ? 0 : 1;
        return this.makeOutput(newValues, x.shape, "bool");
    }
    logicalAnd(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "logicalAnd");
        return this.broadcastedBinaryOp(a, b, "bool", (aVal, bVal)=>{
            return aVal && bVal;
        });
    }
    logicalOr(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "logicalOr");
        return this.broadcastedBinaryOp(a, b, "bool", (aVal, bVal)=>{
            return aVal || bVal;
        });
    }
    select(condition, a, b) {
        (0, _cpuUtil.assertNotComplex)([
            condition,
            a,
            b
        ], "select");
        const values = this.readSync(condition.dataId);
        const aValues = this.readSync(a.dataId);
        const bValues = this.readSync(b.dataId);
        const result = _tfjsCore.zeros(a.shape, (0, _tfjsCore.upcastType)(a.dtype, b.dtype));
        const newValues = this.readSync(result.dataId);
        let index = 0;
        const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ? 1 : (0, _tfjsCore.util).sizeFromShape(a.shape.slice(1));
        for(let i = 0; i < values.length; i++){
            for(let j = 0; j < offset; j++)if (values[i] === 1) newValues[index++] = aValues[i];
            else newValues[index++] = bValues[i];
        }
        return result;
    }
    where(condition) {
        (0, _cpuUtil.assertNotComplex)([
            condition
        ], "where");
        const condVals = this.readSync(condition.dataId);
        return whereImpl(condition.shape, condVals);
    }
    topk(x, k, sorted) {
        (0, _cpuUtil.assertNotComplex)(x, "topk");
        const xVals = this.readSync(x.dataId);
        return topkImpl(xVals, x.shape, x.dtype, k, sorted);
    }
    min(x, axes) {
        (0, _cpuUtil.assertNotComplex)(x, "min");
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("min", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const result = _tfjsCore.zeros(outShape, x.dtype);
        const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const vals = this.readSync(result.dataId);
        const aVals = this.readSync(x.dataId);
        for(let i = 0; i < vals.length; ++i){
            const offset = i * reduceSize;
            let min = aVals[offset];
            for(let j = 0; j < reduceSize; ++j){
                const value = aVals[offset + j];
                if (value < min) min = value;
            }
            vals[i] = min;
        }
        return result;
    }
    minimum(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "minimum");
        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal)=>Math.min(aVal, bVal));
    }
    mod(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "mod");
        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal)=>{
            const rem = aVal % bVal;
            if (aVal < 0 && bVal < 0 || aVal >= 0 && bVal >= 0) return rem;
            else return (rem + bVal) % bVal;
        });
    }
    maximum(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "maximum");
        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal)=>Math.max(aVal, bVal));
    }
    all(x, axes) {
        (0, _cpuUtil.assertNotComplex)(x, "all");
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("all", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const result = _tfjsCore.zeros(outShape, x.dtype);
        const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const vals = this.readSync(result.dataId);
        const aVals = this.readSync(x.dataId);
        for(let i = 0; i < vals.length; ++i){
            const offset = i * reduceSize;
            let all = aVals[offset];
            for(let j = 0; j < reduceSize; ++j){
                const value = aVals[offset + j];
                all = all && value;
            }
            vals[i] = all;
        }
        return result;
    }
    any(x, axes) {
        (0, _cpuUtil.assertNotComplex)(x, "any");
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("any", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const result = _tfjsCore.zeros(outShape, x.dtype);
        const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const vals = this.readSync(result.dataId);
        const aVals = this.readSync(x.dataId);
        for(let i = 0; i < vals.length; ++i){
            const offset = i * reduceSize;
            let anyVal = aVals[offset];
            for(let j = 0; j < reduceSize; ++j){
                const value = aVals[offset + j];
                anyVal = anyVal || value;
            }
            vals[i] = anyVal;
        }
        return result;
    }
    squaredDifference(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "squaredDifference");
        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal)=>{
            const diff = aVal - bVal;
            return diff * diff;
        });
    }
    ceil(x) {
        (0, _cpuUtil.assertNotComplex)(x, "ceil");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i)newValues[i] = Math.ceil(values[i]);
        return this.makeOutput(newValues, x.shape, "float32");
    }
    floor(x) {
        (0, _cpuUtil.assertNotComplex)(x, "floor");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i)newValues[i] = Math.floor(values[i]);
        return this.makeOutput(newValues, x.shape, "float32");
    }
    sign(x) {
        (0, _cpuUtil.assertNotComplex)(x, "x");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i){
            if (values[i] < 0) newValues[i] = -1;
            else if (values[i] > 0) newValues[i] = 1;
            else newValues[i] = 0;
        }
        return this.makeOutput(newValues, x.shape, "float32");
    }
    isNaN(x) {
        (0, _cpuUtil.assertNotComplex)(x, "x");
        const values = this.readSync(x.dataId);
        const newValues = new Uint8Array(values.length);
        for(let i = 0; i < values.length; ++i)if (Number.isNaN(values[i])) newValues[i] = 1;
        return this.makeOutput(newValues, x.shape, "bool");
    }
    isInf(x) {
        (0, _cpuUtil.assertNotComplex)(x, "x");
        const values = this.readSync(x.dataId);
        const newValues = new Uint8Array(values.length);
        for(let i = 0; i < values.length; ++i)if (Math.abs(values[i]) === Infinity) newValues[i] = 1;
        return this.makeOutput(newValues, x.shape, "bool");
    }
    isFinite(x) {
        (0, _cpuUtil.assertNotComplex)(x, "x");
        const values = this.readSync(x.dataId);
        const newValues = new Uint8Array(values.length);
        for(let i = 0; i < values.length; ++i)if (Number.isFinite(values[i])) newValues[i] = 1;
        return this.makeOutput(newValues, x.shape, "bool");
    }
    round(x) {
        (0, _cpuUtil.assertNotComplex)(x, "round");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i){
            // The algorithm is based on banker's rounding.
            const base = Math.floor(values[i]);
            if (values[i] - base < 0.5) newValues[i] = Math.floor(values[i]);
            else if (values[i] - base > 0.5) newValues[i] = Math.ceil(values[i]);
            else if (base % 2.0 === 0.0) newValues[i] = base;
            else newValues[i] = base + 1.0;
        }
        return this.makeOutput(newValues, x.shape, "float32");
    }
    exp(x) {
        (0, _cpuUtil.assertNotComplex)(x, "exp");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i)newValues[i] = Math.exp(values[i]);
        return this.makeOutput(newValues, x.shape, "float32");
    }
    expm1(x) {
        (0, _cpuUtil.assertNotComplex)(x, "expm1");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i)newValues[i] = Math.expm1(values[i]);
        return this.makeOutput(newValues, x.shape, "float32");
    }
    log(x) {
        (0, _cpuUtil.assertNotComplex)(x, "log");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i){
            const value = values[i];
            newValues[i] = Math.log(value);
        }
        return this.makeOutput(newValues, x.shape, "float32");
    }
    log1p(x) {
        (0, _cpuUtil.assertNotComplex)(x, "log1p");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i){
            const value = values[i];
            newValues[i] = Math.log1p(value);
        }
        return this.makeOutput(newValues, x.shape, "float32");
    }
    sqrt(x) {
        (0, _cpuUtil.assertNotComplex)(x, "sqrt");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i){
            const value = values[i];
            newValues[i] = Math.sqrt(value);
        }
        return this.makeOutput(newValues, x.shape, "float32");
    }
    rsqrt(x) {
        (0, _cpuUtil.assertNotComplex)(x, "rsqrt");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i){
            const value = values[i];
            newValues[i] = 1 / Math.sqrt(value);
        }
        return this.makeOutput(newValues, x.shape, "float32");
    }
    reciprocal(x) {
        (0, _cpuUtil.assertNotComplex)(x, "reciprocal");
        const values = this.readSync(x.dataId);
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i)newValues[i] = 1 / values[i];
        return this.makeOutput(newValues, x.shape, "float32");
    }
    linear(x) {
        return x;
    }
    relu(x) {
        (0, _cpuUtil.assertNotComplex)(x, "relu");
        const res = _tfjsCore.zeros(x.shape, x.dtype);
        const resVals = this.readSync(res.dataId);
        const inVals = this.readSync(x.dataId);
        for(let i = 0; i < inVals.length; ++i)resVals[i] = Math.max(0, inVals[i]);
        return res;
    }
    relu6(x) {
        (0, _cpuUtil.assertNotComplex)(x, "relu");
        const res = _tfjsCore.zeros(x.shape, x.dtype);
        const resVals = this.readSync(res.dataId);
        const inVals = this.readSync(x.dataId);
        for(let i = 0; i < inVals.length; ++i)resVals[i] = Math.min(Math.max(0, inVals[i]), 6);
        return res;
    }
    prelu(x, a) {
        (0, _cpuUtil.assertNotComplex)([
            x,
            a
        ], "prelu");
        return this.broadcastedBinaryOp(x, a, x.dtype, (xValue, aValue)=>xValue < 0 ? aValue * xValue : xValue);
    }
    elu(x) {
        (0, _cpuUtil.assertNotComplex)(x, "elu");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i){
            const v = values[i];
            if (v >= 0) resultValues[i] = v;
            else resultValues[i] = Math.exp(v) - 1;
        }
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    eluDer(dy, y) {
        (0, _cpuUtil.assertNotComplex)([
            dy,
            y
        ], "eluDer");
        const resultValues = new Float32Array(y.size);
        const values = this.readSync(y.dataId);
        const dyValues = this.readSync(dy.dataId);
        for(let i = 0; i < values.length; ++i){
            const v = values[i];
            if (v >= 1) resultValues[i] = dyValues[i];
            else resultValues[i] = dyValues[i] * (v + 1);
        }
        return this.makeOutput(resultValues, y.shape, "float32");
    }
    selu(x) {
        (0, _cpuUtil.assertNotComplex)(x, "selu");
        // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
        // see: https://arxiv.org/abs/1706.02515
        const scaleAlpha = (0, _tfjsCore.backend_util).SELU_SCALEALPHA;
        const scale = (0, _tfjsCore.backend_util).SELU_SCALE;
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i){
            const v = values[i];
            if (v >= 0) resultValues[i] = scale * v;
            else resultValues[i] = scaleAlpha * (Math.exp(v) - 1);
        }
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    clip(x, min, max) {
        (0, _cpuUtil.assertNotComplex)(x, "clip");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i){
            const v = values[i];
            resultValues[i] = v > max ? max : v < min ? min : v;
        }
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    abs(x) {
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.abs(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    complexAbs(x) {
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < x.size; ++i){
            const real = values[i * 2];
            const imag = values[i * 2 + 1];
            resultValues[i] = Math.hypot(real, imag);
        }
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    int(x) {
        (0, _cpuUtil.assertNotComplex)(x, "int");
        const resultValues = new Int32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = values[i];
        return this.makeOutput(resultValues, x.shape, "int32");
    }
    sigmoid(x) {
        (0, _cpuUtil.assertNotComplex)(x, "sigmoid");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = 1 / (1 + Math.exp(-values[i]));
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    softplus(x) {
        (0, _cpuUtil.assertNotComplex)(x, "softplus");
        // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX
        // epsilon is the difference between 1.0 and the next representable float.
        // For a single precision 32 bit float this should be 2^-23, see:
        // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm
        const epsilon = 1.1920928955078125e-7;
        const threshold = Math.log(epsilon) + 2.0;
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i){
            // Value above which exp(x) may overflow, but softplus(x) == x
            // is within machine epsilon.
            const tooLarge = values[i] > -threshold;
            // Value below which exp(x) may underflow, but softplus(x) == exp(x)
            // is within machine epsilon.
            const tooSmall = values[i] < threshold;
            const expX = Math.exp(values[i]);
            let result;
            if (tooSmall) result = expX;
            else if (tooLarge) result = values[i];
            else result = Math.log(1.0 + expX);
            resultValues[i] = result;
        }
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    sin(x) {
        (0, _cpuUtil.assertNotComplex)(x, "sin");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.sin(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    cos(x) {
        (0, _cpuUtil.assertNotComplex)(x, "cos");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.cos(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    tan(x) {
        (0, _cpuUtil.assertNotComplex)(x, "tan");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.tan(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    asin(x) {
        (0, _cpuUtil.assertNotComplex)(x, "asin");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.asin(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    acos(x) {
        (0, _cpuUtil.assertNotComplex)(x, "acos");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.acos(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    atan(x) {
        (0, _cpuUtil.assertNotComplex)(x, "atan");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.atan(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    atan2(a, b) {
        (0, _cpuUtil.assertNotComplex)([
            a,
            b
        ], "atan2");
        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue)=>Math.atan2(aValue, bValue));
    }
    sinh(x) {
        (0, _cpuUtil.assertNotComplex)(x, "sinh");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.sinh(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    cosh(x) {
        (0, _cpuUtil.assertNotComplex)(x, "cosh");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.cosh(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    tanh(x) {
        (0, _cpuUtil.assertNotComplex)(x, "tanh");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = (0, _tfjsCore.util).tanh(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    asinh(x) {
        (0, _cpuUtil.assertNotComplex)(x, "asinh");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.asinh(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    acosh(x) {
        (0, _cpuUtil.assertNotComplex)(x, "acosh");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.acosh(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    atanh(x) {
        (0, _cpuUtil.assertNotComplex)(x, "atanh");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i)resultValues[i] = Math.atanh(values[i]);
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    erf(x) {
        (0, _cpuUtil.assertNotComplex)(x, "erf");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        const p = (0, _tfjsCore.backend_util).ERF_P;
        const a1 = (0, _tfjsCore.backend_util).ERF_A1;
        const a2 = (0, _tfjsCore.backend_util).ERF_A2;
        const a3 = (0, _tfjsCore.backend_util).ERF_A3;
        const a4 = (0, _tfjsCore.backend_util).ERF_A4;
        const a5 = (0, _tfjsCore.backend_util).ERF_A5;
        for(let i = 0; i < values.length; ++i){
            const sign = Math.sign(values[i]);
            const v = Math.abs(values[i]);
            const t = 1.0 / (1.0 + p * v);
            resultValues[i] = sign * (1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-v * v));
        }
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    step(x, alpha = 0) {
        (0, _cpuUtil.assertNotComplex)(x, "step");
        const resultValues = new Float32Array(x.size);
        const values = this.readSync(x.dataId);
        for(let i = 0; i < values.length; ++i){
            const value = values[i];
            if (isNaN(value)) resultValues[i] = NaN;
            else resultValues[i] = value > 0 ? 1 : alpha;
        }
        return this.makeOutput(resultValues, x.shape, "float32");
    }
    fusedConv2d({ input , filter , convInfo , bias , activation , preluActivationWeights  }) {
        let result = this.conv2d(input, filter, convInfo);
        if (bias) result = this.add(result, bias);
        if (activation) result = mapActivation(this, result, activation, preluActivationWeights);
        return result;
    }
    conv2d(x, filter, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            x,
            filter
        ], "conv2d");
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const padLeft = convInfo.padInfo.left;
        const padTop = convInfo.padInfo.top;
        const isChannelsLast = convInfo.dataFormat === "channelsLast";
        const y = _tfjsCore.buffer(convInfo.outShape, x.dtype);
        const xBatchStride = x.strides[0];
        const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];
        const xColStride = isChannelsLast ? x.strides[2] : 1;
        const xChannelStride = isChannelsLast ? 1 : x.strides[1];
        const yBatchStride = y.strides[0];
        const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];
        const yColStride = isChannelsLast ? y.strides[2] : 1;
        const yChannelStride = isChannelsLast ? 1 : y.strides[1];
        const xVals = this.readSync(x.dataId);
        const wVals = this.readSync(filter.dataId);
        const yVals = y.values;
        for(let b = 0; b < convInfo.batchSize; ++b){
            const xOffset1 = b * xBatchStride;
            const yOffset1 = b * yBatchStride;
            for(let yR = 0; yR < convInfo.outHeight; ++yR){
                const yOffset2 = yOffset1 + yR * yRowStride;
                const xRCorner = yR * convInfo.strideHeight - padTop;
                for(let wR = 0; wR < filterHeight; wR++){
                    const xR = xRCorner + wR * dilationHeight;
                    if (xR < 0 || xR >= convInfo.inHeight) continue;
                    const wOffset1 = wR * filter.strides[0];
                    const xOffset2 = xOffset1 + xR * xRowStride;
                    for(let yC = 0; yC < convInfo.outWidth; ++yC){
                        const yOffset3 = yOffset2 + yC * yColStride;
                        const xCCorner = yC * convInfo.strideWidth - padLeft;
                        for(let wC = 0; wC < filterWidth; wC++){
                            const xC = xCCorner + wC * dilationWidth;
                            if (xC < 0 || xC >= convInfo.inWidth) continue;
                            const wOffset2 = wOffset1 + wC * filter.strides[1];
                            const xOffset3 = xOffset2 + xC * xColStride;
                            let wOffset3 = wOffset2;
                            for(let d1 = 0; d1 < convInfo.inChannels; ++d1){
                                const xVal = xVals[xOffset3 + d1 * xChannelStride];
                                for(let d2 = 0; d2 < convInfo.outChannels; ++d2)yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];
                                wOffset3 += convInfo.outChannels;
                            }
                        }
                    }
                }
            }
        }
        return y.toTensor();
    }
    conv3d(x, filter, convInfo) {
        const filterDepth = convInfo.filterDepth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const padFront = convInfo.padInfo.front;
        const padLeft = convInfo.padInfo.left;
        const padTop = convInfo.padInfo.top;
        const y = _tfjsCore.buffer(convInfo.outShape, x.dtype);
        const xVals = this.readSync(x.dataId);
        const wVals = this.readSync(filter.dataId);
        const yVals = y.values;
        for(let b = 0; b < convInfo.batchSize; ++b){
            const xOffset1 = b * x.strides[0];
            const yOffset1 = b * y.strides[0];
            for(let yF = 0; yF < convInfo.outDepth; ++yF){
                const yOffset2 = yOffset1 + yF * y.strides[1];
                const xFCorner = yF * convInfo.strideDepth - padFront;
                for(let wF = 0; wF < filterDepth; wF++){
                    const xF = xFCorner + wF * dilationDepth;
                    if (xF < 0 || xF >= convInfo.inDepth) continue;
                    const wOffset1 = wF * filter.strides[0];
                    const xOffset2 = xOffset1 + xF * x.strides[1];
                    for(let yR = 0; yR < convInfo.outHeight; ++yR){
                        const yOffset3 = yOffset2 + yR * y.strides[2];
                        const xRCorner = yR * convInfo.strideHeight - padTop;
                        for(let wR = 0; wR < filterHeight; wR++){
                            const xR = xRCorner + wR * dilationHeight;
                            if (xR < 0 || xR >= convInfo.inHeight) continue;
                            const wOffset2 = wOffset1 + wR * filter.strides[1];
                            const xOffset3 = xOffset2 + xR * x.strides[2];
                            for(let yC = 0; yC < convInfo.outWidth; ++yC){
                                const yOffset4 = yOffset3 + yC * convInfo.outChannels;
                                const xCCorner = yC * convInfo.strideWidth - padLeft;
                                for(let wC = 0; wC < filterWidth; wC++){
                                    const xC = xCCorner + wC * dilationWidth;
                                    if (xC < 0 || xC >= convInfo.inWidth) continue;
                                    const wOffset3 = wOffset2 + wC * filter.strides[2];
                                    const xOffset4 = xOffset3 + xC * convInfo.inChannels;
                                    let wOffset4 = wOffset3;
                                    for(let d1 = 0; d1 < convInfo.inChannels; ++d1){
                                        const xVal = xVals[xOffset4 + d1];
                                        for(let d2 = 0; d2 < convInfo.outChannels; ++d2)yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];
                                        wOffset4 += convInfo.outChannels;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return y.toTensor();
    }
    conv2dDerInput(dy, filter, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            dy,
            filter
        ], "conv2dDerInput");
        const dx = _tfjsCore.buffer(convInfo.inShape, "float32");
        const dxValues = dx.values;
        const dyValues = this.readSync(dy.dataId);
        const fltValues = this.readSync(filter.dataId);
        const [fltS0, fltS1, fltS2] = filter.strides;
        const { batchSize , filterHeight , filterWidth , inChannels , inHeight , inWidth , outChannels , outHeight , outWidth , strideHeight , strideWidth , dataFormat  } = convInfo;
        const topPad = filterHeight - 1 - convInfo.padInfo.top;
        const leftPad = filterWidth - 1 - convInfo.padInfo.left;
        const isChannelsLast = dataFormat === "channelsLast";
        const xBatchStride = dx.strides[0];
        const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];
        const xColStride = isChannelsLast ? dx.strides[2] : 1;
        const xChannelStride = isChannelsLast ? 1 : dx.strides[1];
        const yBatchStride = dy.strides[0];
        const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];
        const yColStride = isChannelsLast ? dy.strides[2] : 1;
        const yChannelStride = isChannelsLast ? 1 : dy.strides[1];
        for(let b = 0; b < batchSize; ++b){
            for(let d1 = 0; d1 < inChannels; ++d1)for(let xR = 0; xR < inHeight; ++xR){
                const xRCorner = xR - topPad;
                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
                for(let xC = 0; xC < inWidth; ++xC){
                    const xCCorner = xC - leftPad;
                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                    let dotProd = 0;
                    for(let yR = xRMin; yR < yRMax; ++yR){
                        const wR = yR * strideHeight - xRCorner;
                        for(let yC = xCMin; yC < yCMax; ++yC){
                            const wC = yC * strideWidth - xCCorner;
                            const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;
                            const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
                            for(let d2 = 0; d2 < outChannels; ++d2){
                                const pixel = dyValues[dyOffset + yChannelStride * d2];
                                const weight = fltValues[fltOffset + d2];
                                dotProd += pixel * weight;
                            }
                        }
                    }
                    const dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;
                    dxValues[dxOffset] = dotProd;
                }
            }
        }
        return dx.toTensor();
    }
    conv3dDerInput(dy, filter, convInfo) {
        const dx = _tfjsCore.buffer(convInfo.inShape, "float32");
        const dxValues = dx.values;
        const [dxS0, dxS1, dxS2, dxS3] = dx.strides;
        const dyValues = this.readSync(dy.dataId);
        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;
        const fltValues = this.readSync(filter.dataId);
        const [fltS0, fltS1, fltS2, fltS3] = filter.strides;
        const { batchSize , filterDepth , filterHeight , filterWidth , inChannels , inDepth , inHeight , inWidth , outChannels , outDepth , outHeight , outWidth , strideDepth , strideHeight , strideWidth  } = convInfo;
        const frontPad = filterDepth - 1 - convInfo.padInfo.front;
        const topPad = filterHeight - 1 - convInfo.padInfo.top;
        const leftPad = filterWidth - 1 - convInfo.padInfo.left;
        for(let b = 0; b < batchSize; ++b){
            for(let d1 = 0; d1 < inChannels; ++d1)// Frames of depth
            for(let xF = 0; xF < inDepth; ++xF){
                const xFCorner = xF - frontPad;
                const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));
                const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);
                // Rows as per standard 2d matrix notation
                for(let xR = 0; xR < inHeight; ++xR){
                    const xRCorner = xR - topPad;
                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
                    // Columns as per standard 2d matrix notation
                    for(let xC = 0; xC < inWidth; ++xC){
                        const xCCorner = xC - leftPad;
                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                        let dotProd = 0;
                        for(let yF = xFMin; yF < yFMax; ++yF){
                            const wF = yF * strideDepth - xFCorner;
                            for(let yR = xRMin; yR < yRMax; ++yR){
                                const wR = yR * strideHeight - xRCorner;
                                for(let yC = xCMin; yC < yCMax; ++yC){
                                    const wC = yC * strideWidth - xCCorner;
                                    const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;
                                    const fltOffset = fltS0 * (filterDepth - 1 - wF) + fltS1 * (filterHeight - 1 - wR) + fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;
                                    for(let d2 = 0; d2 < outChannels; ++d2){
                                        const pixel = dyValues[dyOffset + d2];
                                        const weight = fltValues[fltOffset + d2];
                                        dotProd += pixel * weight;
                                    }
                                }
                            }
                        }
                        dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] = dotProd;
                    }
                }
            }
        }
        return dx.toTensor();
    }
    conv2dDerFilter(x, dy, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            x,
            dy
        ], "conv2dDerFilter");
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const isChannelsLast = convInfo.dataFormat === "channelsLast";
        const dW = _tfjsCore.buffer(convInfo.filterShape, "float32");
        const leftPad = convInfo.padInfo.left;
        const topPad = convInfo.padInfo.top;
        const xBuf = this.bufferSync(x);
        const dyBuf = this.bufferSync(dy);
        for(let wR = 0; wR < filterHeight; ++wR){
            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
            for(let wC = 0; wC < filterWidth; ++wC){
                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                for(let d1 = 0; d1 < convInfo.inChannels; ++d1)for(let d2 = 0; d2 < convInfo.outChannels; ++d2){
                    // Need to convolve.
                    let dotProd = 0;
                    for(let b = 0; b < convInfo.batchSize; ++b)for(let yR = yRMin; yR < yRMax; ++yR){
                        const xR = wR + yR * strideHeight - topPad;
                        for(let yC = yCMin; yC < yCMax; ++yC){
                            const xC = wC + yC * strideWidth - leftPad;
                            if (isChannelsLast) dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);
                            else dotProd += xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);
                        }
                    }
                    dW.set(dotProd, wR, wC, d1, d2);
                }
            }
        }
        return dW.toTensor();
    }
    conv3dDerFilter(x, dy, convInfo) {
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const filterDepth = convInfo.filterDepth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dw = _tfjsCore.buffer(convInfo.filterShape, "float32");
        const dwValues = dw.values;
        const [dwS0, dwS1, dwS2, dwS3] = dw.strides;
        const dyValues = this.readSync(dy.dataId);
        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;
        const xValues = this.readSync(x.dataId);
        const [xS0, xS1, xS2, xS3] = x.strides;
        const frontPad = convInfo.padInfo.front;
        const leftPad = convInfo.padInfo.left;
        const topPad = convInfo.padInfo.top;
        for(let wF = 0; wF < filterDepth; ++wF){
            const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));
            const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);
            const wOffset1 = wF * dwS0;
            for(let wR = 0; wR < filterHeight; ++wR){
                const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
                const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
                const wOffset2 = wR * dwS1 + wOffset1;
                for(let wC = 0; wC < filterWidth; ++wC){
                    const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                    const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                    const wOffset3 = wC * dwS2 + wOffset2;
                    for(let d1 = 0; d1 < convInfo.inChannels; ++d1){
                        const wOffset4 = d1 * dwS3 + wOffset3;
                        for(let d2 = 0; d2 < convInfo.outChannels; ++d2){
                            let dotProd = 0;
                            for(let b = 0; b < convInfo.batchSize; ++b){
                                const xOffset1 = b * xS0;
                                const yOffset1 = b * dyS0;
                                for(let yF = yFMin; yF < yFMax; ++yF){
                                    const xF = wF + yF * strideDepth - frontPad;
                                    const xOffset2 = xF * xS1 + xOffset1;
                                    const yOffset2 = yF * dyS1 + yOffset1;
                                    for(let yR = yRMin; yR < yRMax; ++yR){
                                        const xR = wR + yR * strideHeight - topPad;
                                        const xOffset3 = xR * xS2 + xOffset2;
                                        const yOffset3 = yR * dyS2 + yOffset2;
                                        for(let yC = yCMin; yC < yCMax; ++yC){
                                            const xC = wC + yC * strideWidth - leftPad;
                                            const xOffset4 = xC * xS3 + xOffset3;
                                            const yOffset4 = yC * dyS3 + yOffset3;
                                            dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];
                                        }
                                    }
                                }
                            }
                            dwValues[wOffset4 + d2] = dotProd;
                        }
                    }
                }
            }
        }
        return dw.toTensor();
    }
    fusedDepthwiseConv2D({ input , filter , convInfo , bias , activation , preluActivationWeights  }) {
        let result = this.depthwiseConv2D(input, filter, convInfo);
        if (bias) result = this.add(result, bias);
        if (activation) result = mapActivation(this, result, activation, preluActivationWeights);
        return result;
    }
    depthwiseConv2D(x, filter, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            x,
            filter
        ], "depthwiseConv2D");
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const padLeft = convInfo.padInfo.left;
        const padTop = convInfo.padInfo.top;
        const chMul = convInfo.outChannels / convInfo.inChannels;
        const y = _tfjsCore.buffer(convInfo.outShape, x.dtype);
        const xVals = this.readSync(x.dataId);
        const wVals = this.readSync(filter.dataId);
        const yVals = y.values;
        for(let b = 0; b < convInfo.batchSize; ++b){
            const xOffset1 = b * x.strides[0];
            const yOffset1 = b * y.strides[0];
            for(let yR = 0; yR < convInfo.outHeight; ++yR){
                const yOffset2 = yOffset1 + yR * y.strides[1];
                const xRCorner = yR * convInfo.strideHeight - padLeft;
                for(let wR = 0; wR < filterHeight; ++wR){
                    const xR = xRCorner + wR * dilationHeight;
                    if (xR < 0 || xR >= convInfo.inHeight) continue;
                    const wOffset1 = wR * filter.strides[0];
                    const xOffset2 = xOffset1 + xR * x.strides[1];
                    for(let yC = 0; yC < convInfo.outWidth; ++yC){
                        const yOffset3 = yOffset2 + yC * y.strides[2];
                        const xCCorner = yC * convInfo.strideWidth - padTop;
                        for(let wC = 0; wC < filterWidth; ++wC){
                            const xC = xCCorner + wC * dilationWidth;
                            if (xC < 0 || xC >= convInfo.inWidth) continue;
                            const wOffset2 = wOffset1 + wC * filter.strides[1];
                            const xOffset3 = xOffset2 + xC * convInfo.inChannels;
                            let yOffset4 = yOffset3;
                            let wOffset3 = wOffset2;
                            for(let d1 = 0; d1 < convInfo.inChannels; ++d1){
                                const xVal = xVals[xOffset3 + d1];
                                for(let q = 0; q < chMul; ++q)yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];
                                yOffset4 += chMul;
                                wOffset3 += chMul;
                            }
                        }
                    }
                }
            }
        }
        return y.toTensor();
    }
    depthwiseConv2DDerInput(dy, filter, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            dy,
            filter
        ], "depthwiseConv2DDerInput");
        const dx = _tfjsCore.buffer(convInfo.inShape, "float32");
        const dxValues = dx.values;
        const [dxS0, dxS1, dxS2] = dx.strides;
        const dyValues = this.readSync(dy.dataId);
        const [dyS0, dyS1, dyS2] = dy.strides;
        const fltValues = this.readSync(filter.dataId);
        const [fltS0, fltS1, fltS2] = filter.strides;
        const { batchSize , filterHeight , filterWidth , inChannels , inHeight , inWidth , outChannels , outHeight , outWidth , strideHeight , strideWidth  } = convInfo;
        const topPad = filterHeight - 1 - convInfo.padInfo.top;
        const leftPad = filterWidth - 1 - convInfo.padInfo.left;
        const chMul = outChannels / inChannels;
        for(let b = 0; b < batchSize; ++b){
            for(let d1 = 0; d1 < inChannels; ++d1)for(let xR = 0; xR < inHeight; ++xR){
                const xRCorner = xR - topPad;
                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
                for(let xC = 0; xC < inWidth; ++xC){
                    const xCCorner = xC - leftPad;
                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                    let dotProd = 0;
                    for(let yR = xRMin; yR < yRMax; ++yR){
                        const wR = yR * strideHeight - xRCorner;
                        for(let yC = xCMin; yC < yCMax; ++yC){
                            const wC = yC * strideWidth - xCCorner;
                            const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;
                            const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
                            for(let dm = 0; dm < chMul; ++dm){
                                const d2 = d1 * chMul + dm;
                                const pixel = dyValues[dyOffset + d2];
                                const weight = fltValues[fltOffset + dm];
                                dotProd += pixel * weight;
                            }
                        }
                    }
                    dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;
                }
            }
        }
        return dx.toTensor();
    }
    depthwiseConv2DDerFilter(x, dy, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            x,
            dy
        ], "depthwiseConv2DDerFilter");
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dW = _tfjsCore.buffer(convInfo.filterShape, "float32");
        const leftPad = convInfo.padInfo.left;
        const topPad = convInfo.padInfo.top;
        const chMul = convInfo.outChannels / convInfo.inChannels;
        const xBuf = this.bufferSync(x);
        const dyBuf = this.bufferSync(dy);
        for(let wR = 0; wR < filterHeight; ++wR){
            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
            for(let wC = 0; wC < filterWidth; ++wC){
                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                for(let d2 = 0; d2 < convInfo.outChannels; ++d2){
                    const d1 = Math.trunc(d2 / chMul);
                    const dm = d2 % chMul;
                    let dotProd = 0;
                    for(let b = 0; b < convInfo.batchSize; ++b)for(let yR = yRMin; yR < yRMax; ++yR){
                        const xR = wR + yR * strideHeight - topPad;
                        for(let yC = yCMin; yC < yCMax; ++yC){
                            const xC = wC + yC * strideWidth - leftPad;
                            dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);
                        }
                    }
                    dW.set(dotProd, wR, wC, d1, dm);
                }
            }
        }
        return dW.toTensor();
    }
    tile(x, reps) {
        (0, _cpuUtil.assertNotComplex)(x, "tile");
        return tile(this.bufferSync(x), reps);
    }
    pad(x, paddings, constantValue) {
        (0, _cpuUtil.assertNotComplex)(x, "pad");
        const outShape = paddings.map((p, i)=>p[0] + x.shape[i] + p[1]);
        const start = paddings.map((p)=>p[0]);
        const xBuffer = this.bufferSync(x);
        const buffer = _tfjsCore.buffer(outShape, x.dtype);
        if (constantValue !== 0) buffer.values.fill(constantValue);
        for(let i = 0; i < x.size; i++){
            const coords = xBuffer.indexToLoc(i);
            const outCoords = coords.map((c, i)=>c + start[i]);
            buffer.set(xBuffer.get(...coords), ...outCoords);
        }
        return buffer.toTensor();
    }
    gather(x, indices, axis) {
        (0, _cpuUtil.assertNotComplex)([
            x,
            indices
        ], "gather");
        const newShape = x.shape.slice();
        const indicesValues = this.readSync(indices.dataId);
        newShape[axis] = indicesValues.length;
        const result = _tfjsCore.buffer(newShape, x.dtype);
        const xBuf = this.bufferSync(x);
        for(let i = 0; i < result.size; ++i){
            const newLoc = result.indexToLoc(i);
            const originalLoc = newLoc.slice();
            originalLoc[axis] = indicesValues[newLoc[axis]];
            const originalIndex = xBuf.locToIndex(originalLoc);
            result.values[i] = xBuf.values[originalIndex];
        }
        return result.toTensor();
    }
    batchToSpaceND(x, blockShape, crops) {
        (0, _cpuUtil.assertNotComplex)([
            x
        ], "batchToSpaceND");
        const prod = blockShape.reduce((a, b)=>a * b);
        const reshaped = (0, _tfjsCore.backend_util).getReshaped(x.shape, blockShape, prod);
        const permuted = (0, _tfjsCore.backend_util).getPermuted(reshaped.length, blockShape.length);
        const reshapedPermuted = (0, _tfjsCore.backend_util).getReshapedPermuted(x.shape, blockShape, prod);
        const sliceBeginCoords = (0, _tfjsCore.backend_util).getSliceBeginCoords(crops, blockShape.length);
        const sliceSize = (0, _tfjsCore.backend_util).getSliceSize(reshapedPermuted, crops, blockShape.length);
        return _tfjsCore.transpose(x.reshape(reshaped), permuted).reshape(reshapedPermuted).slice(sliceBeginCoords, sliceSize);
    }
    spaceToBatchND(x, blockShape, paddings) {
        (0, _cpuUtil.assertNotComplex)([
            x
        ], "spaceToBatchND");
        const prod = blockShape.reduce((a, b)=>a * b);
        const completePaddings = [
            [
                0,
                0
            ]
        ];
        completePaddings.push(...paddings);
        for(let i = 1 + blockShape.length; i < x.shape.length; ++i)completePaddings.push([
            0,
            0
        ]);
        const paddedX = x.pad(completePaddings);
        const reshapedPaddedShape = (0, _tfjsCore.backend_util).getReshaped(paddedX.shape, blockShape, prod, false);
        const permutedReshapedPaddedPermutation = (0, _tfjsCore.backend_util).getPermuted(reshapedPaddedShape.length, blockShape.length, false);
        const flattenShape = (0, _tfjsCore.backend_util).getReshapedPermuted(paddedX.shape, blockShape, prod, false);
        return _tfjsCore.transpose(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation).reshape(flattenShape);
    }
    maxPool(x, convInfo) {
        (0, _cpuUtil.assertNotComplex)(x, "maxPool");
        const xValues = this.readSync(x.dataId);
        return (0, _poolUtils.pool)(xValues, x.shape, x.dtype, x.strides, convInfo, "max").toTensor();
    }
    maxPoolBackprop(dy, x, y, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            x,
            y
        ], "maxPoolBackprop");
        const xValues = this.readSync(x.dataId);
        const maxPosBuf = (0, _tfjsCore.buffer)(convInfo.outShape, x.dtype, (0, _poolUtils.maxPoolPositions)(xValues, x.shape, x.dtype, convInfo).values);
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const dx = _tfjsCore.buffer(x.shape, "float32");
        const dyBuf = this.bufferSync(dy);
        for(let b = 0; b < convInfo.batchSize; ++b)for(let d = 0; d < convInfo.inChannels; ++d){
            for(let dxR = 0; dxR < convInfo.inHeight; ++dxR)for(let dxC = 0; dxC < convInfo.inWidth; ++dxC){
                // Shader code begins.
                const dyRCorner = dxR - padTop;
                const dyCCorner = dxC - padLeft;
                let dotProd = 0;
                for(let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight){
                    const dyR = (dyRCorner + wR) / strideHeight;
                    if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) continue;
                    for(let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth){
                        const dyC = (dyCCorner + wC) / strideWidth;
                        if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) continue;
                        const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(b, dyR, dyC, d);
                        const curPos = wR * effectiveFilterWidth + wC;
                        const mask = maxPos === curPos ? 1 : 0;
                        if (mask === 0) continue;
                        const pixel = dyBuf.get(b, dyR, dyC, d);
                        dotProd += pixel * mask;
                    }
                }
                dx.set(dotProd, b, dxR, dxC, d);
            }
        }
        return dx.toTensor();
    }
    avgPoolBackprop(dy, x, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            dy,
            x
        ], "avgPoolBackprop");
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const dx = _tfjsCore.buffer(x.shape, "float32");
        const avgMultiplier = 1 / (filterHeight * filterWidth);
        const dyBuf = this.bufferSync(dy);
        for(let b = 0; b < convInfo.batchSize; ++b)for(let d = 0; d < convInfo.inChannels; ++d){
            for(let dxR = 0; dxR < convInfo.inHeight; ++dxR)for(let dxC = 0; dxC < convInfo.inWidth; ++dxC){
                // Shader code begins.
                const dyRCorner = dxR - padTop;
                const dyCCorner = dxC - padLeft;
                let dotProd = 0;
                for(let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight){
                    const dyR = (dyRCorner + wR) / strideHeight;
                    if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) continue;
                    for(let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth){
                        const dyC = (dyCCorner + wC) / strideWidth;
                        if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) continue;
                        const pixel = dyBuf.get(b, dyR, dyC, d);
                        dotProd += pixel;
                    }
                }
                dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);
            }
        }
        return dx.toTensor();
    }
    pool3d(x, convInfo, poolType) {
        (0, _cpuUtil.assertNotComplex)(x, "pool3d");
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = convInfo.padInfo.front;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const initialValue = poolType === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
        const xValues = this.readSync(x.dataId);
        const output = _tfjsCore.buffer(convInfo.outShape, x.dtype);
        const outputVals = output.values;
        const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];
        const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];
        const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];
        const outputColStrides = convInfo.outShape[4];
        for(let batch = 0; batch < convInfo.batchSize; ++batch){
            const outputBatchOffset = batch * outputBatchStrides;
            const inputBatchOffset = batch * x.strides[0];
            for(let channel = 0; channel < convInfo.inChannels; ++channel)for(let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth){
                const xDepthCorner = yDepth * strideDepth - padFront;
                let xDepthMin = xDepthCorner;
                while(xDepthMin < 0)xDepthMin += dilationDepth;
                const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);
                const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;
                for(let yRow = 0; yRow < convInfo.outHeight; ++yRow){
                    const xRowCorner = yRow * strideHeight - padTop;
                    let xRowMin = xRowCorner;
                    while(xRowMin < 0)xRowMin += dilationHeight;
                    const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);
                    const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;
                    for(let yCol = 0; yCol < convInfo.outWidth; ++yCol){
                        const xColCorner = yCol * strideWidth - padLeft;
                        let xColMin = xColCorner;
                        while(xColMin < 0)xColMin += dilationWidth;
                        const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);
                        // Shader code begins
                        const outputColOffset = outputRowOffset + yCol * outputColStrides;
                        let minMaxValue = initialValue;
                        let avgValue = 0;
                        let count = 0;
                        for(let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth){
                            const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];
                            for(let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight){
                                const xRowOffset = xDepthOffset + xRow * x.strides[2];
                                for(let xCol = xColMin; xCol < xColMax; xCol += dilationWidth){
                                    const xColOffset = xRowOffset + xCol * x.strides[3];
                                    const pixel = xValues[xColOffset + channel];
                                    if (poolType === "max" && pixel > minMaxValue) minMaxValue = pixel;
                                    else if (poolType === "avg") {
                                        avgValue += pixel;
                                        count++;
                                    }
                                    if (isNaN(minMaxValue)) break;
                                }
                                if (isNaN(minMaxValue)) break;
                            }
                            if (isNaN(minMaxValue)) break;
                        }
                        const outputOffset = outputColOffset + channel;
                        outputVals[outputOffset] = poolType === "avg" ? avgValue / count : minMaxValue;
                    }
                }
            }
        }
        return output.toTensor();
    }
    avgPool3d(x, convInfo) {
        (0, _cpuUtil.assertNotComplex)(x, "avgPool3d");
        return this.pool3d(x, convInfo, "avg").toFloat();
    }
    avgPool3dBackprop(dy, x, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            dy,
            x
        ], "avgPool3dBackprop");
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const filterDepth = convInfo.filterDepth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const dx = _tfjsCore.buffer(x.shape, "float32");
        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
        const dyBuf = this.bufferSync(dy);
        for(let batch = 0; batch < convInfo.batchSize; ++batch){
            for(let channel = 0; channel < convInfo.inChannels; ++channel)for(let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth){
                for(let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow)for(let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol){
                    // Shader code begins.
                    const dyDepthCorner = dxDepth - padFront;
                    const dyRowCorner = dxRow - padTop;
                    const dyColCorner = dxCol - padLeft;
                    let dotProd = 0;
                    for(let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth){
                        const dyDepth = (dyDepthCorner + wDepth) / strideDepth;
                        if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) continue;
                        for(let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight){
                            const dyRow = (dyRowCorner + wRow) / strideHeight;
                            if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) continue;
                            for(let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth){
                                const dyCol = (dyColCorner + wCol) / strideWidth;
                                if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) continue;
                                const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                                dotProd += pixel;
                            }
                        }
                    }
                    dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);
                }
            }
        }
        return dx.toTensor();
    }
    maxPool3d(x, convInfo) {
        (0, _cpuUtil.assertNotComplex)(x, "maxPool3d");
        return this.pool3d(x, convInfo, "max").toFloat();
    }
    maxPool3dPositions(x, convInfo) {
        const maxPositions = _tfjsCore.buffer(convInfo.outShape, "int32");
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = convInfo.padInfo.front;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const xBuf = this.bufferSync(x);
        for(let batch = 0; batch < convInfo.batchSize; ++batch){
            for(let channel = 0; channel < convInfo.inChannels; ++channel)for(let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth){
                const xDepthCorner = yDepth * strideDepth - padFront;
                let xDepthMin = xDepthCorner;
                while(xDepthMin < 0)xDepthMin += dilationDepth;
                const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);
                for(let yRow = 0; yRow < convInfo.outHeight; ++yRow){
                    const xRowCorner = yRow * strideHeight - padTop;
                    let xRowMin = xRowCorner;
                    while(xRowMin < 0)xRowMin += dilationHeight;
                    const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);
                    for(let yCol = 0; yCol < convInfo.outWidth; ++yCol){
                        const xColCorner = yCol * strideWidth - padLeft;
                        let xColMin = xColCorner;
                        while(xColMin < 0)xColMin += dilationWidth;
                        const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);
                        // Shader code begins
                        let maxValue = Number.NEGATIVE_INFINITY;
                        let maxPosition = -1;
                        for(let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth){
                            const wDepth = xDepth - xDepthCorner;
                            for(let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight){
                                const wRow = xRow - xRowCorner;
                                for(let xCol = xColMin; xCol < xColMax; xCol += dilationWidth){
                                    const wCol = xCol - xColCorner;
                                    const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);
                                    if (pixel >= maxValue) {
                                        maxValue = pixel;
                                        maxPosition = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterHeight + wCol;
                                    }
                                }
                            }
                        }
                        maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);
                    }
                }
            }
        }
        return maxPositions.toTensor();
    }
    maxPool3dBackprop(dy, x, y, convInfo) {
        (0, _cpuUtil.assertNotComplex)([
            x,
            y
        ], "maxPool3dBackprop");
        const maxPositions = this.maxPool3dPositions(x, convInfo);
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const dx = _tfjsCore.buffer(x.shape, "float32");
        const maxPosBuf = this.bufferSync(maxPositions);
        const dyBuf = this.bufferSync(dy);
        for(let batch = 0; batch < convInfo.batchSize; ++batch){
            for(let channel = 0; channel < convInfo.inChannels; ++channel)for(let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth){
                for(let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow)for(let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol){
                    // Shader code begins
                    const dyDepthCorner = dxDepth - padFront;
                    const dyRowCorner = dxRow - padTop;
                    const dyColCorner = dxCol - padLeft;
                    let dotProd = 0;
                    for(let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth){
                        const dyDepth = (dyDepthCorner + wDepth) / strideDepth;
                        if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) continue;
                        for(let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight){
                            const dyRow = (dyRowCorner + wRow) / strideHeight;
                            if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) continue;
                            for(let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth){
                                const dyCol = (dyColCorner + wCol) / strideWidth;
                                if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) continue;
                                const maxPos = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                                const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterWidth + wCol;
                                const mask = maxPos === curPos ? 1 : 0;
                                if (mask === 0) continue;
                                const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                                dotProd += pixel * mask;
                            }
                        }
                    }
                    dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);
                }
            }
        }
        return dx.toTensor();
    }
    cast(x, dtype) {
        return (0, _tfjsCore.backend_util).castTensor(x, dtype, this);
    }
    reshape(x, shape) {
        return (0, _tfjsCore.backend_util).reshapeTensor(x, shape);
    }
    avgPool(x, convInfo) {
        (0, _cpuUtil.assertNotComplex)(x, "avgPool");
        (0, _cpuUtil.assertNotComplex)(x, "maxPool");
        const xValues = this.readSync(x.dataId);
        return (0, _poolUtils.pool)(xValues, x.shape, x.dtype, x.strides, convInfo, "avg").toTensor().toFloat();
    }
    resizeBilinear(x, newHeight, newWidth, alignCorners) {
        (0, _cpuUtil.assertNotComplex)(x, "resizeBilinear");
        const [batch, oldHeight, oldWidth, numChannels] = x.shape;
        const xValues = this.readSync(x.dataId);
        const result = new Float32Array((0, _tfjsCore.util).sizeFromShape([
            batch,
            newHeight,
            newWidth,
            numChannels
        ]));
        const effectiveInputSize = [
            alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,
            alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth
        ];
        const effectiveOutputSize = [
            alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,
            alignCorners && newWidth > 1 ? newWidth - 1 : newWidth
        ];
        let outputIdx = 0;
        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];
        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];
        for(let b = 0; b < batch; b++)for(let r = 0; r < newHeight; r++){
            const sourceFracRow = effectiveRowSizeRatio * r;
            const sourceRowFloor = Math.floor(sourceFracRow);
            const rowFrac = sourceFracRow - sourceRowFloor;
            const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));
            const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];
            const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];
            for(let c = 0; c < newWidth; c++){
                const sourceFracCol = effectiveColSizeRatio * c;
                const sourceColFloor = Math.floor(sourceFracCol);
                const colFrac = sourceFracCol - sourceColFloor;
                const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));
                const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];
                const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];
                const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];
                const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];
                for(let d = 0; d < numChannels; d++){
                    // Begin shader.
                    // Compute the fractional index of the source.
                    const topLeft = xValues[topLeftOffest + d];
                    const bottomLeft = xValues[botLeftOffset + d];
                    const topRight = xValues[topRightOffset + d];
                    const bottomRight = xValues[botRightOffest + d];
                    const top = topLeft + (topRight - topLeft) * colFrac;
                    const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;
                    const newValue = top + (bottom - top) * rowFrac;
                    result[outputIdx++] = newValue;
                }
            }
        }
        return _tfjsCore.tensor(result, [
            batch,
            newHeight,
            newWidth,
            numChannels
        ]);
    }
    resizeBilinearBackprop(dy, x, alignCorners) {
        (0, _cpuUtil.assertNotComplex)([
            dy,
            x
        ], "resizeBilinearBackprop");
        const [batch, xHeight, xWidth, depth] = x.shape;
        const [, yHeight, yWidth] = dy.shape;
        const output = new Float32Array(batch * xHeight * xWidth * depth);
        // In the backwards pass, we want to find the pixels that were generated
        // for each pixel in the input image the forward pass and add the
        // corresponding coefficient from dy to the gradient (with some
        // interpolation).
        const effectiveXSize = [
            alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,
            alignCorners && yWidth > 1 ? xWidth - 1 : xWidth
        ];
        const effectiveYSize = [
            alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,
            alignCorners && yWidth > 1 ? yWidth - 1 : yWidth
        ];
        const heightScale = effectiveXSize[0] / effectiveYSize[0];
        const widthScale = effectiveXSize[1] / effectiveYSize[1];
        // Reference implementation
        // tslint:disable-next-line:max-line-length
        // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275
        const dyValues = this.readSync(dy.dataId);
        let offset = 0;
        for(let b = 0; b < batch; b++){
            const bOffset = b * x.strides[0];
            for(let r = 0; r < yHeight; r++){
                const dxR = r * heightScale;
                const topDxRIndex = Math.floor(dxR);
                const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);
                const topDxROffset = bOffset + topDxRIndex * x.strides[1];
                const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];
                const dxRLerp = dxR - topDxRIndex;
                const inverseDxRLerp = 1.0 - dxRLerp;
                for(let c = 0; c < yWidth; c++){
                    const dxC = c * widthScale;
                    const leftDxCIndex = Math.floor(dxC);
                    const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);
                    const dxCLerp = dxC - leftDxCIndex;
                    const inverseDxCLerp = 1.0 - dxCLerp;
                    const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];
                    const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];
                    const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * x.strides[2];
                    const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * x.strides[2];
                    const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;
                    const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;
                    const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;
                    const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;
                    for(let d = 0; d < depth; d++){
                        const dyVal = dyValues[offset++];
                        output[topLeftRCOffset + d] += dyVal * inverseDxRLerpTimesInverseDxCLerp;
                        output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;
                        output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;
                        output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;
                    }
                }
            }
        }
        return _tfjsCore.tensor4d(output, [
            batch,
            xWidth,
            xHeight,
            depth
        ], x.dtype);
    }
    resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {
        (0, _cpuUtil.assertNotComplex)(x, "resizeNearestNeighbor");
        const [batch, oldHeight, oldWidth, numChannels] = x.shape;
        const xValues = this.readSync(x.dataId);
        const output = new Float32Array(batch * newHeight * newWidth * numChannels);
        const effectiveInputSize = [
            alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,
            alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth
        ];
        const effectiveOutputSize = [
            alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,
            alignCorners && newWidth > 1 ? newWidth - 1 : newWidth
        ];
        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];
        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];
        let outputOffset = 0;
        for(let b = 0; b < batch; b++){
            const batchOffset = b * x.strides[0];
            for(let r = 0; r < newHeight; r++){
                const sourceFracRow = effectiveRowSizeRatio * r;
                const sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));
                const rowOffset = batchOffset + sourceNearestRow * x.strides[1];
                for(let c = 0; c < newWidth; c++){
                    const sourceFracCol = effectiveColSizeRatio * c;
                    const sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));
                    const colOffset = rowOffset + sourceNearestCol * x.strides[2];
                    for(let d = 0; d < numChannels; d++){
                        // Begin shader.
                        // Compute the fractional index of the source.
                        const newVal = xValues[colOffset + d];
                        output[outputOffset++] = newVal;
                    }
                }
            }
        }
        return _tfjsCore.tensor(output, [
            batch,
            newHeight,
            newWidth,
            numChannels
        ], x.dtype);
    }
    resizeNearestNeighborBackprop(dy, x, alignCorners) {
        (0, _cpuUtil.assertNotComplex)([
            dy,
            x
        ], "resizeNearestNeighborBackprop");
        const [batch, xHeight, xWidth, depth] = x.shape;
        const [, yHeight, yWidth] = dy.shape;
        const output = new Float32Array(batch * xHeight * xWidth * depth);
        const dyValues = this.readSync(dy.dataId);
        // In the backwards pass, we want to find the pixels that were generated
        // for each pixel in the input image the forward pass
        const effectiveXSize = [
            alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,
            alignCorners && yWidth > 1 ? xWidth - 1 : xWidth
        ];
        const effectiveYSize = [
            alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,
            alignCorners && yWidth > 1 ? yWidth - 1 : yWidth
        ];
        const heightScale = effectiveXSize[0] / effectiveYSize[0];
        const widthScale = effectiveXSize[1] / effectiveYSize[1];
        const invHeightScale = 1 / heightScale;
        const invWidthScale = 1 / widthScale;
        // This defines the size of the window of values around a particular
        // index in dy that we want to search for contributions to dx.
        const winHeight = Math.ceil(invHeightScale) * 2 + 2;
        const winWidth = Math.ceil(invWidthScale) * 2 + 2;
        // Loop over the output space.
        for(let b = 0; b < batch; b++){
            const batchOffset = b * x.strides[0];
            for(let r = 0; r < xHeight; r++){
                const rowOffset = batchOffset + r * x.strides[1];
                // Compute bounds for where in dy we will look
                const startRLerp = Math.floor(r * invHeightScale);
                const startDyR = Math.floor(startRLerp - winHeight / 2);
                for(let c = 0; c < xWidth; c++){
                    const colOffset = rowOffset + c * x.strides[2];
                    // Compute bounds for where in dy we will look
                    const startCLerp = Math.floor(c * invWidthScale);
                    const startDyC = Math.floor(startCLerp - winWidth / 2);
                    for(let d = 0; d < depth; d++){
                        let accum = 0;
                        // loop over dy
                        for(let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++){
                            const dyR = dyRIndex + startDyR;
                            // Guard against the window exceeding the bounds of dy
                            if (dyR < 0 || dyR >= yHeight) continue;
                            const dyROffset = batchOffset + dyR * dy.strides[1];
                            const sourceFracRow = dyR * heightScale;
                            const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));
                            if (r !== sourceNearestRow) continue;
                            for(let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++){
                                const dyC = dyCIndex + startDyC;
                                // Guard against the window exceeding the bounds of dy
                                if (dyC < 0 || dyC >= yWidth) continue;
                                const dyCOffset = dyROffset + dyC * dy.strides[2];
                                const sourceFracCol = dyC * widthScale;
                                const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));
                                if (c === sourceNearestCol) accum += dyValues[dyCOffset + d];
                            }
                        }
                        output[colOffset + d] = accum;
                    }
                }
            }
        }
        return _tfjsCore.tensor4d(output, x.shape, x.dtype);
    }
    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {
        (0, _cpuUtil.assertNotComplex)([
            x,
            mean,
            variance,
            scale,
            offset
        ], "batchNorm");
        const xVals = this.readSync(x.dataId);
        const mVals = this.readSync(mean.dataId);
        const varVals = this.readSync(variance.dataId);
        const sVals = scale ? this.readSync(scale.dataId) : new Float32Array([
            1
        ]);
        const offVals = offset ? this.readSync(offset.dataId) : new Float32Array([
            0
        ]);
        const outVals = new Float32Array(xVals.length);
        const offValsLength = offVals.length;
        const sValsLength = sVals.length;
        const varValsLength = varVals.length;
        const mValsLength = mVals.length;
        let offi = 0;
        let mi = 0;
        let si = 0;
        let vi = 0;
        for(let i = 0; i < xVals.length; ++i){
            outVals[i] = offVals[offi++] + (xVals[i] - mVals[mi++]) * sVals[si++] / Math.sqrt(varVals[vi++] + varianceEpsilon);
            if (offi >= offValsLength) offi = 0;
            if (mi >= mValsLength) mi = 0;
            if (si >= sValsLength) si = 0;
            if (vi >= varValsLength) vi = 0;
        }
        return _tfjsCore.tensor4d(outVals, x.shape);
    }
    localResponseNormalization4D(x, depthRadius, bias, alpha, beta) {
        (0, _cpuUtil.assertNotComplex)(x, "localResponseNormalization4D");
        const channels = x.shape[3];
        const maxD = channels - 1;
        const xValues = this.readSync(x.dataId);
        const size = x.size;
        const result = new Float32Array(size);
        function sumAcrossChannels(offset) {
            const currentChannel = offset % channels;
            let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);
            const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);
            let sum = 0.0;
            for(; beginSumOffset <= endSumOffset; beginSumOffset++){
                const z = xValues[beginSumOffset];
                sum += z * z;
            }
            return sum;
        }
        for(let offset = 0; offset < size; offset++){
            const sum = sumAcrossChannels(offset);
            const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);
            result[offset] = val;
        }
        return _tfjsCore.tensor4d(result, x.shape);
    }
    LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {
        (0, _cpuUtil.assertNotComplex)(dy, "LRNGrad");
        const channels = dy.shape[3];
        const dyValues = this.readSync(dy.dataId);
        const inputImageValues = this.readSync(inputImage.dataId);
        const outputImageValues = this.readSync(outputImage.dataId);
        const result = new Float32Array(dy.size);
        const size = dy.size;
        for(let offset = 0; offset < size; offset++){
            const currentChannel = offset % channels;
            const depthBegin = offset - currentChannel + Math.max(0, currentChannel - depthRadius);
            const depthEnd = offset - currentChannel + Math.min(channels, currentChannel + depthRadius + 1);
            let norm = 0;
            for(let k = depthBegin; k < depthEnd; k++)norm += Math.pow(inputImageValues[k], 2);
            norm = alpha * norm + bias;
            for(let k1 = depthBegin; k1 < depthEnd; k1++){
                let dyi = -2 * alpha * beta * inputImageValues[k1] * outputImageValues[offset] / norm;
                if (offset === k1) dyi += Math.pow(norm, -beta);
                dyi *= dyValues[offset];
                result[k1] += dyi;
            }
        }
        return _tfjsCore.tensor4d(result, dy.shape);
    }
    multinomial(logits, normalized, numSamples, seed) {
        (0, _cpuUtil.assertNotComplex)(logits, "multinomial");
        const probabilities = normalized ? logits : _tfjsCore.softmax(logits);
        const batchSize = probabilities.shape[0];
        const numEvents = probabilities.shape[1];
        const res = _tfjsCore.zeros([
            batchSize,
            numSamples
        ], "int32");
        const resVals = this.readSync(res.dataId);
        const probVals = this.readSync(probabilities.dataId);
        for(let b = 0; b < batchSize; ++b){
            const offset = b * numEvents;
            // The cdf won't include the last event. It will be implicit if no other
            // event happened.
            const cdf = new Float32Array(numEvents - 1);
            cdf[0] = probVals[offset];
            for(let event = 1; event < cdf.length; ++event)cdf[event] = cdf[event - 1] + probVals[offset + event];
            const random = _seedrandom.alea(seed.toString());
            const outOffset = b * numSamples;
            for(let sampleId = 0; sampleId < numSamples; ++sampleId){
                const r = random();
                // Assume last event happened by default.
                resVals[outOffset + sampleId] = cdf.length;
                for(let event1 = 0; event1 < cdf.length; event1++)if (r < cdf[event1]) {
                    resVals[outOffset + sampleId] = event1;
                    break;
                }
            }
        }
        return res;
    }
    oneHot(indices, depth, onValue, offValue) {
        (0, _cpuUtil.assertNotComplex)(indices, "oneHot");
        const res = new Float32Array(indices.size * depth);
        res.fill(offValue);
        const indicesVal = this.readSync(indices.dataId);
        for(let event = 0; event < indices.size; ++event)if (indicesVal[event] >= 0 && indicesVal[event] < depth) res[event * depth + indicesVal[event]] = onValue;
        return _tfjsCore.tensor2d(res, [
            indices.size,
            depth
        ], "int32");
    }
    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
        (0, _cpuUtil.assertNotComplex)(boxes, "nonMaxSuppression");
        const boxesVals = this.readSync(boxes.dataId);
        const scoresVals = this.readSync(scores.dataId);
        return nonMaxSuppressionV3(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
    }
    fft(x) {
        return this.fftBatch(x, false);
    }
    ifft(x) {
        return this.fftBatch(x, true);
    }
    /**
     * Calculate FFT of inner most elements of batch tensor.
     */ fftBatch(x, inverse) {
        const batch = x.shape[0];
        const innerDim = x.shape[1];
        // Collects real and imaginary values separately.
        const realResult = _tfjsCore.buffer(x.shape, "float32");
        const imagResult = _tfjsCore.buffer(x.shape, "float32");
        const real = _tfjsCore.real(x).as2D(batch, innerDim);
        const imag = _tfjsCore.imag(x).as2D(batch, innerDim);
        for(let b = 0; b < batch; b++){
            // TODO: Support slice ops for complex type.
            const r = real.slice([
                b,
                0
            ], [
                1,
                innerDim
            ]);
            const i = imag.slice([
                b,
                0
            ], [
                1,
                innerDim
            ]);
            const input = _tfjsCore.complex(r, i);
            // Run FFT by batch element.
            const res = this.readSync(this.fftImpl(input, inverse).dataId);
            for(let d = 0; d < innerDim; d++){
                const c = (0, _tfjsCore.backend_util).getComplexWithIndex(res, d);
                realResult.values[b * innerDim + d] = c.real;
                imagResult.values[b * innerDim + d] = c.imag;
            }
        }
        const t = _tfjsCore.complex(realResult.toTensor(), imagResult.toTensor());
        return t.as2D(batch, innerDim);
    }
    fftImpl(x, inverse) {
        const x1D = x.as1D();
        const n = x1D.size;
        if (this.isExponentOf2(n)) {
            let result = this.fftRadix2(x1D, n, inverse).as2D(x.shape[0], x.shape[1]);
            if (inverse) result = _tfjsCore.complex(_tfjsCore.real(result).div(_tfjsCore.scalar(n)), _tfjsCore.imag(result).div(_tfjsCore.scalar(n)));
            return result;
        } else {
            const data = this.readSync(x.dataId);
            const rawOutput = this.fourierTransformByMatmul(data, n, inverse);
            const output = (0, _tfjsCore.backend_util).splitRealAndImagArrays(rawOutput);
            return _tfjsCore.complex(output.real, output.imag).as2D(x.shape[0], x.shape[1]);
        }
    }
    isExponentOf2(size) {
        return (size & size - 1) === 0;
    }
    // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.
    fftRadix2(input, size, inverse) {
        if (size === 1) return input;
        const data = this.readSync(input.dataId);
        const half = size / 2;
        const evenComplex = (0, _tfjsCore.backend_util).complexWithEvenIndex(data);
        let evenTensor = _tfjsCore.complex(evenComplex.real, evenComplex.imag).as1D();
        const oddComplex = (0, _tfjsCore.backend_util).complexWithOddIndex(data);
        let oddTensor = _tfjsCore.complex(oddComplex.real, oddComplex.imag).as1D();
        // Recursive call for half part of original input.
        evenTensor = this.fftRadix2(evenTensor, half, inverse);
        oddTensor = this.fftRadix2(oddTensor, half, inverse);
        const e = (0, _tfjsCore.backend_util).exponents(size, inverse);
        const exponent = _tfjsCore.complex(e.real, e.imag).mul(oddTensor);
        const addPart = evenTensor.add(exponent);
        const subPart = evenTensor.sub(exponent);
        const realTensor = _tfjsCore.real(addPart).concat(_tfjsCore.real(subPart));
        const imagTensor = _tfjsCore.imag(addPart).concat(_tfjsCore.imag(subPart));
        return _tfjsCore.complex(realTensor, imagTensor).as1D();
    }
    // Calculate fourier transform by multplying sinusoid matrix.
    fourierTransformByMatmul(data, size, inverse) {
        const ret = new Float32Array(size * 2);
        // TODO: Use matmul instead once it supports complex64 type.
        for(let r = 0; r < size; r++){
            let real = 0.0;
            let imag = 0.0;
            for(let c = 0; c < size; c++){
                const e = (0, _tfjsCore.backend_util).exponent(r * c, size, inverse);
                const term = (0, _tfjsCore.backend_util).getComplexWithIndex(data, c);
                real += term.real * e.real - term.imag * e.imag;
                imag += term.real * e.imag + term.imag * e.real;
            }
            if (inverse) {
                real /= size;
                imag /= size;
            }
            (0, _tfjsCore.backend_util).assignToTypedArray(ret, real, imag, r);
        }
        return ret;
    }
    depthToSpace(x, blockSize, dataFormat) {
        (0, _tfjsCore.util).assert(dataFormat === "NHWC", ()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);
        (0, _tfjsCore.util).assert(blockSize > 1, ()=>`blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);
        const batchSize = x.shape[0];
        const inputHeight = x.shape[1];
        const inputWidth = x.shape[2];
        const inputDepth = x.shape[3];
        const outputHeight = inputHeight * blockSize;
        const outputWidth = inputWidth * blockSize;
        const outputDepth = inputDepth / (blockSize * blockSize);
        const xValues = this.readSync(x.dataId);
        const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);
        let outputIdx = 0;
        for(let b = 0; b < batchSize; ++b)for(let h = 0; h < outputHeight; ++h){
            const inH = Math.floor(h / blockSize);
            const offsetH = h % blockSize;
            for(let w = 0; w < outputWidth; ++w){
                const inW = Math.floor(w / blockSize);
                const offsetW = w % blockSize;
                const offsetD = (offsetH * blockSize + offsetW) * outputDepth;
                for(let d = 0; d < outputDepth; ++d){
                    const inD = d + offsetD;
                    const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));
                    result[outputIdx++] = xValues[inputIdx];
                }
            }
        }
        return _tfjsCore.tensor4d(result, [
            batchSize,
            outputHeight,
            outputWidth,
            outputDepth
        ]);
    }
    broadcastedBinaryOp(a, b, dtype, op) {
        const newShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(a.shape, b.shape);
        const result = _tfjsCore.buffer(newShape, dtype);
        const aVals = this.readSync(a.dataId);
        const bVals = this.readSync(b.dataId);
        const aBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(a.shape, newShape);
        const bBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(b.shape, newShape);
        const resVals = result.values;
        if (aBroadcastDims.length + bBroadcastDims.length === 0) for(let i = 0; i < resVals.length; ++i)resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);
        else {
            const aBuf = this.bufferSync(a);
            const bBuf = this.bufferSync(b);
            for(let i1 = 0; i1 < resVals.length; ++i1){
                const loc = result.indexToLoc(i1);
                const aLoc = loc.slice(-a.rank);
                aBroadcastDims.forEach((d)=>aLoc[d] = 0);
                const aIndex = aBuf.locToIndex(aLoc);
                const bLoc = loc.slice(-b.rank);
                bBroadcastDims.forEach((d)=>bLoc[d] = 0);
                const bIndex = bBuf.locToIndex(bLoc);
                resVals[i1] = op(aVals[aIndex], bVals[bIndex]);
            }
        }
        return result.toTensor();
    }
    broadcastedBinaryComplexOp(a, b, op) {
        const newShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(a.shape, b.shape);
        const realResult = _tfjsCore.buffer(newShape, "float32");
        const imagResult = _tfjsCore.buffer(newShape, "float32");
        const aVals = this.readSync(a.dataId);
        const bVals = this.readSync(b.dataId);
        const aBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(a.shape, newShape);
        const bBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(b.shape, newShape);
        const realVals = realResult.values;
        const imagVals = imagResult.values;
        if (aBroadcastDims.length + bBroadcastDims.length === 0) for(let i = 0; i < realVals.length; i++){
            const aIdx = i % aVals.length;
            const bIdx = i % bVals.length;
            const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);
            realVals[i] = result.real;
            imagVals[i] = result.imag;
        }
        else {
            const aRealBuf = this.bufferSync(this.data.get(a.dataId).complexTensors.real);
            const bRealBuf = this.bufferSync(this.data.get(b.dataId).complexTensors.real);
            for(let i1 = 0; i1 < realVals.length; i1++){
                const loc = realResult.indexToLoc(i1);
                const aLoc = loc.slice(-a.rank);
                aBroadcastDims.forEach((d)=>aLoc[d] = 0);
                const aIndex = aRealBuf.locToIndex(aLoc);
                const bLoc = loc.slice(-b.rank);
                bBroadcastDims.forEach((d)=>bLoc[d] = 0);
                const bIndex = bRealBuf.locToIndex(bLoc);
                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);
                realVals[i1] = opResult.real;
                imagVals[i1] = opResult.imag;
            }
        }
        return this.complex(realResult.toTensor(), imagResult.toTensor());
    }
    split(x, sizeSplits, axis) {
        return split(x, sizeSplits, axis);
    }
    dispose() {}
    floatPrecision() {
        return 32;
    }
    /** Returns the smallest representable number.  */ epsilon() {
        return super.epsilon();
    }
    cropAndResize(images, boxes, boxIndex, cropSize, method, extrapolationValue) {
        const [batch, imageHeight, imageWidth, numChannels] = images.shape;
        const numBoxes = boxes.shape[0];
        const [cropHeight, cropWidth] = cropSize;
        const output = _tfjsCore.buffer([
            numBoxes,
            cropHeight,
            cropWidth,
            numChannels
        ], "float32");
        const boxVals = this.readSync(boxes.dataId);
        const boxIndVals = this.readSync(boxIndex.dataId);
        const imageVals = this.readSync(images.dataId);
        const inStride = images.strides; // to calculate flat indexes into image
        const outStride = output.strides; // to calculate flat indexes into output
        // Reference implementation
        // tslint:disable-next-line:max-line-length
        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc
        for(let b = 0; b < numBoxes; b++){
            const startInd = b * 4;
            const y1 = boxVals[startInd];
            const x1 = boxVals[startInd + 1];
            const y2 = boxVals[startInd + 2];
            const x2 = boxVals[startInd + 3];
            const bInd = boxIndVals[b];
            if (bInd >= batch) continue;
            const heightScale = cropHeight > 1 ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;
            const widthScale = cropWidth > 1 ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;
            for(let y = 0; y < cropHeight; y++){
                const yInd = cropHeight > 1 ? y1 * (imageHeight - 1) + y * heightScale : 0.5 * (y1 + y2) * (imageHeight - 1);
                if (yInd < 0 || yInd > imageHeight - 1) {
                    for(let x = 0; x < cropWidth; x++)for(let c = 0; c < numChannels; c++){
                        const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
                        output.values[ind] = extrapolationValue;
                    }
                    continue;
                }
                if (method === "bilinear") {
                    const topInd = Math.floor(yInd);
                    const bottomInd = Math.ceil(yInd);
                    const yLerp = yInd - topInd;
                    for(let x3 = 0; x3 < cropWidth; x3++){
                        const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x3 * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);
                        if (xInd < 0 || xInd > imageWidth - 1) {
                            for(let c1 = 0; c1 < numChannels; c1++){
                                const ind1 = c1 + x3 * outStride[2] + y * outStride[1] + b * outStride[0];
                                output.values[ind1] = extrapolationValue;
                            }
                            continue;
                        }
                        const leftInd = Math.floor(xInd);
                        const rightInd = Math.ceil(xInd);
                        const xLerp = xInd - leftInd;
                        for(let c2 = 0; c2 < numChannels; c2++){
                            let ind2 = c2 + leftInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];
                            const topLeft = imageVals[ind2];
                            ind2 = c2 + rightInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];
                            const topRight = imageVals[ind2];
                            ind2 = c2 + leftInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];
                            const bottomLeft = imageVals[ind2];
                            ind2 = c2 + rightInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];
                            const bottomRight = imageVals[ind2];
                            const top = topLeft + (topRight - topLeft) * xLerp;
                            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;
                            ind2 = c2 + x3 * outStride[2] + y * outStride[1] + b * outStride[0];
                            output.values[ind2] = top + (bottom - top) * yLerp;
                        }
                    }
                } else for(let x4 = 0; x4 < cropWidth; ++x4){
                    const xInd1 = cropWidth > 1 ? x1 * (imageWidth - 1) + x4 * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);
                    if (xInd1 < 0 || xInd1 > imageWidth - 1) {
                        for(let c3 = 0; c3 < numChannels; c3++){
                            const ind3 = c3 + x4 * outStride[2] + y * outStride[1] + b * outStride[0];
                            output.values[ind3] = extrapolationValue;
                        }
                        continue;
                    }
                    const closestX = Math.round(xInd1);
                    const closestY = Math.round(yInd);
                    for(let c4 = 0; c4 < numChannels; c4++){
                        const inInd = c4 + closestX * inStride[2] + closestY * inStride[1] + bInd * inStride[0];
                        const outInd = c4 + x4 * outStride[2] + y * outStride[1] + b * outStride[0];
                        output.values[outInd] = imageVals[inInd];
                    }
                }
            }
        }
        return output.toTensor();
    }
    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {
        const { sliceRank , numUpdates , sliceSize , strides , outputSize  } = (0, _tfjsCore.backend_util).calculateShapes(sparseValues, sparseIndices, outputShape);
        const sumDupeIndices = false;
        return this.scatter(sparseIndices, sparseValues, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);
    }
    gatherND(x, indices) {
        const indicesShape = indices.shape;
        const sliceRank = indicesShape[indicesShape.length - 1];
        const [resultShape, numSlices, sliceSize, strides] = (0, _tfjsCore.backend_util).prepareAndValidate(x, indices);
        if (numSlices === 0) return _tfjsCore.tensor([], resultShape, x.dtype);
        const buffer = new (0, _tfjsCore.TensorBuffer)([
            numSlices,
            sliceSize
        ], x.dtype);
        const indicesData = this.readSync(indices.dataId);
        const xData = this.readSync(x.dataId);
        for(let i = 0; i < numSlices; i++){
            const index = [];
            let flattenIndex = 0;
            for(let j = 0; j < sliceRank; j++){
                const dim = indicesData[i * sliceRank + j];
                flattenIndex += dim * strides[j];
                index.push(dim);
            }
            if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) throw new Error(`Invalid indices: ${index} does not index into ${x.shape}`);
            for(let k = 0; k < sliceSize; k++)buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];
        }
        return buffer.toTensor().reshape(resultShape);
    }
    scatterND(indices, updates, shape) {
        const { sliceRank , numUpdates , sliceSize , strides , outputSize  } = (0, _tfjsCore.backend_util).calculateShapes(updates, indices, shape);
        const defaultValue = _tfjsCore.scalar(0);
        const sumDupeIndices = true;
        return this.scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);
    }
    fill(shape, value, dtype) {
        dtype = dtype || (0, _tfjsCore.util).inferDtype(value);
        const values = (0, _tfjsCore.util).getArrayFromDType(dtype, (0, _tfjsCore.util).sizeFromShape(shape));
        values.fill(value);
        return (0, _tfjsCore.engine)().makeTensor(values, shape, dtype, this);
    }
    onesLike(x) {
        if (x.dtype === "string") throw new Error("onesLike is not supported for string tensors");
        else return this.fill(x.shape, 1, x.dtype);
    }
    zerosLike(x) {
        const values = (0, _tfjsCore.util).getArrayFromDType(x.dtype, (0, _tfjsCore.util).sizeFromShape(x.shape));
        return this.makeOutput(values, x.shape, x.dtype);
    }
    linspace(start, stop, num) {
        return (0, _tfjsCore.backend_util).linspaceImpl(start, stop, num);
    }
    scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {
        const flattenShape = [
            outputSize / sliceSize,
            sliceSize
        ];
        const indicesData = this.readSync(indices.dataId);
        const updatesData = this.readSync(updates.dataId);
        if (outputSize === 0) return _tfjsCore.tensor([], shape, updates.dtype);
        const buffer = new (0, _tfjsCore.TensorBuffer)(flattenShape, updates.dtype);
        buffer.values.fill(this.readSync(defaultValue.dataId)[0]);
        for(let i = 0; i < numUpdates; i++){
            const index = [];
            let flattenIndex = 0;
            for(let j = 0; j < sliceRank; j++){
                const dim = indicesData[i * sliceRank + j];
                index.push(dim);
                flattenIndex += dim * strides[j];
            }
            if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) throw new Error(`Invalid indices: ${index} does not index into ${shape}`);
            for(let k = 0; k < sliceSize; k++)if (sumDupeIndices) buffer.values[flattenIndex * sliceSize + k] += updatesData[i * sliceSize + k];
            else buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ? updatesData[0] : updatesData[i * sliceSize + k];
        }
        return buffer.toTensor().reshape(shape);
    }
}

},{"@tensorflow/tfjs-core":"2votT","seedrandom":"kcfU7","./cpu_util":"ii07P","./utils/pool_utils":"kEXEJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ii07P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertNotComplex", ()=>assertNotComplex);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function assertNotComplex(tensor, opName) {
    if (!Array.isArray(tensor)) tensor = [
        tensor
    ];
    tensor.forEach((t)=>{
        if (t != null) (0, _tfjsCore.util).assert(t.dtype !== "complex64", ()=>`${opName} does not support complex64 tensors in the CPU backend.`);
    });
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kEXEJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pool", ()=>pool);
parcelHelpers.export(exports, "maxPoolPositions", ()=>maxPoolPositions);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function pool(xValues, xShape, dtype, strides, convInfo, poolType) {
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const initialValue = poolType === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
    const output = (0, _tfjsCore.buffer)(convInfo.outShape, dtype);
    const outputVals = output.values;
    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];
    const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];
    const outputColStrides = convInfo.outShape[3];
    for(let b = 0; b < convInfo.batchSize; ++b){
        const outputBatchOffset = b * outputBatchStrides;
        const inputBatchOffset = b * strides[0];
        for(let d = 0; d < convInfo.inChannels; ++d)for(let yR = 0; yR < convInfo.outHeight; ++yR){
            const xRCorner = yR * strideHeight - padTop;
            const xRMin = Math.max(0, xRCorner);
            const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);
            const outputRowOffset = outputBatchOffset + yR * outputRowStrides;
            for(let yC = 0; yC < convInfo.outWidth; ++yC){
                const xCCorner = yC * strideWidth - padLeft;
                const xCMin = Math.max(0, xCCorner);
                const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);
                let minMaxValue = initialValue;
                let avgValue = 0;
                let count = 0;
                for(let xR = xRMin; xR < xRMax; xR += dilationHeight){
                    const xROffset = inputBatchOffset + xR * strides[1];
                    for(let xC = xCMin; xC < xCMax; xC += dilationWidth){
                        const xCOffset = xROffset + xC * strides[2];
                        const pixel = xValues[xCOffset + d];
                        if (poolType === "max" && pixel > minMaxValue) minMaxValue = pixel;
                        else if (poolType === "avg") {
                            avgValue += pixel;
                            count++;
                        }
                    }
                    if (isNaN(minMaxValue)) break;
                }
                const outputOffset = outputRowOffset + yC * outputColStrides + d;
                outputVals[outputOffset] = poolType === "avg" ? avgValue / count : minMaxValue;
            }
        }
    }
    return output;
}
function maxPoolPositions(xValues, xShape, dtype, convInfo, flattenPositions = false, includeBatchInIndex = false) {
    const maxPositions = (0, _tfjsCore.buffer)(convInfo.outShape, "int32");
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const xBuf = (0, _tfjsCore.buffer)(xShape, dtype, xValues);
    for(let b = 0; b < convInfo.batchSize; ++b){
        for(let d = 0; d < convInfo.inChannels; ++d)for(let yR = 0; yR < convInfo.outHeight; ++yR){
            const xRCorner = yR * strideHeight - padTop;
            let xRMin = xRCorner;
            while(xRMin < 0)xRMin += dilationHeight;
            // const xRMin = Math.max(0, xRCorner);
            const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);
            for(let yC = 0; yC < convInfo.outWidth; ++yC){
                const xCCorner = yC * strideWidth - padLeft;
                let xCMin = xCCorner;
                while(xCMin < 0)xCMin += dilationWidth;
                const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);
                let maxValue = Number.NEGATIVE_INFINITY;
                let maxPosition = -1;
                for(let xR = xRMin; xR < xRMax; xR += dilationHeight){
                    const wR = xR - xRCorner;
                    for(let xC = xCMin; xC < xCMax; xC += dilationWidth){
                        const wC = xC - xCCorner;
                        const pixel = xBuf.get(b, xR, xC, d);
                        if (pixel > maxValue) {
                            maxValue = pixel;
                            if (flattenPositions) maxPosition = includeBatchInIndex ? ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) * convInfo.inChannels + d : (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;
                            else maxPosition = wR * effectiveFilterWidth + wC;
                        }
                    }
                }
                maxPositions.set(maxPosition, b, yR, yC, d);
            }
        }
    }
    return maxPositions;
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQSdN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
const version = "2.0.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5JcZT":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // We explicitly import the modular kernels so they get registered in the
// global registry when we compile the library. A modular build would replace
// the contents of this file and import only the kernels that are needed.
var _tfjsCore = require("@tensorflow/tfjs-core");
var _div = require("./kernels/Div");
var _max = require("./kernels/Max");
var _maxPoolWithArgmax = require("./kernels/MaxPoolWithArgmax");
var _nonMaxSuppressionV5 = require("./kernels/NonMaxSuppressionV5");
var _square = require("./kernels/Square");
var _squaredDifference = require("./kernels/SquaredDifference");
var _transpose = require("./kernels/Transpose");
// List all kernel configs here
const kernelConfigs = [
    (0, _nonMaxSuppressionV5.nonMaxSuppressionV5Config),
    (0, _square.squareConfig),
    (0, _squaredDifference.squaredDifferenceConfig),
    (0, _div.divConfig),
    (0, _transpose.transposeConfig),
    (0, _maxPoolWithArgmax.maxPoolWithArgmaxConfig),
    (0, _max.maxConfig)
];
for (const kernelConfig of kernelConfigs)(0, _tfjsCore.registerKernel)(kernelConfig);

},{"@tensorflow/tfjs-core":"2votT","./kernels/Div":"et1LA","./kernels/Max":"l27XB","./kernels/MaxPoolWithArgmax":"7aetn","./kernels/NonMaxSuppressionV5":"fshul","./kernels/Square":"5jKJA","./kernels/SquaredDifference":"b000w","./kernels/Transpose":"gEhkg"}],"et1LA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divConfig", ()=>divConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _kernelUtils = require("../utils/kernel_utils");
var _divImpl = require("./Div_impl");
const divConfig = (0, _kernelUtils.createBinaryKernelConfig)((0, _tfjsCore.Div), (0, _divImpl.divImpl));

},{"@tensorflow/tfjs-core":"2votT","../utils/kernel_utils":"cyInH","./Div_impl":"fNWBE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyInH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBinaryKernelConfig", ()=>createBinaryKernelConfig);
parcelHelpers.export(exports, "createBinaryKernelImpl", ()=>createBinaryKernelImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
function createBinaryKernelConfig(name, op) {
    return {
        kernelName: name,
        backendName: "cpu",
        kernelFunc: ({ inputs , backend  })=>{
            const { a , b  } = inputs;
            const cpuBackend = backend;
            (0, _cpuUtil.assertNotComplex)([
                a,
                b
            ], name);
            const aVals = cpuBackend.data.get(a.dataId).values;
            const bVals = cpuBackend.data.get(b.dataId).values;
            const [resultData, resultShape] = op(a.shape, b.shape, aVals, bVals, a.dtype);
            const dataId = cpuBackend.write(resultData, resultShape, a.dtype);
            return {
                dataId,
                shape: resultShape,
                dtype: a.dtype
            };
        }
    };
}
function createBinaryKernelImpl(op) {
    return (aShape, bShape, aVals, bVals, dtype)=>{
        const newShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(aShape, bShape);
        const resultRank = newShape.length;
        const resultStrides = (0, _tfjsCore.util).computeStrides(newShape);
        const resultSize = (0, _tfjsCore.util).sizeFromShape(newShape);
        const result = (0, _tfjsCore.util).getTypedArrayFromDType(dtype, resultSize);
        const aRank = aShape.length;
        const bRank = bShape.length;
        const aStrides = (0, _tfjsCore.util).computeStrides(aShape);
        const bStrides = (0, _tfjsCore.util).computeStrides(bShape);
        const aBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(aShape, newShape);
        const bBroadcastDims = (0, _tfjsCore.backend_util).getBroadcastDims(bShape, newShape);
        if (aBroadcastDims.length + bBroadcastDims.length === 0) for(let i = 0; i < result.length; ++i)result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);
        else for(let i1 = 0; i1 < result.length; ++i1){
            const loc = (0, _tfjsCore.util).indexToLoc(i1, resultRank, resultStrides);
            const aLoc = loc.slice(-aRank);
            aBroadcastDims.forEach((d)=>aLoc[d] = 0);
            const aIndex = (0, _tfjsCore.util).locToIndex(aLoc, aRank, aStrides);
            const bLoc = loc.slice(-bRank);
            bBroadcastDims.forEach((d)=>bLoc[d] = 0);
            const bIndex = (0, _tfjsCore.util).locToIndex(bLoc, bRank, bStrides);
            result[i1] = op(aVals[aIndex], bVals[bIndex]);
        }
        return [
            result,
            newShape
        ];
    };
}

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fNWBE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divImpl", ()=>divImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _kernelUtils = require("../utils/kernel_utils");
const divImpl = (0, _kernelUtils.createBinaryKernelImpl)((a, b)=>a / b);

},{"../utils/kernel_utils":"cyInH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l27XB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxConfig", ()=>maxConfig);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _maxImpl = require("./Max_impl");
var _transposeImpl = require("./Transpose_impl");
const maxConfig = {
    kernelName: (0, _tfjsCore.Max),
    backendName: "cpu",
    kernelFunc: ({ inputs , attrs , backend  })=>{
        const { x  } = inputs;
        const { reductionIndices  } = attrs;
        const cpuBackend = backend;
        let xShape = x.shape;
        const xRank = xShape.length;
        const origAxes = (0, _tfjsCore.util).parseAxisParam(reductionIndices, xShape);
        let axes = origAxes;
        const permutedAxes = (0, _tfjsCore.backend_util).getAxesPermutation(axes, xRank);
        let xVals = cpuBackend.data.get(x.dataId).values;
        if (permutedAxes != null) {
            const newShape = new Array(xRank);
            for(let i = 0; i < newShape.length; i++)newShape[i] = xShape[permutedAxes[i]];
            xVals = (0, _transposeImpl.transposeImpl)(xVals, xShape, x.dtype, permutedAxes, newShape);
            axes = (0, _tfjsCore.backend_util).getInnerMostAxes(axes.length, xRank);
            xShape = newShape;
        }
        (0, _cpuUtil.assertNotComplex)(x, "max");
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("max", axes, xRank);
        const [maxOutShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(xShape, axes);
        const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const result = (0, _maxImpl.maxImpl)(xVals, reduceSize, maxOutShape, x.dtype);
        const dataId = cpuBackend.write(result, maxOutShape, x.dtype);
        return {
            dataId,
            shape: maxOutShape,
            dtype: x.dtype
        };
    }
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Max_impl":"hvZsa","./Transpose_impl":"fwwXp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7aetn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolWithArgmaxConfig", ()=>maxPoolWithArgmaxConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _maxPoolWithArgmaxImpl = require("./MaxPoolWithArgmax_impl");
const maxPoolWithArgmaxConfig = {
    kernelName: (0, _tfjsCore.MaxPoolWithArgmax),
    backendName: "cpu",
    kernelFunc: ({ inputs , attrs , backend  })=>{
        const { x  } = inputs;
        const { filterSize , strides , pad , includeBatchInIndex  } = attrs;
        const cpuBackend = backend;
        (0, _cpuUtil.assertNotComplex)(x, "MaxPoolWithArgmax");
        const values = cpuBackend.data.get(x.dataId).values;
        const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, [
            1,
            1
        ], pad);
        const [pooled, indexes] = (0, _maxPoolWithArgmaxImpl.maxPoolWithArgmaxImpl)(values, x.shape, x.dtype, includeBatchInIndex, convInfo);
        const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);
        const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);
        return [
            {
                dataId: pooledDataId,
                shape: convInfo.outShape,
                dtype: x.dtype
            },
            {
                dataId: indexesDataId,
                shape: convInfo.outShape,
                dtype: "int32"
            }
        ];
    }
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./MaxPoolWithArgmax_impl":"bkc1d","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bkc1d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolWithArgmaxImpl", ()=>maxPoolWithArgmaxImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _poolUtils = require("../utils/pool_utils");
function maxPoolWithArgmaxImpl(xValues, xShape, dtype, includeBatchInIndex, convInfo) {
    const strides = (0, _tfjsCore.util).computeStrides(xShape);
    const maxPools = (0, _poolUtils.pool)(xValues, xShape, dtype, strides, convInfo, "max");
    const maxPositions = (0, _poolUtils.maxPoolPositions)(xValues, xShape, dtype, convInfo, true, includeBatchInIndex);
    return [
        maxPools.values,
        maxPositions.values
    ];
}

},{"@tensorflow/tfjs-core":"2votT","../utils/pool_utils":"kEXEJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fshul":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV5Config", ()=>nonMaxSuppressionV5Config);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
const nonMaxSuppressionV5 = (0, _tfjsCore.kernel_impls).nonMaxSuppressionV5;
const nonMaxSuppressionV5Config = {
    kernelName: (0, _tfjsCore.NonMaxSuppressionV5),
    backendName: "cpu",
    kernelFunc: ({ inputs , backend , attrs  })=>{
        const { boxes , scores  } = inputs;
        const { maxOutputSize , iouThreshold , scoreThreshold , softNmsSigma  } = attrs;
        const cpuBackend = backend;
        (0, _cpuUtil.assertNotComplex)(boxes, "NonMaxSuppressionWithScore");
        const boxesVals = cpuBackend.data.get(boxes.dataId).values;
        const scoresVals = cpuBackend.data.get(scores.dataId).values;
        const maxOutputSizeVal = maxOutputSize;
        const iouThresholdVal = iouThreshold;
        const scoreThresholdVal = scoreThreshold;
        const softNmsSigmaVal = softNmsSigma;
        const { selectedIndices , selectedScores  } = nonMaxSuppressionV5(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);
        return [
            selectedIndices,
            selectedScores
        ];
    }
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5jKJA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squareConfig", ()=>squareConfig);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
const squareConfig = {
    kernelName: (0, _tfjsCore.Square),
    backendName: "cpu",
    kernelFunc: ({ inputs , backend  })=>{
        const { x  } = inputs;
        const cpuBackend = backend;
        (0, _cpuUtil.assertNotComplex)(x, "square");
        const values = cpuBackend.data.get(x.dataId).values;
        const newValues = new Float32Array(values.length);
        for(let i = 0; i < values.length; ++i){
            const value = values[i];
            newValues[i] = value * value;
        }
        const dataId = cpuBackend.write(newValues, x.shape, x.dtype);
        return {
            dataId,
            shape: x.shape,
            dtype: x.dtype
        };
    }
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b000w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squaredDifferenceConfig", ()=>squaredDifferenceConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _kernelUtils = require("../utils/kernel_utils");
const squaredDifferenceImpl = (0, _kernelUtils.createBinaryKernelImpl)((aVal, bVal)=>{
    const diff = aVal - bVal;
    return diff * diff;
});
const squaredDifferenceConfig = (0, _kernelUtils.createBinaryKernelConfig)((0, _tfjsCore.SquaredDifference), squaredDifferenceImpl);

},{"@tensorflow/tfjs-core":"2votT","../utils/kernel_utils":"cyInH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gEhkg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transposeConfig", ()=>transposeConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _cpuUtil = require("../cpu_util");
var _transposeImpl = require("./Transpose_impl");
const transposeConfig = {
    kernelName: (0, _tfjsCore.Transpose),
    backendName: "cpu",
    kernelFunc: ({ inputs , attrs , backend  })=>{
        const { x  } = inputs;
        const { perm  } = attrs;
        const cpuBackend = backend;
        (0, _cpuUtil.assertNotComplex)(x, "transpose");
        const xRank = x.shape.length;
        const newShape = new Array(xRank);
        for(let i = 0; i < newShape.length; i++)newShape[i] = x.shape[perm[i]];
        const values = cpuBackend.data.get(x.dataId).values;
        const result = (0, _transposeImpl.transposeImpl)(values, x.shape, x.dtype, perm, newShape);
        const dataId = cpuBackend.write(result, newShape, x.dtype);
        return {
            dataId,
            shape: newShape,
            dtype: x.dtype
        };
    }
};

},{"@tensorflow/tfjs-core":"2votT","../cpu_util":"ii07P","./Transpose_impl":"fwwXp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ttvt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version_webgl", ()=>(0, _version.version));
parcelHelpers.export(exports, "webgl", ()=>webgl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _backendWebgl = require("./backend_webgl");
var _registerAllKernels = require("./register_all_kernels");
// Export forceHalfFlost under webgl namespace for the union bundle.
var _webgl = require("./webgl");
var _version = require("./version");
// Export webgl utilities
parcelHelpers.exportAll(_webgl, exports);
if ((0, _tfjsCore.device_util).isBrowser()) (0, _tfjsCore.registerBackend)("webgl", ()=>new (0, _backendWebgl.MathBackendWebGL)(), 2 /* priority */ );
const webgl = {
    forceHalfFloat: (0, _webgl.forceHalfFloat)
};

},{"@tensorflow/tfjs-core":"2votT","./backend_webgl":"7gxxS","./register_all_kernels":"lIIC2","./webgl":"b7la2","./version":"gSPzs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7gxxS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EPSILON_FLOAT32", ()=>EPSILON_FLOAT32);
parcelHelpers.export(exports, "EPSILON_FLOAT16", ()=>EPSILON_FLOAT16);
parcelHelpers.export(exports, "getBinaryCache", ()=>getBinaryCache);
parcelHelpers.export(exports, "MATMUL_SHARED_DIM_THRESHOLD", ()=>MATMUL_SHARED_DIM_THRESHOLD);
parcelHelpers.export(exports, "MathBackendWebGL", ()=>MathBackendWebGL);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Import webgl flags.
var _flagsWebgl = require("./flags_webgl");
var _tfjsCore = require("@tensorflow/tfjs-core");
var _addnGpu = require("./addn_gpu");
var _addnPackedGpu = require("./addn_packed_gpu");
var _argminmaxGpu = require("./argminmax_gpu");
var _argminmaxPackedGpu = require("./argminmax_packed_gpu");
var _avgPoolBackpropGpu = require("./avg_pool_backprop_gpu");
var _batchnormGpu = require("./batchnorm_gpu");
var _batchnormPackedGpu = require("./batchnorm_packed_gpu");
var _binaryopComplexGpu = require("./binaryop_complex_gpu");
var _binaryopGpu = require("./binaryop_gpu");
var _binaryopPackedGpu = require("./binaryop_packed_gpu");
var _canvasUtil = require("./canvas_util");
var _clipGpu = require("./clip_gpu");
var _clipPackedGpu = require("./clip_packed_gpu");
var _complexAbsGpu = require("./complex_abs_gpu");
var _concatGpu = require("./concat_gpu");
var _concatPackedGpu = require("./concat_packed_gpu");
var _convBackpropGpu = require("./conv_backprop_gpu");
var _convBackpropGpuDepthwise = require("./conv_backprop_gpu_depthwise");
var _convGpu = require("./conv_gpu");
var _convGpuDepthwise = require("./conv_gpu_depthwise");
var _convPackedGpuDepthwise = require("./conv_packed_gpu_depthwise");
var _cropAndResizeGpu = require("./crop_and_resize_gpu");
var _cumsumGpu = require("./cumsum_gpu");
var _decodeMatrixGpu = require("./decode_matrix_gpu");
var _decodeMatrixPackedGpu = require("./decode_matrix_packed_gpu");
var _depthToSpaceGpu = require("./depth_to_space_gpu");
var _diagGpu = require("./diag_gpu");
var _encodeFloatGpu = require("./encode_float_gpu");
var _encodeFloatPackedGpu = require("./encode_float_packed_gpu");
var _encodeMatrixGpu = require("./encode_matrix_gpu");
var _encodeMatrixPackedGpu = require("./encode_matrix_packed_gpu");
var _fftGpu = require("./fft_gpu");
var _fillGpu = require("./fill_gpu");
var _gatherGpu = require("./gather_gpu");
var _gatherNdGpu = require("./gather_nd_gpu");
var _gpgpuContext = require("./gpgpu_context");
var _gpgpuMath = require("./gpgpu_math");
var _im2ColPackedGpu = require("./im2col_packed_gpu");
var _lrnGpu = require("./lrn_gpu");
var _lrnGradGpu = require("./lrn_grad_gpu");
var _lrnPackedGpu = require("./lrn_packed_gpu");
var _maxPoolBackpropGpu = require("./max_pool_backprop_gpu");
var _mulmatPackedGpu = require("./mulmat_packed_gpu");
var _multinomialGpu = require("./multinomial_gpu");
var _onehotGpu = require("./onehot_gpu");
var _packGpu = require("./pack_gpu");
var _padGpu = require("./pad_gpu");
var _padPackedGpu = require("./pad_packed_gpu");
var _poolGpu = require("./pool_gpu");
var _reduceGpu = require("./reduce_gpu");
var _reshapePackedGpu = require("./reshape_packed_gpu");
var _resizeBilinearBackpropGpu = require("./resize_bilinear_backprop_gpu");
var _resizeBilinearGpu = require("./resize_bilinear_gpu");
var _resizeBilinearPackedGpu = require("./resize_bilinear_packed_gpu");
var _resizeNearestNeighborBackpropGpu = require("./resize_nearest_neighbor_backprop_gpu");
var _resizeNearestNeighborGpu = require("./resize_nearest_neighbor_gpu");
var _reverseGpu = require("./reverse_gpu");
var _reversePackedGpu = require("./reverse_packed_gpu");
var _scatterGpu = require("./scatter_gpu");
var _segmentGpu = require("./segment_gpu");
var _selectGpu = require("./select_gpu");
var _sliceGpu = require("./slice_gpu");
var _slicePackedGpu = require("./slice_packed_gpu");
var _stridedSliceGpu = require("./strided_slice_gpu");
var _texUtil = require("./tex_util");
var _textureManager = require("./texture_manager");
var _tileGpu = require("./tile_gpu");
var _unaryopGpu = require("./unaryop_gpu");
var _unaryopPackedGpu = require("./unaryop_packed_gpu");
var _unpackGpu = require("./unpack_gpu");
var _webglUtil = require("./webgl_util");
const { segment_util  } = (0, _tfjsCore.backend_util);
const split = (0, _tfjsCore.kernel_impls).split;
const tile = (0, _tfjsCore.kernel_impls).tile;
const topkImpl = (0, _tfjsCore.kernel_impls).topkImpl;
const whereImpl = (0, _tfjsCore.kernel_impls).whereImpl;
const EPSILON_FLOAT32 = 1e-7;
const EPSILON_FLOAT16 = 1e-4;
const binaryCaches = {};
function getBinaryCache(webGLVersion) {
    if (webGLVersion in binaryCaches) return binaryCaches[webGLVersion];
    binaryCaches[webGLVersion] = {};
    return binaryCaches[webGLVersion];
}
function mapActivationToShaderProgram(activation, packed = false) {
    if (activation === "linear") {
        if (packed) return _unaryopPackedGpu.LINEAR;
        return _unaryopGpu.LINEAR;
    } else if (activation === "relu") {
        if (packed) return _unaryopPackedGpu.RELU;
        return _unaryopGpu.RELU;
    } else if (activation === "elu") {
        if (packed) return _unaryopPackedGpu.ELU;
        return _unaryopGpu.ELU;
    } else if (activation === "relu6") {
        if (packed) return _unaryopPackedGpu.RELU6;
        return _unaryopGpu.RELU6;
    } else if (activation === "prelu") {
        if (packed) return _binaryopPackedGpu.PRELU;
        return _binaryopGpu.PRELU;
    }
    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);
}
// Empirically determined constant used to determine size threshold for handing
// off execution to the CPU.
const CPU_HANDOFF_SIZE_THRESHOLD = 128;
// Empirically determined constant used to decide the number of MB on GPU
// before we warn about high memory use. The MB are this constant * screen area
// * dpi / 1024 / 1024.
const BEFORE_PAGING_CONSTANT = 600;
function numMBBeforeWarning() {
    if ((0, _tfjsCore.env)().global.screen == null) return 1024; // 1 GB.
    return (0, _tfjsCore.env)().global.screen.height * (0, _tfjsCore.env)().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;
}
const MATMUL_SHARED_DIM_THRESHOLD = 1000;
class MathBackendWebGL extends (0, _tfjsCore.KernelBackend) {
    constructor(gpgpu){
        super();
        // Maps data ids that have a pending read operation, to list of subscribers.
        this.pendingRead = new WeakMap();
        // List of data ids that are scheduled for disposal, but are waiting on a
        // pending read operation.
        this.pendingDisposal = new WeakSet();
        // Used to count the number of 'shallow' sliced tensors that point to the
        // same data id.
        this.dataRefCount = new WeakMap();
        this.numBytesInGPU = 0;
        // Accumulated time spent (including blocking) in uploading data to webgl.
        this.uploadWaitMs = 0;
        // Accumulated time spent (including blocking in downloading data from webgl.
        this.downloadWaitMs = 0;
        this.warnedAboutMemory = false;
        this.pendingDeletes = 0;
        this.disposed = false;
        if (!(0, _tfjsCore.env)().getBool("HAS_WEBGL")) throw new Error("WebGL is not supported on this device");
        if (gpgpu == null) {
            const gl = (0, _canvasUtil.getWebGLContext)((0, _tfjsCore.env)().getNumber("WEBGL_VERSION"));
            this.binaryCache = getBinaryCache((0, _tfjsCore.env)().getNumber("WEBGL_VERSION"));
            this.gpgpu = new (0, _gpgpuContext.GPGPUContext)(gl);
            this.canvas = gl.canvas;
            this.gpgpuCreatedLocally = true;
        } else {
            this.gpgpu = gpgpu;
            this.binaryCache = {};
            this.gpgpuCreatedLocally = false;
            this.canvas = gpgpu.gl.canvas;
        }
        this.textureManager = new (0, _textureManager.TextureManager)(this.gpgpu);
        this.numMBBeforeWarning = numMBBeforeWarning();
        this.texData = new (0, _tfjsCore.DataStorage)(this, (0, _tfjsCore.engine)());
    }
    numDataIds() {
        return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;
    }
    write(values, shape, dtype) {
        if ((0, _tfjsCore.env)().getBool("DEBUG")) this.checkNumericalProblems(values);
        if (dtype === "complex64" && values != null) throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);
        const dataId = {};
        this.texData.set(dataId, {
            shape,
            dtype,
            values,
            usage: (0, _texUtil.TextureUsage).UPLOAD
        });
        return dataId;
    }
    move(dataId, values, shape, dtype) {
        if ((0, _tfjsCore.env)().getBool("DEBUG")) this.checkNumericalProblems(values);
        if (dtype === "complex64") throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);
        this.texData.set(dataId, {
            shape,
            dtype,
            values,
            usage: (0, _texUtil.TextureUsage).UPLOAD
        });
    }
    readSync(dataId) {
        const texData = this.texData.get(dataId);
        const { values , dtype , complexTensors , slice , shape , isPacked  } = texData;
        if (slice != null) {
            let program;
            if (isPacked) program = new (0, _unaryopPackedGpu.UnaryOpPackedProgram)(shape, _unaryopGpu.CLONE);
            else program = new (0, _unaryopGpu.UnaryOpProgram)(shape, _unaryopGpu.CLONE);
            const res = this.runWebGLProgram(program, [
                {
                    dataId,
                    shape,
                    dtype
                }
            ], dtype);
            const data = this.readSync(res.dataId);
            this.disposeData(res.dataId);
            return data;
        }
        if (values != null) return this.convertAndCacheOnCPU(dataId);
        if (dtype === "string") return values;
        const shouldTimeProgram = this.activeTimers != null;
        let start;
        if (shouldTimeProgram) start = (0, _tfjsCore.util).now();
        let result;
        if (dtype === "complex64") {
            const realValues = complexTensors.real.dataSync();
            const imagValues = complexTensors.imag.dataSync();
            result = (0, _tfjsCore.backend_util).mergeRealAndImagArrays(realValues, imagValues);
        } else result = this.getValuesFromTexture(dataId);
        if (shouldTimeProgram) this.downloadWaitMs += (0, _tfjsCore.util).now() - start;
        return this.convertAndCacheOnCPU(dataId, result);
    }
    async read(dataId) {
        if (this.pendingRead.has(dataId)) {
            const subscribers = this.pendingRead.get(dataId);
            return new Promise((resolve)=>subscribers.push(resolve));
        }
        const texData = this.texData.get(dataId);
        const { values , shape , slice , dtype , complexTensors , isPacked  } = texData;
        if (slice != null) {
            let program;
            if (isPacked) program = new (0, _unaryopPackedGpu.UnaryOpPackedProgram)(shape, _unaryopGpu.CLONE);
            else program = new (0, _unaryopGpu.UnaryOpProgram)(shape, _unaryopGpu.CLONE);
            const res = this.runWebGLProgram(program, [
                {
                    dataId,
                    shape,
                    dtype
                }
            ], dtype);
            const data = this.read(res.dataId);
            this.disposeData(res.dataId);
            return data;
        }
        if (values != null) return this.convertAndCacheOnCPU(dataId);
        if (!(0, _tfjsCore.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && (0, _tfjsCore.env)().getNumber("WEBGL_VERSION") === 2) throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);
        let buffer = null;
        let tmpDownloadTarget;
        if (dtype !== "complex64" && (0, _tfjsCore.env)().get("WEBGL_BUFFER_SUPPORTED")) {
            // Possibly copy the texture into a buffer before inserting a fence.
            tmpDownloadTarget = this.decode(dataId);
            const tmpData = this.texData.get(tmpDownloadTarget.dataId);
            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ..._texUtil.getDenseTexShape(shape));
        }
        this.pendingRead.set(dataId, []);
        if (dtype !== "complex64") // Create a fence and wait for it to resolve.
        await this.gpgpu.createAndWaitForFence();
        // Download the values from the GPU.
        let vals;
        if (dtype === "complex64") {
            const ps = await Promise.all([
                complexTensors.real.data(),
                complexTensors.imag.data()
            ]);
            const realValues = ps[0];
            const imagValues = ps[1];
            vals = (0, _tfjsCore.backend_util).mergeRealAndImagArrays(realValues, imagValues);
        } else if (buffer == null) vals = this.getValuesFromTexture(dataId);
        else {
            const size = (0, _tfjsCore.util).sizeFromShape(shape);
            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);
        }
        if (tmpDownloadTarget != null) this.disposeData(tmpDownloadTarget.dataId);
        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);
        const subscribers1 = this.pendingRead.get(dataId);
        this.pendingRead.delete(dataId);
        // Notify all pending reads.
        subscribers1.forEach((resolve)=>resolve(dTypeVals));
        if (this.pendingDisposal.has(dataId)) {
            this.pendingDisposal.delete(dataId);
            this.disposeData(dataId);
            this.pendingDeletes--;
        }
        return dTypeVals;
    }
    checkNumericalProblems(values) {
        if (values == null) return;
        for(let i = 0; i < values.length; i++){
            const num = values[i];
            if (!_webglUtil.canBeRepresented(num)) {
                if ((0, _tfjsCore.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")) throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);
                throw Error(`The value ${num} cannot be represented on this device.`);
            }
        }
    }
    getValuesFromTexture(dataId) {
        const { shape , dtype , isPacked  } = this.texData.get(dataId);
        const size = (0, _tfjsCore.util).sizeFromShape(shape);
        if ((0, _tfjsCore.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
            const tmpTarget = this.decode(dataId);
            const tmpData = this.texData.get(tmpTarget.dataId);
            const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture, ..._texUtil.getDenseTexShape(shape)).subarray(0, size);
            this.disposeData(tmpTarget.dataId);
            return vals;
        }
        const shouldUsePackedProgram = (0, _tfjsCore.env)().getBool("WEBGL_PACK") && isPacked === true;
        const outputShape = shouldUsePackedProgram ? _webglUtil.getShapeAs3D(shape) : shape;
        const program = shouldUsePackedProgram ? new (0, _encodeFloatPackedGpu.EncodeFloatPackedProgram)(outputShape) : new (0, _encodeFloatGpu.EncodeFloatProgram)(outputShape);
        const output = this.runWebGLProgram(program, [
            {
                shape: outputShape,
                dtype,
                dataId
            }
        ], "float32");
        const tmpData1 = this.texData.get(output.dataId);
        const vals1 = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData1.texture, tmpData1.texShape[0], tmpData1.texShape[1]).subarray(0, size);
        this.disposeData(output.dataId);
        return vals1;
    }
    async time(f) {
        const oldActiveTimers = this.activeTimers;
        const newActiveTimers = [];
        let outerMostTime = false;
        if (this.programTimersStack == null) {
            this.programTimersStack = newActiveTimers;
            outerMostTime = true;
        } else this.activeTimers.push(newActiveTimers);
        this.activeTimers = newActiveTimers;
        f();
        // needing to split these up because util.flatten only accepts certain types
        const flattenedActiveTimerQueries = (0, _tfjsCore.util).flatten(this.activeTimers.map((d)=>d.query)).filter((d)=>d != null);
        const flattenedActiveTimerNames = (0, _tfjsCore.util).flatten(this.activeTimers.map((d)=>d.name)).filter((d)=>d != null);
        this.activeTimers = oldActiveTimers;
        if (outerMostTime) this.programTimersStack = null;
        const res = {
            uploadWaitMs: this.uploadWaitMs,
            downloadWaitMs: this.downloadWaitMs,
            kernelMs: null,
            wallMs: null // will be filled by the engine
        };
        if ((0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
            const kernelMs = await Promise.all(flattenedActiveTimerQueries);
            res["kernelMs"] = (0, _tfjsCore.util).sum(kernelMs);
            res["getExtraProfileInfo"] = ()=>kernelMs.map((d, i)=>({
                        name: flattenedActiveTimerNames[i],
                        ms: d
                    })).map((d)=>`${d.name}: ${d.ms}`).join(", ");
        } else res["kernelMs"] = {
            error: "WebGL query timers are not supported in this environment."
        };
        this.uploadWaitMs = 0;
        this.downloadWaitMs = 0;
        return res;
    }
    memory() {
        return {
            unreliable: false,
            numBytesInGPU: this.numBytesInGPU
        };
    }
    startTimer() {
        if ((0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) return this.gpgpu.beginQuery();
        return {
            startMs: (0, _tfjsCore.util).now(),
            endMs: null
        };
    }
    endTimer(query) {
        if ((0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
            this.gpgpu.endQuery();
            return query;
        }
        query.endMs = (0, _tfjsCore.util).now();
        return query;
    }
    async getQueryTime(query) {
        if ((0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) return this.gpgpu.waitForQueryAndGetTime(query);
        const timerQuery = query;
        return timerQuery.endMs - timerQuery.startMs;
    }
    disposeData(dataId) {
        if (this.pendingDisposal.has(dataId)) return;
        if (this.pendingRead.has(dataId)) {
            this.pendingDisposal.add(dataId);
            this.pendingDeletes++;
            return;
        }
        // No-op if already disposed.
        if (!this.texData.has(dataId)) return;
        this.releaseGPUData(dataId);
        const { complexTensors  } = this.texData.get(dataId);
        if (complexTensors != null) {
            complexTensors.real.dispose();
            complexTensors.imag.dispose();
        }
        this.texData.delete(dataId);
    }
    releaseGPUData(dataId) {
        const { texture , dtype , texShape , usage , isPacked , slice  } = this.texData.get(dataId);
        const key = slice && slice.origDataId || dataId;
        const refCount = this.dataRefCount.get(key);
        if (refCount > 1) this.dataRefCount.set(key, refCount - 1);
        else {
            this.dataRefCount.delete(key);
            if (texture != null) {
                this.numBytesInGPU -= this.computeBytes(texShape, dtype);
                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);
            }
        }
        const texData = this.texData.get(dataId);
        texData.texture = null;
        texData.texShape = null;
        texData.isPacked = false;
        texData.slice = null;
    }
    getTexture(dataId) {
        this.uploadToGPU(dataId);
        return this.texData.get(dataId).texture;
    }
    /**
     * Returns internal information for the specific data bucket. Used in unit
     * tests.
     */ getDataInfo(dataId) {
        return this.texData.get(dataId);
    }
    getCPUBackend() {
        if (!(0, _tfjsCore.env)().getBool("WEBGL_CPU_FORWARD")) return null;
        if (this.cpuBackend == null) this.cpuBackend = (0, _tfjsCore.engine)().findBackend("cpu");
        return this.cpuBackend;
    }
    /*
    Tests whether all the inputs to an op are small and on the CPU. This heuristic
    determines when it would be faster to execute a kernel on the CPU. WebGL
    kernels opt into running this check and forwarding when appropriate.
    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
    sustainable strategy for optimizing backend execution of ops.
     */ shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {
        return this.getCPUBackend() != null && inputs.every((input)=>this.texData.get(input.dataId).texture == null && (0, _tfjsCore.util).sizeFromShape(input.shape) < sizeThreshold);
    }
    getGPGPUContext() {
        return this.gpgpu;
    }
    complex(real, imag) {
        const result = this.makeOutput(real.shape, "complex64");
        const resultData = this.texData.get(result.dataId);
        // The backend owns the reference to the underlying real and imaginary
        // clones. These will explicitly get disposed when the complex tensor is
        // disposed.
        resultData.complexTensors = {
            real: (0, _tfjsCore.engine)().keep(real.clone()),
            imag: (0, _tfjsCore.engine)().keep(imag.clone())
        };
        return result;
    }
    real(input) {
        const resultData = this.texData.get(input.dataId);
        return resultData.complexTensors.real.clone();
    }
    imag(input) {
        const resultData = this.texData.get(input.dataId);
        return resultData.complexTensors.imag.clone();
    }
    slice(x, begin, size) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.slice(x, begin, size);
        // Short-circuit computation if the slice is zero-sized.
        if ((0, _tfjsCore.util).sizeFromShape(size) === 0) return (0, _tfjsCore.tensor)([], size, x.dtype);
        const { isPacked  } = this.texData.get(x.dataId);
        const isContinous = (0, _tfjsCore.slice_util).isSliceContinous(x.shape, begin, size);
        if (isPacked || !isContinous) {
            const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new (0, _slicePackedGpu.SlicePackedProgram)(size) : new (0, _sliceGpu.SliceProgram)(size);
            const customSetup = program.getCustomSetupFunc(begin);
            return this.compileAndRun(program, [
                x
            ], null, customSetup);
        }
        this.uploadToGPU(x.dataId);
        return this.shallowSlice(x, begin, size);
    }
    shallowSlice(x, begin, size) {
        const xTexData = this.texData.get(x.dataId);
        const t = this.makeOutput(size, x.dtype);
        const newTexData = this.texData.get(t.dataId);
        // Copy texture data from the original tensor.
        Object.assign(newTexData, xTexData);
        newTexData.shape = size;
        newTexData.dtype = x.dtype;
        let flatOffset = (0, _tfjsCore.slice_util).computeFlatOffset(begin, x.strides);
        if (xTexData.slice) // We are slicing an already sliced tensor, so we have to accumulate
        // the offset.
        flatOffset += xTexData.slice.flatOffset;
        newTexData.slice = {
            flatOffset,
            // Point to the original dataId, which is used to do ref counting.
            origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId
        };
        // Increase the ref count for that data bucket.
        const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;
        this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);
        return t;
    }
    stridedSlice(x, begin, end, strides) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.stridedSlice(x, begin, end, strides);
        const outShape = (0, _tfjsCore.slice_util).computeOutShape(begin, end, strides);
        if (outShape.some((axis)=>axis === 0)) return (0, _tfjsCore.tensor)([], outShape);
        const program = new (0, _stridedSliceGpu.StridedSliceProgram)(begin, strides, outShape);
        return this.compileAndRun(program, [
            x
        ]);
    }
    reverse(x, axis) {
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new (0, _reversePackedGpu.ReversePackedProgram)(x.shape, axis) : new (0, _reverseGpu.ReverseProgram)(x.shape, axis);
        return this.compileAndRun(program, [
            x
        ]);
    }
    concat(tensors, axis) {
        if (tensors[0].dtype === "complex64") {
            const reals = tensors.map((t)=>(0, _tfjsCore.real)(t));
            const imags = tensors.map((t)=>(0, _tfjsCore.imag)(t));
            return (0, _tfjsCore.complex)(this.concat(reals, axis), this.concat(imags, axis));
        }
        if (this.shouldExecuteOnCPU(tensors)) return this.cpuBackend.concat(tensors, axis);
        if (tensors.length === 1) return tensors[0];
        if (tensors.length > (0, _tfjsCore.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
            const midIndex = Math.floor(tensors.length / 2);
            const leftSide = this.concat(tensors.slice(0, midIndex), axis);
            const rightSide = this.concat(tensors.slice(midIndex), axis);
            return this.concat([
                leftSide,
                rightSide
            ], axis);
        }
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && tensors[0].rank > 1) {
            const program = new (0, _concatPackedGpu.ConcatPackedProgram)(tensors.map((t)=>t.shape), axis);
            return this.compileAndRun(program, tensors);
        }
        // Any concat of n-dimensional tensors across any axis can be reduced to
        // a concatenation of two-dimensional tensors across the axis 1 by first
        // partitioning the axes of the original tensors into those less than the
        // axis to be concatenated and the rest. Then reshape the tensors
        // into a two-dimensional tensor by collapsing these two sets of axes and
        // concatenate the resulting matrices across the axis 1, finally reshaping
        // the result to have the proper shape.
        const outShape = (0, _tfjsCore.backend_util).computeOutShape(tensors.map((t)=>t.shape), axis);
        const tensors2D = tensors.map((t)=>t.as2D(-1, (0, _tfjsCore.util).sizeFromShape(t.shape.slice(axis))));
        const program1 = new (0, _concatGpu.ConcatProgram)(tensors2D.map((t)=>t.shape));
        const res = this.compileAndRun(program1, tensors2D);
        return res.reshape(outShape);
    }
    neg(x) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.neg(x);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(x, _unaryopGpu.NEG, x.dtype);
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.NEG);
        return this.compileAndRun(program, [
            x
        ]);
    }
    batchMatMul(a, b, transposeA, transposeB) {
        const outerShapeA = transposeA ? a.shape[2] : a.shape[1];
        const outerShapeB = transposeB ? b.shape[1] : b.shape[2];
        const sharedDim = transposeA ? a.shape[1] : a.shape[2];
        const [batch, ] = a.shape;
        // Since the matrices are vectors, it is faster to call mul().sum()
        // because sum() is O(sqrt(N)) due to divide-and-conquer.
        if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {
            if (transposeA) a = (0, _tfjsCore.transpose)(a, [
                0,
                2,
                1
            ]);
            if (transposeB) b = (0, _tfjsCore.transpose)(b, [
                0,
                2,
                1
            ]);
            const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);
            const axis = outerShapeB === 1 ? 2 : 1;
            const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;
            return this.multiply(a3D, b3D).sum(axis, true);
        }
        const dtype = (0, _tfjsCore.upcastType)(a.dtype, b.dtype);
        const program = new (0, _mulmatPackedGpu.MatMulPackedProgram)(a.shape, [
            batch,
            outerShapeA,
            outerShapeB
        ], transposeA, transposeB);
        return this.compileAndRun(program, [
            a,
            b
        ], dtype);
    }
    fusedBatchMatMul({ a , b , transposeA , transposeB , bias , activation , preluActivationWeights  }) {
        const outerShapeA = transposeA ? a.shape[2] : a.shape[1];
        const outerShapeB = transposeB ? b.shape[1] : b.shape[2];
        const [batch, ] = a.shape;
        const dtype = (0, _tfjsCore.upcastType)(a.dtype, b.dtype);
        const hasBias = bias != null;
        const hasPreluActivationWeights = preluActivationWeights != null;
        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;
        const program = new (0, _mulmatPackedGpu.MatMulPackedProgram)(a.shape, [
            batch,
            outerShapeA,
            outerShapeB
        ], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);
        const inputs = [
            a,
            b
        ];
        if (bias) inputs.push(bias);
        if (preluActivationWeights) inputs.push(preluActivationWeights);
        return this.compileAndRun(program, inputs, dtype);
    }
    multiply(a, b) {
        if (a.dtype === "complex64") {
            const aData = this.texData.get(a.dataId);
            const bData = this.texData.get(b.dataId);
            const realProgram = new (0, _binaryopComplexGpu.BinaryOpComplexProgram)(_binaryopComplexGpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);
            const imagProgram = new (0, _binaryopComplexGpu.BinaryOpComplexProgram)(_binaryopComplexGpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);
            const inputs = [
                this.makeComplexComponentTensorInfo(a, aData.complexTensors.real),
                this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag),
                this.makeComplexComponentTensorInfo(b, bData.complexTensors.real),
                this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)
            ];
            const real = this.compileAndRun(realProgram, inputs);
            const imag = this.compileAndRun(imagProgram, inputs);
            const complex = this.complex(real, imag);
            real.dispose();
            imag.dispose();
            return complex;
        }
        if (this.shouldExecuteOnCPU([
            a,
            b
        ])) return this.cpuBackend.multiply(a, b);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopGpu.MUL, a.dtype);
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.MUL, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], a.dtype);
    }
    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {
        const inputs = [
            x,
            mean,
            variance
        ];
        let offsetShape = null;
        if (offset != null) {
            offsetShape = offset.shape;
            inputs.push(offset);
        }
        let scaleShape = null;
        if (scale != null) {
            scaleShape = scale.shape;
            inputs.push(scale);
        }
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_NORMALIZATION")) {
            const batchNormPackedProgram = new (0, _batchnormPackedGpu.BatchNormPackedProgram)(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
            return this.compileAndRun(batchNormPackedProgram, inputs);
        }
        const batchNormProgram = new (0, _batchnormGpu.BatchNormProgram)(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
        return this.compileAndRun(batchNormProgram, inputs);
    }
    localResponseNormalization4D(x, radius, bias, alpha, beta) {
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_NORMALIZATION") ? new (0, _lrnPackedGpu.LRNPackedProgram)(x.shape, radius, bias, alpha, beta) : new (0, _lrnGpu.LRNProgram)(x.shape, radius, bias, alpha, beta);
        return this.compileAndRun(program, [
            x
        ]);
    }
    LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {
        const program = new (0, _lrnGradGpu.LRNGradProgram)(inputImage.shape, depthRadius, bias, alpha, beta);
        return this.compileAndRun(program, [
            inputImage,
            outputImage,
            dy
        ]);
    }
    tile(x, reps) {
        if (x.dtype === "string") {
            const data = this.readSync(x.dataId);
            const decodedData = data.map((d)=>(0, _tfjsCore.util).decodeString(d));
            const buf = (0, _tfjsCore.buffer)(x.shape, x.dtype, decodedData);
            return tile(buf, reps);
        }
        const program = new (0, _tileGpu.TileProgram)(x.shape, reps);
        return this.compileAndRun(program, [
            x
        ]);
    }
    pad(x, paddings, constantValue) {
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new (0, _padPackedGpu.PadPackedProgram)(x.shape, paddings, constantValue) : new (0, _padGpu.PadProgram)(x.shape, paddings, constantValue);
        return this.compileAndRun(program, [
            x
        ]);
    }
    gather(x, indices, axis) {
        if (this.shouldExecuteOnCPU([
            x,
            indices
        ])) return this.cpuBackend.gather(x, indices, axis);
        const program = new (0, _gatherGpu.GatherProgram)(x.shape, indices.size, axis);
        return this.compileAndRun(program, [
            x,
            indices
        ]);
    }
    batchToSpaceND(x, blockShape, crops) {
        (0, _tfjsCore.util).assert(x.rank <= 4, ()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
        const prod = blockShape.reduce((a, b)=>a * b);
        const reshaped = (0, _tfjsCore.backend_util).getReshaped(x.shape, blockShape, prod);
        const permuted = (0, _tfjsCore.backend_util).getPermuted(reshaped.length, blockShape.length);
        const reshapedPermuted = (0, _tfjsCore.backend_util).getReshapedPermuted(x.shape, blockShape, prod);
        const sliceBeginCoords = (0, _tfjsCore.backend_util).getSliceBeginCoords(crops, blockShape.length);
        const sliceSize = (0, _tfjsCore.backend_util).getSliceSize(reshapedPermuted, crops, blockShape.length);
        return (0, _tfjsCore.transpose)(x.reshape(reshaped), permuted).reshape(reshapedPermuted).slice(sliceBeginCoords, sliceSize);
    }
    spaceToBatchND(x, blockShape, paddings) {
        (0, _tfjsCore.util).assert(x.rank <= 4, ()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
        const prod = blockShape.reduce((a, b)=>a * b);
        const completePaddings = [
            [
                0,
                0
            ]
        ];
        completePaddings.push(...paddings);
        for(let i = 1 + blockShape.length; i < x.shape.length; ++i)completePaddings.push([
            0,
            0
        ]);
        const paddedX = x.pad(completePaddings);
        const reshapedPaddedShape = (0, _tfjsCore.backend_util).getReshaped(paddedX.shape, blockShape, prod, false);
        const permutedReshapedPaddedPermutation = (0, _tfjsCore.backend_util).getPermuted(reshapedPaddedShape.length, blockShape.length, false);
        const flattenShape = (0, _tfjsCore.backend_util).getReshapedPermuted(paddedX.shape, blockShape, prod, false);
        return (0, _tfjsCore.transpose)(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation).reshape(flattenShape);
    }
    reduce(x, reduceType, dtype) {
        const batchSize = x.shape[0];
        const inSize = x.shape[1];
        const windowSize = (0, _tfjsCore.backend_util).computeOptimalWindowSize(inSize);
        const reduceInfo = {
            windowSize,
            inSize,
            batchSize
        };
        const program = new (0, _reduceGpu.ReduceProgram)(reduceInfo, reduceType);
        const output = this.compileAndRun(program, [
            x
        ], dtype);
        // No need to run another GPGPU program.
        if (output.shape[1] === 1) return output;
        return this.reduce(output, reduceType, dtype);
    }
    argReduce(x, reduceType, bestIndicesA = null) {
        let batchSize = x.shape[0];
        let inSize = x.shape[1];
        if (bestIndicesA != null) {
            batchSize = bestIndicesA.shape[0];
            inSize = bestIndicesA.shape[1];
        }
        const windowSize = (0, _tfjsCore.backend_util).computeOptimalWindowSize(inSize);
        const reduceInfo = {
            windowSize,
            inSize,
            batchSize
        };
        const program = new (0, _argminmaxGpu.ArgMinMaxProgram)(reduceInfo, reduceType, bestIndicesA == null);
        const inputs = [
            x
        ];
        if (bestIndicesA != null) inputs.push(bestIndicesA);
        const output = this.compileAndRun(program, inputs, "int32");
        // No need to run another GPGPU program.
        if (output.shape[1] === 1) return output;
        return this.argReduce(x, reduceType, output);
    }
    argReducePacked(x, reduceType, bestIndicesA = null) {
        const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;
        const inSize = inShape[inShape.length - 1];
        const windowSize = (0, _tfjsCore.backend_util).computeOptimalWindowSize(inSize);
        const program = new (0, _argminmaxPackedGpu.ArgMinMaxPackedProgram)(inShape, windowSize, reduceType, bestIndicesA == null);
        const inputs = bestIndicesA == null ? [
            x
        ] : [
            x,
            bestIndicesA
        ];
        const output = this.compileAndRun(program, inputs, "int32");
        if (output.rank === x.rank) return this.argReducePacked(x, reduceType, output);
        return output;
    }
    sum(x, axes) {
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("sum", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const inSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const a2D = x.as2D(-1, inSize);
        const outputDType = _tfjsCore.sumOutType(x.dtype);
        return this.reduce(a2D, "sum", outputDType).reshape(outShape);
    }
    prod(x, axes) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.prod(x, axes);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const inSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const a2D = x.as2D(-1, inSize);
        const outputDType = _tfjsCore.sumOutType(x.dtype);
        return this.reduce(a2D, "prod", outputDType).reshape(outShape);
    }
    unsortedSegmentSum(x, segmentIds, numSegments) {
        let axis = 0;
        const permutation = (0, _tfjsCore.backend_util).getAxesPermutation([
            axis
        ], x.rank);
        let permutedX = x;
        if (permutation != null) {
            permutedX = (0, _tfjsCore.transpose)(x, permutation);
            axis = (0, _tfjsCore.backend_util).getInnerMostAxes(1, x.rank)[0];
        }
        const outShape = segment_util.computeOutShape(permutedX.shape, axis, numSegments);
        const inSize = (0, _tfjsCore.util).sizeFromShape([
            permutedX.shape[axis]
        ]);
        const a2D = permutedX.as2D(-1, inSize);
        const outputDType = _tfjsCore.sumOutType(x.dtype);
        let result = this.segOpCompute(a2D, "unsortedSegmentSum", segmentIds, outputDType, numSegments).reshape(outShape);
        if (permutation != null) result = (0, _tfjsCore.transpose)(result, (0, _tfjsCore.backend_util).getUndoAxesPermutation(permutation));
        return result;
    }
    segOpCompute(x, segOpType, segmentIds, dtype, numSegments) {
        const batchSize = x.shape[0];
        const inSize = x.shape[1];
        const windowSize = segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);
        const segOpInfo = {
            windowSize,
            inSize,
            batchSize,
            numSegments
        };
        const program = new (0, _segmentGpu.SegmentOpProgram)(segOpInfo, segOpType);
        const output = this.compileAndRun(program, [
            x,
            segmentIds
        ], dtype);
        // No need to run another GPGPU program.
        if (output.shape[1] === numSegments) return output;
        segmentIds = (0, _tfjsCore.range)(0, numSegments).tile([
            inSize / windowSize
        ]);
        return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);
    }
    argMinMaxReduce(x, axis, reduceType) {
        const axes = [
            axis
        ];
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("arg" + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.rank);
        if (!(0, _tfjsCore.env)().getBool("WEBGL_PACK_REDUCE") || x.rank <= 2) {
            const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
            const inSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
            const a2D = x.as2D(-1, inSize);
            return this.argReduce(a2D, reduceType).reshape(outShape);
        }
        return this.argReducePacked(x, reduceType);
    }
    argMin(x, axis) {
        return this.argMinMaxReduce(x, axis, "min");
    }
    argMax(x, axis) {
        return this.argMinMaxReduce(x, axis, "max");
    }
    cumsum(x, axis, exclusive, reverse) {
        if (axis !== x.rank - 1) throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` + `but got axis=${axis}`);
        const program = new (0, _cumsumGpu.CumSumProgram)(x.shape, exclusive, reverse);
        return this.compileAndRun(program, [
            x
        ]);
    }
    equal(a, b) {
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopPackedGpu.EQUAL, "bool");
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.EQUAL, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], "bool");
    }
    notEqual(a, b) {
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopPackedGpu.NOT_EQUAL, "bool");
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.NOT_EQUAL, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], "bool");
    }
    less(a, b) {
        if (this.shouldExecuteOnCPU([
            a,
            b
        ])) return this.cpuBackend.less(a, b);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopPackedGpu.LESS, "bool");
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.LESS, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], "bool");
    }
    lessEqual(a, b) {
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopPackedGpu.LESS_EQUAL, "bool");
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.LESS_EQUAL, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], "bool");
    }
    greater(a, b) {
        if (this.shouldExecuteOnCPU([
            a,
            b
        ])) return this.cpuBackend.greater(a, b);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopPackedGpu.GREATER, "bool");
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.GREATER, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], "bool");
    }
    greaterEqual(a, b) {
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopPackedGpu.GREATER_EQUAL, "bool");
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.GREATER_EQUAL, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], "bool");
    }
    logicalNot(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.LOGICAL_NOT);
        return this.compileAndRun(program, [
            x
        ]);
    }
    logicalAnd(a, b) {
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopPackedGpu.LOGICAL_AND, "bool");
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.LOGICAL_AND, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], "bool");
    }
    logicalOr(a, b) {
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopPackedGpu.LOGICAL_OR, "bool");
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.LOGICAL_OR, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], "bool");
    }
    select(condition, a, b) {
        const program = new (0, _selectGpu.SelectProgram)(condition.rank, a.shape, a.rank);
        return this.compileAndRun(program, [
            condition,
            a,
            b
        ], (0, _tfjsCore.upcastType)(a.dtype, b.dtype));
    }
    where(condition) {
        (0, _tfjsCore.backend_util).warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
        const condVals = condition.dataSync();
        return whereImpl(condition.shape, condVals);
    }
    topk(x, k, sorted) {
        const xVals = x.dataSync();
        return topkImpl(xVals, x.shape, x.dtype, k, sorted);
    }
    min(x, axes) {
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("min", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const inSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const a2D = x.as2D(-1, inSize);
        return this.reduce(a2D, "min", a2D.dtype).reshape(outShape);
    }
    minimum(a, b) {
        if (this.shouldExecuteOnCPU([
            a,
            b
        ])) return this.cpuBackend.minimum(a, b);
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(_binaryopPackedGpu.MIN, a.shape, b.shape) : new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.MIN, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ]);
    }
    mod(a, b) {
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(_binaryopPackedGpu.MOD, a.shape, b.shape) : new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.MOD, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ]);
    }
    maximum(a, b) {
        if (this.shouldExecuteOnCPU([
            a,
            b
        ])) return this.cpuBackend.maximum(a, b);
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(_binaryopPackedGpu.MAX, a.shape, b.shape) : new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.MAX, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ]);
    }
    all(x, axes) {
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("all", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const inSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const a2D = x.as2D(-1, inSize);
        return this.reduce(a2D, "all", a2D.dtype).reshape(outShape);
    }
    any(x, axes) {
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("any", axes, x.rank);
        const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(x.shape, axes);
        const inSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
        const a2D = x.as2D(-1, inSize);
        return this.reduce(a2D, "any", a2D.dtype).reshape(outShape);
    }
    floorDiv(a, b) {
        const op = _binaryopGpu.INT_DIV;
        const outputDtype = "int32";
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopPackedGpu.INT_DIV, outputDtype);
        const program = new (0, _binaryopGpu.BinaryOpProgram)(op, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], outputDtype);
    }
    add(a, b) {
        if (a.dtype === "complex64" && b.dtype === "complex64") return this.complexSeparableBinaryOp(a, b, _binaryopGpu.ADD);
        if (this.shouldExecuteOnCPU([
            a,
            b
        ])) return this.cpuBackend.add(a, b);
        const dtype = (0, _tfjsCore.upcastType)(a.dtype, b.dtype);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopGpu.ADD, dtype);
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.ADD, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], dtype);
    }
    packedUnaryOp(x, op, dtype) {
        const program = new (0, _unaryopPackedGpu.UnaryOpPackedProgram)(x.shape, op);
        return this.compileAndRun(program, [
            x
        ], dtype);
    }
    packedBinaryOp(a, b, op, dtype, checkOutOfBounds = false) {
        const program = new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(op, a.shape, b.shape, checkOutOfBounds);
        return this.compileAndRun(program, [
            a,
            b
        ], dtype);
    }
    /**
     * Computes a complex binary operation that can be decomposed into a simple
     * binary operation on both the real and imagary parts.
     */ complexSeparableBinaryOp(a, b, op) {
        const aData = this.texData.get(a.dataId);
        const bData = this.texData.get(b.dataId);
        const [real, imag] = [
            [
                aData.complexTensors.real,
                bData.complexTensors.real
            ],
            [
                aData.complexTensors.imag,
                bData.complexTensors.imag
            ]
        ].map((complexParts)=>{
            const [aPart, bPart] = complexParts;
            const aHandle = this.makeComplexComponentTensorInfo(a, aPart);
            const bHandle = this.makeComplexComponentTensorInfo(b, bPart);
            const program = new (0, _binaryopGpu.BinaryOpProgram)(op, a.shape, b.shape);
            return this.compileAndRun(program, [
                aHandle,
                bHandle
            ], (0, _tfjsCore.upcastType)(aPart.dtype, bPart.dtype));
        });
        const complex = this.complex(real, imag);
        real.dispose();
        imag.dispose();
        return complex;
    }
    // Returns a TensorInfo with the complex shape and the dataId of the
    // underlying part. We need to do this because a reshaped complex tensor is
    // not reflected in its parts.
    makeComplexComponentTensorInfo(complexTensor, complexPart) {
        return {
            dataId: complexPart.dataId,
            dtype: complexPart.dtype,
            shape: complexTensor.shape
        };
    }
    addN(tensors) {
        if (tensors.length === 1) return tensors[0];
        // Limit the number of uploaded textures for optimization.
        if (tensors.length > (0, _tfjsCore.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
            const midIndex = Math.floor(tensors.length / 2);
            const leftSide = this.addN(tensors.slice(0, midIndex));
            const rightSide = this.addN(tensors.slice(midIndex));
            return this.addN([
                leftSide,
                rightSide
            ]);
        }
        const dtype = tensors.map((t)=>t.dtype).reduce((d1, d2)=>(0, _tfjsCore.upcastType)(d1, d2));
        const shapes = tensors.map((t)=>t.shape);
        // We can make sure shapes are identical in op level.
        const usePackedOp = (0, _tfjsCore.env)().getBool("WEBGL_PACK");
        const program = usePackedOp ? new (0, _addnPackedGpu.AddNPackedProgram)(tensors[0].shape, shapes) : new (0, _addnGpu.AddNProgram)(tensors[0].shape, shapes);
        return this.compileAndRun(program, tensors, dtype);
    }
    subtract(a, b) {
        if (a.dtype === "complex64" && b.dtype === "complex64") return this.complexSeparableBinaryOp(a, b, _binaryopGpu.SUB);
        if (this.shouldExecuteOnCPU([
            a,
            b
        ])) return this.cpuBackend.subtract(a, b);
        const dtype = (0, _tfjsCore.upcastType)(a.dtype, b.dtype);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(a, b, _binaryopGpu.SUB, a.dtype);
        const program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.SUB, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ], dtype);
    }
    pow(a, b) {
        const usePackedOp = (0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS");
        const program = usePackedOp ? new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(_binaryopPackedGpu.POW, a.shape, b.shape) : new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.POW, a.shape, b.shape);
        const dtype = (0, _tfjsCore.upcastType)(a.dtype, b.dtype);
        return this.compileAndRun(program, [
            a,
            b
        ], dtype);
    }
    ceil(x) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.ceil(x);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(x, _unaryopGpu.CEIL, x.dtype);
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.CEIL);
        return this.compileAndRun(program, [
            x
        ]);
    }
    floor(x) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.floor(x);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(x, _unaryopGpu.FLOOR, x.dtype);
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.FLOOR);
        return this.compileAndRun(program, [
            x
        ]);
    }
    sign(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.SIGN);
        return this.compileAndRun(program, [
            x
        ]);
    }
    isNaN(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.IS_NAN);
        return this.compileAndRun(program, [
            x
        ], "bool");
    }
    isInf(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.IS_INF);
        return this.compileAndRun(program, [
            x
        ], "bool");
    }
    isFinite(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.IS_FINITE);
        return this.compileAndRun(program, [
            x
        ], "bool");
    }
    round(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ROUND);
        return this.compileAndRun(program, [
            x
        ]);
    }
    exp(x) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.exp(x);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(x, _unaryopGpu.EXP, x.dtype);
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.EXP);
        return this.compileAndRun(program, [
            x
        ]);
    }
    expm1(x) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.expm1(x);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(x, _unaryopGpu.EXPM1, x.dtype);
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.EXPM1);
        return this.compileAndRun(program, [
            x
        ]);
    }
    softmax(logits, dim) {
        const axes = (0, _tfjsCore.util).parseAxisParam([
            dim
        ], logits.shape);
        // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel
        // modularization.
        const maxLogit = (0, _tfjsCore.max)(logits, axes);
        const expandedShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(maxLogit.shape, axes);
        const a = this.subtract(logits, maxLogit.reshape(expandedShape));
        const b = this.exp(a);
        const sumExp = this.sum(b, axes).reshape(expandedShape);
        // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel
        // modularization.
        return (0, _tfjsCore.div)(b, sumExp);
    }
    log(x) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.log(x);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(x, _unaryopPackedGpu.LOG, x.dtype);
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.LOG);
        return this.compileAndRun(program, [
            x
        ]);
    }
    log1p(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.LOG1P);
        return this.compileAndRun(program, [
            x
        ]);
    }
    sqrt(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.SQRT);
        return this.compileAndRun(program, [
            x
        ]);
    }
    rsqrt(x) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.rsqrt(x);
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.RSQRT);
        return this.compileAndRun(program, [
            x
        ]);
    }
    reciprocal(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.RECIPROCAL);
        return this.compileAndRun(program, [
            x
        ]);
    }
    relu(x) {
        let program;
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK")) program = new (0, _unaryopPackedGpu.UnaryOpPackedProgram)(x.shape, _unaryopPackedGpu.RELU);
        else program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.RELU);
        return this.compileAndRun(program, [
            x
        ]);
    }
    relu6(x) {
        let program;
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK")) program = new (0, _unaryopPackedGpu.UnaryOpPackedProgram)(x.shape, _unaryopPackedGpu.RELU6);
        else program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.RELU6);
        return this.compileAndRun(program, [
            x
        ]);
    }
    prelu(x, alpha) {
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(_binaryopPackedGpu.PRELU, x.shape, alpha.shape) : new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.PRELU, x.shape, alpha.shape);
        return this.compileAndRun(program, [
            x,
            alpha
        ]);
    }
    elu(x) {
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(x, _unaryopPackedGpu.ELU, x.dtype);
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ELU);
        return this.compileAndRun(program, [
            x
        ]);
    }
    eluDer(dy, y) {
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(_binaryopPackedGpu.ELU_DER, dy.shape, y.shape) : new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.ELU_DER, dy.shape, y.shape);
        return this.compileAndRun(program, [
            dy,
            y
        ]);
    }
    selu(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.SELU);
        return this.compileAndRun(program, [
            x
        ]);
    }
    int(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.TO_INT);
        return this.compileAndRun(program, [
            x
        ], "int32");
    }
    clip(x, min, max) {
        let program;
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_CLIP")) program = new (0, _clipPackedGpu.ClipPackedProgram)(x.shape);
        else program = new (0, _clipGpu.ClipProgram)(x.shape);
        const customSetup = program.getCustomSetupFunc(min, max);
        return this.compileAndRun(program, [
            x
        ], null, customSetup);
    }
    abs(x) {
        if (this.shouldExecuteOnCPU([
            x
        ])) return this.cpuBackend.abs(x);
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(x, _unaryopGpu.ABS, x.dtype);
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ABS);
        return this.compileAndRun(program, [
            x
        ]);
    }
    complexAbs(x) {
        const xData = this.texData.get(x.dataId);
        const program = new (0, _complexAbsGpu.ComplexAbsProgram)(x.shape);
        const inputs = [
            this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),
            this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag), 
        ];
        return this.compileAndRun(program, inputs);
    }
    sigmoid(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.SIGMOID);
        return this.compileAndRun(program, [
            x
        ]);
    }
    softplus(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.SOFTPLUS);
        return this.compileAndRun(program, [
            x
        ]);
    }
    sin(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.SIN);
        return this.compileAndRun(program, [
            x
        ]);
    }
    cos(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.COS);
        return this.compileAndRun(program, [
            x
        ]);
    }
    tan(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.TAN);
        return this.compileAndRun(program, [
            x
        ]);
    }
    asin(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ASIN);
        return this.compileAndRun(program, [
            x
        ]);
    }
    acos(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ACOS);
        return this.compileAndRun(program, [
            x
        ]);
    }
    atan(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ATAN);
        return this.compileAndRun(program, [
            x
        ]);
    }
    atan2(a, b) {
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(_binaryopPackedGpu.ATAN2, a.shape, b.shape) : new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.ATAN2, a.shape, b.shape);
        return this.compileAndRun(program, [
            a,
            b
        ]);
    }
    sinh(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.SINH);
        return this.compileAndRun(program, [
            x
        ]);
    }
    cosh(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.COSH);
        return this.compileAndRun(program, [
            x
        ]);
    }
    tanh(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.TANH);
        return this.compileAndRun(program, [
            x
        ]);
    }
    asinh(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ASINH);
        return this.compileAndRun(program, [
            x
        ]);
    }
    acosh(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ACOSH);
        return this.compileAndRun(program, [
            x
        ]);
    }
    atanh(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ATANH);
        return this.compileAndRun(program, [
            x
        ]);
    }
    erf(x) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.ERF);
        return this.compileAndRun(program, [
            x
        ]);
    }
    step(x, alpha) {
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, _unaryopGpu.STEP(alpha));
        return this.compileAndRun(program, [
            x
        ]);
    }
    conv2dByMatMul(x, filter, convInfo, bias, activation, preluActivationWeights) {
        // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the
        // result from 2D to 4D.
        const xShape = x.shape;
        const xTexData = this.texData.get(x.dataId);
        const sharedMatMulDim = convInfo.inChannels;
        const outerShapeX = xShape[0] * xShape[1] * xShape[2];
        const outerShapeFilter = convInfo.outChannels;
        const isChannelsLast = convInfo.dataFormat === "channelsLast";
        const transposeA = false;
        const transposeB = false;
        // TODO: Once reduction ops are packed, batchMatMul will always be packed
        // and we can remove this condition.
        const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) && sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;
        const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;
        if (batchMatMulWillBeUnpacked || !(0, _tfjsCore.env)().getBool("WEBGL_LAZILY_UNPACK") || !(0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS") || !reshapeWillBeExpensive) {
            const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] : xShape[0] * xShape[2] * xShape[3];
            const xReshaped = this.reshape(x, [
                1,
                targetShape,
                convInfo.inChannels
            ]);
            const filterReshaped = this.reshape(filter, [
                1,
                convInfo.inChannels,
                convInfo.outChannels
            ]);
            return this.reshape(this.fusedBatchMatMul({
                a: xReshaped,
                b: filterReshaped,
                transposeA,
                transposeB,
                bias,
                activation,
                preluActivationWeights
            }), convInfo.outShape);
        }
        // Following optimization is specific to packed |x| with odd row count
        // (For example, in channelLast mode, 'row count' refers to x.shape[2]):
        // we avoid expensive packed 2x2 reshape by padding row count to next,
        // even number. When x.shape[2] is odd, the result of packed batchMatMul is
        // the same (has the same texture layout and and values in the texture) as
        // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like
        // even-rows tensor before the operation and, after the batchMatMul,
        // fix the even-rows result to have odd number of rows.
        const targetShape1 = isChannelsLast ? xShape[0] * xShape[1] * (xShape[2] + 1) : xShape[0] * xShape[2] * (xShape[3] + 1);
        const xReshaped1 = {
            dataId: x.dataId,
            shape: [
                1,
                targetShape1,
                convInfo.inChannels
            ],
            dtype: x.dtype
        };
        // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.
        // Decrementing row count, after batchMatMul->...->compileProgram leads to
        // invalid row count within the reference in GPGPUBinary.inShapeInfos.
        // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos
        // in compileProgram method, but that would affect compilation of all
        // programs - instead, provide a copy here, with even row count, before
        // calling batchMatMul->...->compileProgram and after that, the original
        // xTexData.shape is restored.
        const originalXTexDataShape = xTexData.shape;
        xTexData.shape = xTexData.shape.slice();
        xTexData.shape[xTexData.shape.length - 2]++;
        (0, _tfjsCore.util).assert(_webglUtil.isReshapeFree(xTexData.shape, xReshaped1.shape), ()=>`packed reshape ${xTexData.shape} to ${xReshaped1.shape} isn't free`);
        const filterReshaped1 = this.reshape(filter, [
            1,
            convInfo.inChannels,
            convInfo.outChannels
        ]);
        const pointwiseConv = this.fusedBatchMatMul({
            a: xReshaped1,
            b: filterReshaped1,
            transposeA,
            transposeB,
            bias,
            activation,
            preluActivationWeights
        });
        const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);
        (0, _tfjsCore.util).assert(pointwiseConvTexData.isPacked, ()=>"batchMatMul result is expected to be packed");
        // Restore the input shape to original.
        xTexData.shape = originalXTexDataShape;
        // Set the output shape - there is no need for expensive reshape as data
        // layout is already correct.
        pointwiseConvTexData.shape = convInfo.outShape;
        return (0, _tfjsCore.engine)().makeTensorFromDataId(pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype);
    }
    conv2dWithIm2Row(x, filter, convInfo, bias, activation, preluActivationWeights) {
        // Rearranges conv2d input so each block to be convolved over forms the
        // column of a new matrix with shape [filterWidth * filterHeight *
        // inChannels, outHeight * outWidth]. The filter is also rearranged so each
        // output channel forms a row of a new matrix with shape [outChannels,
        // filterWidth * filterHeight * inChannels]. The convolution is then
        // computed by multiplying these matrices and reshaping the result.
        const { filterWidth , filterHeight , inChannels , outWidth , outHeight , dataFormat  } = convInfo;
        const isChannelsLast = dataFormat === "channelsLast";
        const sharedDim = filterWidth * filterHeight * inChannels;
        const numCols = outHeight * outWidth;
        const x2ColShape = [
            sharedDim,
            numCols
        ];
        const transposeA = true;
        const transposeB = false;
        const xSqueezed = x.squeeze([
            0
        ]);
        const w2Row = filter.reshape([
            1,
            sharedDim,
            -1
        ]);
        const im2ColProgram = new (0, _im2ColPackedGpu.Im2ColPackedProgram)(x2ColShape, xSqueezed.shape, convInfo);
        const im2Col = this.compileAndRun(im2ColProgram, [
            xSqueezed
        ]).reshape([
            1,
            x2ColShape[0],
            x2ColShape[1]
        ]);
        const hasBias = bias != null;
        const hasPreluActivationWeights = preluActivationWeights != null;
        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;
        const matmulProgram = new (0, _mulmatPackedGpu.MatMulPackedProgram)(im2Col.shape, [
            1,
            numCols,
            convInfo.outChannels
        ], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);
        const inputs = [
            im2Col,
            w2Row
        ];
        if (bias) inputs.push(bias);
        if (hasPreluActivationWeights) inputs.push(preluActivationWeights);
        const product = this.compileAndRun(matmulProgram, inputs);
        if (isChannelsLast) return product.reshape([
            1,
            outHeight,
            outWidth,
            convInfo.outChannels
        ]);
        else return product.reshape([
            1,
            convInfo.outChannels,
            outHeight,
            outWidth
        ]);
    }
    fusedConv2d({ input , filter , convInfo , bias , activation , preluActivationWeights  }) {
        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === "SAME" || convInfo.padInfo.type === "VALID")) return this.conv2dByMatMul(input, filter, convInfo, bias, activation, preluActivationWeights);
        if ((0, _tfjsCore.env)().getBool("WEBGL_CONV_IM2COL") && input.shape[0] === 1) return this.conv2dWithIm2Row(input, filter, convInfo, bias, activation, preluActivationWeights);
        const hasBias = bias != null;
        const hasPreluActivationWeights = preluActivationWeights != null;
        const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;
        const program = new (0, _convGpu.Conv2DProgram)(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);
        const inputs = [
            input,
            filter
        ];
        if (bias) inputs.push(bias);
        if (preluActivationWeights) inputs.push(preluActivationWeights);
        return this.compileAndRun(program, inputs);
    }
    conv2d(x, filter, convInfo) {
        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === "SAME" || convInfo.padInfo.type === "VALID")) return this.conv2dByMatMul(x, filter, convInfo);
        if ((0, _tfjsCore.env)().getBool("WEBGL_CONV_IM2COL") && x.shape[0] === 1) return this.conv2dWithIm2Row(x, filter, convInfo);
        const program = new (0, _convGpu.Conv2DProgram)(convInfo);
        return this.compileAndRun(program, [
            x,
            filter
        ]);
    }
    conv2dDerInput(dy, filter, convInfo) {
        const program = new (0, _convBackpropGpu.Conv2DDerInputProgram)(convInfo);
        return this.compileAndRun(program, [
            dy,
            filter
        ]);
    }
    conv2dDerFilter(x, dy, convInfo) {
        const program = new (0, _convBackpropGpu.Conv2DDerFilterProgram)(convInfo);
        return this.compileAndRun(program, [
            x,
            dy
        ]);
    }
    fusedDepthwiseConv2D({ input , filter , convInfo , bias , activation , preluActivationWeights  }) {
        const shouldPackDepthwiseConv = (0, _tfjsCore.env)().getBool("WEBGL_PACK_DEPTHWISECONV") && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;
        const fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;
        const inputs = [
            input,
            filter
        ];
        const hasBias = bias != null;
        const hasPreluActivationWeights = preluActivationWeights != null;
        if (hasBias) inputs.push(bias);
        if (hasPreluActivationWeights) inputs.push(preluActivationWeights);
        let program;
        if (shouldPackDepthwiseConv) {
            program = new (0, _convPackedGpuDepthwise.DepthwiseConvPacked2DProgram)(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);
            return this.compileAndRun(program, inputs);
        }
        program = new (0, _convGpuDepthwise.DepthwiseConv2DProgram)(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);
        return this.compileAndRun(program, inputs);
    }
    depthwiseConv2D(x, filter, convInfo) {
        let program;
        if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_DEPTHWISECONV") && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {
            program = new (0, _convPackedGpuDepthwise.DepthwiseConvPacked2DProgram)(convInfo);
            return this.compileAndRun(program, [
                x,
                filter
            ]);
        }
        program = new (0, _convGpuDepthwise.DepthwiseConv2DProgram)(convInfo);
        return this.compileAndRun(program, [
            x,
            filter
        ]);
    }
    depthwiseConv2DDerInput(dy, filter, convInfo) {
        const program = new (0, _convBackpropGpuDepthwise.DepthwiseConv2DDerInputProgram)(convInfo);
        return this.compileAndRun(program, [
            dy,
            filter
        ]);
    }
    depthwiseConv2DDerFilter(x, dy, convInfo) {
        const program = new (0, _convBackpropGpuDepthwise.DepthwiseConv2DDerFilterProgram)(convInfo);
        return this.compileAndRun(program, [
            x,
            dy
        ]);
    }
    conv3d(x, filter, convInfo) {
        const program = new (0, _convGpu.Conv3DProgram)(convInfo);
        return this.compileAndRun(program, [
            x,
            filter
        ]);
    }
    conv3dDerInput(dy, filter, convInfo) {
        const program = new (0, _convBackpropGpu.Conv3DDerInputProgram)(convInfo);
        return this.compileAndRun(program, [
            dy,
            filter
        ]);
    }
    conv3dDerFilter(x, dy, convInfo) {
        const program = new (0, _convBackpropGpu.Conv3DDerFilterProgram)(convInfo);
        return this.compileAndRun(program, [
            x,
            dy
        ]);
    }
    maxPool(x, convInfo) {
        const program = new (0, _poolGpu.Pool2DProgram)(convInfo, "max", false);
        return this.compileAndRun(program, [
            x
        ]);
    }
    avgPool(x, convInfo) {
        const program = new (0, _poolGpu.Pool2DProgram)(convInfo, "avg", false);
        return this.compileAndRun(program, [
            x
        ], "float32");
    }
    maxPoolBackprop(dy, x, y, convInfo) {
        const getPositions = true;
        const maxPoolPositionsProgram = new (0, _poolGpu.Pool2DProgram)(convInfo, "max", getPositions);
        const maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [
            x
        ]);
        const maxPoolBackPropProgram = new (0, _maxPoolBackpropGpu.MaxPool2DBackpropProgram)(convInfo);
        const result = this.compileAndRun(maxPoolBackPropProgram, [
            dy,
            maxPoolPositions
        ], x.dtype);
        maxPoolPositions.dispose();
        return result;
    }
    avgPoolBackprop(dy, x, convInfo) {
        const avgPoolBackpropProgram = new (0, _avgPoolBackpropGpu.AvgPool2DBackpropProgram)(convInfo);
        return this.compileAndRun(avgPoolBackpropProgram, [
            dy
        ], x.dtype);
    }
    cast(x, dtype) {
        return (0, _tfjsCore.backend_util).castTensor(x, dtype, this);
    }
    unstack(x, axis) {
        const num = x.shape[axis];
        const outShape = new Array(x.rank - 1);
        let outIndex = 0;
        for(let i = 0; i < x.rank; i++)if (i !== axis) outShape[outIndex++] = x.shape[i];
        const begin = new Array(x.rank).fill(0);
        const size = x.shape.slice();
        size[axis] = 1;
        const res = new Array(num);
        for(let i1 = 0; i1 < res.length; i1++){
            begin[axis] = i1;
            res[i1] = this.slice(x, begin, size).reshape(outShape);
        }
        return res;
    }
    avgPool3d(x, convInfo) {
        const program = new (0, _poolGpu.Pool3DProgram)(convInfo, "avg", false);
        return this.compileAndRun(program, [
            x
        ], "float32");
    }
    avgPool3dBackprop(dy, x, convInfo) {
        const avgPool3dBackpropProgram = new (0, _avgPoolBackpropGpu.AvgPool3DBackpropProgram)(convInfo);
        return this.compileAndRun(avgPool3dBackpropProgram, [
            dy
        ], x.dtype);
    }
    maxPool3d(x, convInfo) {
        const program = new (0, _poolGpu.Pool3DProgram)(convInfo, "max", false);
        return this.compileAndRun(program, [
            x
        ], "float32");
    }
    maxPool3dBackprop(dy, x, y, convInfo) {
        const getPositions = true;
        const maxPool3dPositionsProgram = new (0, _poolGpu.Pool3DProgram)(convInfo, "max", getPositions);
        const maxPool3dPositions = this.compileAndRun(maxPool3dPositionsProgram, [
            x
        ]);
        const maxPool3dBackPropProgram = new (0, _maxPoolBackpropGpu.MaxPool3DBackpropProgram)(convInfo);
        const result = this.compileAndRun(maxPool3dBackPropProgram, [
            dy,
            maxPool3dPositions
        ], x.dtype);
        maxPool3dPositions.dispose();
        return result;
    }
    reshape(x, shape) {
        const texData = this.texData.get(x.dataId);
        if (texData.isPacked && !_webglUtil.isReshapeFree(x.shape, shape) && !(texData.texture !== null && _webglUtil.isReshapeFree(texData.shape, shape))) {
            const info = this.packedReshape(x, shape);
            return (0, _tfjsCore.engine)().makeTensorFromDataId(info.dataId, info.shape, info.dtype);
        }
        return (0, _tfjsCore.backend_util).reshapeTensor(x, shape);
    }
    resizeBilinear(x, newHeight, newWidth, alignCorners) {
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new (0, _resizeBilinearPackedGpu.ResizeBilinearPackedProgram)(x.shape, newHeight, newWidth, alignCorners) : new (0, _resizeBilinearGpu.ResizeBilinearProgram)(x.shape, newHeight, newWidth, alignCorners);
        return this.compileAndRun(program, [
            x
        ], "float32");
    }
    resizeBilinearBackprop(dy, x, alignCorners) {
        const program = new (0, _resizeBilinearBackpropGpu.ResizeBilinearBackpropProgram)(dy, x, alignCorners);
        return this.compileAndRun(program, [
            dy
        ]);
    }
    resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {
        const program = new (0, _resizeNearestNeighborGpu.ResizeNearestNeighborProgram)(x.shape, newHeight, newWidth, alignCorners);
        return this.compileAndRun(program, [
            x
        ]);
    }
    resizeNearestNeighborBackprop(dy, x, alignCorners) {
        const program = new (0, _resizeNearestNeighborBackpropGpu.ResizeNearestNeigborBackpropProgram)(dy, x, alignCorners);
        return this.compileAndRun(program, [
            dy
        ]);
    }
    multinomial(logits, normalized, numSamples, seed) {
        const probs = normalized ? logits : (0, _tfjsCore.softmax)(logits);
        const batchSize = probs.shape[0];
        const numOutcomes = probs.shape[1];
        const program = new (0, _multinomialGpu.MultinomialProgram)(batchSize, numOutcomes, numSamples);
        const customSetup = program.getCustomSetupFunc(seed);
        return this.compileAndRun(program, [
            probs
        ], "int32", customSetup);
    }
    oneHot(indices, depth, onValue, offValue) {
        const program = new (0, _onehotGpu.OneHotProgram)(indices.size, depth, onValue, offValue);
        return this.compileAndRun(program, [
            indices
        ]);
    }
    diag(x) {
        const program = new (0, _diagGpu.DiagProgram)(x.size);
        return this.compileAndRun(program, [
            x
        ]);
    }
    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {
        const program = new (0, _cropAndResizeGpu.CropAndResizeProgram)(image.shape, boxes.shape, cropSize, method, extrapolationValue);
        return this.compileAndRun(program, [
            image,
            boxes,
            boxIndex
        ], "float32");
    }
    depthToSpace(x, blockSize, dataFormat) {
        (0, _tfjsCore.util).assert(blockSize > 1, ()=>`blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);
        const batchSize = x.shape[0];
        const inputHeight = dataFormat === "NHWC" ? x.shape[1] : x.shape[2];
        const inputWidth = dataFormat === "NHWC" ? x.shape[2] : x.shape[3];
        const inputDepth = dataFormat === "NHWC" ? x.shape[3] : x.shape[1];
        const outputHeight = inputHeight * blockSize;
        const outputWidth = inputWidth * blockSize;
        const outputDepth = inputDepth / (blockSize * blockSize);
        const outputShape = dataFormat === "NHWC" ? [
            batchSize,
            outputHeight,
            outputWidth,
            outputDepth
        ] : [
            batchSize,
            outputDepth,
            outputHeight,
            outputWidth
        ];
        const program = new (0, _depthToSpaceGpu.DepthToSpaceProgram)(outputShape, blockSize, dataFormat);
        return this.compileAndRun(program, [
            x
        ]);
    }
    split(x, sizeSplits, axis) {
        return split(x, sizeSplits, axis);
    }
    scatterND(indices, updates, shape) {
        const { sliceRank , numUpdates , sliceSize , strides , outputSize  } = (0, _tfjsCore.backend_util).calculateShapes(updates, indices, shape);
        const flattenShape = [
            outputSize / sliceSize,
            sliceSize
        ];
        const flattenIndices = indices.reshape([
            numUpdates,
            sliceRank
        ]);
        const flattenX = updates.reshape([
            numUpdates,
            sliceSize
        ]);
        if (outputSize === 0) return (0, _tfjsCore.backend_util).reshapeTensor((0, _tfjsCore.tensor)([]), shape);
        const defaultValue = (0, _tfjsCore.scalar)(0);
        const program = new (0, _scatterGpu.ScatterProgram)(numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides, flattenShape);
        const res = this.compileAndRun(program, [
            flattenX,
            flattenIndices,
            defaultValue
        ]);
        return res.reshape(shape);
    }
    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {
        const { sliceRank , numUpdates , strides , outputSize  } = (0, _tfjsCore.backend_util).calculateShapes(sparseValues, sparseIndices, outputShape);
        const sumDupeIndices = false;
        const program = new (0, _scatterGpu.ScatterProgram)(numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides, [
            outputSize,
            1
        ], sumDupeIndices);
        const res = this.compileAndRun(program, [
            sparseValues,
            sparseIndices,
            defaultValue
        ]);
        return res.reshape(outputShape);
    }
    fft(x) {
        const inverse = false;
        return this.fftImpl(x, inverse);
    }
    ifft(x) {
        const inverse = true;
        return this.fftImpl(x, inverse);
    }
    fftImpl(x, inverse) {
        const xData = this.texData.get(x.dataId);
        const realProgram = new (0, _fftGpu.FFTProgram)(_fftGpu.COMPLEX_FFT.REAL, x.shape, inverse);
        const imagProgram = new (0, _fftGpu.FFTProgram)(_fftGpu.COMPLEX_FFT.IMAG, x.shape, inverse);
        const inputs = [
            this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),
            this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag), 
        ];
        const real = this.compileAndRun(realProgram, inputs);
        const imag = this.compileAndRun(imagProgram, inputs);
        const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);
        real.dispose();
        imag.dispose();
        return complex;
    }
    gatherND(x, indices) {
        const indicesShape = indices.shape;
        const sliceRank = indicesShape[indicesShape.length - 1];
        const [resultShape, numSlices, sliceSize, strides] = (0, _tfjsCore.backend_util).prepareAndValidate(x, indices);
        const flattenIndices = indices.reshape([
            numSlices,
            sliceRank
        ]);
        const flattenX = x.reshape([
            x.size / sliceSize,
            sliceSize
        ]);
        const program = new (0, _gatherNdGpu.GatherNDProgram)(sliceRank, strides, [
            numSlices,
            sliceSize
        ]);
        const res = this.compileAndRun(program, [
            flattenX,
            flattenIndices
        ]);
        return res.reshape(resultShape);
    }
    fill(shape, value, dtype) {
        dtype = dtype || (0, _tfjsCore.util).inferDtype(value);
        if (dtype === "string") {
            // String type should be handled in CPU memory.
            const values = (0, _tfjsCore.util).getArrayFromDType(dtype, (0, _tfjsCore.util).sizeFromShape(shape));
            values.fill(value);
            return (0, _tfjsCore.engine)().makeTensor(values, shape, dtype, this);
        } else {
            const program = new (0, _fillGpu.FillProgram)(shape, value);
            const customSetup = program.getCustomSetupFunc(value);
            return this.compileAndRun(program, [], dtype, customSetup);
        }
    }
    onesLike(x) {
        if (x.dtype === "string") throw new Error("onesLike is not supported under string dtype");
        else // TODO(cais, smilkov): Add WebGL shader for onesLike:
        //   https://github.com/tensorflow/tfjs/issues/1293
        return this.fill(x.shape, 1, x.dtype);
    }
    zerosLike(x) {
        return this.fill(x.shape, x.dtype === "string" ? "" : 0, x.dtype);
    }
    linspace(start, stop, num) {
        // TODO: Use CPU implementation due to the precision problem in Safari.
        return (0, _tfjsCore.backend_util).linspaceImpl(start, stop, num);
    }
    makeTensorInfo(shape, dtype) {
        const dataId = this.write(null, shape, dtype);
        this.texData.get(dataId).usage = null;
        return {
            dataId,
            shape,
            dtype
        };
    }
    makeOutput(shape, dtype) {
        const { dataId  } = this.makeTensorInfo(shape, dtype);
        return (0, _tfjsCore.engine)().makeTensorFromDataId(dataId, shape, dtype, this);
    }
    unpackTensor(input) {
        const program = new (0, _unpackGpu.UnpackProgram)(input.shape);
        return this.runWebGLProgram(program, [
            input
        ], input.dtype);
    }
    packTensor(input) {
        const program = new (0, _packGpu.PackProgram)(input.shape);
        const preventEagerUnpackingOutput = true;
        return this.runWebGLProgram(program, [
            input
        ], input.dtype, null, preventEagerUnpackingOutput);
    }
    packedReshape(input, afterShape) {
        const input3DShape = [
            _webglUtil.getBatchDim(input.shape),
            ..._webglUtil.getRowsCols(input.shape)
        ];
        const input3D = {
            dtype: input.dtype,
            shape: input3DShape,
            dataId: input.dataId
        };
        const afterShapeAs3D = [
            _webglUtil.getBatchDim(afterShape),
            ..._webglUtil.getRowsCols(afterShape)
        ];
        const program = new (0, _reshapePackedGpu.ReshapePackedProgram)(afterShapeAs3D, input3DShape);
        const preventEagerUnpackingOfOutput = true;
        const output = this.runWebGLProgram(program, [
            input3D
        ], input.dtype, null, preventEagerUnpackingOfOutput);
        return {
            dataId: output.dataId,
            shape: afterShape,
            dtype: output.dtype
        };
    }
    decode(dataId) {
        const texData = this.texData.get(dataId);
        const { isPacked , shape , dtype  } = texData;
        const shapeAs3D = _webglUtil.getShapeAs3D(shape);
        let program;
        if (isPacked) program = new (0, _decodeMatrixPackedGpu.DecodeMatrixPackedProgram)(shapeAs3D);
        else program = new (0, _decodeMatrixGpu.DecodeMatrixProgram)(shapeAs3D);
        const preventEagerUnpackingOfOutput = true;
        const out = this.runWebGLProgram(program, [
            {
                shape: shapeAs3D,
                dtype,
                dataId
            }
        ], dtype, null, preventEagerUnpackingOfOutput);
        return {
            dtype,
            shape,
            dataId: out.dataId
        };
    }
    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {
        const output = this.makeTensorInfo(program.outputShape, outputDtype);
        const outData = this.texData.get(output.dataId);
        if (program.packedOutput) outData.isPacked = true;
        if (program.outPackingScheme === _texUtil.PackingScheme.DENSE) {
            const texelShape = _texUtil.getDenseTexShape(program.outputShape);
            // For a densely packed output, we explicitly set texShape
            // so it doesn't get assigned later according to our typical packing
            // scheme wherein a single texel can only contain values from adjacent
            // rows/cols.
            outData.texShape = texelShape.map((d)=>d * 2);
        }
        if (program.outTexUsage != null) outData.usage = program.outTexUsage;
        if ((0, _tfjsCore.util).sizeFromShape(output.shape) === 0) {
            // Short-circuit the computation since the result is empty (has 0 in its
            // shape).
            outData.values = (0, _tfjsCore.util).getTypedArrayFromDType(output.dtype, 0);
            return output;
        }
        const dataToDispose = [];
        const inputsData = inputs.map((input)=>{
            if (input.dtype === "complex64") throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);
            let texData = this.texData.get(input.dataId);
            if (texData.texture == null) {
                if (!program.packedInputs && (0, _tfjsCore.util).sizeFromShape(input.shape) <= (0, _tfjsCore.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")) // Upload small tensors that live on the CPU as uniforms, not as
                // textures. Do this only when the environment supports 32bit floats
                // due to problems when comparing 16bit floats with 32bit floats.
                // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it
                // possible for packed shaders to sample from uniforms.
                return {
                    shape: input.shape,
                    texData: null,
                    isUniform: true,
                    uniformValues: texData.values
                };
                // This ensures that if a packed program's inputs have not yet been
                // uploaded to the GPU, they get uploaded as packed right off the bat.
                if (program.packedInputs) {
                    texData.isPacked = true;
                    texData.shape = input.shape;
                }
            } else if (!!texData.isPacked !== !!program.packedInputs) {
                input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);
                dataToDispose.push(input);
                texData = this.texData.get(input.dataId);
            } else if (texData.isPacked && !_webglUtil.isReshapeFree(texData.shape, input.shape)) {
                // This is a special case where a texture exists for a tensor
                // but the shapes are incompatible (due to packing constraints) because
                // the tensor did not have a chance to go through the packed reshape
                // shader. This only happens when we reshape the *same* tensor to form
                // *distinct* inputs to an op, e.g. dotting a vector with itself. This
                // case will disappear once packed uploading is the default.
                const savedInput = input;
                const targetShape = input.shape;
                input.shape = texData.shape;
                input = this.packedReshape(input, targetShape);
                dataToDispose.push(input);
                texData = this.texData.get(input.dataId);
                savedInput.shape = targetShape;
            }
            this.uploadToGPU(input.dataId);
            return {
                shape: input.shape,
                texData,
                isUniform: false
            };
        });
        this.uploadToGPU(output.dataId);
        const outputData = {
            shape: output.shape,
            texData: outData,
            isUniform: false
        };
        const key = _gpgpuMath.makeShaderKey(program, inputsData, outputData);
        const binary = this.getAndSaveBinary(key, ()=>{
            return _gpgpuMath.compileProgram(this.gpgpu, program, inputsData, outputData);
        });
        const shouldTimeProgram = this.activeTimers != null;
        let query;
        if (shouldTimeProgram) query = this.startTimer();
        _gpgpuMath.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);
        dataToDispose.forEach((info)=>this.disposeData(info.dataId));
        if (shouldTimeProgram) {
            query = this.endTimer(query);
            this.activeTimers.push({
                name: program.constructor.name,
                query: this.getQueryTime(query)
            });
        }
        if (!(0, _tfjsCore.env)().getBool("WEBGL_LAZILY_UNPACK") && outData.isPacked && preventEagerUnpackingOfOutput === false) {
            const unpacked = this.unpackTensor(output);
            this.disposeData(output.dataId);
            return unpacked;
        }
        return output;
    }
    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {
        outputDtype = outputDtype || inputs[0].dtype;
        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);
        return (0, _tfjsCore.engine)().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);
    }
    getAndSaveBinary(key, getBinary) {
        if (!(key in this.binaryCache)) this.binaryCache[key] = getBinary();
        return this.binaryCache[key];
    }
    getTextureManager() {
        return this.textureManager;
    }
    dispose() {
        if (this.disposed) return;
        // Avoid disposing the compiled webgl programs during unit testing because
        // it slows down test execution.
        if (!(0, _tfjsCore.env)().getBool("IS_TEST")) {
            const allKeys = Object.keys(this.binaryCache);
            allKeys.forEach((key)=>{
                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);
                delete this.binaryCache[key];
            });
        }
        this.textureManager.dispose();
        if (this.canvas != null && typeof HTMLCanvasElement !== "undefined" && this.canvas instanceof HTMLCanvasElement) this.canvas.remove();
        else this.canvas = null;
        if (this.gpgpuCreatedLocally) {
            this.gpgpu.program = null;
            this.gpgpu.dispose();
        }
        this.disposed = true;
    }
    floatPrecision() {
        if (this.floatPrecisionValue == null) this.floatPrecisionValue = (0, _tfjsCore.tidy)(()=>{
            if (!(0, _tfjsCore.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
                // Momentarily switching DEBUG flag to false so we don't throw an
                // error trying to upload a small value.
                const debugFlag = (0, _tfjsCore.env)().getBool("DEBUG");
                (0, _tfjsCore.env)().set("DEBUG", false);
                const underflowCheckValue = this.abs((0, _tfjsCore.scalar)(1e-8)).dataSync()[0];
                (0, _tfjsCore.env)().set("DEBUG", debugFlag);
                if (underflowCheckValue > 0) return 32;
            }
            return 16;
        });
        return this.floatPrecisionValue;
    }
    /** Returns the smallest representable number.  */ epsilon() {
        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
    }
    uploadToGPU(dataId) {
        const texData = this.texData.get(dataId);
        const { shape , dtype , values , texture , usage , isPacked  } = texData;
        if (texture != null) // Array is already on GPU. No-op.
        return;
        const shouldTimeProgram = this.activeTimers != null;
        let start;
        if (shouldTimeProgram) start = (0, _tfjsCore.util).now();
        let texShape = texData.texShape;
        if (texShape == null) {
            texShape = _webglUtil.getTextureShapeFromLogicalShape(shape, isPacked);
            texData.texShape = texShape;
        }
        if (values != null) {
            const shapeAs3D = _webglUtil.getShapeAs3D(shape);
            let program;
            let width = texShape[1], height = texShape[0];
            const isByteArray = values instanceof Uint8Array;
            if (isPacked) {
                [width, height] = _texUtil.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);
                program = new (0, _encodeMatrixPackedGpu.EncodeMatrixPackedProgram)(shapeAs3D, [
                    height,
                    width
                ], isByteArray);
            } else program = new (0, _encodeMatrixGpu.EncodeMatrixProgram)(shapeAs3D, [
                height,
                width
            ], isByteArray);
            const tempDenseInputHandle = this.makeTensorInfo([
                height,
                width
            ], dtype);
            if (isByteArray) this.texData.get(tempDenseInputHandle.dataId).usage = (0, _texUtil.TextureUsage).PIXELS;
            else this.texData.get(tempDenseInputHandle.dataId).usage = (0, _texUtil.TextureUsage).UPLOAD;
            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);
            // We want the output to remain packed regardless of the value of
            // WEBGL_PACK.
            const preventEagerUnpacking = true;
            const encodedOutputTarget = this.runWebGLProgram(program, [
                tempDenseInputHandle
            ], dtype, null, preventEagerUnpacking);
            // Have the original texture assume the identity of the encoded output.
            const outputTexData = this.texData.get(encodedOutputTarget.dataId);
            texData.texture = outputTexData.texture;
            texData.texShape = outputTexData.texShape;
            texData.isPacked = outputTexData.isPacked;
            texData.usage = outputTexData.usage;
            this.disposeData(tempDenseInputHandle.dataId);
            this.texData.delete(encodedOutputTarget.dataId);
            // Once uploaded, don't store the values on cpu.
            texData.values = null;
            if (shouldTimeProgram) this.uploadWaitMs += (0, _tfjsCore.util).now() - start;
        } else {
            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);
            texData.texture = newTexture;
        }
    }
    convertAndCacheOnCPU(dataId, float32Values) {
        const texData = this.texData.get(dataId);
        const { dtype  } = texData;
        this.releaseGPUData(dataId);
        if (float32Values != null) texData.values = float32ToTypedArray(float32Values, dtype);
        return texData.values;
    }
    acquireTexture(texShape, texType, dtype, isPacked) {
        this.numBytesInGPU += this.computeBytes(texShape, dtype);
        if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1048576) {
            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
            this.warnedAboutMemory = true;
            console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);
        }
        return this.textureManager.acquireTexture(texShape, texType, isPacked);
    }
    computeBytes(shape, dtype) {
        return shape[0] * shape[1] * (0, _tfjsCore.util).bytesPerElement(dtype);
    }
}
function float32ToTypedArray(a, dtype) {
    if (dtype === "float32" || dtype === "complex64") return a;
    else if (dtype === "int32" || dtype === "bool") {
        const result = dtype === "int32" ? new Int32Array(a.length) : new Uint8Array(a.length);
        for(let i = 0; i < result.length; ++i)result[i] = Math.round(a[i]);
        return result;
    } else throw new Error(`Unknown dtype ${dtype}`);
}

},{"./flags_webgl":"i9c3p","@tensorflow/tfjs-core":"2votT","./addn_gpu":"arjx5","./addn_packed_gpu":"2XI4s","./argminmax_gpu":"iyzcg","./argminmax_packed_gpu":"5rLBp","./avg_pool_backprop_gpu":"9vYN1","./batchnorm_gpu":"fDnlU","./batchnorm_packed_gpu":"84BTG","./binaryop_complex_gpu":"eoIO7","./binaryop_gpu":"lbbnp","./binaryop_packed_gpu":"gxIAI","./canvas_util":"9eAXh","./clip_gpu":"7UzFv","./clip_packed_gpu":"9mSuc","./complex_abs_gpu":"jBXGU","./concat_gpu":"lPwsJ","./concat_packed_gpu":"a0pzX","./conv_backprop_gpu":"f1IzM","./conv_backprop_gpu_depthwise":"dBHUi","./conv_gpu":"dqp6R","./conv_gpu_depthwise":"cmIEm","./conv_packed_gpu_depthwise":"fRETs","./crop_and_resize_gpu":"jIY9b","./cumsum_gpu":"g8I9j","./decode_matrix_gpu":"5xKFq","./decode_matrix_packed_gpu":"in2bU","./depth_to_space_gpu":"8azIA","./diag_gpu":"jGDbr","./encode_float_gpu":"kvmGW","./encode_float_packed_gpu":"kJWMo","./encode_matrix_gpu":"9hWim","./encode_matrix_packed_gpu":"87yQg","./fft_gpu":"1kqpi","./fill_gpu":"jdJmC","./gather_gpu":"7pQ7D","./gather_nd_gpu":"75yeS","./gpgpu_context":"6X3q9","./gpgpu_math":"bZupd","./im2col_packed_gpu":"2febK","./lrn_gpu":"ajKiQ","./lrn_grad_gpu":"eHAZO","./lrn_packed_gpu":"eoWeF","./max_pool_backprop_gpu":"lgDm3","./mulmat_packed_gpu":"jHB48","./multinomial_gpu":"6m2pm","./onehot_gpu":"h7ddI","./pack_gpu":"f0rjB","./pad_gpu":"3k7eK","./pad_packed_gpu":"dBeqd","./pool_gpu":"kbW82","./reduce_gpu":"d0Ozz","./reshape_packed_gpu":"fUKmz","./resize_bilinear_backprop_gpu":"4ebJU","./resize_bilinear_gpu":"66cHY","./resize_bilinear_packed_gpu":"f1qoO","./resize_nearest_neighbor_backprop_gpu":"5YaWi","./resize_nearest_neighbor_gpu":"6U6MS","./reverse_gpu":"3Kf49","./reverse_packed_gpu":"issP1","./scatter_gpu":"3yres","./segment_gpu":"59LpL","./select_gpu":"vjVWz","./slice_gpu":"9egzV","./slice_packed_gpu":"jpCP5","./strided_slice_gpu":"adQ4l","./tex_util":"kHw0Y","./texture_manager":"FEhWm","./tile_gpu":"a5QhD","./unaryop_gpu":"cNA7x","./unaryop_packed_gpu":"fuMk1","./unpack_gpu":"4NkhR","./webgl_util":"kgG6J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i9c3p":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _webglUtil = require("./webgl_util");
const ENV = (0, _tfjsCore.env)();
/**
 * This file contains WebGL-specific flag registrations.
 */ /**
 * True if WebGL is supported.
 */ ENV.registerFlag("HAS_WEBGL", ()=>ENV.getNumber("WEBGL_VERSION") > 0);
/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */ ENV.registerFlag("WEBGL_VERSION", ()=>{
    if ((0, _webglUtil.isWebGLVersionEnabled)(2)) return 2;
    else if ((0, _webglUtil.isWebGLVersionEnabled)(1)) return 1;
    return 0;
});
ENV.registerFlag("WEBGL_BUFFER_SUPPORTED", ()=>ENV.get("WEBGL_VERSION") === 2);
/** Whether the WebGL backend will sometimes forward ops to the CPU. */ ENV.registerFlag("WEBGL_CPU_FORWARD", ()=>true);
/** Whether the WebGL backend will always use f16 textures for rendering. */ ENV.registerFlag("WEBGL_FORCE_F16_TEXTURES", ()=>false);
/** Whether to turn all packing related flags on. */ ENV.registerFlag("WEBGL_PACK", ()=>ENV.getBool("HAS_WEBGL"));
/** Whether we will pack the batchnormalization op. */ ENV.registerFlag("WEBGL_PACK_NORMALIZATION", ()=>ENV.getBool("WEBGL_PACK"));
/** Whether we will pack the clip op. */ ENV.registerFlag("WEBGL_PACK_CLIP", ()=>ENV.getBool("WEBGL_PACK"));
/** Whether we will pack the depthwise conv op. */ // TODO: https://github.com/tensorflow/tfjs/issues/1679
ENV.registerFlag("WEBGL_PACK_DEPTHWISECONV", ()=>false);
/** Whether we will pack binary ops. */ ENV.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", ()=>ENV.getBool("WEBGL_PACK"));
/** Whether we will pack unary ops. */ ENV.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", ()=>ENV.getBool("WEBGL_PACK"));
/** Whether we will pack array ops. */ ENV.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", ()=>ENV.getBool("WEBGL_PACK"));
/** Whether we will pack image ops. */ ENV.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", ()=>ENV.getBool("WEBGL_PACK"));
/** Whether we will pack reduce ops. */ ENV.registerFlag("WEBGL_PACK_REDUCE", ()=>ENV.getBool("WEBGL_PACK"));
/** Whether packed WebGL kernels lazily unpack their outputs. */ ENV.registerFlag("WEBGL_LAZILY_UNPACK", ()=>ENV.getBool("WEBGL_PACK"));
/** Whether we will use the im2col algorithm to speed up convolutions. */ ENV.registerFlag("WEBGL_CONV_IM2COL", ()=>ENV.getBool("WEBGL_PACK"));
/** The maximum texture dimension. */ ENV.registerFlag("WEBGL_MAX_TEXTURE_SIZE", ()=>(0, _webglUtil.getWebGLMaxTextureSize)(ENV.getNumber("WEBGL_VERSION")));
/** The maximum texture dimension. */ ENV.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", ()=>(0, _webglUtil.getMaxTexturesInShader)(ENV.getNumber("WEBGL_VERSION")));
/**
 * The disjoint_query_timer extension version.
 * 0: disabled, 1: EXT_disjoint_timer_query, 2:
 * EXT_disjoint_timer_query_webgl2.
 * In Firefox with WebGL 2.0,
 * EXT_disjoint_timer_query_webgl2 is not available, so we must use the
 * WebGL 1.0 extension.
 */ ENV.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", ()=>{
    const webGLVersion = ENV.getNumber("WEBGL_VERSION");
    if (webGLVersion === 0) return 0;
    return (0, _webglUtil.getWebGLDisjointQueryTimerVersion)(webGLVersion);
});
/**
 * Whether the timer object from the disjoint_query_timer extension gives
 * timing information that is reliable.
 */ ENV.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", ()=>ENV.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !(0, _tfjsCore.device_util).isMobile());
/**
 * Whether the device is physically capable of rendering to float32 textures.
 */ ENV.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", ()=>(0, _webglUtil.isCapableOfRenderingToFloatTexture)(ENV.getNumber("WEBGL_VERSION")));
/**
 * Whether rendering to float32 textures is enabled. If disabled, renders to
 * float16 textures.
 */ ENV.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", ()=>{
    return ENV.getBool("WEBGL_FORCE_F16_TEXTURES") ? false : ENV.getBool("WEBGL_RENDER_FLOAT32_CAPABLE");
});
/**
 * Whether downloading float textures is enabled (16 or 32 bit). If disabled,
 * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.
 */ ENV.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", ()=>(0, _webglUtil.isDownloadFloatTextureEnabled)(ENV.getNumber("WEBGL_VERSION")));
/** Whether the fence API is available. */ ENV.registerFlag("WEBGL_FENCE_API_ENABLED", ()=>(0, _webglUtil.isWebGLFenceEnabled)(ENV.getNumber("WEBGL_VERSION")));
/**
 * Tensors with size <= than this will be uploaded as uniforms, not textures.
 */ ENV.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", ()=>{
    // Use uniform uploads only when 32bit floats are supported. In
    // 16bit
    // environments there are problems with comparing a 16bit texture value
    // with a 32bit uniform value.
    const useUniforms = ENV.getBool("WEBGL_RENDER_FLOAT32_ENABLED");
    return useUniforms ? 4 : 0;
});

},{"@tensorflow/tfjs-core":"2votT","./webgl_util":"kgG6J"}],"kgG6J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "callAndCheck", ()=>callAndCheck);
parcelHelpers.export(exports, "canBeRepresented", ()=>canBeRepresented);
parcelHelpers.export(exports, "getWebGLErrorMessage", ()=>getWebGLErrorMessage);
parcelHelpers.export(exports, "getExtensionOrThrow", ()=>getExtensionOrThrow);
parcelHelpers.export(exports, "createVertexShader", ()=>createVertexShader);
parcelHelpers.export(exports, "createFragmentShader", ()=>createFragmentShader);
parcelHelpers.export(exports, "createProgram", ()=>createProgram);
parcelHelpers.export(exports, "linkProgram", ()=>linkProgram);
parcelHelpers.export(exports, "validateProgram", ()=>validateProgram);
parcelHelpers.export(exports, "createStaticVertexBuffer", ()=>createStaticVertexBuffer);
parcelHelpers.export(exports, "createStaticIndexBuffer", ()=>createStaticIndexBuffer);
parcelHelpers.export(exports, "getNumChannels", ()=>getNumChannels);
parcelHelpers.export(exports, "createTexture", ()=>createTexture);
parcelHelpers.export(exports, "validateTextureSize", ()=>validateTextureSize);
parcelHelpers.export(exports, "createFramebuffer", ()=>createFramebuffer);
parcelHelpers.export(exports, "bindVertexBufferToProgramAttribute", ()=>bindVertexBufferToProgramAttribute);
parcelHelpers.export(exports, "bindTextureUnit", ()=>bindTextureUnit);
parcelHelpers.export(exports, "unbindTextureUnit", ()=>unbindTextureUnit);
parcelHelpers.export(exports, "getProgramUniformLocationOrThrow", ()=>getProgramUniformLocationOrThrow);
parcelHelpers.export(exports, "getProgramUniformLocation", ()=>getProgramUniformLocation);
parcelHelpers.export(exports, "bindTextureToProgramUniformSampler", ()=>bindTextureToProgramUniformSampler);
parcelHelpers.export(exports, "bindCanvasToFramebuffer", ()=>bindCanvasToFramebuffer);
parcelHelpers.export(exports, "bindColorTextureToFramebuffer", ()=>bindColorTextureToFramebuffer);
parcelHelpers.export(exports, "unbindColorTextureFromFramebuffer", ()=>unbindColorTextureFromFramebuffer);
parcelHelpers.export(exports, "validateFramebuffer", ()=>validateFramebuffer);
parcelHelpers.export(exports, "getFramebufferErrorMessage", ()=>getFramebufferErrorMessage);
parcelHelpers.export(exports, "getBatchDim", ()=>getBatchDim);
parcelHelpers.export(exports, "getRowsCols", ()=>getRowsCols);
parcelHelpers.export(exports, "getShapeAs3D", ()=>getShapeAs3D);
parcelHelpers.export(exports, "getTextureShapeFromLogicalShape", ()=>getTextureShapeFromLogicalShape);
/**
 * This determines whether reshaping a packed texture requires rearranging
 * the data within the texture, assuming 2x2 packing.
 */ parcelHelpers.export(exports, "isReshapeFree", ()=>isReshapeFree);
parcelHelpers.export(exports, "getWebGLMaxTextureSize", ()=>getWebGLMaxTextureSize);
parcelHelpers.export(exports, "resetMaxTextureSize", ()=>resetMaxTextureSize);
parcelHelpers.export(exports, "resetMaxTexturesInShader", ()=>resetMaxTexturesInShader);
parcelHelpers.export(exports, "getMaxTexturesInShader", ()=>getMaxTexturesInShader);
parcelHelpers.export(exports, "getWebGLDisjointQueryTimerVersion", ()=>getWebGLDisjointQueryTimerVersion);
parcelHelpers.export(exports, "hasExtension", ()=>hasExtension);
parcelHelpers.export(exports, "isWebGLVersionEnabled", ()=>isWebGLVersionEnabled);
parcelHelpers.export(exports, "isCapableOfRenderingToFloatTexture", ()=>isCapableOfRenderingToFloatTexture);
/**
 * Check if we can download values from a float/half-float texture.
 *
 * Note that for performance reasons we use binding a texture to a framebuffer
 * as a proxy for ability to download float values later using readPixels. The
 * texture params of this texture will not match those in readPixels exactly
 * but if we are unable to bind some kind of float texture to the frameBuffer
 * then we definitely will not be able to read float values from it.
 */ parcelHelpers.export(exports, "isDownloadFloatTextureEnabled", ()=>isDownloadFloatTextureEnabled);
parcelHelpers.export(exports, "isWebGLFenceEnabled", ()=>isWebGLFenceEnabled);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _canvasUtil = require("./canvas_util");
var _texUtil = require("./tex_util");
function callAndCheck(gl, debugMode, func) {
    const returnValue = func();
    if (debugMode) checkWebGLError(gl);
    return returnValue;
}
function checkWebGLError(gl) {
    const error = gl.getError();
    if (error !== gl.NO_ERROR) throw new Error("WebGL Error: " + getWebGLErrorMessage(gl, error));
}
// https://en.wikipedia.org/wiki/Half-precision_floating-point_format
const MIN_FLOAT16 = 5.96e-8;
const MAX_FLOAT16 = 65504;
function canBeRepresented(num) {
    if ((0, _tfjsCore.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || num === 0 || MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16) return true;
    return false;
}
function getWebGLErrorMessage(gl, status) {
    switch(status){
        case gl.NO_ERROR:
            return "NO_ERROR";
        case gl.INVALID_ENUM:
            return "INVALID_ENUM";
        case gl.INVALID_VALUE:
            return "INVALID_VALUE";
        case gl.INVALID_OPERATION:
            return "INVALID_OPERATION";
        case gl.INVALID_FRAMEBUFFER_OPERATION:
            return "INVALID_FRAMEBUFFER_OPERATION";
        case gl.OUT_OF_MEMORY:
            return "OUT_OF_MEMORY";
        case gl.CONTEXT_LOST_WEBGL:
            return "CONTEXT_LOST_WEBGL";
        default:
            return `Unknown error code ${status}`;
    }
}
function getExtensionOrThrow(gl, debug, extensionName) {
    return throwIfNull(gl, debug, ()=>gl.getExtension(extensionName), 'Extension "' + extensionName + '" not supported on this browser.');
}
function createVertexShader(gl, debug, vertexShaderSource) {
    const vertexShader = throwIfNull(gl, debug, ()=>gl.createShader(gl.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
    callAndCheck(gl, debug, ()=>gl.shaderSource(vertexShader, vertexShaderSource));
    callAndCheck(gl, debug, ()=>gl.compileShader(vertexShader));
    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {
        console.log(gl.getShaderInfoLog(vertexShader));
        throw new Error("Failed to compile vertex shader.");
    }
    return vertexShader;
}
function createFragmentShader(gl, debug, fragmentShaderSource) {
    const fragmentShader = throwIfNull(gl, debug, ()=>gl.createShader(gl.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
    callAndCheck(gl, debug, ()=>gl.shaderSource(fragmentShader, fragmentShaderSource));
    callAndCheck(gl, debug, ()=>gl.compileShader(fragmentShader));
    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {
        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));
        throw new Error("Failed to compile fragment shader.");
    }
    return fragmentShader;
}
const lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;
function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {
    const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);
    if (lineNumberRegexResult == null) {
        console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);
        console.log(shaderSource);
        return;
    }
    const lineNumber = +lineNumberRegexResult[1];
    const shaderLines = shaderSource.split("\n");
    const pad = shaderLines.length.toString().length + 2;
    const linesWithLineNumbers = shaderLines.map((line, lineNumber)=>(0, _tfjsCore.util).rightPad((lineNumber + 1).toString(), pad) + line);
    let maxLineLength = 0;
    for(let i = 0; i < linesWithLineNumbers.length; i++)maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);
    const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);
    const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);
    const afterErrorLines = linesWithLineNumbers.slice(lineNumber);
    console.log(beforeErrorLines.join("\n"));
    console.log(shaderInfoLog.split("\n")[0]);
    console.log(`%c ${(0, _tfjsCore.util).rightPad(errorLine[0], maxLineLength)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717");
    console.log(afterErrorLines.join("\n"));
}
function createProgram(gl, debug) {
    return throwIfNull(gl, debug, ()=>gl.createProgram(), "Unable to create WebGLProgram.");
}
function linkProgram(gl, debug, program) {
    callAndCheck(gl, debug, ()=>gl.linkProgram(program));
    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
        console.log(gl.getProgramInfoLog(program));
        throw new Error("Failed to link vertex and fragment shaders.");
    }
}
function validateProgram(gl, debug, program) {
    callAndCheck(gl, debug, ()=>gl.validateProgram(program));
    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {
        console.log(gl.getProgramInfoLog(program));
        throw new Error("Shader program validation failed.");
    }
}
function createStaticVertexBuffer(gl, debug, data) {
    const buffer = throwIfNull(gl, debug, ()=>gl.createBuffer(), "Unable to create WebGLBuffer");
    callAndCheck(gl, debug, ()=>gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
    callAndCheck(gl, debug, ()=>gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));
    return buffer;
}
function createStaticIndexBuffer(gl, debug, data) {
    const buffer = throwIfNull(gl, debug, ()=>gl.createBuffer(), "Unable to create WebGLBuffer");
    callAndCheck(gl, debug, ()=>gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));
    callAndCheck(gl, debug, ()=>gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));
    return buffer;
}
function getNumChannels() {
    if ((0, _tfjsCore.env)().getNumber("WEBGL_VERSION") === 2) return 1;
    return 4;
}
function createTexture(gl, debug) {
    return throwIfNull(gl, debug, ()=>gl.createTexture(), "Unable to create WebGLTexture.");
}
function validateTextureSize(width, height) {
    const maxTextureSize = (0, _tfjsCore.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");
    if (width <= 0 || height <= 0) {
        const requested = `[${width}x${height}]`;
        throw new Error("Requested texture size " + requested + " is invalid.");
    }
    if (width > maxTextureSize || height > maxTextureSize) {
        const requested1 = `[${width}x${height}]`;
        const max = `[${maxTextureSize}x${maxTextureSize}]`;
        throw new Error("Requested texture size " + requested1 + " greater than WebGL maximum on this browser / GPU " + max + ".");
    }
}
function createFramebuffer(gl, debug) {
    return throwIfNull(gl, debug, ()=>gl.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function bindVertexBufferToProgramAttribute(gl, debug, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {
    const loc = gl.getAttribLocation(program, attribute);
    if (loc === -1) // The GPU compiler decided to strip out this attribute because it's unused,
    // thus no need to bind.
    return false;
    callAndCheck(gl, debug, ()=>gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
    callAndCheck(gl, debug, ()=>gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));
    callAndCheck(gl, debug, ()=>gl.enableVertexAttribArray(loc));
    return true;
}
function bindTextureUnit(gl, debug, texture, textureUnit) {
    validateTextureUnit(gl, textureUnit);
    callAndCheck(gl, debug, ()=>gl.activeTexture(gl.TEXTURE0 + textureUnit));
    callAndCheck(gl, debug, ()=>gl.bindTexture(gl.TEXTURE_2D, texture));
}
function unbindTextureUnit(gl, debug, textureUnit) {
    validateTextureUnit(gl, textureUnit);
    callAndCheck(gl, debug, ()=>gl.activeTexture(gl.TEXTURE0 + textureUnit));
    callAndCheck(gl, debug, ()=>gl.bindTexture(gl.TEXTURE_2D, null));
}
function getProgramUniformLocationOrThrow(gl, debug, program, uniformName) {
    return throwIfNull(gl, debug, ()=>gl.getUniformLocation(program, uniformName), 'uniform "' + uniformName + '" not present in program.');
}
function getProgramUniformLocation(gl, program, uniformName) {
    return gl.getUniformLocation(program, uniformName);
}
function bindTextureToProgramUniformSampler(gl, debug, program, texture, uniformSamplerLocation, textureUnit) {
    callAndCheck(gl, debug, ()=>bindTextureUnit(gl, debug, texture, textureUnit));
    callAndCheck(gl, debug, ()=>gl.uniform1i(uniformSamplerLocation, textureUnit));
}
function bindCanvasToFramebuffer(gl, debug) {
    callAndCheck(gl, debug, ()=>gl.bindFramebuffer(gl.FRAMEBUFFER, null));
    callAndCheck(gl, debug, ()=>gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));
    callAndCheck(gl, debug, ()=>gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));
}
function bindColorTextureToFramebuffer(gl, debug, texture, framebuffer) {
    callAndCheck(gl, debug, ()=>gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
    callAndCheck(gl, debug, ()=>gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));
}
function unbindColorTextureFromFramebuffer(gl, debug, framebuffer) {
    callAndCheck(gl, debug, ()=>gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
    callAndCheck(gl, debug, ()=>gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));
}
function validateFramebuffer(gl) {
    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    if (status !== gl.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + getFramebufferErrorMessage(gl, status));
}
function getFramebufferErrorMessage(gl, status) {
    switch(status){
        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
            return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
        case gl.FRAMEBUFFER_UNSUPPORTED:
            return "FRAMEBUFFER_UNSUPPORTED";
        default:
            return `unknown error ${status}`;
    }
}
function throwIfNull(gl, debug, returnTOrNull, failureMessage) {
    const tOrNull = callAndCheck(gl, debug, ()=>returnTOrNull());
    if (tOrNull == null) throw new Error(failureMessage);
    return tOrNull;
}
function validateTextureUnit(gl, textureUnit) {
    const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
    const glTextureUnit = textureUnit + gl.TEXTURE0;
    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {
        const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;
        throw new Error(`textureUnit must be in ${textureUnitRange}.`);
    }
}
function getBatchDim(shape, dimsToSkip = 2) {
    return (0, _tfjsCore.util).sizeFromShape(shape.slice(0, shape.length - dimsToSkip));
}
function getRowsCols(shape) {
    if (shape.length === 0) throw Error("Cannot get rows and columns of an empty shape array.");
    return [
        shape.length > 1 ? shape[shape.length - 2] : 1,
        shape[shape.length - 1]
    ];
}
function getShapeAs3D(shape) {
    let shapeAs3D = [
        1,
        1,
        1
    ];
    const isScalar = shape.length === 0 || shape.length === 1 && shape[0] === 1;
    if (!isScalar) shapeAs3D = [
        getBatchDim(shape),
        ...getRowsCols(shape)
    ];
    return shapeAs3D;
}
function getTextureShapeFromLogicalShape(logShape, isPacked = false) {
    let maxTexSize = (0, _tfjsCore.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");
    if (isPacked) {
        maxTexSize = maxTexSize * 2;
        // This logic ensures we accurately count the number of packed texels needed
        // to accommodate the tensor. We can only pack values in the same texel if
        // they are from adjacent pairs of rows/cols within the same batch. So if a
        // tensor has 3 rows, we pretend it has 4 rows in order to account for the
        // fact that the texels containing the third row are half empty.
        logShape = logShape.map((d, i)=>i >= logShape.length - 2 ? (0, _tfjsCore.util).nearestLargerEven(logShape[i]) : logShape[i]);
        // Packed texture height is at least 2 (the channel height of a single
        // texel).
        if (logShape.length === 1) logShape = [
            2,
            logShape[0]
        ];
    }
    // If logical shape is 2, we don't squeeze, since we want to match physical.
    if (logShape.length !== 2) {
        const squeezeResult = (0, _tfjsCore.util).squeezeShape(logShape);
        logShape = squeezeResult.newShape;
    }
    let size = (0, _tfjsCore.util).sizeFromShape(logShape);
    if (logShape.length <= 1 && size <= maxTexSize) return [
        1,
        size
    ];
    else if (logShape.length === 2 && logShape[0] <= maxTexSize && logShape[1] <= maxTexSize) return logShape;
    else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize && logShape[2] <= maxTexSize) return [
        logShape[0] * logShape[1],
        logShape[2]
    ];
    else if (logShape.length === 3 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] <= maxTexSize) return [
        logShape[0],
        logShape[1] * logShape[2]
    ];
    else if (logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTexSize && logShape[3] <= maxTexSize) return [
        logShape[0] * logShape[1] * logShape[2],
        logShape[3]
    ];
    else if (logShape.length === 4 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] * logShape[3] <= maxTexSize) return [
        logShape[0],
        logShape[1] * logShape[2] * logShape[3]
    ];
    else {
        if (isPacked) {
            // For packed textures size equals the number of channels required to
            // accommodate the texture data. However in order to squarify such that
            // inner dimensions stay even, we rewrite size to equal the number of
            // texels. Then in the return statement we rehydrate the squarified
            // dimensions to channel units.
            const batchDim = getBatchDim(logShape);
            let rows = 2, cols = 2;
            if (logShape.length) [rows, cols] = getRowsCols(logShape);
            size = batchDim * (rows / 2) * (cols / 2);
            return (0, _tfjsCore.util).sizeToSquarishShape(size).map((d)=>d * 2);
        }
        return (0, _tfjsCore.util).sizeToSquarishShape(size);
    }
}
function isEven(n) {
    return n % 2 === 0;
}
function isReshapeFree(shape1, shape2) {
    shape1 = shape1.slice(-2);
    shape2 = shape2.slice(-2);
    if ((0, _tfjsCore.util).arraysEqual(shape1, shape2)) return true;
    if (!shape1.length || !shape2.length) return true;
    if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 || shape2[1] === 0) return true;
    if (shape1.length !== shape2.length) {
        const shape1Cols = shape1.slice(-1)[0];
        const shape2Cols = shape2.slice(-1)[0];
        if (shape1Cols === shape2Cols) return true;
        if (isEven(shape1Cols) && isEven(shape2Cols) && (shape1[0] === 1 || shape2[0] === 1)) return true;
    }
    return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);
}
// We cache webgl params because the environment gets reset between
// unit tests and we don't want to constantly query the WebGLContext for
// MAX_TEXTURE_SIZE.
let MAX_TEXTURE_SIZE;
let MAX_TEXTURES_IN_SHADER;
function getWebGLMaxTextureSize(webGLVersion) {
    if (MAX_TEXTURE_SIZE == null) {
        const gl = (0, _canvasUtil.getWebGLContext)(webGLVersion);
        MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    }
    return MAX_TEXTURE_SIZE;
}
function resetMaxTextureSize() {
    MAX_TEXTURE_SIZE = null;
}
function resetMaxTexturesInShader() {
    MAX_TEXTURES_IN_SHADER = null;
}
function getMaxTexturesInShader(webGLVersion) {
    if (MAX_TEXTURES_IN_SHADER == null) {
        const gl = (0, _canvasUtil.getWebGLContext)(webGLVersion);
        MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    }
    // We cap at 16 to avoid spurious runtime "memory exhausted" error.
    return Math.min(16, MAX_TEXTURES_IN_SHADER);
}
function getWebGLDisjointQueryTimerVersion(webGLVersion) {
    if (webGLVersion === 0) return 0;
    let queryTimerVersion;
    const gl = (0, _canvasUtil.getWebGLContext)(webGLVersion);
    if (hasExtension(gl, "EXT_disjoint_timer_query_webgl2") && webGLVersion === 2) queryTimerVersion = 2;
    else if (hasExtension(gl, "EXT_disjoint_timer_query")) queryTimerVersion = 1;
    else queryTimerVersion = 0;
    return queryTimerVersion;
}
function hasExtension(gl, extensionName) {
    const ext = gl.getExtension(extensionName);
    return ext != null;
}
function isWebGLVersionEnabled(webGLVersion) {
    try {
        const gl = (0, _canvasUtil.getWebGLContext)(webGLVersion);
        if (gl != null) return true;
    } catch (e) {
        return false;
    }
    return false;
}
function isCapableOfRenderingToFloatTexture(webGLVersion) {
    if (webGLVersion === 0) return false;
    const gl = (0, _canvasUtil.getWebGLContext)(webGLVersion);
    if (webGLVersion === 1) {
        if (!hasExtension(gl, "OES_texture_float")) return false;
    } else {
        if (!hasExtension(gl, "EXT_color_buffer_float")) return false;
    }
    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
    return isFrameBufferComplete;
}
function isDownloadFloatTextureEnabled(webGLVersion) {
    if (webGLVersion === 0) return false;
    const gl = (0, _canvasUtil.getWebGLContext)(webGLVersion);
    if (webGLVersion === 1) {
        if (!hasExtension(gl, "OES_texture_float")) return false;
        if (!hasExtension(gl, "WEBGL_color_buffer_float")) return false;
    } else {
        if (hasExtension(gl, "EXT_color_buffer_float")) return createFloatTextureAndBindToFramebuffer(gl);
        const COLOR_BUFFER_HALF_FLOAT = "EXT_color_buffer_half_float";
        if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {
            const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
            return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);
        }
        return false;
    }
    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
    return isFrameBufferComplete;
}
function createFloatTextureAndBindToFramebuffer(gl) {
    const texConfig = (0, _texUtil.getTextureConfig)(gl);
    const texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    const width = 1;
    const height = 1;
    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);
    const frameBuffer = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.deleteTexture(texture);
    gl.deleteFramebuffer(frameBuffer);
    return isFrameBufferComplete;
}
function createHalfFloatTextureAndBindToFramebuffer(// tslint:disable-next-line:no-any
gl, textureHalfFloatExtension) {
    const texConfig = (0, _texUtil.getTextureConfig)(gl, textureHalfFloatExtension);
    const texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    const width = 1;
    const height = 1;
    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);
    const frameBuffer = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.deleteTexture(texture);
    gl.deleteFramebuffer(frameBuffer);
    return isFrameBufferComplete;
}
function isWebGLFenceEnabled(webGLVersion) {
    if (webGLVersion !== 2) return false;
    const gl = (0, _canvasUtil.getWebGLContext)(webGLVersion);
    // tslint:disable-next-line:no-any
    const isEnabled = gl.fenceSync != null;
    return isEnabled;
}

},{"@tensorflow/tfjs-core":"2votT","./canvas_util":"9eAXh","./tex_util":"kHw0Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9eAXh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setWebGLContext", ()=>setWebGLContext);
parcelHelpers.export(exports, "getWebGLContext", ()=>getWebGLContext);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const contexts = {};
const WEBGL_ATTRIBUTES = {
    alpha: false,
    antialias: false,
    premultipliedAlpha: false,
    preserveDrawingBuffer: false,
    depth: false,
    stencil: false,
    failIfMajorPerformanceCaveat: true
};
function setWebGLContext(webGLVersion, gl) {
    contexts[webGLVersion] = gl;
}
function getWebGLContext(webGLVersion) {
    if (!(webGLVersion in contexts)) contexts[webGLVersion] = getWebGLRenderingContext(webGLVersion);
    const gl = contexts[webGLVersion];
    if (gl.isContextLost()) {
        delete contexts[webGLVersion];
        return getWebGLContext(webGLVersion);
    }
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.STENCIL_TEST);
    gl.disable(gl.BLEND);
    gl.disable(gl.DITHER);
    gl.disable(gl.POLYGON_OFFSET_FILL);
    gl.disable(gl.SAMPLE_COVERAGE);
    gl.enable(gl.SCISSOR_TEST);
    gl.enable(gl.CULL_FACE);
    gl.cullFace(gl.BACK);
    return contexts[webGLVersion];
}
function createCanvas(webGLVersion) {
    if (typeof OffscreenCanvas !== "undefined" && webGLVersion === 2) return new OffscreenCanvas(300, 150);
    else if (typeof document !== "undefined") return document.createElement("canvas");
    else throw new Error("Cannot create a canvas in this context");
}
function getWebGLRenderingContext(webGLVersion) {
    if (webGLVersion !== 1 && webGLVersion !== 2) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
    const canvas = createCanvas(webGLVersion);
    canvas.addEventListener("webglcontextlost", (ev)=>{
        ev.preventDefault();
        delete contexts[webGLVersion];
    }, false);
    if (webGLVersion === 1) return canvas.getContext("webgl", WEBGL_ATTRIBUTES) || canvas.getContext("experimental-webgl", WEBGL_ATTRIBUTES);
    return canvas.getContext("webgl2", WEBGL_ATTRIBUTES);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kHw0Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PackingScheme", ()=>PackingScheme);
parcelHelpers.export(exports, "TextureUsage", ()=>TextureUsage);
parcelHelpers.export(exports, "PhysicalTextureType", ()=>PhysicalTextureType);
parcelHelpers.export(exports, "getUnpackedMatrixTextureShapeWidthHeight", ()=>getUnpackedMatrixTextureShapeWidthHeight);
parcelHelpers.export(exports, "getUnpackedArraySizeFromMatrixSize", ()=>getUnpackedArraySizeFromMatrixSize);
parcelHelpers.export(exports, "getColorMatrixTextureShapeWidthHeight", ()=>getColorMatrixTextureShapeWidthHeight);
/**
 * Get shape for densely packed RGBA texture.
 */ parcelHelpers.export(exports, "getDenseTexShape", ()=>getDenseTexShape);
parcelHelpers.export(exports, "getMatrixSizeFromUnpackedArraySize", ()=>getMatrixSizeFromUnpackedArraySize);
parcelHelpers.export(exports, "decodeMatrixFromUnpackedColorRGBAArray", ()=>decodeMatrixFromUnpackedColorRGBAArray);
parcelHelpers.export(exports, "getPackedMatrixTextureShapeWidthHeight", ()=>getPackedMatrixTextureShapeWidthHeight);
parcelHelpers.export(exports, "getPackedRGBAArraySizeFromMatrixShape", ()=>getPackedRGBAArraySizeFromMatrixShape);
parcelHelpers.export(exports, "getTextureConfig", ()=>getTextureConfig);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var PackingScheme;
(function(PackingScheme) {
    /**
     * All values in a single texel are densely packed without any constraints.
     *
     * This is how the shader encodes a tensor with shape = [2, 3, 4]
     * (indices are [batch, row, col]).
     *
     * 000|001   010|011   020|021
     * -------   -------   -------
     * 002|003   012|013   022|023
     *
     * 100|101   110|111   120|121
     * -------   -------   -------
     * 102|103   112|113   122|123
     *
     */ PackingScheme[PackingScheme["DENSE"] = 0] = "DENSE";
    /**
     * Single texels contain only values from the same batch, and from adjacent
     * rows and columns.
     *
     * This is how the shader encodes a tensor with shape = [2, 3, 5]
     * (indices are [batch, row, col]).
     *
     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx
     * -------   -------   -------   -------   -------   -------
     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx
     *
     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx
     * -------   -------   -------   -------   -------   -------
     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx
     *
     */ PackingScheme[PackingScheme["SHARED_BATCH"] = 1] = "SHARED_BATCH";
})(PackingScheme || (PackingScheme = {}));
var TextureUsage;
(function(TextureUsage) {
    TextureUsage[TextureUsage["RENDER"] = 0] = "RENDER";
    TextureUsage[TextureUsage["UPLOAD"] = 1] = "UPLOAD";
    TextureUsage[TextureUsage["PIXELS"] = 2] = "PIXELS";
    TextureUsage[TextureUsage["DOWNLOAD"] = 3] = "DOWNLOAD";
})(TextureUsage || (TextureUsage = {}));
var PhysicalTextureType;
(function(PhysicalTextureType) {
    PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT16"] = 0] = "UNPACKED_FLOAT16";
    PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT32"] = 1] = "UNPACKED_FLOAT32";
    PhysicalTextureType[PhysicalTextureType["PACKED_4X1_UNSIGNED_BYTE"] = 2] = "PACKED_4X1_UNSIGNED_BYTE";
    PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT32"] = 3] = "PACKED_2X2_FLOAT32";
    PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT16"] = 4] = "PACKED_2X2_FLOAT16";
})(PhysicalTextureType || (PhysicalTextureType = {}));
function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {
    return [
        columns,
        rows
    ];
}
function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {
    return matrixSize * channelsPerTexture;
}
function getColorMatrixTextureShapeWidthHeight(rows, columns) {
    return [
        columns * 4,
        rows
    ];
}
function getDenseTexShape(shape) {
    const size = (0, _tfjsCore.util).sizeFromShape(shape);
    const texelsNeeded = Math.ceil(size / 4);
    return (0, _tfjsCore.util).sizeToSquarishShape(texelsNeeded);
}
function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {
    if (unpackedSize % channelsPerTexture !== 0) throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` + `${channelsPerTexture}`);
    return unpackedSize / channelsPerTexture;
}
function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {
    const requiredSize = unpackedArray.length * channels / 4;
    if (matrix.length < requiredSize) throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);
    let dst = 0;
    for(let src = 0; src < unpackedArray.length; src += 4)for(let c = 0; c < channels; c++)matrix[dst++] = unpackedArray[src + c];
}
function getPackedMatrixTextureShapeWidthHeight(rows, columns) {
    return [
        Math.max(1, Math.ceil(columns / 2)),
        Math.max(1, Math.ceil(rows / 2))
    ];
}
function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {
    const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);
    return w * h * 4;
}
function getTextureConfig(// tslint:disable-next-line:no-any
gl, textureHalfFloatExtension) {
    // tslint:disable-next-line:no-any
    const glany = gl;
    let internalFormatFloat;
    let internalFormatHalfFloat;
    let internalFormatPackedHalfFloat;
    let internalFormatPackedFloat;
    let textureFormatFloat;
    let downloadTextureFormat;
    let downloadUnpackNumChannels;
    let defaultNumChannels;
    let textureTypeHalfFloat;
    let textureTypeFloat;
    if ((0, _tfjsCore.env)().getNumber("WEBGL_VERSION") === 2) {
        internalFormatFloat = glany.R32F;
        internalFormatHalfFloat = glany.R16F;
        internalFormatPackedHalfFloat = glany.RGBA16F;
        internalFormatPackedFloat = glany.RGBA32F;
        textureFormatFloat = glany.RED;
        downloadUnpackNumChannels = 4;
        defaultNumChannels = 1;
        textureTypeHalfFloat = glany.HALF_FLOAT;
        textureTypeFloat = glany.FLOAT;
    } else {
        internalFormatFloat = gl.RGBA;
        internalFormatHalfFloat = gl.RGBA;
        internalFormatPackedHalfFloat = gl.RGBA;
        internalFormatPackedFloat = glany.RGBA;
        textureFormatFloat = gl.RGBA;
        downloadUnpackNumChannels = 4;
        defaultNumChannels = 4;
        textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;
        textureTypeFloat = gl.FLOAT;
    }
    downloadTextureFormat = gl.RGBA;
    return {
        internalFormatFloat,
        internalFormatHalfFloat,
        internalFormatPackedHalfFloat,
        internalFormatPackedFloat,
        textureFormatFloat,
        downloadTextureFormat,
        downloadUnpackNumChannels,
        defaultNumChannels,
        textureTypeHalfFloat,
        textureTypeFloat
    };
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"arjx5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "AddNProgram", ()=>AddNProgram);
class AddNProgram {
    constructor(outputShape, shapes){
        this.outputShape = [];
        this.outputShape = outputShape;
        this.variableNames = shapes.map((_, i)=>`T${i}`);
        const snippets = [];
        // Get target elements from every input tensor.
        this.variableNames.forEach((variable)=>{
            snippets.push(`float v${variable} = get${variable}AtOutCoords();`);
        });
        // Calculate the sum of all elements.
        const operation = this.variableNames.map((variable)=>{
            return `v${variable}`;
        }).join(" + ");
        this.userCode = `
      void main() {
        ${snippets.join("\n        ")}

        float result = ${operation};
        setOutput(result);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2XI4s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "AddNPackedProgram", ()=>AddNPackedProgram);
class AddNPackedProgram {
    constructor(outputShape, shapes){
        this.outputShape = [];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = outputShape;
        this.variableNames = shapes.map((_, i)=>`T${i}`);
        const snippets = [];
        // Get target elements from every input tensor.
        this.variableNames.forEach((variable)=>{
            snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);
        });
        // Calculate the sum of all elements.
        const operation = this.variableNames.map((variable)=>{
            return `v${variable}`;
        }).join(" + ");
        this.userCode = `
      void main() {
        ${snippets.join("\n        ")}

        vec4 result = ${operation};
        setOutput(result);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iyzcg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ArgMinMaxProgram", ()=>ArgMinMaxProgram);
class ArgMinMaxProgram {
    constructor(reduceInfo, op, firstPass){
        this.variableNames = [
            "A"
        ];
        const windowSize = reduceInfo.windowSize;
        const batchSize = reduceInfo.batchSize;
        const inSize = reduceInfo.inSize;
        const outSize = Math.ceil(inSize / windowSize);
        if (!firstPass) this.variableNames.push("bestIndicesA");
        this.outputShape = [
            batchSize,
            outSize
        ];
        const compOp = op === "max" ? ">" : "<";
        const indexSnippet = firstPass ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
        this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${windowSize}; i++) {
          int inIdx = ${indexSnippet};
          float candidate = getA(batch, inIdx);
          if (candidate ${compOp} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5rLBp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ArgMinMaxPackedProgram", ()=>ArgMinMaxPackedProgram);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _packingUtil = require("./packing_util");
var _shaderCompiler = require("./shader_compiler");
class ArgMinMaxPackedProgram {
    constructor(shape, windowSize, op, firstPass){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        (0, _tfjsCore.util).assert(shape.length > 2, ()=>`Packed arg${op.charAt(0).toUpperCase() + op.slice(1)} supports only inputs with rank above 2.`);
        const inSize = shape[shape.length - 1];
        const outSize = Math.ceil(inSize / windowSize);
        this.outputShape = shape.slice(0, -1);
        if (outSize > 1) this.outputShape.push(outSize);
        if (!firstPass) this.variableNames.push("bestIndicesA");
        const outShape = this.outputShape;
        const rank = outShape.length;
        const dtype = (0, _shaderCompiler.getCoordsDataType)(rank);
        const coords = (0, _packingUtil.getChannels)("coords", rank);
        let sourceLocSetup;
        let sourceRank;
        if (outSize === 1) {
            sourceRank = rank + 1;
            const sourceLocDType = (0, _shaderCompiler.getCoordsDataType)(sourceRank);
            sourceLocSetup = `
        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 1]};
        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 2]};
        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 1]};
        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 2]};`;
        } else {
            sourceRank = rank;
            sourceLocSetup = `
        ${dtype} sourceLocR = coords;
        ++${coords[rank - 1]};
        ${dtype} sourceLocG = coords;
        ++${coords[rank - 2]};
        ${dtype} sourceLocA = coords;
        --${coords[rank - 1]};
        ${dtype} sourceLocB = coords;
        --${coords[rank - 2]};`;
        }
        const channels = [
            "x",
            "y",
            "z",
            "w",
            "u",
            "v"
        ].slice(0, sourceRank);
        const inChannel = "." + channels[sourceRank - 1]; // e.g. ".b" for rank 3.
        const intChannels = channels.map((x)=>"int " + x);
        const srcRCoords = (0, _packingUtil.getChannels)("sourceLocR", sourceRank - 1).concat("inIdx.r");
        const srcGCoords = (0, _packingUtil.getChannels)("sourceLocG", sourceRank - 1).concat("inIdx.g");
        const srcBCoords = (0, _packingUtil.getChannels)("sourceLocB", sourceRank - 1).concat("inIdx.b");
        const srcACoords = (0, _packingUtil.getChannels)("sourceLocA", sourceRank - 1).concat("inIdx.a");
        const compOp = op === "max" ? "greaterThan" : "lessThan";
        const fetchCandidateIdx = firstPass ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),
                             getBestIndicesAChannel(${srcGCoords.join()}),
                             getBestIndicesAChannel(${srcBCoords.join()}),
                             getBestIndicesAChannel(${srcACoords.join()})));`;
        const fetchValue = `vec4(
            getAChannel(${srcRCoords.join()}),
            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,
            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;
        const getBestIndicesAChannelSnippet = firstPass ? "" : `
      float getBestIndicesAChannel(${intChannels.join()}) {
        return getChannel(getBestIndicesA(${channels.join()}),
                                          vec2(${channels.slice(-2).join()}));
      }`;
        this.userCode = `
      float getAChannel(${intChannels.join()}) {
        return getChannel(getA(${channels.join()}),
                               vec2(${channels.slice(-2).join()}));
      }
      ${getBestIndicesAChannelSnippet}
      void main() {
        ${dtype} coords = getOutputCoords();
        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};
        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};
        ${sourceLocSetup}
        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},
          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${fetchValue};

        for (int i = 0; i < ${windowSize}; i++) {
          inIdx = srcIdx;
          ${fetchCandidateIdx}
          vec4 candidate = ${fetchValue};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
    }
}

},{"@tensorflow/tfjs-core":"2votT","./packing_util":"gITMM","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gITMM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "getVecChannels", ()=>getVecChannels);
parcelHelpers.export(exports, "getChannels", ()=>getChannels);
parcelHelpers.export(exports, "getSourceCoords", ()=>getSourceCoords);
function getVecChannels(name, rank) {
    return [
        "x",
        "y",
        "z",
        "w",
        "u",
        "v"
    ].slice(0, rank).map((d)=>`${name}.${d}`);
}
function getChannels(name, rank) {
    if (rank === 1) return [
        name
    ];
    return getVecChannels(name, rank);
}
function getSourceCoords(rank, dims) {
    if (rank === 1) return "rc";
    let coords = "";
    for(let i = 0; i < rank; i++){
        coords += dims[i];
        if (i < rank - 1) coords += ",";
    }
    return coords;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpAco":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeShader", ()=>makeShader);
parcelHelpers.export(exports, "getCoordsDataType", ()=>getCoordsDataType);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _glslVersion = require("./glsl_version");
var _shaderCompilerUtil = require("./shader_compiler_util");
const { getBroadcastDims  } = (0, _tfjsCore.backend_util);
function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {
    const prefixSnippets = [];
    inputsInfo.forEach((x)=>{
        const size = (0, _tfjsCore.util).sizeFromShape(x.shapeInfo.logicalShape);
        // Snippet when we decided to upload the values as uniform.
        if (x.shapeInfo.isUniform) prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ""};`);
        else {
            prefixSnippets.push(`uniform sampler2D ${x.name};`);
            prefixSnippets.push(`uniform int offset${x.name};`);
        }
    });
    const inputPrefixSnippet = prefixSnippets.join("\n");
    const inputSamplingSnippet = inputsInfo.map((x)=>getInputSamplingSnippet(x, outputShape, usesPackedTextures)).join("\n");
    const outTexShape = outputShape.texShape;
    const glsl = (0, _glslVersion.getGlslDifferences)();
    const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);
    let outputSamplingSnippet;
    let floatTextureSetOutputSnippet;
    let shaderPrefix = getShaderPrefix(glsl);
    if (outputShape.isPacked) {
        outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);
        floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);
    } else {
        outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);
        floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);
    }
    if (usesPackedTextures) shaderPrefix += SHADER_PACKED_PREFIX;
    const source = [
        shaderPrefix,
        floatTextureSampleSnippet,
        floatTextureSetOutputSnippet,
        inputPrefixSnippet,
        outputSamplingSnippet,
        inputSamplingSnippet,
        userCode
    ].join("\n");
    return source;
}
function getSamplerFromInInfo(inInfo) {
    const shape = inInfo.shapeInfo.logicalShape;
    switch(shape.length){
        case 0:
            return getSamplerScalar(inInfo);
        case 1:
            return getSampler1D(inInfo);
        case 2:
            return getSampler2D(inInfo);
        case 3:
            return getSampler3D(inInfo);
        case 4:
            return getSampler4D(inInfo);
        case 5:
            return getSampler5D(inInfo);
        case 6:
            return getSampler6D(inInfo);
        default:
            throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);
    }
}
function getPackedSamplerFromInInfo(inInfo) {
    const shape = inInfo.shapeInfo.logicalShape;
    switch(shape.length){
        case 0:
            return getPackedSamplerScalar(inInfo);
        case 1:
            return getPackedSampler1D(inInfo);
        case 2:
            return getPackedSampler2D(inInfo);
        case 3:
            return getPackedSampler3D(inInfo);
        default:
            return getPackedSamplerND(inInfo);
    }
}
function getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false) {
    let res = "";
    if (usesPackedTextures) res += getPackedSamplerFromInInfo(inInfo);
    else res += getSamplerFromInInfo(inInfo);
    const inShape = inInfo.shapeInfo.logicalShape;
    const outShape = outShapeInfo.logicalShape;
    if (inShape.length <= outShape.length) {
        if (usesPackedTextures) res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);
        else res += getSamplerAtOutputCoords(inInfo, outShapeInfo);
    }
    return res;
}
function getPackedOutputSamplingSnippet(outShape, outTexShape) {
    switch(outShape.length){
        case 0:
            return getOutputScalarCoords();
        case 1:
            return getOutputPacked1DCoords(outShape, outTexShape);
        case 2:
            return getOutputPacked2DCoords(outShape, outTexShape);
        case 3:
            return getOutputPacked3DCoords(outShape, outTexShape);
        default:
            return getOutputPackedNDCoords(outShape, outTexShape);
    }
}
function getOutputSamplingSnippet(outShape, outTexShape) {
    switch(outShape.length){
        case 0:
            return getOutputScalarCoords();
        case 1:
            return getOutput1DCoords(outShape, outTexShape);
        case 2:
            return getOutput2DCoords(outShape, outTexShape);
        case 3:
            return getOutput3DCoords(outShape, outTexShape);
        case 4:
            return getOutput4DCoords(outShape, outTexShape);
        case 5:
            return getOutput5DCoords(outShape, outTexShape);
        case 6:
            return getOutput6DCoords(outShape, outTexShape);
        default:
            throw new Error(`${outShape.length}-D output sampling is not yet supported`);
    }
}
function getFloatTextureSampleSnippet(glsl) {
    return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${glsl.texture2D}(textureSampler, uv).r;
    }
  `;
}
function getFloatTextureSetRSnippet(glsl) {
    return `
    void setOutput(float val) {
      ${glsl.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function getFloatTextureSetRGBASnippet(glsl) {
    return `
    void setOutput(vec4 val) {
      ${glsl.output} = val;
    }
  `;
}
function getShaderPrefix(glsl) {
    const SHADER_PREFIX = `${glsl.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${glsl.varyingFs} vec2 resultUV;
    ${glsl.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${glsl.defineSpecialNaN}
    ${glsl.defineSpecialInf}
    ${glsl.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET}
    ${SAMPLE_2D_SNIPPET}
    ${SAMPLE_3D_SNIPPET}
  `;
    return SHADER_PREFIX;
}
const SAMPLE_1D_SNIPPET = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SAMPLE_2D_SNIPPET = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SAMPLE_3D_SNIPPET = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SHADER_PACKED_PREFIX = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function getOutputScalarCoords() {
    return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function getOutputPacked1DCoords(shape, texShape) {
    const packedTexShape = [
        Math.ceil(texShape[0] / 2),
        Math.ceil(texShape[1] / 2)
    ];
    if (packedTexShape[0] === 1) return `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);
      }
    `;
    if (packedTexShape[1] === 1) return `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);
      }
    `;
    return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);
    }
  `;
}
function getOutput1DCoords(shape, texShape) {
    if (texShape[0] === 1) return `
      int getOutputCoords() {
        return int(resultUV.x * ${texShape[1]}.0);
      }
    `;
    if (texShape[1] === 1) return `
      int getOutputCoords() {
        return int(resultUV.y * ${texShape[0]}.0);
      }
    `;
    return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      return resTexRC.x * ${texShape[1]} + resTexRC.y;
    }
  `;
}
function getOutputPacked3DCoords(shape, texShape) {
    const packedTexShape = [
        Math.ceil(texShape[0] / 2),
        Math.ceil(texShape[1] / 2)
    ];
    const texelsInLogicalRow = Math.ceil(shape[2] / 2);
    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);
    return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function getOutput3DCoords(shape, texShape) {
    const coordsFromIndexSnippet = _shaderCompilerUtil.getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d"
    ], shape);
    return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
}
function getOutputPackedNDCoords(shape, texShape) {
    const packedTexShape = [
        Math.ceil(texShape[0] / 2),
        Math.ceil(texShape[1] / 2)
    ];
    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);
    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);
    let texelsInBatchN = texelsInBatch;
    let batches = ``;
    let coords = "b, r, c";
    for(let b = 2; b < shape.length - 1; b++){
        texelsInBatchN *= shape[shape.length - b - 1];
        batches = `
      int b${b} = index / ${texelsInBatchN};
      index -= b${b} * ${texelsInBatchN};
    ` + batches;
        coords = `b${b}, ` + coords;
    }
    return `
    ivec${shape.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      ${batches}

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec${shape.length}(${coords});
    }
  `;
}
function getOutput4DCoords(shape, texShape) {
    const coordsFromIndexSnippet = _shaderCompilerUtil.getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d",
        "d2"
    ], shape);
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec4(r, c, d, d2);
    }
  `;
}
function getOutput5DCoords(shape, texShape) {
    const coordsFromIndexSnippet = _shaderCompilerUtil.getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d",
        "d2",
        "d3"
    ], shape);
    return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},
                             ${texShape[1]}));

      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function getOutput6DCoords(shape, texShape) {
    const coordsFromIndexSnippet = _shaderCompilerUtil.getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d",
        "d2",
        "d3",
        "d4"
    ], shape);
    return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function getOutputPacked2DCoords(shape, texShape) {
    const packedTexShape = [
        Math.ceil(texShape[0] / 2),
        Math.ceil(texShape[1] / 2)
    ];
    if ((0, _tfjsCore.util).arraysEqual(shape, texShape)) return `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      }
    `;
    // texels needed to accommodate a logical row
    const texelsInLogicalRow = Math.ceil(shape[1] / 2);
    /**
     * getOutputCoords
     *
     * resTexRC: The rows and columns of the texels. If you move over one
     * texel to the right in the packed texture, you are moving over one column
     * (not two).
     *
     * index: The texel index
     */ return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));

      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;
      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec2(r, c);
    }
  `;
}
function getOutput2DCoords(shape, texShape) {
    if ((0, _tfjsCore.util).arraysEqual(shape, texShape)) return `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));
      }
    `;
    if (shape[1] === 1) return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `;
    if (shape[0] === 1) return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `;
    return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      int r = index / ${shape[1]};
      int c = index - r * ${shape[1]};
      return ivec2(r, c);
    }
  `;
}
function getFlatOffsetUniformName(texName) {
    return `offset${texName}`;
}
function getPackedSamplerScalar(inputInfo) {
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const glsl = (0, _glslVersion.getGlslDifferences)();
    return `
    vec4 ${funcName}() {
      return ${glsl.texture2D}(${texName}, halfCR);
    }
  `;
}
function getSamplerScalar(inputInfo) {
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    if (inputInfo.shapeInfo.isUniform) return `float ${funcName}() {return ${texName};}`;
    const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;
    if (texNumR === 1 && texNumC === 1) return `
      float ${funcName}() {
        return sampleTexture(${texName}, halfCR);
      }
    `;
    const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;
    const offset = getFlatOffsetUniformName(texName);
    return `
    float ${funcName}() {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getPackedSampler1D(inputInfo) {
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const texShape = inputInfo.shapeInfo.texShape;
    const packedTexShape = [
        Math.ceil(texShape[0] / 2),
        Math.ceil(texShape[1] / 2)
    ];
    const glsl = (0, _glslVersion.getGlslDifferences)();
    return `
    vec4 ${funcName}(int index) {
      vec2 uv = packedUVfrom1D(
        ${packedTexShape[0]}, ${packedTexShape[1]}, index);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}
function getSampler1D(inputInfo) {
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    if (inputInfo.shapeInfo.isUniform) // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int index) {
        ${getUniformSampler(inputInfo)}
      }
    `;
    const texShape = inputInfo.shapeInfo.texShape;
    const tNumR = texShape[0];
    const tNumC = texShape[1];
    if (tNumC === 1 && tNumR === 1) return `
      float ${funcName}(int index) {
        return sampleTexture(${texName}, halfCR);
      }
    `;
    const offset = getFlatOffsetUniformName(texName);
    if (tNumC === 1) return `
      float ${funcName}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
    if (tNumR === 1) return `
      float ${funcName}(int index) {
        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
    return `
    float ${funcName}(int index) {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getPackedSampler2D(inputInfo) {
    const shape = inputInfo.shapeInfo.logicalShape;
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const texShape = inputInfo.shapeInfo.texShape;
    const texNumR = texShape[0];
    const texNumC = texShape[1];
    const glsl = (0, _glslVersion.getGlslDifferences)();
    if (texShape != null && (0, _tfjsCore.util).arraysEqual(shape, texShape)) return `
      vec4 ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);

        return ${glsl.texture2D}(${texName}, uv);
      }
    `;
    const packedTexShape = [
        Math.ceil(texShape[0] / 2),
        Math.ceil(texShape[1] / 2)
    ];
    const valuesPerRow = Math.ceil(shape[1] / 2);
    return `
    vec4 ${funcName}(int row, int col) {
      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}
function getSampler2D(inputInfo) {
    const shape = inputInfo.shapeInfo.logicalShape;
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const texShape = inputInfo.shapeInfo.texShape;
    if (texShape != null && (0, _tfjsCore.util).arraysEqual(shape, texShape)) {
        const texNumR = texShape[0];
        const texNumC = texShape[1];
        return `
    float ${funcName}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
    }
    const { newShape , keptDims  } = (0, _tfjsCore.util).squeezeShape(shape);
    const squeezedShape = newShape;
    if (squeezedShape.length < shape.length) {
        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
        const params = [
            "row",
            "col"
        ];
        return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
    }
    if (inputInfo.shapeInfo.isUniform) // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
    const texNumR1 = texShape[0];
    const texNumC1 = texShape[1];
    const offset = getFlatOffsetUniformName(texName);
    if (texNumC1 === 1) // index is used directly as physical (no risk of float16 overflow).
    return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR1}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
    if (texNumR1 === 1) // index is used directly as physical (no risk of float16 overflow).
    return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${texNumC1}.0, 0.5);
      return sampleTexture(${texName}, uv);
    }
  `;
    return `
  float ${funcName}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${shape[1]} + col + ${offset};
    vec2 uv = uvFromFlat(${texNumR1}, ${texNumC1}, index);
    return sampleTexture(${texName}, uv);
  }
`;
}
function getPackedSampler3D(inputInfo) {
    const shape = inputInfo.shapeInfo.logicalShape;
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const texShape = inputInfo.shapeInfo.texShape;
    const packedTexShape = [
        Math.ceil(texShape[0] / 2),
        Math.ceil(texShape[1] / 2)
    ];
    if (shape[0] === 1) {
        const squeezedShape = shape.slice(1);
        const keptDims = [
            1,
            2
        ];
        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
        const params = [
            "b",
            "row",
            "col"
        ];
        return `
        ${getPackedSamplerFromInInfo(newInputInfo)}
        vec4 ${funcName}(int b, int row, int col) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
    }
    const texNumR = packedTexShape[0];
    const texNumC = packedTexShape[1];
    const valuesPerRow = Math.ceil(shape[2] / 2);
    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);
    const glsl = (0, _glslVersion.getGlslDifferences)();
    return `
    vec4 ${funcName}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}
function getSampler3D(inputInfo) {
    const shape = inputInfo.shapeInfo.logicalShape;
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const stride0 = shape[1] * shape[2];
    const stride1 = shape[2];
    const { newShape , keptDims  } = (0, _tfjsCore.util).squeezeShape(shape);
    const squeezedShape = newShape;
    if (squeezedShape.length < shape.length) {
        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
        const params = [
            "row",
            "col",
            "depth"
        ];
        return `
        ${getSamplerFromInInfo(newInputInfo)}
        float ${funcName}(int row, int col, int depth) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
    }
    if (inputInfo.shapeInfo.isUniform) // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${stride0}, ${stride1}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
    const texShape = inputInfo.shapeInfo.texShape;
    const texNumR = texShape[0];
    const texNumC = texShape[1];
    const flatOffset = inputInfo.shapeInfo.flatOffset;
    if (texNumC === stride0 && flatOffset == null) // texC is used directly as physical (no risk of float16 overflow).
    return `
        float ${funcName}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${texNumC}.0, ${texNumR}.0);
          return sampleTexture(${texName}, uv);
        }
      `;
    if (texNumC === stride1 && flatOffset == null) // texR is used directly as physical (no risk of float16 overflow).
    return `
    float ${funcName}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
    const offset = getFlatOffsetUniformName(texName);
    return `
      float ${funcName}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};
        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
        return sampleTexture(${texName}, uv);
      }
  `;
}
function getPackedSamplerND(inputInfo) {
    const shape = inputInfo.shapeInfo.logicalShape;
    const rank = shape.length;
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const texShape = inputInfo.shapeInfo.texShape;
    const packedTexShape = [
        Math.ceil(texShape[0] / 2),
        Math.ceil(texShape[1] / 2)
    ];
    const texNumR = packedTexShape[0];
    const texNumC = packedTexShape[1];
    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);
    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);
    let params = `int b, int row, int col`;
    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;
    for(let b = 2; b < rank - 1; b++){
        params = `int b${b}, ` + params;
        texelsInBatch *= shape[rank - b - 1];
        index = `b${b} * ${texelsInBatch} + ` + index;
    }
    const glsl = (0, _glslVersion.getGlslDifferences)();
    return `
    vec4 ${funcName}(${params}) {
      int index = ${index};
      int texR = index / ${texNumC};
      int texC = index - texR * ${texNumC};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}
function getSampler4D(inputInfo) {
    const shape = inputInfo.shapeInfo.logicalShape;
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const stride2 = shape[3];
    const stride1 = shape[2] * stride2;
    const stride0 = shape[1] * stride1;
    const { newShape , keptDims  } = (0, _tfjsCore.util).squeezeShape(shape);
    if (newShape.length < shape.length) {
        const newInputInfo = squeezeInputInfo(inputInfo, newShape);
        const params = [
            "row",
            "col",
            "depth",
            "depth2"
        ];
        return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth, int depth2) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
    }
    if (inputInfo.shapeInfo.isUniform) // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
    const flatOffset = inputInfo.shapeInfo.flatOffset;
    const texShape = inputInfo.shapeInfo.texShape;
    const texNumR = texShape[0];
    const texNumC = texShape[1];
    if (texNumC === stride0 && flatOffset == null) // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${stride1}, ${stride2}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
    if (texNumC === stride2 && flatOffset == null) // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
    const offset = getFlatOffsetUniformName(texName);
    return `
    float ${funcName}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} +
          depth * ${stride2} + depth2;
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getSampler5D(inputInfo) {
    const shape = inputInfo.shapeInfo.logicalShape;
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const stride3 = shape[4];
    const stride2 = shape[3] * stride3;
    const stride1 = shape[2] * stride2;
    const stride0 = shape[1] * stride1;
    const { newShape , keptDims  } = (0, _tfjsCore.util).squeezeShape(shape);
    if (newShape.length < shape.length) {
        const newInputInfo = squeezeInputInfo(inputInfo, newShape);
        const params = [
            "row",
            "col",
            "depth",
            "depth2",
            "depth3"
        ];
        return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
    }
    if (inputInfo.shapeInfo.isUniform) // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          depth3;
        ${getUniformSampler(inputInfo)}
      }
    `;
    const flatOffset = inputInfo.shapeInfo.flatOffset;
    const texShape = inputInfo.shapeInfo.texShape;
    const texNumR = texShape[0];
    const texNumC = texShape[1];
    if (texNumC === stride0 && flatOffset == null) // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${stride1}, ${stride2}, ${stride3}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
    if (texNumC === stride3 && flatOffset == null) // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3]},
               ${shape[2] * shape[3]}, ${shape[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
    const offset = getFlatOffsetUniformName(texName);
    return `
    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getSampler6D(inputInfo) {
    const shape = inputInfo.shapeInfo.logicalShape;
    const texName = inputInfo.name;
    const funcName = "get" + texName.charAt(0).toUpperCase() + texName.slice(1);
    const { newShape , keptDims  } = (0, _tfjsCore.util).squeezeShape(shape);
    if (newShape.length < shape.length) {
        const newInputInfo = squeezeInputInfo(inputInfo, newShape);
        const params = [
            "row",
            "col",
            "depth",
            "depth2",
            "depth3",
            "depth4"
        ];
        return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
    }
    const stride4 = shape[5];
    const stride3 = shape[4] * stride4;
    const stride2 = shape[3] * stride3;
    const stride1 = shape[2] * stride2;
    const stride0 = shape[1] * stride1;
    if (inputInfo.shapeInfo.isUniform) // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          dot(
            vec2(depth3, depth4),
            vec2(${stride4}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
    const flatOffset = inputInfo.shapeInfo.flatOffset;
    const texShape = inputInfo.shapeInfo.texShape;
    const texNumR = texShape[0];
    const texNumC = texShape[1];
    if (texNumC === stride0 && flatOffset == null) // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
    if (texNumC === stride4 && flatOffset == null) // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},
               ${shape[2] * shape[3] * shape[4]},
               ${shape[3] * shape[4]},
               ${shape[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
    const offset = getFlatOffsetUniformName(texName);
    return `
    float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getUniformSampler(inputInfo) {
    const texName = inputInfo.name;
    const inSize = (0, _tfjsCore.util).sizeFromShape(inputInfo.shapeInfo.logicalShape);
    if (inSize < 2) return `return ${texName};`;
    return `
    for (int i = 0; i < ${inSize}; i++) {
      if (i == index) {
        return ${texName}[i];
      }
    }
  `;
}
function getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {
    const texName = inputInfo.name;
    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
    const funcName = "get" + texFuncSnippet + "AtOutCoords";
    const inRank = inputInfo.shapeInfo.logicalShape.length;
    const outRank = outShapeInfo.logicalShape.length;
    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
    const type = getCoordsDataType(outRank);
    const rankDiff = outRank - inRank;
    let coordsSnippet;
    const fields = [
        "x",
        "y",
        "z",
        "w",
        "u",
        "v"
    ];
    if (inRank === 0) coordsSnippet = "";
    else if (outRank < 2 && broadcastDims.length >= 1) coordsSnippet = "coords = 0;";
    else coordsSnippet = broadcastDims.map((d)=>`coords.${fields[d + rankDiff]} = 0;`).join("\n");
    let unpackedCoordsSnippet = "";
    if (outRank < 2 && inRank > 0) unpackedCoordsSnippet = "coords";
    else unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i)=>`coords.${fields[i + rankDiff]}`).join(", ");
    let output = `return outputValue;`;
    const inSize = (0, _tfjsCore.util).sizeFromShape(inputInfo.shapeInfo.logicalShape);
    const isInputScalar = inSize === 1;
    const outSize = (0, _tfjsCore.util).sizeFromShape(outShapeInfo.logicalShape);
    const isOutputScalar = outSize === 1;
    if (inRank === 1 && !isInputScalar && !isOutputScalar) output = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
    else if (isInputScalar && !isOutputScalar) {
        if (outRank === 1) output = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `;
        else output = `
        return vec4(outputValue.x);
      `;
    } else if (broadcastDims.length) {
        const rows = inRank - 2;
        const cols = inRank - 1;
        if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) output = `return vec4(outputValue.x);`;
        else if (broadcastDims.indexOf(rows) > -1) output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;
        else if (broadcastDims.indexOf(cols) > -1) output = `return vec4(outputValue.xx, outputValue.zz);`;
    }
    return `
    vec4 ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});
      ${output}
    }
  `;
}
function getSamplerAtOutputCoords(inputInfo, outShapeInfo) {
    const texName = inputInfo.name;
    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
    const funcName = "get" + texFuncSnippet + "AtOutCoords";
    const outTexShape = outShapeInfo.texShape;
    const inTexShape = inputInfo.shapeInfo.texShape;
    const inRank = inputInfo.shapeInfo.logicalShape.length;
    const outRank = outShapeInfo.logicalShape.length;
    if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && (0, _tfjsCore.util).arraysEqual(inTexShape, outTexShape)) return `
      float ${funcName}() {
        return sampleTexture(${texName}, resultUV);
      }
    `;
    const type = getCoordsDataType(outRank);
    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
    const rankDiff = outRank - inRank;
    let coordsSnippet;
    const fields = [
        "x",
        "y",
        "z",
        "w",
        "u",
        "v"
    ];
    if (inRank === 0) coordsSnippet = "";
    else if (outRank < 2 && broadcastDims.length >= 1) coordsSnippet = "coords = 0;";
    else coordsSnippet = broadcastDims.map((d)=>`coords.${fields[d + rankDiff]} = 0;`).join("\n");
    let unpackedCoordsSnippet = "";
    if (outRank < 2 && inRank > 0) unpackedCoordsSnippet = "coords";
    else unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i)=>`coords.${fields[i + rankDiff]}`).join(", ");
    return `
    float ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      return get${texFuncSnippet}(${unpackedCoordsSnippet});
    }
  `;
}
function getCoordsDataType(rank) {
    if (rank <= 1) return "int";
    else if (rank === 2) return "ivec2";
    else if (rank === 3) return "ivec3";
    else if (rank === 4) return "ivec4";
    else if (rank === 5) return "ivec5";
    else if (rank === 6) return "ivec6";
    else throw Error(`GPU for rank ${rank} is not yet supported`);
}
/** Returns a new input info (a copy) that has a squeezed logical shape. */ function squeezeInputInfo(inInfo, squeezedShape) {
    // Deep copy.
    const newInputInfo = JSON.parse(JSON.stringify(inInfo));
    newInputInfo.shapeInfo.logicalShape = squeezedShape;
    return newInputInfo;
}
function getSqueezedParams(params, keptDims) {
    return keptDims.map((d)=>params[d]).join(", ");
}

},{"@tensorflow/tfjs-core":"2votT","./glsl_version":"ezjL5","./shader_compiler_util":"i2KGv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ezjL5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getGlslDifferences", ()=>getGlslDifferences);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function getGlslDifferences() {
    let version;
    let attribute;
    let varyingVs;
    let varyingFs;
    let texture2D;
    let output;
    let defineOutput;
    let defineSpecialNaN;
    let defineSpecialInf;
    let defineRound;
    if ((0, _tfjsCore.env)().getNumber("WEBGL_VERSION") === 2) {
        version = "#version 300 es";
        attribute = "in";
        varyingVs = "out";
        varyingFs = "in";
        texture2D = "texture";
        output = "outputColor";
        defineOutput = "out vec4 outputColor;";
        // Use custom isnan definition to work across differences between
        // implementations on various platforms. While this should happen in ANGLE
        // we still see differences between android and windows (on chrome) when
        // using isnan directly.
        defineSpecialNaN = `
      bool isnan_custom(float val) {
        return (val > 0.0 || val < 0.0) ? false : val != 0.0;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `;
        // In webgl 2 we do not need to specify a custom isinf so there is no
        // need for a special INFINITY constant.
        defineSpecialInf = ``;
        defineRound = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
    } else {
        version = "";
        attribute = "attribute";
        varyingVs = "varying";
        varyingFs = "varying";
        texture2D = "texture2D";
        output = "gl_FragColor";
        defineOutput = "";
        // WebGL1 has no built in isnan so we define one here.
        defineSpecialNaN = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `;
        defineSpecialInf = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `;
        defineRound = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
    }
    return {
        version,
        attribute,
        varyingVs,
        varyingFs,
        texture2D,
        output,
        defineOutput,
        defineSpecialNaN,
        defineSpecialInf,
        defineRound
    };
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i2KGv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Produces GLSL code that derives logical coordinates from a flat
 * index. The code performs integer division with each stride and decrements
 * the index until the index equals the final dimension coordinate.
 */ parcelHelpers.export(exports, "getLogicalCoordinatesFromFlatIndex", ()=>getLogicalCoordinatesFromFlatIndex);
/**
 * Produces GLSL code that computes the dot product of the input x and y
 * vectors. Handles splitting inputs into increments of vec4s when necessary.
 */ parcelHelpers.export(exports, "dotify", ()=>dotify);
/**
 * Produces GLSL that computes the flat index from 3D coordinates.
 */ parcelHelpers.export(exports, "getFlatIndexFrom3D", ()=>getFlatIndexFrom3D);
parcelHelpers.export(exports, "ENCODE_FLOAT_SNIPPET", ()=>ENCODE_FLOAT_SNIPPET);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function getLogicalCoordinatesFromFlatIndex(coords, shape, index = "index") {
    const strides = (0, _tfjsCore.util).computeStrides(shape);
    return strides.map((stride, i)=>{
        const line1 = `int ${coords[i]} = ${index} / ${stride}`;
        const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` : `index -= ${coords[i]} * ${stride}`;
        return `${line1}; ${line2};`;
    }).join("");
}
function buildVec(x) {
    if (x.length === 1) return `${x[0]}`;
    return `vec${x.length}(${x.join(",")})`;
}
function dotify(x, y) {
    if (x.length !== y.length) throw new Error(`Vectors to be dotted must be of the same length -` + `got ${x.length} and ${y.length}`);
    const slices = [];
    const nearestVec4 = Math.floor(x.length / 4);
    const nearestVec4Remainder = x.length % 4;
    for(let i = 0; i < nearestVec4; i++){
        const xSlice = x.slice(i * 4, i * 4 + 4);
        const ySlice = y.slice(i * 4, i * 4 + 4);
        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);
    }
    if (nearestVec4Remainder !== 0) {
        let xSlice1 = x.slice(nearestVec4 * 4);
        let ySlice1 = y.slice(nearestVec4 * 4);
        if (xSlice1.length === 1) {
            xSlice1 = xSlice1.map((d)=>`float(${d})`);
            ySlice1 = ySlice1.map((d)=>`float(${d})`);
        }
        slices.push(`${buildVec(xSlice1)}, ${buildVec(ySlice1)}`);
    }
    return slices.map((d, i)=>`dot(${d})`).join("+");
}
function getFlatIndexFrom3D(shape) {
    const strides = (0, _tfjsCore.util).computeStrides(shape).map((d)=>d.toString());
    return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;
  }
`;
}
const ENCODE_FLOAT_SNIPPET = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9vYN1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "AvgPool2DBackpropProgram", ()=>AvgPool2DBackpropProgram);
parcelHelpers.export(exports, "AvgPool3DBackpropProgram", ()=>AvgPool3DBackpropProgram);
class AvgPool2DBackpropProgram {
    constructor(convInfo){
        this.variableNames = [
            "dy"
        ];
        this.outputShape = convInfo.inShape;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const avgMultiplier = 1 / (filterHeight * filterWidth);
        this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth};
            wC+= ${dilationWidth}) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class AvgPool3DBackpropProgram {
    constructor(convInfo){
        this.variableNames = [
            "dy"
        ];
        this.outputShape = convInfo.inShape;
        const filterDepth = convInfo.filterDepth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
        this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDnlU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BatchNormProgram", ()=>BatchNormProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
class BatchNormProgram {
    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon){
        this.outputShape = [];
        this.variableNames = [
            "x",
            "mean",
            "variance"
        ];
        (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(xShape, meanShape);
        (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(xShape, varianceShape);
        let offsetSnippet = "0.0";
        if (offsetShape != null) {
            (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(xShape, offsetShape);
            this.variableNames.push("offset");
            offsetSnippet = "getOffsetAtOutCoords()";
        }
        let scaleSnippet = "1.0";
        if (scaleShape != null) {
            (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(xShape, scaleShape);
            this.variableNames.push("scale");
            scaleSnippet = "getScaleAtOutCoords()";
        }
        this.outputShape = xShape;
        this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${offsetSnippet};
        float scale = ${scaleSnippet};
        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
    }
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84BTG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BatchNormPackedProgram", ()=>BatchNormPackedProgram);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
class BatchNormPackedProgram {
    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon){
        this.packedInputs = true;
        this.packedOutput = true;
        this.variableNames = [
            "x",
            "mean",
            "variance"
        ];
        (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(xShape, meanShape);
        (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(xShape, varianceShape);
        let offsetSnippet = "vec4(0.0)";
        if (offsetShape != null) {
            (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(xShape, offsetShape);
            this.variableNames.push("offset");
            offsetSnippet = "getOffsetAtOutCoords()";
        }
        let scaleSnippet = "vec4(1.0)";
        if (scaleShape != null) {
            (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(xShape, scaleShape);
            this.variableNames.push("scale");
            scaleSnippet = "getScaleAtOutCoords()";
        }
        this.outputShape = xShape;
        this.userCode = `
      void main() {
        vec4 offset = ${offsetSnippet};
        vec4 scale = ${scaleSnippet};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));

        setOutput((x - mean) * inv + offset);
      }
    `;
    }
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eoIO7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COMPLEX_MULTIPLY", ()=>COMPLEX_MULTIPLY);
parcelHelpers.export(exports, "BinaryOpComplexProgram", ()=>BinaryOpComplexProgram);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const COMPLEX_MULTIPLY = {
    REAL: "return areal * breal - aimag * bimag;",
    IMAG: "return areal * bimag + aimag * breal;"
};
class BinaryOpComplexProgram {
    constructor(op, aShape, bShape){
        this.variableNames = [
            "AReal",
            "AImag",
            "BReal",
            "BImag"
        ];
        this.outputShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(aShape, bShape);
        this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${op}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
    }
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lbbnp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ADD", ()=>ADD);
parcelHelpers.export(exports, "SUB", ()=>SUB);
parcelHelpers.export(exports, "MUL", ()=>MUL);
parcelHelpers.export(exports, "DIV", ()=>DIV);
parcelHelpers.export(exports, "INT_DIV", ()=>INT_DIV);
parcelHelpers.export(exports, "POW", ()=>POW);
parcelHelpers.export(exports, "SQUARED_DIFFERENCE", ()=>SQUARED_DIFFERENCE);
parcelHelpers.export(exports, "EQUAL", ()=>EQUAL);
parcelHelpers.export(exports, "NOT_EQUAL", ()=>NOT_EQUAL);
parcelHelpers.export(exports, "LESS", ()=>LESS);
parcelHelpers.export(exports, "LESS_EQUAL", ()=>LESS_EQUAL);
parcelHelpers.export(exports, "GREATER", ()=>GREATER);
parcelHelpers.export(exports, "GREATER_EQUAL", ()=>GREATER_EQUAL);
parcelHelpers.export(exports, "LOGICAL_AND", ()=>LOGICAL_AND);
parcelHelpers.export(exports, "LOGICAL_OR", ()=>LOGICAL_OR);
parcelHelpers.export(exports, "MAX", ()=>MAX);
parcelHelpers.export(exports, "MIN", ()=>MIN);
parcelHelpers.export(exports, "MOD", ()=>MOD);
parcelHelpers.export(exports, "ATAN2", ()=>ATAN2);
parcelHelpers.export(exports, "ELU_DER", ()=>ELU_DER);
parcelHelpers.export(exports, "PRELU", ()=>PRELU);
parcelHelpers.export(exports, "BinaryOpProgram", ()=>BinaryOpProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const CHECK_NAN_SNIPPET = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
const ADD = "return a + b;";
const SUB = "return a - b;";
const MUL = "return a * b;";
const DIV = `
if (a == b) {
  return 1.0;
};
return a / b;`;
const INT_DIV = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
const POW = `
if(a < 0.0 && floor(b) < b){
  return NAN;
}
if (b == 0.0) {
  return 1.0;
}
return (round(mod(b, 2.0)) != 1) ?
    pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
const SQUARED_DIFFERENCE = "return (a - b) * (a - b);";
const EQUAL = `return float(a == b);`;
const NOT_EQUAL = `return float(a != b);`;
const LESS = `return float(a < b);`;
const LESS_EQUAL = `return float(a <= b);`;
const GREATER = `return float(a > b);`;
const GREATER_EQUAL = `return float(a >= b);`;
const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;
const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;
const MAX = CHECK_NAN_SNIPPET + `
  return max(a, b);
`;
const MIN = CHECK_NAN_SNIPPET + `
  return min(a, b);
`;
const MOD = `if (b == 0.0) return NAN;
  return mod(a, b);`;
const ATAN2 = CHECK_NAN_SNIPPET + `
  return atan(a, b);
`;
const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;
const PRELU = `return (a < 0.) ? b * a : a;`;
class BinaryOpProgram {
    constructor(op, aShape, bShape){
        this.variableNames = [
            "A",
            "B"
        ];
        this.outputShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(aShape, bShape);
        this.userCode = `
      float binaryOperation(float a, float b) {
        ${op}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
    }
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gxIAI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DIV", ()=>DIV);
parcelHelpers.export(exports, "INT_DIV", ()=>INT_DIV);
parcelHelpers.export(exports, "POW", ()=>POW);
parcelHelpers.export(exports, "PRELU", ()=>PRELU);
parcelHelpers.export(exports, "ELU_DER", ()=>ELU_DER);
parcelHelpers.export(exports, "ATAN2", ()=>ATAN2);
parcelHelpers.export(exports, "EQUAL", ()=>EQUAL);
parcelHelpers.export(exports, "NOT_EQUAL", ()=>NOT_EQUAL);
parcelHelpers.export(exports, "LESS", ()=>LESS);
parcelHelpers.export(exports, "LESS_EQUAL", ()=>LESS_EQUAL);
parcelHelpers.export(exports, "GREATER", ()=>GREATER);
parcelHelpers.export(exports, "GREATER_EQUAL", ()=>GREATER_EQUAL);
parcelHelpers.export(exports, "LOGICAL_AND", ()=>LOGICAL_AND);
parcelHelpers.export(exports, "LOGICAL_OR", ()=>LOGICAL_OR);
parcelHelpers.export(exports, "MAX", ()=>MAX);
parcelHelpers.export(exports, "MIN", ()=>MIN);
parcelHelpers.export(exports, "MOD", ()=>MOD);
parcelHelpers.export(exports, "BinaryOpPackedProgram", ()=>BinaryOpPackedProgram);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _packingUtil = require("./packing_util");
var _shaderCompiler = require("./shader_compiler");
const CHECK_NAN_SNIPPET = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;
const DIV = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
const INT_DIV = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
const POW = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
const PRELU = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
const ELU_DER = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
const ATAN2 = `
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
const EQUAL = `
  return vec4(equal(a, b));
`;
const NOT_EQUAL = `
  return vec4(notEqual(a, b));
`;
const LESS = `
  return vec4(lessThan(a, b));
`;
const LESS_EQUAL = `
  return vec4(lessThanEqual(a, b));
`;
const GREATER = `
  return vec4(greaterThan(a, b));
`;
const GREATER_EQUAL = `
  return vec4(greaterThanEqual(a, b));
`;
const LOGICAL_AND = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
const LOGICAL_OR = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
const MAX = `
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
const MIN = `
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
const MOD = `
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  ` + CHECK_NAN_SNIPPET + `
  return result;
`;
class BinaryOpPackedProgram {
    constructor(op, aShape, bShape, checkOutOfBounds = false){
        this.variableNames = [
            "A",
            "B"
        ];
        this.supportsBroadcasting = true;
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(aShape, bShape);
        const rank = this.outputShape.length;
        let checkOutOfBoundsString = "";
        if (checkOutOfBounds) {
            if (rank === 0 || (0, _tfjsCore.util).sizeFromShape(this.outputShape) === 1) checkOutOfBoundsString = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
            else {
                const dtype = (0, _shaderCompiler.getCoordsDataType)(rank);
                checkOutOfBoundsString = `
          ${dtype} coords = getOutputCoords();
        `;
                if (rank === 1) checkOutOfBoundsString += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
                else {
                    const channels = (0, _packingUtil.getChannels)("coords", rank);
                    checkOutOfBoundsString += `
            bool nextRowOutOfBounds =
              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};
            bool nextColOutOfBounds =
              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
                }
            }
        }
        this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${op}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${checkOutOfBoundsString}

        setOutput(result);
      }
    `;
    }
}

},{"@tensorflow/tfjs-core":"2votT","./packing_util":"gITMM","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7UzFv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ClipProgram", ()=>ClipProgram);
class ClipProgram {
    constructor(aShape){
        this.variableNames = [
            "A"
        ];
        this.outputShape = aShape;
        this.userCode = `
      uniform float minVal;
      uniform float maxVal;

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
    }
    getCustomSetupFunc(min, max) {
        return (gpgpu, webGLProgram)=>{
            if (this.minLoc == null) {
                this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, "minVal");
                this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, "maxVal");
            }
            gpgpu.gl.uniform1f(this.minLoc, min);
            gpgpu.gl.uniform1f(this.maxLoc, max);
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9mSuc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ClipPackedProgram", ()=>ClipPackedProgram);
class ClipPackedProgram {
    constructor(aShape){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = aShape;
        this.userCode = `
      uniform float minVal;
      uniform float maxVal;

      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
    }
    getCustomSetupFunc(min, max) {
        return (gpgpu, webGLProgram)=>{
            if (this.minLoc == null) {
                this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, "minVal");
                this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, "maxVal");
            }
            gpgpu.gl.uniform1f(this.minLoc, min);
            gpgpu.gl.uniform1f(this.maxLoc, max);
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jBXGU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ComplexAbsProgram", ()=>ComplexAbsProgram);
class ComplexAbsProgram {
    constructor(shape){
        this.variableNames = [
            "real",
            "imag"
        ];
        this.outputShape = shape;
        this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lPwsJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConcatProgram", ()=>ConcatProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
class ConcatProgram {
    // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
    constructor(shapes){
        this.outputShape = [];
        this.outputShape = (0, _tfjsCore.backend_util).computeOutShape(shapes, 1 /* axis */ );
        this.variableNames = shapes.map((_, i)=>`T${i}`);
        const offsets = new Array(shapes.length - 1);
        offsets[0] = shapes[0][1];
        for(let i = 1; i < offsets.length; i++)offsets[i] = offsets[i - 1] + shapes[i][1];
        const snippets = [
            `if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`
        ];
        for(let i1 = 1; i1 < offsets.length; i1++){
            const shift = offsets[i1 - 1];
            snippets.push(`else if (yC < ${offsets[i1]}) ` + `setOutput(getT${i1}(yR, yC-${shift}));`);
        }
        const lastIndex = offsets.length;
        const lastShift = offsets[offsets.length - 1];
        snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);
        this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${snippets.join("\n        ")}
      }
    `;
    }
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0pzX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConcatPackedProgram", ()=>ConcatPackedProgram);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _packingUtil = require("./packing_util");
var _shaderCompiler = require("./shader_compiler");
class ConcatPackedProgram {
    constructor(shapes, axis){
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = [];
        this.outputShape = (0, _tfjsCore.backend_util).computeOutShape(shapes, axis);
        const shape = this.outputShape;
        const rank = shape.length;
        const dtype = (0, _shaderCompiler.getCoordsDataType)(rank);
        const coords = (0, _packingUtil.getChannels)("coords", rank);
        const channels = [
            "x",
            "y",
            "z",
            "w",
            "u",
            "v"
        ].slice(0, rank);
        this.variableNames = shapes.map((_, i)=>`T${i}`);
        const offsets = new Array(shapes.length - 1);
        offsets[0] = shapes[0][axis];
        for(let i = 1; i < offsets.length; i++)offsets[i] = offsets[i - 1] + shapes[i][axis];
        const channel = channels[axis];
        const lastChannels = channels.slice(-2);
        const allChannels = channels.join();
        let getValueSnippet = `if (${channel} < ${offsets[0]}) {
        return getChannel(
            getT0(${allChannels}), vec2(${lastChannels.join()}));
        }`;
        for(let i1 = 1; i1 < offsets.length; i1++){
            const shift = offsets[i1 - 1];
            // Note: the >= comparison below may seem unnecessary given the check
            // above but is needed to workaround branch execution issues on some
            // devices. It makes all the conditions exclusive without relying on
            // execution order.
            getValueSnippet += `
        if (${channel} < ${offsets[i1]}  && ${channel} >= ${offsets[i1 - 1]}) {
          return getChannel(
            getT${i1}(${shiftedChannels(channels, channel, shift)}),
            vec2(${shiftedChannels(lastChannels, channel, shift)}));
        }`;
        }
        const lastIndex = offsets.length;
        const shift1 = offsets[offsets.length - 1];
        getValueSnippet += `
        return getChannel(
          getT${lastIndex}(${shiftedChannels(channels, channel, shift1)}),
          vec2(${shiftedChannels(lastChannels, channel, shift1)}));`;
        this.userCode = `
      float getValue(${channels.map((x)=>"int " + x)}) {
        ${getValueSnippet}
      }

      void main() {
        ${dtype} coords = getOutputCoords();
        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);

        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;
        if (${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.g = getValue(${coords});
        }

        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]}) {
          result.a = getValue(${coords});
        }

        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]} &&
            ${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.b = getValue(${coords});
        }
        setOutput(result);
      }
    `;
    }
}
/**
 * Return an expression for coordinates into a vector where a given channel
 * will be offset by [shift].
 *
 * @param channels the channels to consider
 * @param channel the channel we want shifted
 * @param shift  the amount to subtract from the channel.
 *
 * @returns a string of the form 'x, y-[shift], z' where any one channel can
 * have the shift applied.
 */ function shiftedChannels(channels, channel, shift) {
    const channelIdx = channels.indexOf(channel);
    const res = channels.map((c, idx)=>{
        if (idx === channelIdx) return `${c} - ${shift}`;
        else return c;
    });
    return res.join();
}

},{"@tensorflow/tfjs-core":"2votT","./packing_util":"gITMM","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f1IzM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "Conv2DDerFilterProgram", ()=>Conv2DDerFilterProgram);
parcelHelpers.export(exports, "Conv2DDerInputProgram", ()=>Conv2DDerInputProgram);
parcelHelpers.export(exports, "Conv3DDerFilterProgram", ()=>Conv3DDerFilterProgram);
parcelHelpers.export(exports, "Conv3DDerInputProgram", ()=>Conv3DDerInputProgram);
class Conv2DDerFilterProgram {
    constructor(convInfo){
        this.variableNames = [
            "x",
            "dy"
        ];
        this.outputShape = convInfo.filterShape;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const isChannelsLast = convInfo.dataFormat === "channelsLast";
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              if (${isChannelsLast}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class Conv2DDerInputProgram {
    constructor(convInfo){
        this.variableNames = [
            "dy",
            "W"
        ];
        this.outputShape = convInfo.inShape;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const isChannelsLast = convInfo.dataFormat === "channelsLast";
        const padTop = filterHeight - 1 - convInfo.padInfo.top;
        const padLeft = filterWidth - 1 - convInfo.padInfo.left;
        const rowDim = isChannelsLast ? 1 : 2;
        const colDim = isChannelsLast ? 2 : 3;
        const channelDim = isChannelsLast ? 3 : 1;
        this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${channelDim}];

        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {

              if (${isChannelsLast}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class Conv3DDerFilterProgram {
    constructor(convInfo){
        this.variableNames = [
            "x",
            "dy"
        ];
        this.outputShape = convInfo.filterShape;
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const padFront = convInfo.padInfo.front;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {
            int xF = wF + yF * ${strideDepth} - ${padFront};

            if (xF < 0 || xF >= ${convInfo.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
              int xR = wR + yR * ${strideHeight} - ${padTop};

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
                int xC = wC + yC * ${strideWidth} - ${padLeft};

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class Conv3DDerInputProgram {
    constructor(convInfo){
        this.variableNames = [
            "dy",
            "W"
        ];
        this.outputShape = convInfo.inShape;
        const filterDepth = convInfo.filterDepth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const padFront = filterDepth - 1 - convInfo.padInfo.front;
        const padTop = filterHeight - 1 - convInfo.padInfo.top;
        const padLeft = filterWidth - 1 - convInfo.padInfo.left;
        this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;

          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${filterDepth} - 1 - wF;

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${filterHeight} - 1 - wR;

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${filterWidth} - 1 - wC;

              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBHUi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "DepthwiseConv2DDerFilterProgram", ()=>DepthwiseConv2DDerFilterProgram);
parcelHelpers.export(exports, "DepthwiseConv2DDerInputProgram", ()=>DepthwiseConv2DDerInputProgram);
class DepthwiseConv2DDerFilterProgram {
    constructor(convInfo){
        this.variableNames = [
            "x",
            "dy"
        ];
        this.outputShape = convInfo.filterShape;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const channelMul = convInfo.outChannels / convInfo.inChannels;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${channelMul} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class DepthwiseConv2DDerInputProgram {
    constructor(convInfo){
        this.variableNames = [
            "dy",
            "W"
        ];
        this.outputShape = convInfo.inShape;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const padTop = filterHeight - 1 - convInfo.padInfo.top;
        const padLeft = filterWidth - 1 - convInfo.padInfo.left;
        const channelMul = convInfo.outChannels / convInfo.inChannels;
        this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${channelMul}; dm++) {
              int d2 = d1 * ${channelMul} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dqp6R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "Conv2DProgram", ()=>Conv2DProgram);
parcelHelpers.export(exports, "Conv3DProgram", ()=>Conv3DProgram);
class Conv2DProgram {
    constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false){
        this.variableNames = [
            "x",
            "W"
        ];
        this.outputShape = convInfo.outShape;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
        const inputDepthVec4Remainder = convInfo.inChannels % 4;
        const isChannelsLast = convInfo.dataFormat === "channelsLast";
        const rowDim = isChannelsLast ? 1 : 2;
        const colDim = isChannelsLast ? 2 : 3;
        const channelDim = isChannelsLast ? 3 : 1;
        let activationSnippet = "", applyActivationSnippet = "";
        if (activation) {
            if (hasPreluActivationWeights) activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
            else activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
            applyActivationSnippet = `result = activation(result);`;
        }
        const addBiasSnippet = addBias ? "result += getBiasAtOutCoords();" : "";
        if (addBias) this.variableNames.push("bias");
        if (hasPreluActivationWeights) this.variableNames.push("preluActivationWeights");
        this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${channelDim}];

        ivec2 xRCCorner =
            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * ${dilationHeight};

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * ${dilationWidth};

            if (xC < 0 || xC >= ${convInfo.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${isChannelsLast}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${inputDepthVec4Remainder === 1}) {

              if (${isChannelsLast}) {
                dotProd +=
                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              } else {
                dotProd +=
                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              }

            } else if (${inputDepthVec4Remainder === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)
              );

              if (${isChannelsLast}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${inputDepthVec4Remainder === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)
              );

              if (${isChannelsLast}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
    }
}
class Conv3DProgram {
    constructor(convInfo){
        this.variableNames = [
            "x",
            "W"
        ];
        this.outputShape = convInfo.outShape;
        const padFront = convInfo.padInfo.front;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const filterDepth = convInfo.filterDepth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
        const inputDepthVec4Remainder = convInfo.inChannels % 4;
        this.userCode = `
      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          int xF = xFCorner + wF * ${dilationDepth};

          if (xF < 0 || xF >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            int xR = xRCorner + wR * ${dilationHeight};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              int xC = xCCorner + wC * ${dilationWidth};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${inputDepthVec4Remainder === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);
              } else if (${inputDepthVec4Remainder === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${inputDepthVec4Remainder === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cmIEm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "DepthwiseConv2DProgram", ()=>DepthwiseConv2DProgram);
class DepthwiseConv2DProgram {
    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false){
        this.variableNames = [
            "x",
            "W"
        ];
        this.outputShape = convInfo.outShape;
        const xNumRows = convInfo.inHeight;
        const xNumCols = convInfo.inWidth;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const channelMul = convInfo.outChannels / convInfo.inChannels;
        let activationSnippet = "", applyActivationSnippet = "";
        if (activation) {
            if (hasPreluActivation) activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
            else activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
            applyActivationSnippet = `result = activation(result);`;
        }
        const addBiasSnippet = addBias ? "result += getBiasAtOutCoords();" : "";
        if (addBias) this.variableNames.push("bias");
        if (hasPreluActivation) this.variableNames.push("preluActivationWeights");
        this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${channelMul};
        int q = d2 - d1 * ${channelMul};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * ${dilationHeight};

          if (xR < 0 || xR >= ${xNumRows}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * ${dilationWidth};

            if (xC < 0 || xC >= ${xNumCols}) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fRETs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DepthwiseConvPacked2DProgram", ()=>DepthwiseConvPacked2DProgram);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
class DepthwiseConvPacked2DProgram {
    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false){
        this.variableNames = [
            "x",
            "W"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = convInfo.outShape;
        const xNumRows = convInfo.inHeight;
        const xNumCols = convInfo.inWidth;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const texelsAcross = filterWidth;
        let mainLoop = `int xR; int xC; int xCOffset;`;
        for(let r = 0; r < filterHeight; r++)for(let c = 0; c < filterWidth; c++)mainLoop += `
          vec4 xTexelR${r}C${c * 2} = vec4(0.);
          vec4 wR${r}C${c} = vec4(0.);
          vec4 xR${r}C${c} = vec4(0.);`;
        /**
         * This vectorized implementation works by gathering the values needed for
         * each output channel's dot product into vec4's and then multiplying them
         * all together (this happens in the final double for-loop below). Most of
         * the main loop consists of constructing these vec4's with the minimum
         * number of texture2D calls, which means making use of all four returned
         * values from a texture2D call at once.
         */ for(let r1 = 0; r1 < filterHeight; r1++)for(let texelC = 0; texelC < texelsAcross; texelC++){
            const c1 = texelC * 2;
            mainLoop += `
          xR = xRCorner + ${r1 * dilationHeight};
          xC = xCCorner + ${c1 * dilationWidth};
        `;
            if (strideWidth === 1) {
                if (c1 < filterWidth) {
                    // If padding is odd, the outer texels have to be composed.
                    if (padLeft % 2 === 1) // TODO: Ensure vec4 previous does not result in redundant sample,
                    // and avoid setting xTexelRC's that exceed the boundary in the
                    // first place rather than resetting them to vec4(0)).
                    // To compute xCOffset:
                    // - If padding is odd, we must add 1 to ensure we ask for an
                    // even-numbered row.
                    // - We subtract 2 to access the previous texel.
                    mainLoop += `
                xCOffset = xC + 1;
                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {
                  xTexelR${r1}C${c1} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if(xCOffset + 1 >= ${xNumCols}) {
                    xTexelR${r1}C${c1}.zw = vec2(0.);
                  }
                } else {
                  xTexelR${r1}C${c1} = vec4(0.);
                }

                xCOffset = xC + 1 - 2;
                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {
                  vec4 previous = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if(xCOffset + 1 >= ${xNumCols}) {
                    previous.zw = vec2(0.);
                  }

                  xR${r1}C${c1} = vec4(previous.zw, xTexelR${r1}C${c1}.xy);
                } else {
                  xR${r1}C${c1} = vec4(0, 0, xTexelR${r1}C${c1}.xy);
                }
              `;
                    else // Padding is even, so xRC corresponds to a single texel.
                    mainLoop += `
                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {
                  xTexelR${r1}C${c1} = getX(batch, xR, xC, d1);
                } else {
                  xTexelR${r1}C${c1} = vec4(0.);
                }

                xR${r1}C${c1} = xTexelR${r1}C${c1};
              `;
                    if (c1 + 1 < filterWidth) {
                        // If dilation is even, the second entry should match the first
                        // (either both are composed or both are single samples). But if
                        // dilation is odd, then the second entry should be the opposite
                        // of the first (if the first is composed, the second is a single
                        // sample, and vice versa.)
                        const nextTexelOffset = padLeft % 2 === 0 ? (0, _tfjsCore.util).nearestLargerEven(dilationWidth) : dilationWidth;
                        if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {
                            mainLoop += `
                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};

                  if(xR >= 0 && xR < ${xNumRows} &&
                    xCOffset >= 0 && xCOffset < ${xNumCols}) {
                    xTexelR${r1}C${c1 + 2} = getX(batch, xR, xCOffset, d1);
                  }
                `;
                            // If dilation > 1 then the xRC's will not be able to share any
                            // values, so each xRC will require two unique calls to getX.
                            if (dilationWidth > 1) mainLoop += `
                    xCOffset -= 2;
                    if(xR >= 0 && xR < ${xNumRows} &&
                      xCOffset >= 0 && xCOffset < ${xNumCols}) {
                      xTexelR${r1}C${c1} = getX(batch, xR, xCOffset, d1);
                    } else {
                      xTexelR${r1}C${c1} = vec4(0.);
                    }
                  `;
                            mainLoop += `
                  xR${r1}C${c1 + 1} = vec4(
                    xTexelR${r1}C${c1}.zw, xTexelR${r1}C${c1 + 2}.xy);
                `;
                        } else mainLoop += `
                  xCOffset = xC + ${nextTexelOffset};

                  if(xR >= 0 && xR < ${xNumRows} &&
                    xCOffset >= 0 && xCOffset < ${xNumCols}) {
                    xTexelR${r1}C${c1 + 2} = getX(batch, xR, xCOffset, d1);
                  }

                  xR${r1}C${c1 + 1} = xTexelR${r1}C${c1 + 2};
                `;
                    }
                }
            } else if (c1 < filterWidth) {
                mainLoop += `
              if(xR >= 0 && xR < ${xNumRows}) {
            `;
                // Depending on whether padLeft is even or odd, we want either the
                // xy or zw channels from X texels for xR${r}C${c}. If padLeft is
                // even, xR${r}C${c + 1} is simply the zw channels of texels we've
                // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will
                // need to come from the xy channels of a new texel, hence the `vec4
                // final` initialized below.
                if (padLeft % 2 === 1) {
                    mainLoop += `
                xCOffset = xC + 1 - ${strideWidth};
                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {
                  xTexelR${r1}C${c1} = getX(batch, xR, xCOffset, d1);
                } else {
                  xTexelR${r1}C${c1} = vec4(0.);
                }

                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {
                  xTexelR${r1}C${c1 + 2} = getX(batch, xR, xC + 1, d1);
                } else {
                  xTexelR${r1}C${c1 + 2} = vec4(0.);
                }

                xR${r1}C${c1} = vec4(
                  xTexelR${r1}C${c1}.zw, xTexelR${r1}C${c1 + 2}.zw);
              `;
                    if (c1 + 1 < filterWidth) mainLoop += `
                  vec4 final = vec4(0.);
                  xCOffset = xC + 1 + ${strideWidth};
                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xR${r1}C${c1 + 1} = vec4(xTexelR${r1}C${c1 + 2}.xy, final.xy);
                `;
                } else {
                    mainLoop += `
                if(xC >= 0 && xC < ${xNumCols}) {
                  xTexelR${r1}C${c1} = getX(batch, xR, xC, d1);
                } else {
                  xTexelR${r1}C${c1} = vec4(0.);
                }

                xCOffset = xC + ${strideWidth};
                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {
                  xTexelR${r1}C${c1 + 2} = getX(batch, xR, xCOffset, d1);
                } else {
                  xTexelR${r1}C${c1 + 2} = vec4(0.);
                }

                xR${r1}C${c1} = vec4(
                  xTexelR${r1}C${c1}.xy, xTexelR${r1}C${c1 + 2}.xy);
              `;
                    if (c1 + 1 < filterWidth) mainLoop += `
                  xR${r1}C${c1 + 1} = vec4(
                    xTexelR${r1}C${c1}.zw, xTexelR${r1}C${c1 + 2}.zw);
                `;
                }
                mainLoop += `}`;
            }
            if (c1 < filterWidth) {
                mainLoop += `
            vec4 wTexelR${r1}C${c1} = getW(${r1}, ${c1}, d1, q);
            wR${r1}C${c1} = vec4(wTexelR${r1}C${c1}.xz, wTexelR${r1}C${c1}.xz);
          `;
                if (c1 + 1 < filterWidth) mainLoop += `
              vec4 wTexelR${r1}C${c1 + 1} = getW(${r1}, ${c1 + 1}, d1, q);
              wR${r1}C${c1 + 1} =
                vec4(wTexelR${r1}C${c1 + 1}.xz, wTexelR${r1}C${c1 + 1}.xz);`;
            }
        }
        for(let r2 = 0; r2 < filterHeight; r2++)for(let c2 = 0; c2 < filterWidth; c2++)mainLoop += `dotProd += xR${r2}C${c2} * wR${r2}C${c2};`;
        let activationSnippet = "", applyActivationSnippet = "";
        if (activation) {
            if (hasPreluActivation) activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
            else activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
            applyActivationSnippet = `result = activation(result);`;
        }
        const addBiasSnippet = addBias ? "result += getBiasAtOutCoords();" : "";
        if (addBias) this.variableNames.push("bias");
        if (hasPreluActivation) this.variableNames.push("preluActivationWeights");
        this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {

        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2;
        int q = 0;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        vec4 dotProd = vec4(0.);

        ${mainLoop}

        vec4 result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
    }
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jIY9b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "CropAndResizeProgram", ()=>CropAndResizeProgram);
class CropAndResizeProgram {
    constructor(imageShape, boxShape, cropSize, method, extrapolationValue){
        this.variableNames = [
            "Image",
            "Boxes",
            "BoxInd"
        ];
        this.outputShape = [];
        const [batch, imageHeight, imageWidth, depth] = imageShape;
        const [numBoxes, ] = boxShape;
        const [cropHeight, cropWidth] = cropSize;
        this.outputShape = [
            numBoxes,
            cropHeight,
            cropWidth,
            depth
        ];
        const methodId = method === "bilinear" ? 1 : 0;
        const [inputHeightFloat, inputWidthFloat] = [
            `${imageHeight - 1}.0`,
            `${imageWidth - 1}.0`
        ];
        const [heightRatio, heightScale, inY] = cropHeight > 1 ? [
            `${(imageHeight - 1) / (cropHeight - 1)}`,
            "(y2-y1) * height_ratio",
            `y1*${inputHeightFloat} + float(y)*(height_scale)`, 
        ] : [
            "0.0",
            "0.0",
            `0.5 * (y1+y2) * ${inputHeightFloat}`, 
        ];
        const [widthRatio, widthScale, inX] = cropWidth > 1 ? [
            `${(imageWidth - 1) / (cropWidth - 1)}`,
            "(x2-x1) * width_ratio",
            `x1*${inputWidthFloat} + float(x)*(width_scale)`, 
        ] : [
            "0.0",
            "0.0",
            `0.5 * (x1+x2) * ${inputWidthFloat}`, 
        ];
        // Reference implementation
        // tslint:disable-next-line:max-line-length
        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc
        this.userCode = `
      const float height_ratio = float(${heightRatio});
      const float width_ratio = float(${widthRatio});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${batch}) {
          return;
        }

        float height_scale = ${heightScale};
        float width_scale = ${widthScale};

        float in_y = ${inY};
        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }
        float in_x = ${inX};
        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${methodId} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g8I9j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CumSumProgram", ()=>CumSumProgram);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class CumSumProgram {
    constructor(shape, exclusive, reverse){
        this.variableNames = [
            "x"
        ];
        this.outputShape = shape;
        const rank = shape.length;
        const finalDim = shape[shape.length - 1];
        const comparator = reverse ? "<" : ">";
        this.userCode = `
      int getIndex(int i) {
        ${reverse ? `return ${finalDim} -i - 1;` : "return i;"}
      }

      void main() {
        ${(0, _shaderCompiler.getCoordsDataType)(rank)} coords = getOutputCoords();
        int end = ${getFinalCoord(rank, "coords")};
        float val = 0.0;
        for (int i = ${finalDim} - 1; i >= 0; i -= 1) {
          int idx = getIndex(i);
          if (idx ${comparator} end) {
            continue;
          }
          if (idx == end && ${exclusive}) {
            continue;
          }
          ${getFinalCoord(rank, "coords")} = idx;
          val += getX(${getCoords(rank, "coords")});
        }
        setOutput(val);
      }
    `;
    }
}
function getCoords(rank, name) {
    if (rank === 1) return `${name}`;
    else if (rank === 2) return `${name}.x, ${name}.y`;
    else if (rank === 3) return `${name}.x, ${name}.y, ${name}.z`;
    else if (rank === 4) return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;
    else throw Error(`Cumulative sum for rank ${rank} is not yet supported`);
}
function getFinalCoord(rank, name) {
    if (rank === 1) return `${name}`;
    else if (rank === 2) return `${name}.y`;
    else if (rank === 3) return `${name}.z`;
    else if (rank === 4) return `${name}.w`;
    else throw Error(`Cumulative sum for rank ${rank} is not yet supported`);
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5xKFq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DecodeMatrixProgram", ()=>DecodeMatrixProgram);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("./glsl_version");
var _shaderCompilerUtil = require("./shader_compiler_util");
var _texUtil = require("./tex_util");
class DecodeMatrixProgram {
    constructor(outputShape){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = false;
        this.packedOutput = true;
        this.outPackingScheme = (0, _texUtil.PackingScheme).DENSE;
        const texShape = (0, _texUtil.getDenseTexShape)(outputShape);
        const glsl = (0, _glslVersion.getGlslDifferences)();
        this.outputShape = outputShape;
        this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${_shaderCompilerUtil.getLogicalCoordinatesFromFlatIndex([
            "r",
            "c",
            "d"
        ], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx *
          vec2(${texShape[0]}, ${texShape[1]}));
        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${glsl.output} = result;
      }
    `;
    }
}

},{"./glsl_version":"ezjL5","./shader_compiler_util":"i2KGv","./tex_util":"kHw0Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"in2bU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DecodeMatrixPackedProgram", ()=>DecodeMatrixPackedProgram);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("./glsl_version");
var _shaderCompilerUtil = require("./shader_compiler_util");
var _texUtil = require("./tex_util");
class DecodeMatrixPackedProgram {
    constructor(outputShape){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outPackingScheme = (0, _texUtil.PackingScheme).DENSE;
        const texShape = (0, _texUtil.getDenseTexShape)(outputShape);
        const glsl = (0, _glslVersion.getGlslDifferences)();
        this.outputShape = outputShape;
        this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${_shaderCompilerUtil.getLogicalCoordinatesFromFlatIndex([
            "r",
            "c",
            "d"
        ], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx *
          vec2(${texShape[0]}, ${texShape[1]}));
        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${glsl.output} = result;
      }
    `;
    }
}

},{"./glsl_version":"ezjL5","./shader_compiler_util":"i2KGv","./tex_util":"kHw0Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8azIA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "DepthToSpaceProgram", ()=>DepthToSpaceProgram);
class DepthToSpaceProgram {
    constructor(outputShape, blockSize, dataFormat){
        this.variableNames = [
            "x"
        ];
        this.outputShape = [];
        this.outputShape = outputShape;
        this.blockSize = blockSize;
        this.dataFormat = dataFormat;
        this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${blockSize};
      int offset_h = imod(h, ${blockSize});
      int in_w = w / ${blockSize};
      int offset_w = imod(w, ${blockSize});
      int offset_d = (offset_h * ${blockSize} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
    }
    getHeightCoordString() {
        if (this.dataFormat === "NHWC") return `coords[1]`;
        else return `coords[2]`;
    }
    getWidthCoordString() {
        if (this.dataFormat === "NHWC") return `coords[2]`;
        else return `coords[3]`;
    }
    getDepthCoordString() {
        if (this.dataFormat === "NHWC") return `coords[3]`;
        else return `coords[1]`;
    }
    getOutputDepthSize() {
        if (this.dataFormat === "NHWC") return this.outputShape[3];
        else return this.outputShape[1];
    }
    getInputSamplingString() {
        if (this.dataFormat === "NHWC") return `getX(b, in_h, in_w, in_d)`;
        else return `getX(b, in_d, in_h, in_w)`;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jGDbr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "DiagProgram", ()=>DiagProgram);
class DiagProgram {
    constructor(size){
        this.variableNames = [
            "X"
        ];
        this.outputShape = [
            size,
            size
        ];
        this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kvmGW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EncodeFloatProgram", ()=>EncodeFloatProgram);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("./glsl_version");
var _shaderCompilerUtil = require("./shader_compiler_util");
var _texUtil = require("./tex_util");
class EncodeFloatProgram {
    constructor(outputShape){
        this.variableNames = [
            "A"
        ];
        this.outTexUsage = (0, _texUtil.TextureUsage).DOWNLOAD;
        const glsl = (0, _glslVersion.getGlslDifferences)();
        this.outputShape = outputShape;
        this.userCode = `
      ${0, _shaderCompilerUtil.ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${glsl.output} = encode_float(x);
      }
    `;
    }
}

},{"./glsl_version":"ezjL5","./shader_compiler_util":"i2KGv","./tex_util":"kHw0Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kJWMo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EncodeFloatPackedProgram", ()=>EncodeFloatPackedProgram);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("./glsl_version");
var _shaderCompilerUtil = require("./shader_compiler_util");
var _texUtil = require("./tex_util");
class EncodeFloatPackedProgram {
    constructor(outputShape){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = false;
        this.outTexUsage = (0, _texUtil.TextureUsage).DOWNLOAD;
        const glsl = (0, _glslVersion.getGlslDifferences)();
        this.outputShape = outputShape;
        this.userCode = `
      ${0, _shaderCompilerUtil.ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${glsl.output} = encode_float(x);
      }
    `;
    }
}

},{"./glsl_version":"ezjL5","./shader_compiler_util":"i2KGv","./tex_util":"kHw0Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9hWim":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EncodeMatrixProgram", ()=>EncodeMatrixProgram);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("./glsl_version");
var _shaderCompilerUtil = require("./shader_compiler_util");
class EncodeMatrixProgram {
    constructor(outputShape, texShape, inputIsUnsignedByte = false){
        this.variableNames = [
            "A"
        ];
        const glsl = (0, _glslVersion.getGlslDifferences)();
        const [height, width] = texShape;
        this.outputShape = outputShape;
        let output = `result`;
        if (inputIsUnsignedByte) output = `floor(result * 255. + 0.5)`;
        this.userCode = `
      ${_shaderCompilerUtil.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);
        
        int r = flatIndex / ${width};
        int c = imod(flatIndex, ${width});
        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);
        vec4 values = ${glsl.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${glsl.output} = vec4(${output}, 0., 0., 0.);
      }
    `;
    }
}

},{"./glsl_version":"ezjL5","./shader_compiler_util":"i2KGv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87yQg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
This is how the shader encodes a tensor with shape = [2, 3, 5]
(indices are [batch, row, col]).

000|001   002|003   004|xxx   020|021   022|023   024|xxx
-------   -------   -------   -------   -------   -------
010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx

100|101   102|103   104|xxx   120|121   122|123   124|xxx
-------   -------   -------   -------   -------   -------
110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx

Single texels contain only values from the same batch, and from adjacent rows
and columns.
 */ parcelHelpers.export(exports, "EncodeMatrixPackedProgram", ()=>EncodeMatrixPackedProgram);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("./glsl_version");
var _shaderCompilerUtil = require("./shader_compiler_util");
class EncodeMatrixPackedProgram {
    constructor(outputShape, texShape, inputIsUnsignedByte = false){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = false;
        this.packedOutput = true;
        const glsl = (0, _glslVersion.getGlslDifferences)();
        const [height, width] = texShape;
        this.outputShape = outputShape;
        let mainLoop = "";
        let output = "result";
        if (inputIsUnsignedByte) output = "floor(result * 255. + 0.5)";
        for(let row = 0; row <= 1; row++)for(let col = 0; col <= 1; col++){
            const channel = row * 2 + col;
            mainLoop += `
          localCoords = coords;
          if(localCoords[2] + ${col} < ${outputShape[2]}) {
            localCoords[2] += ${col};
            if(localCoords[1] + ${row} < ${outputShape[1]}) {
              localCoords[1] += ${row};

              flatIndex = getFlatIndex(localCoords);
              offset = imod(flatIndex, 4);

              flatIndex = idiv(flatIndex, 4, 1.);

              r = flatIndex / ${width};
              c = imod(flatIndex, ${width});
              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);
              values = ${glsl.texture2D}(A, uv);

              if(offset == 0) {
                result[${channel}] = values[0];
              } else if(offset == 1) {
                result[${channel}] = values[1];
              } else if(offset == 2) {
                result[${channel}] = values[2];
              } else {
                result[${channel}] = values[3];
              }
            }
          }
        `;
        }
        this.userCode = `
      ${_shaderCompilerUtil.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 coords = getOutputCoords();

        vec4 result = vec4(0.);
        int flatIndex, r, c, offset;
        ivec3 localCoords;
        vec2 uv;
        vec4 values;

        ${mainLoop}

        ${glsl.output} = ${output};
      }
    `;
    }
}

},{"./glsl_version":"ezjL5","./shader_compiler_util":"i2KGv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1kqpi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COMPLEX_FFT", ()=>COMPLEX_FFT);
parcelHelpers.export(exports, "FFTProgram", ()=>FFTProgram);
const COMPLEX_FFT = {
    REAL: "return real * expR - imag * expI;",
    IMAG: "return real * expI + imag * expR;"
};
class FFTProgram {
    constructor(op, inputShape, inverse){
        this.variableNames = [
            "real",
            "imag"
        ];
        const innerDim = inputShape[1];
        this.outputShape = inputShape;
        const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;
        const resultDenominator = inverse ? `${innerDim}.0` : "1.0";
        this.userCode = `
      const float exponentMultiplier = ${exponentMultiplierSnippet};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${op}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${innerDim});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${innerDim}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jdJmC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "FillProgram", ()=>FillProgram);
class FillProgram {
    constructor(shape, value){
        this.outputShape = [];
        this.variableNames = [
            "x"
        ];
        this.outputShape = shape;
        this.userCode = `
      uniform float value;
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
    }
    getCustomSetupFunc(value) {
        return (gpgpu, webGLProgram)=>{
            if (this.valueLoc == null) this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, "value");
            gpgpu.gl.uniform1f(this.valueLoc, value);
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7pQ7D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GatherProgram", ()=>GatherProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class GatherProgram {
    constructor(aShape, indicesLength, axis){
        this.variableNames = [
            "A",
            "indices"
        ];
        const outputShape = aShape.slice();
        outputShape[axis] = indicesLength;
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        const dtype = (0, _shaderCompiler.getCoordsDataType)(this.rank);
        const sourceCoords = getSourceCoords(aShape, axis);
        this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        setOutput(getA(${sourceCoords}));
      }
    `;
    }
}
function getSourceCoords(aShape, axis) {
    const rank = aShape.length;
    if (rank > 4) throw Error(`Gather for rank ${rank} is not yet supported`);
    if (rank === 1) return `int(getIndices(resRC))`;
    const currentCoords = [
        "resRC.x",
        "resRC.y",
        "resRC.z",
        "resRC.w"
    ];
    const sourceCoords = [];
    for(let i = 0; i < aShape.length; i++)if (i === axis) sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);
    else sourceCoords.push(`${currentCoords[i]}`);
    return sourceCoords.join();
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"75yeS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GatherNDProgram", ()=>GatherNDProgram);
var _shaderCompiler = require("./shader_compiler");
class GatherNDProgram {
    constructor(sliceDim, strides, shape){
        this.sliceDim = sliceDim;
        this.strides = strides;
        this.variableNames = [
            "x",
            "indices"
        ];
        this.outputShape = shape;
        const stridesType = (0, _shaderCompiler.getCoordsDataType)(strides.length);
        const dtype = (0, _shaderCompiler.getCoordsDataType)(shape.length);
        const strideString = this.sliceDim > 1 ? "strides[j]" : "strides";
        this.userCode = `
        ${stridesType} strides = ${stridesType}(${this.strides});
         void main() {
          ${dtype} coords = getOutputCoords();
          int flattenIndex = 0;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            flattenIndex += index * ${strideString};
          }
          setOutput(getX(flattenIndex, coords[1]));
        }
      `;
    }
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6X3q9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GPGPUContext", ()=>GPGPUContext);
/**
 * Finds the index of the last true element using linear search.
 * Note: We can't do binary search because Chrome expects us to explicitly
 * test all fences before download:
 * https://github.com/tensorflow/tfjs/issues/1145
 */ parcelHelpers.export(exports, "linearSearchLastTrue", ()=>linearSearchLastTrue);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _canvasUtil = require("./canvas_util");
var _gpgpuUtil = require("./gpgpu_util");
var _texUtil = require("./tex_util");
var _webglUtil = require("./webgl_util");
class GPGPUContext {
    constructor(gl){
        this.outputTexture = null;
        this.program = null;
        this.disposed = false;
        this.vertexAttrsAreBound = false;
        this.itemsToPoll = [];
        const glVersion = (0, _tfjsCore.env)().getNumber("WEBGL_VERSION");
        if (gl != null) {
            this.gl = gl;
            (0, _canvasUtil.setWebGLContext)(glVersion, gl);
        } else this.gl = (0, _canvasUtil.getWebGLContext)(glVersion);
        // WebGL 2.0 enables texture floats without an extension.
        let COLOR_BUFFER_FLOAT = "WEBGL_color_buffer_float";
        const COLOR_BUFFER_HALF_FLOAT = "EXT_color_buffer_half_float";
        if ((0, _tfjsCore.env)().getNumber("WEBGL_VERSION") === 1) {
            const TEXTURE_FLOAT = "OES_texture_float";
            const TEXTURE_HALF_FLOAT = "OES_texture_half_float";
            this.textureFloatExtension = _webglUtil.getExtensionOrThrow(this.gl, this.debug, TEXTURE_FLOAT);
            if (_webglUtil.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) this.textureHalfFloatExtension = _webglUtil.getExtensionOrThrow(this.gl, this.debug, TEXTURE_HALF_FLOAT);
            else if ((0, _tfjsCore.env)().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
            this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);
            if (_webglUtil.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) this.colorBufferHalfFloatExtension = _webglUtil.getExtensionOrThrow(this.gl, this.debug, COLOR_BUFFER_HALF_FLOAT);
            else if ((0, _tfjsCore.env)().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
        } else {
            COLOR_BUFFER_FLOAT = "EXT_color_buffer_float";
            if (_webglUtil.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);
            else if (_webglUtil.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
            else throw new Error("GL context does not support color renderable floats");
        }
        this.vertexBuffer = _gpgpuUtil.createVertexBuffer(this.gl, this.debug);
        this.indexBuffer = _gpgpuUtil.createIndexBuffer(this.gl, this.debug);
        this.framebuffer = _webglUtil.createFramebuffer(this.gl, this.debug);
        this.textureConfig = _texUtil.getTextureConfig(this.gl, this.textureHalfFloatExtension);
    }
    get debug() {
        return (0, _tfjsCore.env)().getBool("DEBUG");
    }
    dispose() {
        if (this.disposed) return;
        if (this.program != null) console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.");
        if (this.outputTexture != null) console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
        const gl = this.gl;
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.finish());
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.bindFramebuffer(gl.FRAMEBUFFER, null));
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.deleteFramebuffer(this.framebuffer));
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.bindBuffer(gl.ARRAY_BUFFER, null));
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.deleteBuffer(this.indexBuffer));
        this.disposed = true;
    }
    createFloat32MatrixTexture(rows, columns) {
        this.throwIfDisposed();
        return _gpgpuUtil.createFloat32MatrixTexture(this.gl, this.debug, rows, columns, this.textureConfig);
    }
    createFloat16MatrixTexture(rows, columns) {
        this.throwIfDisposed();
        return _gpgpuUtil.createFloat16MatrixTexture(this.gl, this.debug, rows, columns, this.textureConfig);
    }
    createUnsignedBytesMatrixTexture(rows, columns) {
        this.throwIfDisposed();
        return _gpgpuUtil.createUnsignedBytesMatrixTexture(this.gl, this.debug, rows, columns, this.textureConfig);
    }
    uploadPixelDataToTexture(texture, pixels) {
        this.throwIfDisposed();
        _gpgpuUtil.uploadPixelDataToTexture(this.gl, this.debug, texture, pixels);
    }
    uploadDenseMatrixToTexture(texture, width, height, data) {
        this.throwIfDisposed();
        _gpgpuUtil.uploadDenseMatrixToTexture(this.gl, this.debug, texture, width, height, data, this.textureConfig);
    }
    createFloat16PackedMatrixTexture(rows, columns) {
        this.throwIfDisposed();
        return _gpgpuUtil.createFloat16PackedMatrixTexture(this.gl, this.debug, rows, columns, this.textureConfig);
    }
    createPackedMatrixTexture(rows, columns) {
        this.throwIfDisposed();
        return _gpgpuUtil.createPackedMatrixTexture(this.gl, this.debug, rows, columns, this.textureConfig);
    }
    deleteMatrixTexture(texture) {
        this.throwIfDisposed();
        if (this.outputTexture === texture) {
            _webglUtil.unbindColorTextureFromFramebuffer(this.gl, this.debug, this.framebuffer);
            this.outputTexture = null;
        }
        _webglUtil.callAndCheck(this.gl, this.debug, ()=>this.gl.deleteTexture(texture));
    }
    downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {
        return this.downloadMatrixDriver(texture, ()=>_gpgpuUtil.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, this.debug, rows, columns, this.textureConfig));
    }
    downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {
        return _gpgpuUtil.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);
    }
    downloadFloat32MatrixFromBuffer(buffer, size) {
        return _gpgpuUtil.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);
    }
    createBufferFromTexture(texture, rows, columns) {
        this.bindTextureToFrameBuffer(texture);
        const result = _gpgpuUtil.createBufferFromOutputTexture(this.gl, this.debug, rows, columns, this.textureConfig);
        this.unbindTextureToFrameBuffer();
        return result;
    }
    createAndWaitForFence() {
        const fenceContext = this.createFence(this.gl);
        return this.pollFence(fenceContext);
    }
    createFence(gl) {
        let query;
        let isFencePassed;
        if ((0, _tfjsCore.env)().getBool("WEBGL_FENCE_API_ENABLED")) {
            const gl2 = gl;
            const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);
            gl.flush();
            isFencePassed = ()=>{
                const status = gl2.clientWaitSync(sync, 0, 0);
                return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;
            };
            query = sync;
        } else if ((0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0) {
            query = this.beginQuery();
            this.endQuery();
            isFencePassed = ()=>this.isQueryAvailable(query, (0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
        } else // If we have no way to fence, return true immediately. This will fire in
        // WebGL 1.0 when there is no disjoint query timer. In this case, because
        // the fence passes immediately, we'll immediately ask for a download of
        // the texture, which will cause the UI thread to hang.
        isFencePassed = ()=>true;
        return {
            query,
            isFencePassed
        };
    }
    downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {
        return this.downloadMatrixDriver(texture, ()=>_gpgpuUtil.downloadMatrixFromPackedOutputTexture(this.gl, this.debug, physicalRows, physicalCols));
    }
    createProgram(fragmentShaderSource) {
        this.throwIfDisposed();
        const gl = this.gl;
        const fragmentShader = _webglUtil.createFragmentShader(gl, this.debug, fragmentShaderSource);
        const vertexShader = _gpgpuUtil.createVertexShader(gl, this.debug);
        const program = _webglUtil.createProgram(gl, this.debug);
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.attachShader(program, vertexShader));
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.attachShader(program, fragmentShader));
        _webglUtil.linkProgram(gl, this.debug, program);
        if (this.debug) _webglUtil.validateProgram(gl, this.debug, program);
        if (!this.vertexAttrsAreBound) {
            this.setProgram(program);
            this.vertexAttrsAreBound = _gpgpuUtil.bindVertexProgramAttributeStreams(gl, this.debug, this.program, this.vertexBuffer);
        }
        return program;
    }
    deleteProgram(program) {
        this.throwIfDisposed();
        if (program === this.program) this.program = null;
        if (program != null) _webglUtil.callAndCheck(this.gl, this.debug, ()=>this.gl.deleteProgram(program));
    }
    setProgram(program) {
        this.throwIfDisposed();
        this.program = program;
        if (this.program != null && this.debug) _webglUtil.validateProgram(this.gl, this.debug, this.program);
        _webglUtil.callAndCheck(this.gl, this.debug, ()=>this.gl.useProgram(program));
    }
    getUniformLocation(program, uniformName, shouldThrow = true) {
        this.throwIfDisposed();
        if (shouldThrow) return _webglUtil.getProgramUniformLocationOrThrow(this.gl, this.debug, program, uniformName);
        else return _webglUtil.getProgramUniformLocation(this.gl, program, uniformName);
    }
    getAttributeLocation(program, attribute) {
        this.throwIfDisposed();
        return _webglUtil.callAndCheck(this.gl, this.debug, ()=>this.gl.getAttribLocation(program, attribute));
    }
    getUniformLocationNoThrow(program, uniformName) {
        this.throwIfDisposed();
        return this.gl.getUniformLocation(program, uniformName);
    }
    setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {
        this.throwIfDisposed();
        this.throwIfNoProgram();
        _webglUtil.bindTextureToProgramUniformSampler(this.gl, this.debug, this.program, inputMatrixTexture, uniformLocation, textureUnit);
    }
    setOutputMatrixTexture(outputMatrixTexture, rows, columns) {
        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);
    }
    setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {
        this.throwIfDisposed();
        const [width, height] = _texUtil.getPackedMatrixTextureShapeWidthHeight(rows, columns);
        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);
    }
    setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);
    }
    setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
        throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
    }
    debugValidate() {
        if (this.program != null) _webglUtil.validateProgram(this.gl, this.debug, this.program);
        _webglUtil.validateFramebuffer(this.gl);
    }
    executeProgram() {
        this.throwIfDisposed();
        this.throwIfNoProgram();
        const gl = this.gl;
        if (this.debug) this.debugValidate();
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));
    }
    blockUntilAllProgramsCompleted() {
        this.throwIfDisposed();
        _webglUtil.callAndCheck(this.gl, this.debug, ()=>this.gl.finish());
    }
    getQueryTimerExtension() {
        if (this.disjointQueryTimerExtension == null) this.disjointQueryTimerExtension = _webglUtil.getExtensionOrThrow(this.gl, this.debug, (0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query");
        return this.disjointQueryTimerExtension;
    }
    getQueryTimerExtensionWebGL2() {
        return this.getQueryTimerExtension();
    }
    getQueryTimerExtensionWebGL1() {
        return this.getQueryTimerExtension();
    }
    beginQuery() {
        if ((0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
            const gl2 = this.gl;
            const ext = this.getQueryTimerExtensionWebGL2();
            const query = gl2.createQuery();
            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);
            return query;
        }
        const ext1 = this.getQueryTimerExtensionWebGL1();
        const query1 = ext1.createQueryEXT();
        ext1.beginQueryEXT(ext1.TIME_ELAPSED_EXT, query1);
        return query1;
    }
    endQuery() {
        if ((0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
            const gl2 = this.gl;
            const ext = this.getQueryTimerExtensionWebGL2();
            gl2.endQuery(ext.TIME_ELAPSED_EXT);
            return;
        }
        const ext1 = this.getQueryTimerExtensionWebGL1();
        ext1.endQueryEXT(ext1.TIME_ELAPSED_EXT);
    }
    async waitForQueryAndGetTime(query) {
        await (0, _tfjsCore.util).repeatedTry(()=>this.disposed || // in rapid succession, so without this check we
            // may poll for the query timer indefinitely
            this.isQueryAvailable(query, (0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")));
        return this.getQueryTime(query, (0, _tfjsCore.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
    }
    getQueryTime(query, queryTimerVersion) {
        if (queryTimerVersion === 0) return null;
        if (queryTimerVersion === 2) {
            const gl2 = this.gl;
            const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);
            // Return milliseconds.
            return timeElapsedNanos / 1000000;
        } else {
            const ext = this.getQueryTimerExtensionWebGL1();
            const timeElapsedNanos1 = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);
            // Return milliseconds.
            return timeElapsedNanos1 / 1000000;
        }
    }
    isQueryAvailable(query, queryTimerVersion) {
        if (queryTimerVersion === 0) return true;
        if (queryTimerVersion === 2) {
            const gl2 = this.gl;
            const ext = this.getQueryTimerExtensionWebGL2();
            const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);
            if (this.disjoint == null) this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
            return available && !this.disjoint;
        } else {
            const ext1 = this.getQueryTimerExtensionWebGL1();
            const available1 = ext1.getQueryObjectEXT(query, ext1.QUERY_RESULT_AVAILABLE_EXT);
            if (this.disjoint == null) this.disjoint = this.gl.getParameter(ext1.GPU_DISJOINT_EXT);
            return available1 && !this.disjoint;
        }
    }
    pollFence(fenceContext) {
        return new Promise((resolve)=>{
            this.addItemToPoll(()=>fenceContext.isFencePassed(), ()=>resolve());
        });
    }
    pollItems() {
        // Find the last query that has finished.
        const index = linearSearchLastTrue(this.itemsToPoll.map((x)=>x.isDoneFn));
        for(let i = 0; i <= index; ++i){
            const { resolveFn  } = this.itemsToPoll[i];
            resolveFn();
        }
        this.itemsToPoll = this.itemsToPoll.slice(index + 1);
    }
    addItemToPoll(isDoneFn, resolveFn) {
        this.itemsToPoll.push({
            isDoneFn,
            resolveFn
        });
        if (this.itemsToPoll.length > 1) // We already have a running loop that polls.
        return;
        // Start a new loop that polls.
        (0, _tfjsCore.util).repeatedTry(()=>{
            this.pollItems();
            // End the loop if no more items to poll.
            return this.itemsToPoll.length === 0;
        });
    }
    bindTextureToFrameBuffer(texture) {
        this.throwIfDisposed();
        _webglUtil.bindColorTextureToFramebuffer(this.gl, this.debug, texture, this.framebuffer);
        if (this.debug) _webglUtil.validateFramebuffer(this.gl);
    }
    unbindTextureToFrameBuffer() {
        if (this.outputTexture != null) {
            _webglUtil.bindColorTextureToFramebuffer(this.gl, this.debug, this.outputTexture, this.framebuffer);
            if (this.debug) _webglUtil.validateFramebuffer(this.gl);
        } else _webglUtil.unbindColorTextureFromFramebuffer(this.gl, this.debug, this.framebuffer);
    }
    downloadMatrixDriver(texture, downloadAndDecode) {
        this.bindTextureToFrameBuffer(texture);
        const result = downloadAndDecode();
        this.unbindTextureToFrameBuffer();
        return result;
    }
    setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {
        this.throwIfDisposed();
        const gl = this.gl;
        _webglUtil.bindColorTextureToFramebuffer(gl, this.debug, outputMatrixTextureMaybePacked, this.framebuffer);
        if (this.debug) _webglUtil.validateFramebuffer(gl);
        this.outputTexture = outputMatrixTextureMaybePacked;
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.viewport(0, 0, width, height));
        _webglUtil.callAndCheck(gl, this.debug, ()=>gl.scissor(0, 0, width, height));
    }
    setOutputMatrixWriteRegionDriver(x, y, width, height) {
        this.throwIfDisposed();
        _webglUtil.callAndCheck(this.gl, this.debug, ()=>this.gl.scissor(x, y, width, height));
    }
    throwIfDisposed() {
        if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
    }
    throwIfNoProgram() {
        if (this.program == null) throw new Error("No GPU program is currently set.");
    }
}
function linearSearchLastTrue(arr) {
    let i = 0;
    for(; i < arr.length; ++i){
        const isDone = arr[i]();
        if (!isDone) break;
    }
    return i - 1;
}

},{"@tensorflow/tfjs-core":"2votT","./canvas_util":"9eAXh","./gpgpu_util":"96omO","./tex_util":"kHw0Y","./webgl_util":"kgG6J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"96omO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createVertexShader", ()=>createVertexShader);
parcelHelpers.export(exports, "createVertexBuffer", ()=>createVertexBuffer);
parcelHelpers.export(exports, "createIndexBuffer", ()=>createIndexBuffer);
parcelHelpers.export(exports, "createFloat32MatrixTexture", ()=>createFloat32MatrixTexture);
parcelHelpers.export(exports, "createFloat16MatrixTexture", ()=>createFloat16MatrixTexture);
parcelHelpers.export(exports, "createUnsignedBytesMatrixTexture", ()=>createUnsignedBytesMatrixTexture);
parcelHelpers.export(exports, "createPackedMatrixTexture", ()=>createPackedMatrixTexture);
parcelHelpers.export(exports, "createFloat16PackedMatrixTexture", ()=>createFloat16PackedMatrixTexture);
parcelHelpers.export(exports, "bindVertexProgramAttributeStreams", ()=>bindVertexProgramAttributeStreams);
parcelHelpers.export(exports, "uploadDenseMatrixToTexture", ()=>uploadDenseMatrixToTexture);
parcelHelpers.export(exports, "uploadPixelDataToTexture", ()=>uploadPixelDataToTexture);
parcelHelpers.export(exports, "createBufferFromOutputTexture", ()=>createBufferFromOutputTexture);
parcelHelpers.export(exports, "downloadFloat32MatrixFromBuffer", ()=>downloadFloat32MatrixFromBuffer);
parcelHelpers.export(exports, "downloadByteEncodedFloatMatrixFromOutputTexture", ()=>downloadByteEncodedFloatMatrixFromOutputTexture);
parcelHelpers.export(exports, "downloadPackedMatrixFromBuffer", ()=>downloadPackedMatrixFromBuffer);
parcelHelpers.export(exports, "downloadMatrixFromPackedOutputTexture", ()=>downloadMatrixFromPackedOutputTexture);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("./glsl_version");
var _texUtil = require("./tex_util");
var _webglUtil = require("./webgl_util");
function createVertexShader(gl, debug) {
    const glsl = (0, _glslVersion.getGlslDifferences)();
    const vertexShaderSource = `${glsl.version}
    precision highp float;
    ${glsl.attribute} vec3 clipSpacePos;
    ${glsl.attribute} vec2 uv;
    ${glsl.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
    return _webglUtil.createVertexShader(gl, debug, vertexShaderSource);
}
function createVertexBuffer(gl, debug) {
    // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]
    const vertexArray = new Float32Array([
        -1,
        1,
        0,
        0,
        1,
        -1,
        -1,
        0,
        0,
        0,
        1,
        1,
        0,
        1,
        1,
        1,
        -1,
        0,
        1,
        0
    ]);
    return _webglUtil.createStaticVertexBuffer(gl, debug, vertexArray);
}
function createIndexBuffer(gl, debug) {
    // OpenGL (and WebGL) have "CCW == front" winding
    const triangleVertexIndices = new Uint16Array([
        0,
        1,
        2,
        2,
        1,
        3
    ]);
    return _webglUtil.createStaticIndexBuffer(gl, debug, triangleVertexIndices);
}
function createAndConfigureTexture(gl, debug, width, height, internalFormat, textureFormat, textureType) {
    _webglUtil.validateTextureSize(width, height);
    const texture = _webglUtil.createTexture(gl, debug);
    const tex2d = gl.TEXTURE_2D;
    _webglUtil.callAndCheck(gl, debug, ()=>gl.bindTexture(tex2d, texture));
    _webglUtil.callAndCheck(gl, debug, ()=>gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));
    _webglUtil.callAndCheck(gl, debug, ()=>gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));
    _webglUtil.callAndCheck(gl, debug, ()=>gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));
    _webglUtil.callAndCheck(gl, debug, ()=>gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));
    _webglUtil.callAndCheck(gl, debug, ()=>gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));
    _webglUtil.callAndCheck(gl, debug, ()=>gl.bindTexture(gl.TEXTURE_2D, null));
    return texture;
}
function createFloat32MatrixTexture(gl, debug, rows, columns, textureConfig) {
    const [width, height] = _texUtil.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
    return createAndConfigureTexture(gl, debug, width, height, textureConfig.internalFormatFloat, textureConfig.textureFormatFloat, gl.FLOAT);
}
function createFloat16MatrixTexture(gl, debug, rows, columns, textureConfig) {
    const [width, height] = _texUtil.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
    return createAndConfigureTexture(gl, debug, width, height, textureConfig.internalFormatHalfFloat, textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);
}
function createUnsignedBytesMatrixTexture(gl, debug, rows, columns, textureConfig) {
    const [width, height] = _texUtil.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
    return createAndConfigureTexture(gl, debug, width, height, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);
}
function createPackedMatrixTexture(gl, debug, rows, columns, textureConfig) {
    const [width, height] = _texUtil.getPackedMatrixTextureShapeWidthHeight(rows, columns);
    return createAndConfigureTexture(gl, debug, width, height, textureConfig.internalFormatPackedFloat, gl.RGBA, gl.FLOAT);
}
function createFloat16PackedMatrixTexture(gl, debug, rows, columns, textureConfig) {
    const [width, height] = _texUtil.getPackedMatrixTextureShapeWidthHeight(rows, columns);
    return createAndConfigureTexture(gl, debug, width, height, textureConfig.internalFormatPackedHalfFloat, gl.RGBA, textureConfig.textureTypeHalfFloat);
}
function bindVertexProgramAttributeStreams(gl, debug, program, vertexBuffer) {
    const posOffset = 0; // x is the first buffer element
    const uvOffset = 12; // uv comes after [x y z]
    const stride = 20; // xyz + uv, each entry is 4-byte float.
    _webglUtil.callAndCheck(gl, debug, ()=>gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));
    const success = _webglUtil.bindVertexBufferToProgramAttribute(gl, debug, program, "clipSpacePos", vertexBuffer, 3, stride, posOffset);
    return success && _webglUtil.bindVertexBufferToProgramAttribute(gl, debug, program, "uv", vertexBuffer, 2, stride, uvOffset);
}
function uploadDenseMatrixToTexture(gl, debug, texture, width, height, data, textureConfig) {
    _webglUtil.callAndCheck(gl, debug, ()=>gl.bindTexture(gl.TEXTURE_2D, texture));
    let dataForUpload, texelDataType, internalFormat;
    if (data instanceof Uint8Array) {
        dataForUpload = new Uint8Array(width * height * 4);
        texelDataType = gl.UNSIGNED_BYTE;
        internalFormat = gl.RGBA;
    } else {
        dataForUpload = new Float32Array(width * height * 4);
        texelDataType = gl.FLOAT;
        internalFormat = textureConfig.internalFormatPackedFloat;
    }
    dataForUpload.set(data);
    _webglUtil.callAndCheck(gl, debug, ()=>gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));
    _webglUtil.callAndCheck(gl, debug, ()=>gl.bindTexture(gl.TEXTURE_2D, null));
}
function uploadPixelDataToTexture(gl, debug, texture, pixels) {
    _webglUtil.callAndCheck(gl, debug, ()=>gl.bindTexture(gl.TEXTURE_2D, texture));
    if (pixels.data instanceof Uint8Array) _webglUtil.callAndCheck(gl, debug, ()=>gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));
    else _webglUtil.callAndCheck(gl, debug, ()=>gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));
    _webglUtil.callAndCheck(gl, debug, ()=>gl.bindTexture(gl.TEXTURE_2D, null));
}
function createBufferFromOutputTexture(gl2, debug, rows, columns, textureConfig) {
    // Create and bind the buffer.
    const buffer = gl2.createBuffer();
    _webglUtil.callAndCheck(gl2, debug, ()=>gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));
    // Initialize the buffer to the size of the texture in bytes.
    const bytesPerFloat = 4;
    const valuesPerTexel = 4;
    const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;
    _webglUtil.callAndCheck(gl2, debug, ()=>gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));
    // Enqueue a command on the GPU command queue to copy of texture into the
    // buffer.
    _webglUtil.callAndCheck(gl2, debug, ()=>gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));
    _webglUtil.callAndCheck(gl2, debug, ()=>gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));
    return buffer;
}
function downloadFloat32MatrixFromBuffer(gl, buffer, size) {
    const gl2 = gl;
    const downloadTarget = new Float32Array(size);
    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
    return downloadTarget;
}
function downloadByteEncodedFloatMatrixFromOutputTexture(gl, debug, rows, columns, textureConfig) {
    const [w, h] = _texUtil.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
    const numChannels = 4;
    const downloadTarget = new Uint8Array(_texUtil.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));
    _webglUtil.callAndCheck(gl, debug, ()=>gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));
    // By wrapping the buffer in a Float32Array, we use native browser IEEE 754
    // decoding of the 4 bytes that back each 32 bit float.
    return new Float32Array(downloadTarget.buffer);
}
function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {
    const gl2 = gl;
    const downloadTarget = new Float32Array(_texUtil.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));
    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
    return downloadTarget;
}
function downloadMatrixFromPackedOutputTexture(gl, debug, physicalRows, physicalCols) {
    const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);
    _webglUtil.callAndCheck(gl, debug, ()=>gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));
    return packedRGBA;
}

},{"./glsl_version":"ezjL5","./tex_util":"kHw0Y","./webgl_util":"kgG6J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZupd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compileProgram", ()=>compileProgram);
parcelHelpers.export(exports, "runProgram", ()=>runProgram);
parcelHelpers.export(exports, "makeShaderKey", ()=>makeShaderKey);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _shaderCompiler = require("./shader_compiler");
function compileProgram(gpgpu, program, inputs, output) {
    const userCode = program.userCode;
    const inputInfos = inputs.map((input, i)=>{
        const shapeInfo = {
            logicalShape: input.shape,
            texShape: input.isUniform ? null : input.texData.texShape,
            isUniform: input.isUniform,
            isPacked: input.isUniform ? false : input.texData.isPacked,
            flatOffset: null
        };
        if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) shapeInfo.flatOffset = input.texData.slice.flatOffset;
        return {
            name: program.variableNames[i],
            shapeInfo
        };
    });
    const inShapeInfos = inputInfos.map((x)=>x.shapeInfo);
    const outShapeInfo = {
        logicalShape: output.shape,
        texShape: output.texData.texShape,
        isUniform: false,
        isPacked: output.texData.isPacked,
        flatOffset: null
    };
    const source = _shaderCompiler.makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);
    const webGLProgram = gpgpu.createProgram(source);
    // Add special uniforms (NAN, INFINITY)
    let infLoc = null;
    const nanLoc = gpgpu.getUniformLocation(webGLProgram, "NAN", false);
    if ((0, _tfjsCore.env)().getNumber("WEBGL_VERSION") === 1) infLoc = gpgpu.getUniformLocation(webGLProgram, "INFINITY", false);
    // Add user-defined uniforms
    const uniformLocations = {};
    for(let i = 0; i < program.variableNames.length; i++){
        const varName = program.variableNames[i];
        const shouldThrow = false;
        uniformLocations[varName] = gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);
        uniformLocations[`offset${varName}`] = gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);
    }
    return {
        program,
        source,
        webGLProgram,
        uniformLocations,
        inShapeInfos,
        outShapeInfo,
        infLoc,
        nanLoc
    };
}
function validateBinaryAndProgram(shapeInfos, inputs) {
    if (shapeInfos.length !== inputs.length) throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` + `was executed with ${inputs.length} inputs`);
    shapeInfos.forEach((s, i)=>{
        const shapeA = s.logicalShape;
        const input = inputs[i];
        const shapeB = input.shape;
        if (!(0, _tfjsCore.util).arraysEqual(shapeA, shapeB)) throw Error(`Binary was compiled with different shapes than ` + `the current args. Shapes ${shapeA} and ${shapeB} must match`);
        // The input is uploaded as uniform.
        if (s.isUniform && input.isUniform) return;
        const texShapeA = s.texShape;
        const texShapeB = input.isUniform ? null : input.texData.texShape;
        if (!(0, _tfjsCore.util).arraysEqual(texShapeA, texShapeB)) throw Error(`Binary was compiled with different texture shapes than the` + ` current args. Shape ${texShapeA} and ${texShapeB} must match`);
    });
}
function runProgram(gpgpu, binary, inputs, output, customSetup) {
    validateBinaryAndProgram(binary.inShapeInfos, inputs);
    validateBinaryAndProgram([
        binary.outShapeInfo
    ], [
        output
    ]);
    const outTex = output.texData.texture;
    const outTexShape = output.texData.texShape;
    if (output.texData.isPacked) gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
    else gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
    gpgpu.setProgram(binary.webGLProgram);
    // Set special uniforms (NAN, INFINITY)
    if ((0, _tfjsCore.env)().getNumber("WEBGL_VERSION") === 1) {
        if (binary.infLoc !== null) gpgpu.gl.uniform1f(binary.infLoc, Infinity);
    }
    if (binary.nanLoc !== null) gpgpu.gl.uniform1f(binary.nanLoc, NaN);
    // Set user-defined inputs
    inputs.forEach((input, i)=>{
        const varName = binary.program.variableNames[i];
        const varLoc = binary.uniformLocations[varName];
        const varOffsetLoc = binary.uniformLocations[`offset${varName}`];
        if (varLoc == null) // The compiler inferred that this variable is not used in this shader.
        return;
        if (input.isUniform) {
            // Upload the values of the tensor as uniform.
            if ((0, _tfjsCore.util).sizeFromShape(input.shape) < 2) gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);
            else {
                let vals = input.uniformValues;
                if (!(vals instanceof Float32Array)) vals = new Float32Array(vals);
                gpgpu.gl.uniform1fv(varLoc, vals);
            }
            return;
        }
        // If the input was sliced, upload the flat offset index.
        if (input.texData.slice != null && varOffsetLoc != null) gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);
        gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);
    });
    if (customSetup != null) customSetup(gpgpu, binary.webGLProgram);
    gpgpu.executeProgram();
}
function makeShaderKey(program, inputs, output) {
    let keyInputs = "";
    inputs.concat(output).forEach((x)=>{
        const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0;
        const texShape = x.isUniform ? "uniform" : x.texData.texShape;
        keyInputs += `${x.shape}_${texShape}_${hasOffset}`;
    });
    const keyUserCode = program.userCode;
    let key = program.constructor.name;
    // Fast string concat. See https://jsperf.com/string-concatenation/14.
    key += "_" + keyInputs + "_" + keyUserCode;
    return key;
}

},{"@tensorflow/tfjs-core":"2votT","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2febK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Im2ColPackedProgram", ()=>Im2ColPackedProgram);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("./glsl_version");
class Im2ColPackedProgram {
    constructor(outputShape, inputShape, convInfo){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = outputShape;
        const { filterWidth , inChannels , strideWidth , strideHeight , padInfo , outWidth , dilationWidth , dilationHeight , dataFormat  } = convInfo;
        const { left , top  } = padInfo;
        const itemsPerBlockRow = inChannels * filterWidth;
        const glsl = (0, _glslVersion.getGlslDifferences)();
        const isChannelsLast = dataFormat === "channelsLast";
        const rowDim = isChannelsLast ? 0 : 1;
        const colDim = isChannelsLast ? 1 : 2;
        let unrolled = ``;
        for(let row = 0; row <= 1; row++)for(let col = 0; col <= 1; col++)unrolled += `
          blockIndex = rc.y + ${col};
          pos = rc.x + ${row};

          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {
            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};
            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});

            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {

              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);
              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));

              if(d1 < ${inputShape[colDim]} && d1 >= 0) {

                ch = int(mod(float(pos), ${inChannels}.));

                if (${isChannelsLast}) {
                  innerDims = vec2(d1, ch);
                  result[${row * 2 + col}] = getChannel(
                    getA(d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${row * 2 + col}] = getChannel(
                    getA(ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
        this.userCode = `
      void main() {
        ivec2 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${unrolled}

        ${glsl.output} = result;
      }
    `;
    }
}

},{"./glsl_version":"ezjL5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ajKiQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "LRNProgram", ()=>LRNProgram);
class LRNProgram {
    constructor(xShape, radius, bias, alpha, beta){
        this.variableNames = [
            "x"
        ];
        this.outputShape = [];
        const rad = radius;
        const maxD = xShape[3] - 1;
        this.outputShape = xShape;
        // optimize pow(bias + alpha * sum, -beta)
        // src: https://github.com/tensorflow/tensorflow/..
        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
        // tensorflow/core/kernels/mkl_lrn_op.cc#L320
        let powOperator;
        const basis = `float(${bias}) + float(${alpha}) * sum`;
        if (beta === 0.5) powOperator = `inversesqrt(${basis})`;
        else if (beta === 1.0) powOperator = `1.0/(${basis})`;
        else powOperator = `exp(log(${basis}) * float(-${beta}));`;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${rad}; j <= ${rad}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${maxD}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${powOperator};
        setOutput(val);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eHAZO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "LRNGradProgram", ()=>LRNGradProgram);
class LRNGradProgram {
    constructor(inputShape, depthRadius, bias, alpha, beta){
        this.variableNames = [
            "inputImage",
            "outputImage",
            "dy"
        ];
        this.outputShape = [];
        this.outputShape = inputShape;
        this.depth = inputShape[3];
        this.depthRadius = depthRadius;
        this.bias = bias;
        this.alpha = alpha;
        this.beta = beta;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${depthRadius})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${depthRadius} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${alpha}) * norm + float(${bias});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${alpha})
                * float(${beta})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${beta});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eoWeF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google LLC All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "LRNPackedProgram", ()=>LRNPackedProgram);
class LRNPackedProgram {
    constructor(xShape, radius, bias, alpha, beta){
        this.variableNames = [
            "x"
        ];
        this.outputShape = [];
        this.packedInputs = true;
        this.packedOutput = true;
        const rad = radius;
        const maxD = xShape[3] - 1;
        this.outputShape = xShape;
        // optimize pow(bias + alpha * sum, -beta)
        // src: https://github.com/tensorflow/tensorflow/..
        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
        // tensorflow/core/kernels/mkl_lrn_op.cc#L320
        let powOperator;
        const basis = `float(${bias}) + float(${alpha}) * sum`;
        if (beta === 0.5) powOperator = `inversesqrt(${basis})`;
        else if (beta === 1.0) powOperator = `1.0/(${basis})`;
        else powOperator = `exp(log(${basis}) * float(-${beta}));`;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${rad};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${rad}; j <= ${rad}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${powOperator};
        setOutput(result);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgDm3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "MaxPool2DBackpropProgram", ()=>MaxPool2DBackpropProgram);
parcelHelpers.export(exports, "MaxPool3DBackpropProgram", ()=>MaxPool3DBackpropProgram);
class MaxPool2DBackpropProgram {
    constructor(convInfo){
        this.variableNames = [
            "dy",
            "maxPos"
        ];
        this.outputShape = convInfo.inShape;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;
        this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
          wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${effectiveFilterWidth} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class MaxPool3DBackpropProgram {
    constructor(convInfo){
        this.variableNames = [
            "dy",
            "maxPos"
        ];
        this.outputShape = convInfo.inShape;
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;
        this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
           wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${lastIndex} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                  wR * ${effectiveFilterWidth} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jHB48":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "MatMulPackedProgram", ()=>MatMulPackedProgram);
class MatMulPackedProgram {
    constructor(aShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false){
        this.variableNames = [
            "matrixA",
            "matrixB"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = outputShape;
        const sharedDim = transposeA ? aShape[1] : aShape[2];
        const sharedDimensionPacked = Math.ceil(sharedDim / 2);
        const aSample = transposeA ? "i * 2, rc.y" : "rc.y, i * 2";
        const bSample = transposeB ? "rc.z, i * 2" : "i * 2, rc.z";
        const aSwizzle = transposeA ? [
            "a.xxyy",
            "a.zzww"
        ] : [
            "a.xxzz",
            "a.yyww"
        ];
        const bSwizzle = transposeB ? [
            "b.xzxz",
            "b.ywyw"
        ] : [
            "b.xyxy",
            "b.zwzw"
        ];
        let activationSnippet = "", applyActivationSnippet = "";
        if (activation) {
            if (hasPreluActivation) activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
            else activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
            applyActivationSnippet = `result = activation(result);`;
        }
        const addBiasSnippet = addBias ? "result += getBiasAtOutCoords();" : "";
        if (addBias) this.variableNames.push("bias");
        if (hasPreluActivation) this.variableNames.push("preluActivationWeights");
        this.userCode = `
      ${activationSnippet}

      const float sharedDimension = ${sharedDimensionPacked}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${sharedDimensionPacked}; i++) {
          vec4 a = getMatrixA(rc.x, ${aSample});
          vec4 b = getMatrixB(rc.x, ${bSample});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${aSwizzle[0]} * ${bSwizzle[0]});
          result += (${aSwizzle[1]} * ${bSwizzle[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${addBiasSnippet}

        ${applyActivationSnippet}

        setOutput(result);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6m2pm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "MultinomialProgram", ()=>MultinomialProgram);
class MultinomialProgram {
    constructor(batchSize, numOutcomes, numSamples){
        this.variableNames = [
            "probs"
        ];
        this.outputShape = [
            batchSize,
            numSamples
        ];
        this.userCode = `
      uniform float seed;

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${numOutcomes - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${numOutcomes - 1}));
      }
    `;
    }
    getCustomSetupFunc(seed) {
        return (gpgpu, webGLProgram)=>{
            if (this.seedLoc == null) this.seedLoc = gpgpu.getUniformLocation(webGLProgram, "seed");
            gpgpu.gl.uniform1f(this.seedLoc, seed);
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h7ddI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "OneHotProgram", ()=>OneHotProgram);
class OneHotProgram {
    constructor(numIndices, depth, onValue, offValue){
        this.variableNames = [
            "indices"
        ];
        this.outputShape = [
            numIndices,
            depth
        ];
        this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${offValue}), float(${onValue}),
                      float(index == coords.y)));
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f0rjB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PackProgram", ()=>PackProgram);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _packingUtil = require("./packing_util");
var _shaderCompiler = require("./shader_compiler");
class PackProgram {
    constructor(outputShape){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = false;
        this.packedOutput = true;
        // Only input / output 3D tensors.
        this.outputShape = outputShape;
        const rank = outputShape.length;
        if (rank === 0) this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
        else {
            const channels = (0, _packingUtil.getChannels)("rc", rank);
            const dtype = (0, _shaderCompiler.getCoordsDataType)(rank);
            const outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);
            const setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);
            const output = getOutput(outputShape, channels);
            this.userCode = `
        void main() {
          ${dtype} rc = getOutputCoords();

          if(${outOfBoundsCondition}) {
            setOutput(vec4(0));
          } else {
            ${setup}

            setOutput(vec4(${output}));
          }
        }
      `;
        }
    }
}
function getSourceCoordsArr(rank, dims) {
    const coords = [];
    for(let row = 0; row <= 1; row++)for(let col = 0; col <= 1; col++){
        let coord = `${row === 0 ? "r" : "rp1"}, ${col === 0 ? "c" : "cp1"}`;
        for(let d = 2; d < rank; d++)coord = `${dims[dims.length - 1 - d]},` + coord;
        coords.push(coord);
    }
    return coords;
}
function getOutOfBoundsCondition(rank, shape, dims) {
    if (rank === 1) return `rc > ${shape[0]}`;
    let cond = "";
    for(let i = rank - 2; i < rank; i++){
        cond += `${dims[i]} >= ${shape[i]}`;
        if (i < rank - 1) cond += "||";
    }
    return cond;
}
function getSetup(rank, cols, rows, dims) {
    if (rank === 1) return "";
    const innerDims = dims.slice(-2);
    return `
    int r = ${innerDims[0]};
    int c = ${innerDims[1]};
    int rp1 = r + 1;
    int cp1 = c + 1;

    bool cEdge = cp1 >= ${cols};
    bool rEdge = rp1 >= ${rows};
  `;
}
function getOutput(shape, dims) {
    const rank = shape.length;
    const sourceCoords = getSourceCoordsArr(rank, dims);
    if (rank === 1) return `getA(rc),
            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),
            0, 0`;
    return `getA(${sourceCoords[0]}),
          cEdge ? 0. : getA(${sourceCoords[1]}),
          rEdge ? 0. : getA(${sourceCoords[2]}),
          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;
}

},{"./packing_util":"gITMM","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3k7eK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PadProgram", ()=>PadProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class PadProgram {
    constructor(xShape, paddings, constantValue){
        this.variableNames = [
            "x"
        ];
        this.outputShape = paddings.map((p, i)=>p[0] + xShape[i] + p[1]);
        const rank = xShape.length;
        const type = (0, _shaderCompiler.getCoordsDataType)(rank);
        const start = paddings.map((p)=>p[0]).join(",");
        const end = paddings.map((p, i)=>p[0] + xShape[i]).join(",");
        const unpackedCoords = [
            "coords[0]",
            "coords[1]",
            "coords[2]",
            "coords[3]"
        ].slice(0, rank);
        if (rank === 1) {
            this.userCode = `
        int start = ${start};
        int end = ${end};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(float(${constantValue}));
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
            return;
        }
        this.userCode = `
      ${type} start = ${type}(${start});
      ${type} end = ${type}(${end});

      void main() {
        ${type} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(float(${constantValue}));
        } else {
          ${type} coords = outC - start;
          setOutput(getX(${unpackedCoords}));
        }
      }
    `;
    }
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBeqd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PadPackedProgram", ()=>PadPackedProgram);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _packingUtil = require("./packing_util");
var _shaderCompiler = require("./shader_compiler");
class PadPackedProgram {
    constructor(xShape, paddings, constantValue){
        this.variableNames = [
            "x"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = paddings.map((p, i)=>p[0] + xShape[i] + p[1]);
        const rank = xShape.length;
        const dtype = (0, _shaderCompiler.getCoordsDataType)(rank);
        const start = paddings.map((p)=>p[0]).join(",");
        const end = paddings.map((p, i)=>p[0] + xShape[i]).join(",");
        const coords = (0, _packingUtil.getChannels)("rc", rank);
        const source = (0, _packingUtil.getChannels)("source", rank);
        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;
        const innerDims = rank === 1 ? "source" : `vec2(${source.slice(-2).join()})`;
        const componentSetup = [
            `${dtype} rc = outputLoc;`,
            `${coords[rank - 1]} += 1;
       if(${cLimit}) {
      `,
            rank === 1 ? "" : `}
       rc = outputLoc;
       ${coords[rank - 2]} += 1;
       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,
            rank === 1 ? "" : `  ${coords[rank - 1]} += 1;
         if(${cLimit}) {`
        ];
        const paddingArea = rank === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
        let mainLoop = "";
        for(let i = 0, j = rank === 1 ? 2 : 4; i < j; i++)mainLoop += `
        ${componentSetup[i]}
        if (${paddingArea}) {
          result[${i}] = float(${constantValue});
        } else {
          ${dtype} source = rc - start;
          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});
        }
      `;
        mainLoop += rank === 1 ? `} ` : `}}`;
        this.userCode = `
      const ${dtype} start = ${dtype}(${start});
      const ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${mainLoop}
        setOutput(result);
      }
    `;
    }
}

},{"./packing_util":"gITMM","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kbW82":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "Pool2DProgram", ()=>Pool2DProgram);
parcelHelpers.export(exports, "Pool3DProgram", ()=>Pool3DProgram);
class Pool2DProgram {
    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false){
        this.variableNames = [
            "x"
        ];
        if (poolType === "avg" && computePositions) throw new Error("Cannot compute positions for average pool.");
        const filterWidth = convInfo.filterWidth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        this.outputShape = convInfo.outShape;
        const isAvgPool = poolType === "avg";
        const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
        const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
        let initializationValue = "0.0";
        if (!isAvgPool) // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
        initializationValue = "-1.0 / 1e-20";
        if (computePositions) {
            const compareOp = ">=";
            this.userCode = `
        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
        const ivec2 pads = ivec2(${padTop}, ${padLeft});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${compareOp} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${flattenPositions ? includeBatchInIndex ? batchFlattenPositionStr : flattenPositionStr : `wR * ${effectiveFilterWidth} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
            return;
        }
        const compareOp1 = "max";
        let returnValue = `${poolType}(${poolType}(${poolType}(` + "minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
        if (poolType === "avg") returnValue = `avgValue / count`;
        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
        const filterWidthVec4Remainder = filterWidth % 4;
        const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp1}(values, minMaxValue);
      }
    `;
        this.userCode = `
      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
            int xC = xCCorner + wC * ${dilationWidth};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)
            );

            ${updateSnippet}
          }

          int xC = xCCorner + ${filterWidthNearestVec4};
          if (${filterWidthVec4Remainder === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              initializationValue
            );

            ${updateSnippet}
          }
        }
        setOutput(${returnValue});
      }
    `;
    }
}
class Pool3DProgram {
    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false){
        this.variableNames = [
            "x"
        ];
        if (poolType === "avg" && computePositions) throw new Error("Cannot compute positions for average pool.");
        const filterWidth = convInfo.filterWidth;
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = convInfo.padInfo.front;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        this.outputShape = convInfo.outShape;
        const isAvgPool = poolType === "avg";
        let initializationValue = "0.0";
        if (!isAvgPool) // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
        initializationValue = "-1.0 / 1e-20";
        if (computePositions) {
            const compareOp = ">=";
            this.userCode = `
        const ivec3 strides =
            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${effectiveFilterDepth};
              wD += ${dilationDepth}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${convInfo.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${effectiveFilterHeight};
                wR += ${dilationHeight}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${effectiveFilterWidth};
                  wC += ${dilationWidth}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${compareOp} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${flattenPositions ? includeBatchInIndex ? `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                      wR * ${effectiveFilterWidth} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
            return;
        }
        const compareOp1 = "max";
        let returnValue = `${poolType}(${poolType}(${poolType}(` + "minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
        if (poolType === "avg") returnValue = `avgValue / count`;
        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
        const filterWidthVec4Remainder = filterWidth % 4;
        const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp1}(values, minMaxValue);
      }
    `;
        this.userCode = `
      const ivec3 strides =
        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
              int xC = xCCorner + wC * ${dilationWidth};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)
              );

              ${updateSnippet}
            }

            int xC = xCCorner + ${filterWidthNearestVec4};
            if (${filterWidthVec4Remainder === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                initializationValue
              );

              ${updateSnippet}
            }
          }
          setOutput(${returnValue});
        }
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d0Ozz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ReduceProgram", ()=>ReduceProgram);
class ReduceProgram {
    constructor(reduceInfo, reduceType){
        this.variableNames = [
            "x"
        ];
        const windowSize = reduceInfo.windowSize;
        const batchSize = reduceInfo.batchSize;
        const inSize = reduceInfo.inSize;
        const outSize = Math.ceil(inSize / windowSize);
        this.outputShape = [
            batchSize,
            outSize
        ];
        let initializationValue = "0.0";
        let compareOp = ``;
        if (reduceType === "prod") initializationValue = "1.0";
        else if (reduceType === "min") {
            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
            initializationValue = "1.0 / 1e-20";
            compareOp = `min`;
        } else if (reduceType === "max") {
            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
            initializationValue = "-1.0 / 1e-20";
            compareOp = `max`;
        }
        let returnValue = `${reduceType}(${reduceType}(${reduceType}(` + "minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
        if (reduceType === "sum") returnValue = `sumValue`;
        else if (reduceType === "prod") returnValue = `prodValue`;
        else if (reduceType === "all") returnValue = `allValue`;
        else if (reduceType === "any") returnValue = `anyValue`;
        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
        const windowSizeVec4Remainder = windowSize % 4;
        let updateSnippet = `
      if (${reduceType === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${reduceType === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
        let vecType = `vec4`;
        if (reduceType === "all") {
            initializationValue = "1.0";
            updateSnippet = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `;
            vecType = `bvec4`;
        } else if (reduceType === "any") {
            initializationValue = "0.0";
            updateSnippet = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `;
            vecType = `bvec4`;
        }
        let checkOutOfBounds = "";
        if (inSize % windowSize > 0) checkOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
        this.userCode = `
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${checkOutOfBounds}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        vec4 minMaxValue = vec4(${initializationValue});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fUKmz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ReshapePackedProgram", ()=>ReshapePackedProgram);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompilerUtil = require("./shader_compiler_util");
class ReshapePackedProgram {
    constructor(outputShape, inputShape){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = outputShape;
        let mainLoop = ``;
        for(let i = 0; i < 4; i++){
            let thisRC = `thisRC = rc;`;
            if (i % 2 === 1) thisRC += `thisRC.z += 1;`;
            if (i > 1) thisRC += `thisRC.y += 1;`;
            mainLoop += `
        ${thisRC}
        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${i}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${i > 0 ? "}" : ""}
      `;
        }
        this.userCode = `
      ${getReshapedInputCoords(inputShape)}
      ${_shaderCompilerUtil.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${outputShape[1]};
        int cols = ${outputShape[2]};

        ${mainLoop}

        setOutput(result);
      }
    `;
    }
}
function getReshapedInputCoords(shape) {
    const coordsFromIndexSnippet = _shaderCompilerUtil.getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d"
    ], shape);
    return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
}

},{"./shader_compiler_util":"i2KGv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ebJU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ResizeBilinearBackpropProgram", ()=>ResizeBilinearBackpropProgram);
class ResizeBilinearBackpropProgram {
    constructor(dy, x, alignCorners){
        this.variableNames = [
            "dy"
        ];
        this.outputShape = [];
        this.outputShape = x.shape;
        const [, xHeight, xWidth, ] = x.shape;
        const [, yHeight, yWidth] = dy.shape;
        // In the backwards pass, we want to find the pixels that were generated for
        // each pixel in the input image the forward pass and add the corresponding
        // coefficient from dy to the gradient (with some interpolation).
        const effectiveXSize = [
            alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,
            alignCorners && yWidth > 1 ? xWidth - 1 : xWidth
        ];
        const effectiveYSize = [
            alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,
            alignCorners && yWidth > 1 ? yWidth - 1 : yWidth
        ];
        const heightScale = effectiveXSize[0] / effectiveYSize[0];
        const widthScale = effectiveXSize[1] / effectiveYSize[1];
        const invHeightScale = 1 / heightScale;
        const invWidthScale = 1 / widthScale;
        // This defines the size of the window of values around a particular
        // index in dy that we want to search for contributions to dx.
        const winHeight = Math.ceil(invHeightScale) * 2 + 2;
        const winWidth = Math.ceil(invWidthScale) * 2 + 2;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"66cHY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ResizeBilinearProgram", ()=>ResizeBilinearProgram);
class ResizeBilinearProgram {
    constructor(inputShape, newHeight, newWidth, alignCorners){
        this.variableNames = [
            "A"
        ];
        this.outputShape = [];
        const [batch, oldHeight, oldWidth, depth] = inputShape;
        this.outputShape = [
            batch,
            newHeight,
            newWidth,
            depth
        ];
        const effectiveInSize = [
            alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,
            alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth
        ];
        const effectiveOutSize = [
            alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,
            alignCorners && newWidth > 1 ? newWidth - 1 : newWidth
        ];
        this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f1qoO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ResizeBilinearPackedProgram", ()=>ResizeBilinearPackedProgram);
class ResizeBilinearPackedProgram {
    constructor(inputShape, newHeight, newWidth, alignCorners){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = [];
        const [batch, oldHeight, oldWidth, depth] = inputShape;
        this.outputShape = [
            batch,
            newHeight,
            newWidth,
            depth
        ];
        const effectiveInSize = [
            alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,
            alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth
        ];
        const effectiveOutSize = [
            alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,
            alignCorners && newWidth > 1 ? newWidth - 1 : newWidth
        ];
        this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,
                                     ${oldWidth}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${depth - 1};
        bool hasNextRow = coords.z < ${newWidth - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5YaWi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ResizeNearestNeigborBackpropProgram", ()=>ResizeNearestNeigborBackpropProgram);
class ResizeNearestNeigborBackpropProgram {
    constructor(dy, x, alignCorners){
        this.variableNames = [
            "dy"
        ];
        this.outputShape = [];
        this.outputShape = x.shape;
        const [, xHeight, xWidth, ] = x.shape;
        const [, yHeight, yWidth] = dy.shape;
        // In the backwards pass, we want to find the pixels that were generated for
        // each pixel in the input image the forward pass and add the corresponding
        // coefficient from dy to the gradient (with some interpolation).
        const effectiveXSize = [
            alignCorners && yHeight > 1 ? xHeight - 1 : xHeight,
            alignCorners && yWidth > 1 ? xWidth - 1 : xWidth
        ];
        const effectiveYSize = [
            alignCorners && yHeight > 1 ? yHeight - 1 : yHeight,
            alignCorners && yWidth > 1 ? yWidth - 1 : yWidth
        ];
        const heightScale = effectiveXSize[0] / effectiveYSize[0];
        const widthScale = effectiveXSize[1] / effectiveYSize[1];
        const invHeightScale = 1 / heightScale;
        const invWidthScale = 1 / widthScale;
        // This defines the size of the window of values around a particular
        // index in dy that we want to search for contributions to dx.
        const winHeight = Math.ceil(invHeightScale) * 2 + 2;
        const winWidth = Math.ceil(invWidthScale) * 2 + 2;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float sourceFracRow =
              float(${effectiveXSize[0]}) *
                (float(dyR) / float(${effectiveYSize[0]}));

            float sourceFracCol =
                float(${effectiveXSize[1]}) *
                  (float(dyC) / float(${effectiveYSize[1]}));

            int sourceNearestRow = int(min(
                float(int(${xHeight}) - 1),
                ${alignCorners} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${xWidth}) - 1),
                ${alignCorners} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6U6MS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "ResizeNearestNeighborProgram", ()=>ResizeNearestNeighborProgram);
class ResizeNearestNeighborProgram {
    constructor(inputShape, newHeight, newWidth, alignCorners){
        this.variableNames = [
            "A"
        ];
        this.outputShape = [];
        const [batch, oldHeight, oldWidth, depth] = inputShape;
        this.outputShape = [
            batch,
            newHeight,
            newWidth,
            depth
        ];
        const effectiveInSize = [
            alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight,
            alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth
        ];
        const effectiveOutSize = [
            alignCorners && newHeight > 1 ? newHeight - 1 : newHeight,
            alignCorners && newWidth > 1 ? newWidth - 1 : newWidth
        ];
        // When align corners is false, we rounds the value with floor.
        const roundBase = alignCorners ? "0.5" : "0.0";
        this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));

        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Kf49":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ReverseProgram", ()=>ReverseProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class ReverseProgram {
    constructor(xShape, axis){
        this.variableNames = [
            "x"
        ];
        const rank = xShape.length;
        if (rank > 4) throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
        this.outputShape = xShape;
        if (rank === 1) {
            this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${xShape[0]} - coord - 1));
        }
      `;
            return;
        }
        const getInCoord = (i)=>{
            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) return `${xShape[i]} - coords[${i}] - 1`;
            return `coords[${i}]`;
        };
        const inCoords = xShape.map((_, i)=>getInCoord(i)).join(",");
        const type = (0, _shaderCompiler.getCoordsDataType)(rank);
        this.userCode = `
      void main() {
        ${type} coords = getOutputCoords();
        setOutput(getX(${inCoords}));
      }
    `;
    }
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"issP1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ReversePackedProgram", ()=>ReversePackedProgram);
/**
 * @license
 * Copyright 2019 Google LLC All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _packingUtil = require("./packing_util");
var _shaderCompiler = require("./shader_compiler");
class ReversePackedProgram {
    constructor(xShape, axis){
        this.variableNames = [
            "x"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        const rank = xShape.length;
        if (rank > 4) throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
        this.outputShape = xShape;
        const channels = (0, _packingUtil.getChannels)("rc", rank);
        const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;
        const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;
        const type = (0, _shaderCompiler.getCoordsDataType)(rank);
        if (rank === 1) this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${xShape[0]} - rc - 1),
            ${xShape[0]} - rc - 1);
          if(${nextColumn}){
              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),
                ${xShape[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `;
        else this.userCode = `
        void main() {
          ${type} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${getR(channels.slice())};
          if(${nextColumn}){
            result.g = ${getG(channels.slice())};
          }
          if(${nextRow}) {
            result.b = ${getB(channels.slice())};
            if(${nextColumn}) {
              result.a = ${getA(channels.slice())};
            }
          }
          setOutput(result);
        }
    `;
        function getR(channels) {
            return getChannel(channels);
        }
        function getG(channels) {
            channels[rank - 1] = "(" + channels[rank - 1] + ` + 1)`;
            return getChannel(channels);
        }
        function getB(channels) {
            channels[rank - 2] = "(" + channels[rank - 2] + ` + 1)`;
            return getChannel(channels);
        }
        function getA(channels) {
            channels[rank - 1] = "(" + channels[rank - 1] + ` + 1)`;
            channels[rank - 2] = "(" + channels[rank - 2] + ` + 1)`;
            return getChannel(channels);
        }
        function getChannel(channels) {
            const inCoordsArray = xShape.map((_, i)=>getInCoord(i, channels));
            const inCoords = inCoordsArray.join(",");
            const innerDims = inCoordsArray.slice(-2).join(",");
            return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;
        }
        function getInCoord(i, channels1) {
            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) return `${xShape[i]} - ${channels1[i]} - 1`;
            else return `${channels1[i]}`;
        }
    }
}

},{"./packing_util":"gITMM","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3yres":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ScatterProgram", ()=>ScatterProgram);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class ScatterProgram {
    constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true){
        this.variableNames = [
            "updates",
            "indices",
            "defaultValue"
        ];
        this.outputShape = shape;
        const stridesType = (0, _shaderCompiler.getCoordsDataType)(strides.length);
        const dtype = (0, _shaderCompiler.getCoordsDataType)(shape.length);
        let indicesString = "";
        if (indicesRank === 1) indicesString = "i";
        else if (indicesRank === 2) indicesString = "i, j";
        const indicesSnippet = `getIndices(${indicesString})`;
        let updatesString = "";
        if (updatesRank === 1) updatesString = "i";
        else if (updatesRank === 2) updatesString = "i, coords[1]";
        const updatesSnippet = `getUpdates(${updatesString})`;
        const strideString = sliceDim > 1 ? "strides[j]" : "strides";
        this.userCode = `
        ${stridesType} strides = ${stridesType}(${strides});

        void main() {
          ${dtype} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${updateSize}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${sliceDim}; j++) {
              int index = round(${indicesSnippet});
              flattenedIndex += index * ${strideString};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${updatesSnippet};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
    }
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59LpL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "SegmentOpProgram", ()=>SegmentOpProgram);
class SegmentOpProgram {
    constructor(segOpInfo, segOpType){
        this.variableNames = [
            "x",
            "segmentIds"
        ];
        const windowSize = segOpInfo.windowSize;
        const batchSize = segOpInfo.batchSize;
        const inSize = segOpInfo.inSize;
        const numSegments = segOpInfo.numSegments;
        const outSize = numSegments * Math.ceil(inSize / windowSize);
        this.outputShape = [
            batchSize,
            outSize
        ];
        const initializationValue = "0.0";
        const returnValue = `sumValue`;
        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
        const windowSizeVec4Remainder = windowSize % 4;
        const updateSnippet = `
        sumValue += dot(values, segFilter);
    `;
        let checkValueOutOfBounds = "";
        if (inSize % windowSize > 0) checkValueOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
        let checkSegmentIdOutOfBounds = "";
        if (inSize % windowSize > 0) checkSegmentIdOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return -1.0;
        }
      `;
        this.userCode = `
      const float initializationValue = ${initializationValue};

      float getValue(int batch, int inIdx) {
        ${checkValueOutOfBounds}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${checkSegmentIdOutOfBounds}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${numSegments})) * float(${windowSize}));
        int currentSeg = int(mod(float(outIdx), float(${numSegments})));

        float sumValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"vjVWz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectProgram", ()=>SelectProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class SelectProgram {
    constructor(cRank, shape, rank){
        this.variableNames = [
            "c",
            "a",
            "b"
        ];
        this.outputShape = shape;
        let cCoords;
        let abCoords;
        if (rank > 4) throw Error(`Where for rank ${rank} is not yet supported`);
        if (rank === 1) {
            abCoords = `resRC`;
            cCoords = `resRC`;
        } else {
            const currentCoords = [
                "resRC.x",
                "resRC.y",
                "resRC.z",
                "resRC.w"
            ];
            const cCoordVars = [];
            const abCoordVars = [];
            for(let i = 0; i < shape.length; i++){
                abCoordVars.push(`${currentCoords[i]}`);
                if (i < cRank) cCoordVars.push(`${currentCoords[i]}`);
            }
            cCoords = cCoordVars.join();
            abCoords = abCoordVars.join();
        }
        const dtype = (0, _shaderCompiler.getCoordsDataType)(rank);
        this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        float cVal = getC(${cCoords});
        if (cVal >= 1.0) {
          setOutput(getA(${abCoords}));
        } else {
          setOutput(getB(${abCoords}));
        }
      }
    `;
    }
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9egzV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SliceProgram", ()=>SliceProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class SliceProgram {
    constructor(destSize){
        this.variableNames = [
            "source"
        ];
        this.outputShape = destSize;
        this.rank = destSize.length;
        const dtype = (0, _shaderCompiler.getCoordsDataType)(this.rank);
        const uniformPart = `uniform int start[${this.rank}];`;
        const sourceCoords = getCoords(this.rank);
        let body;
        const coordSum = destSize.map((_, i)=>{
            return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;
        });
        body = `
        ${dtype} sourceLoc;
        ${dtype} coords = getOutputCoords();
        ${coordSum.join("\n")}
      `;
        this.userCode = `
      ${uniformPart}
      void main() {
        ${body}
        setOutput(getSource(${sourceCoords}));
      }
    `;
    }
    getCustomSetupFunc(start) {
        if (start.length !== this.rank) throw Error(`The rank (${this.rank}) of the program must match the ` + `length of start (${start.length})`);
        return (gpgpu, webGLProgram)=>{
            if (this.startLoc == null) {
                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, "start");
                if (this.startLoc == null) // This means the compiler has optimized and realized it doesn't need
                // the uniform.
                return;
            }
            gpgpu.gl.uniform1iv(this.startLoc, start);
        };
    }
}
const coords = [
    "x",
    "y",
    "z",
    "w",
    "u",
    "v"
];
function getCoords(rank) {
    if (rank === 1) return "sourceLoc";
    else if (rank <= 6) return coords.slice(0, rank).map((x)=>"sourceLoc." + x).join(",");
    else throw Error(`Slicing for rank ${rank} is not yet supported`);
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jpCP5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlicePackedProgram", ()=>SlicePackedProgram);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _packingUtil = require("./packing_util");
var _shaderCompiler = require("./shader_compiler");
class SlicePackedProgram {
    constructor(destSize){
        this.variableNames = [
            "source"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = destSize;
        this.rank = destSize.length;
        const dtype = (0, _shaderCompiler.getCoordsDataType)(this.rank);
        const coords = (0, _packingUtil.getChannels)("coords", this.rank);
        const sourceLoc = (0, _packingUtil.getChannels)("sourceLoc", this.rank);
        const innerDims = this.rank === 1 ? "sourceLoc" : `vec2(${sourceLoc.slice(-2).join()})`;
        const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;
        const upperRow = `
      result.x = ${getChannel};
      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
        ++${sourceLoc[this.rank - 1]};
        result.y = ${getChannel};
        --${sourceLoc[this.rank - 1]};
      }
    `;
        const lowerRow = this.rank === 1 ? "" : `
      --${coords[this.rank - 1]};
      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {
        ++${sourceLoc[this.rank - 2]};
        result.z = ${getChannel};
        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
          ++${sourceLoc[this.rank - 1]};
          result.w = ${getChannel};
        }
      }
    `;
        const sourceLocSetup = this.rank <= 4 ? `sourceLoc = coords +
            ${dtype}(${destSize.map((_, i)=>`start[${i}]`).join()});` : destSize.map((_, i)=>`${sourceLoc[i]} = ${coords[i]} + start[${i}];`).join("\n");
        this.userCode = `
      uniform int start[${this.rank}];
      void main() {
        ${dtype} coords = getOutputCoords();
        ${dtype} sourceLoc;
        ${sourceLocSetup}
        vec4 result = vec4(0.);
        ${upperRow}
        ${lowerRow}
        setOutput(result);
      }
    `;
    }
    getCustomSetupFunc(start) {
        if (start.length !== this.rank) throw Error(`The rank (${this.rank}) of the program must match the ` + `length of start (${start.length})`);
        return (gpgpu, webGLProgram)=>{
            if (this.startLoc == null) {
                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, "start");
                if (this.startLoc == null) // This means the compiler has optimized and realized it doesn't need
                // the uniform.
                return;
            }
            gpgpu.gl.uniform1iv(this.startLoc, start);
        };
    }
}

},{"./packing_util":"gITMM","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"adQ4l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StridedSliceProgram", ()=>StridedSliceProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class StridedSliceProgram {
    constructor(begin, strides, size){
        this.variableNames = [
            "x"
        ];
        this.outputShape = size;
        const rank = size.length;
        const inputDtype = (0, _shaderCompiler.getCoordsDataType)(size.length);
        const dtype = (0, _shaderCompiler.getCoordsDataType)(size.length);
        let newCoords = "";
        if (rank === 1) newCoords = "coords * strides + begin";
        else {
            let outputAxis = 0;
            newCoords = size.map((_, i)=>{
                outputAxis++;
                return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;
            }).join(",");
        }
        this.userCode = `
      ${inputDtype} begin = ${inputDtype}(${begin});
      ${inputDtype} strides = ${inputDtype}(${strides});

      void main() {
        ${dtype} coords = getOutputCoords();
        setOutput(getX(${newCoords}));
      }
    `;
    }
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"FEhWm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TextureManager", ()=>TextureManager);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _texUtil = require("./tex_util");
class TextureManager {
    constructor(gpgpu){
        this.gpgpu = gpgpu;
        this.numUsedTextures = 0;
        this.numFreeTextures = 0;
        this.freeTextures = {};
        this.logEnabled = false;
        this.usedTextures = {};
    }
    acquireTexture(shapeRC, usage, isPacked) {
        const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);
        const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);
        if (!(shapeKey in this.freeTextures)) this.freeTextures[shapeKey] = [];
        if (!(shapeKey in this.usedTextures)) this.usedTextures[shapeKey] = [];
        if (this.freeTextures[shapeKey].length > 0) {
            this.numFreeTextures--;
            this.numUsedTextures++;
            this.log();
            const newTexture = this.freeTextures[shapeKey].shift();
            this.usedTextures[shapeKey].push(newTexture);
            return newTexture;
        }
        this.numUsedTextures++;
        this.log();
        let newTexture1;
        if (physicalTexType === (0, _texUtil.PhysicalTextureType).PACKED_2X2_FLOAT32) newTexture1 = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);
        else if (physicalTexType === (0, _texUtil.PhysicalTextureType).PACKED_2X2_FLOAT16) newTexture1 = this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);
        else if (physicalTexType === (0, _texUtil.PhysicalTextureType).UNPACKED_FLOAT32) newTexture1 = this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);
        else if (physicalTexType === (0, _texUtil.PhysicalTextureType).UNPACKED_FLOAT16) newTexture1 = this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);
        else if (physicalTexType === (0, _texUtil.PhysicalTextureType).PACKED_4X1_UNSIGNED_BYTE) newTexture1 = this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);
        this.usedTextures[shapeKey].push(newTexture1);
        return newTexture1;
    }
    releaseTexture(texture, shape, logicalTexType, isPacked) {
        if (this.freeTextures == null) // Already disposed.
        return;
        const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);
        const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);
        if (!(shapeKey in this.freeTextures)) this.freeTextures[shapeKey] = [];
        this.freeTextures[shapeKey].push(texture);
        this.numFreeTextures++;
        this.numUsedTextures--;
        const texList = this.usedTextures[shapeKey];
        const texIndex = texList.indexOf(texture);
        if (texIndex < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
        texList.splice(texIndex, 1);
        this.log();
    }
    log() {
        if (!this.logEnabled) return;
        const total = this.numFreeTextures + this.numUsedTextures;
        console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);
    }
    getNumUsedTextures() {
        return this.numUsedTextures;
    }
    getNumFreeTextures() {
        return this.numFreeTextures;
    }
    dispose() {
        if (this.freeTextures == null) // Already disposed.
        return;
        for(const texShape in this.freeTextures)this.freeTextures[texShape].forEach((tex)=>{
            this.gpgpu.deleteMatrixTexture(tex);
        });
        for(const texShape1 in this.usedTextures)this.usedTextures[texShape1].forEach((tex)=>{
            this.gpgpu.deleteMatrixTexture(tex);
        });
        this.freeTextures = null;
        this.usedTextures = null;
        this.numUsedTextures = 0;
        this.numFreeTextures = 0;
    }
}
function getPhysicalTextureForRendering(isPacked) {
    if ((0, _tfjsCore.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")) {
        if (isPacked) return (0, _texUtil.PhysicalTextureType).PACKED_2X2_FLOAT32;
        return (0, _texUtil.PhysicalTextureType).UNPACKED_FLOAT32;
    }
    if (isPacked) return (0, _texUtil.PhysicalTextureType).PACKED_2X2_FLOAT16;
    return (0, _texUtil.PhysicalTextureType).UNPACKED_FLOAT16;
}
function getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {
    if (logicalTexType === (0, _texUtil.TextureUsage).UPLOAD) return (0, _texUtil.PhysicalTextureType).PACKED_2X2_FLOAT32;
    else if (logicalTexType === (0, _texUtil.TextureUsage).RENDER || logicalTexType == null) return getPhysicalTextureForRendering(isPacked);
    else if (logicalTexType === (0, _texUtil.TextureUsage).DOWNLOAD || logicalTexType === (0, _texUtil.TextureUsage).PIXELS) return (0, _texUtil.PhysicalTextureType).PACKED_4X1_UNSIGNED_BYTE;
    throw new Error(`Unknown logical texture type ${logicalTexType}`);
}
function getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {
    return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;
}

},{"@tensorflow/tfjs-core":"2votT","./tex_util":"kHw0Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a5QhD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TileProgram", ()=>TileProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class TileProgram {
    constructor(aShape, reps){
        this.variableNames = [
            "A"
        ];
        const outputShape = new Array(aShape.length);
        for(let i = 0; i < outputShape.length; i++)outputShape[i] = aShape[i] * reps[i];
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        const dtype = (0, _shaderCompiler.getCoordsDataType)(this.rank);
        const sourceCoords = getSourceCoords(aShape);
        this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        setOutput(getA(${sourceCoords}));
      }
    `;
    }
}
function getSourceCoords(aShape) {
    const rank = aShape.length;
    if (rank > 5) throw Error(`Tile for rank ${rank} is not yet supported`);
    if (rank === 1) return `imod(resRC, ${aShape[0]})`;
    const currentCoords = [
        "resRC.x",
        "resRC.y",
        "resRC.z",
        "resRC.w",
        "resRC.u"
    ];
    const sourceCoords = [];
    for(let i = 0; i < aShape.length; i++)sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);
    return sourceCoords.join();
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNA7x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnaryOpProgram", ()=>UnaryOpProgram);
parcelHelpers.export(exports, "LINEAR", ()=>LINEAR);
parcelHelpers.export(exports, "ABS", ()=>ABS);
parcelHelpers.export(exports, "RELU", ()=>RELU);
parcelHelpers.export(exports, "RELU6", ()=>RELU6);
parcelHelpers.export(exports, "ELU", ()=>ELU);
parcelHelpers.export(exports, "SELU", ()=>SELU);
parcelHelpers.export(exports, "STEP", ()=>STEP);
parcelHelpers.export(exports, "NEG", ()=>NEG);
parcelHelpers.export(exports, "CEIL", ()=>CEIL);
parcelHelpers.export(exports, "FLOOR", ()=>FLOOR);
parcelHelpers.export(exports, "SIGN", ()=>SIGN);
parcelHelpers.export(exports, "IS_NAN", ()=>IS_NAN);
parcelHelpers.export(exports, "IS_INF", ()=>IS_INF);
parcelHelpers.export(exports, "IS_FINITE", ()=>IS_FINITE);
parcelHelpers.export(exports, "ROUND", ()=>ROUND);
parcelHelpers.export(exports, "EXP", ()=>EXP);
parcelHelpers.export(exports, "EXPM1", ()=>EXPM1);
parcelHelpers.export(exports, "LOG", ()=>LOG);
parcelHelpers.export(exports, "LOG1P", ()=>LOG1P);
parcelHelpers.export(exports, "SQRT", ()=>SQRT);
parcelHelpers.export(exports, "RSQRT", ()=>RSQRT);
parcelHelpers.export(exports, "SIGMOID", ()=>SIGMOID);
parcelHelpers.export(exports, "SOFTPLUS", ()=>SOFTPLUS);
parcelHelpers.export(exports, "SIN", ()=>SIN);
parcelHelpers.export(exports, "COS", ()=>COS);
parcelHelpers.export(exports, "TAN", ()=>TAN);
parcelHelpers.export(exports, "ASIN", ()=>ASIN);
parcelHelpers.export(exports, "ACOS", ()=>ACOS);
parcelHelpers.export(exports, "ATAN", ()=>ATAN);
parcelHelpers.export(exports, "SINH", ()=>SINH);
parcelHelpers.export(exports, "COSH", ()=>COSH);
parcelHelpers.export(exports, "TANH", ()=>TANH);
parcelHelpers.export(exports, "ASINH", ()=>ASINH);
parcelHelpers.export(exports, "ACOSH", ()=>ACOSH);
parcelHelpers.export(exports, "ATANH", ()=>ATANH);
parcelHelpers.export(exports, "ERF", ()=>ERF);
parcelHelpers.export(exports, "SQUARE", ()=>SQUARE);
parcelHelpers.export(exports, "RECIPROCAL", ()=>RECIPROCAL);
parcelHelpers.export(exports, "LOGICAL_NOT", ()=>LOGICAL_NOT);
parcelHelpers.export(exports, "TO_INT", ()=>TO_INT);
parcelHelpers.export(exports, "CLONE", ()=>CLONE);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
class UnaryOpProgram {
    constructor(aShape, opSnippet){
        this.variableNames = [
            "A"
        ];
        this.outputShape = aShape;
        this.userCode = `
      float unaryOperation(float x) {
        ${opSnippet}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
    }
}
const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;
const LINEAR = `return x;`;
const ABS = `return abs(x);`;
const RELU = CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : x;
`;
const RELU6 = CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;
const SELU = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${(0, _tfjsCore.backend_util).SELU_SCALEALPHA};
  float scale = ${(0, _tfjsCore.backend_util).SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
function STEP(alpha = 0.0) {
    return CHECK_NAN_SNIPPET + `
    return x > 0.0 ? 1.0 : float(${alpha});
  `;
}
const NEG = `return -x;`;
const CEIL = `return ceil(x);`;
const FLOOR = `return floor(x);`;
const SIGN = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
const IS_NAN = `return float(isnan(x));`;
const IS_INF = `return float(isinf(x));`;
const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;
const ROUND = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
const EXP = `return exp(x);`;
const EXPM1 = `return exp(x) - 1.0;`;
const LOG = `if (x < 0.0) return NAN;
  return log(x);`;
const LOG1P = `return log(1.0 + x);`;
const SQRT = `return sqrt(x);`;
const RSQRT = `return inversesqrt(x);`;
const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;
const SOFTPLUS = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
const SIN = CHECK_NAN_SNIPPET + `
  return sin(x);
`;
const COS = CHECK_NAN_SNIPPET + `
  return cos(x);
`;
const TAN = `return tan(x);`;
const ASIN = CHECK_NAN_SNIPPET + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
const ACOS = CHECK_NAN_SNIPPET + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
const ATAN = CHECK_NAN_SNIPPET + `
  return atan(x);
`;
const SINH = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
const COSH = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
const TANH = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
const ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;
const ACOSH = CHECK_NAN_SNIPPET + `
  if (x < 1.0) return NAN;
  return log(x + sqrt(x * x - 1.0));`;
const ATANH = CHECK_NAN_SNIPPET + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
  return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
const ERF = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${(0, _tfjsCore.backend_util).ERF_P};
  float a1 = ${(0, _tfjsCore.backend_util).ERF_A1};
  float a2 = ${(0, _tfjsCore.backend_util).ERF_A2};
  float a3 = ${(0, _tfjsCore.backend_util).ERF_A3};
  float a4 = ${(0, _tfjsCore.backend_util).ERF_A4};
  float a5 = ${(0, _tfjsCore.backend_util).ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
const SQUARE = `return x * x;`;
const RECIPROCAL = `return 1.0 / x;`;
const LOGICAL_NOT = `return float(!(x >= 1.0));`;
const TO_INT = `return float(int(x));`;
const CLONE = "return x;";

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fuMk1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LINEAR", ()=>LINEAR);
parcelHelpers.export(exports, "LOG", ()=>LOG);
parcelHelpers.export(exports, "RELU", ()=>RELU);
parcelHelpers.export(exports, "RELU6", ()=>RELU6);
parcelHelpers.export(exports, "ELU", ()=>ELU);
parcelHelpers.export(exports, "UnaryOpPackedProgram", ()=>UnaryOpPackedProgram);
const LINEAR = `return x;`;
const LOG = `
  vec4 result = log(x);
  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));
  result.r = isNaN.r == 1.0 ? NAN : result.r;
  result.g = isNaN.g == 1.0 ? NAN : result.g;
  result.b = isNaN.b == 1.0 ? NAN : result.b;
  result.a = isNaN.a == 1.0 ? NAN : result.a;

  return result;
`;
const RELU = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const RELU6 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const ELU = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
class UnaryOpPackedProgram {
    constructor(aShape, opSnippet){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        this.outputShape = aShape;
        this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${opSnippet}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4NkhR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnpackProgram", ()=>UnpackProgram);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _packingUtil = require("./packing_util");
var _shaderCompiler = require("./shader_compiler");
class UnpackProgram {
    constructor(outputShape){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = false;
        this.outputShape = outputShape;
        const rank = outputShape.length;
        const channels = (0, _packingUtil.getChannels)("rc", rank);
        const dtype = (0, _shaderCompiler.getCoordsDataType)(rank);
        const sourceCoords = (0, _packingUtil.getSourceCoords)(rank, channels);
        const innerDims = channels.slice(-2);
        const coords = rank <= 1 ? "rc" : `vec2(${innerDims.join(",")})`;
        this.userCode = `
      void main() {
        ${dtype} rc = getOutputCoords();
        vec4 packedInput = getA(${sourceCoords});

        setOutput(getChannel(packedInput, ${coords}));
      }
    `;
    }
}

},{"./packing_util":"gITMM","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lIIC2":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _div = require("./kernels/Div");
var _fromPixels = require("./kernels/FromPixels");
var _max = require("./kernels/Max");
var _maxPoolWithArgmax = require("./kernels/MaxPoolWithArgmax");
var _nonMaxSuppressionV3 = require("./kernels/NonMaxSuppressionV3");
var _nonMaxSuppressionV5 = require("./kernels/NonMaxSuppressionV5");
var _square = require("./kernels/Square");
var _squaredDifference = require("./kernels/SquaredDifference");
var _transpose = require("./kernels/Transpose");
// List all kernel configs here
const kernelConfigs = [
    (0, _max.maxConfig),
    (0, _fromPixels.fromPixelsConfig),
    (0, _div.divConfig),
    (0, _nonMaxSuppressionV3.nonMaxSuppressionV3Config),
    (0, _nonMaxSuppressionV5.nonMaxSuppressionV5Config),
    (0, _square.squareConfig),
    (0, _squaredDifference.squaredDifferenceConfig),
    (0, _transpose.transposeConfig),
    (0, _maxPoolWithArgmax.maxPoolWithArgmaxConfig)
];
for (const kernelConfig of kernelConfigs)(0, _tfjsCore.registerKernel)(kernelConfig);

},{"@tensorflow/tfjs-core":"2votT","./kernels/Div":"jNImu","./kernels/FromPixels":"l6hvJ","./kernels/Max":"2YXCs","./kernels/MaxPoolWithArgmax":"9DS0F","./kernels/NonMaxSuppressionV3":"8Je7Y","./kernels/NonMaxSuppressionV5":"h4wjM","./kernels/Square":"1UkD1","./kernels/SquaredDifference":"gkzzH","./kernels/Transpose":"fAs1H"}],"jNImu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divConfig", ()=>divConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _divImpl = require("./Div_impl");
const divConfig = {
    kernelName: (0, _tfjsCore.Div),
    backendName: "webgl",
    kernelFunc: ({ inputs , backend  })=>{
        const { a , b  } = inputs;
        const webglBackend = backend;
        return (0, _divImpl.divImpl)(a, b, webglBackend);
    }
};

},{"@tensorflow/tfjs-core":"2votT","./Div_impl":"gJ2fw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gJ2fw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divImpl", ()=>divImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryopGpu = require("../binaryop_gpu");
var _binaryopPackedGpu = require("../binaryop_packed_gpu");
function divImpl(a, b, backend) {
    let program = new (0, _binaryopGpu.BinaryOpProgram)(_binaryopGpu.DIV, a.shape, b.shape);
    if ((0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")) program = new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(_binaryopPackedGpu.DIV, a.shape, b.shape, true);
    const output = backend.runWebGLProgram(program, [
        a,
        b
    ], "float32");
    return output;
}

},{"@tensorflow/tfjs-core":"2votT","../binaryop_gpu":"lbbnp","../binaryop_packed_gpu":"gxIAI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l6hvJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromPixelsConfig", ()=>fromPixelsConfig);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _texUtil = require("../tex_util");
var _fromPixelsGpu = require("./FromPixels_utils/from_pixels_gpu");
var _fromPixelsPackedGpu = require("./FromPixels_utils/from_pixels_packed_gpu");
const fromPixelsConfig = {
    kernelName: (0, _tfjsCore.FromPixels),
    backendName: "webgl",
    kernelFunc: fromPixels
};
let fromPixels2DContext;
function fromPixels(args) {
    const { inputs , backend , attrs  } = args;
    let { pixels  } = inputs;
    const { numChannels  } = attrs;
    const isVideo = typeof HTMLVideoElement !== "undefined" && pixels instanceof HTMLVideoElement;
    const isImage = typeof HTMLImageElement !== "undefined" && pixels instanceof HTMLImageElement;
    const [width, height] = isVideo ? [
        pixels.videoWidth,
        pixels.videoHeight
    ] : [
        pixels.width,
        pixels.height
    ];
    const texShape = [
        height,
        width
    ];
    const outShape = [
        height,
        width,
        numChannels
    ];
    if (isImage || isVideo) {
        if (fromPixels2DContext == null) fromPixels2DContext = document.createElement("canvas").getContext("2d");
        fromPixels2DContext.canvas.width = width;
        fromPixels2DContext.canvas.height = height;
        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
        pixels = fromPixels2DContext.canvas;
    }
    const tempPixelHandle = backend.makeTensorInfo(texShape, "int32");
    // This is a byte texture with pixels.
    backend.texData.get(tempPixelHandle.dataId).usage = (0, _texUtil.TextureUsage).PIXELS;
    backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);
    const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK") ? new (0, _fromPixelsPackedGpu.FromPixelsPackedProgram)(outShape) : new (0, _fromPixelsGpu.FromPixelsProgram)(outShape);
    const res = backend.runWebGLProgram(program, [
        tempPixelHandle
    ], "int32");
    backend.disposeData(tempPixelHandle.dataId);
    return res;
}

},{"@tensorflow/tfjs-core":"2votT","../tex_util":"kHw0Y","./FromPixels_utils/from_pixels_gpu":"i0TvC","./FromPixels_utils/from_pixels_packed_gpu":"6UT7s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i0TvC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FromPixelsProgram", ()=>FromPixelsProgram);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("../../glsl_version");
class FromPixelsProgram {
    constructor(outputShape){
        this.variableNames = [
            "A"
        ];
        const glsl = (0, _glslVersion.getGlslDifferences)();
        const [height, width, ] = outputShape;
        this.outputShape = outputShape;
        this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);

        vec4 values = ${glsl.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
    }
}

},{"../../glsl_version":"ezjL5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6UT7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FromPixelsPackedProgram", ()=>FromPixelsPackedProgram);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _glslVersion = require("../../glsl_version");
class FromPixelsPackedProgram {
    constructor(outputShape){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = false;
        this.packedOutput = true;
        const glsl = (0, _glslVersion.getGlslDifferences)();
        const [height, width, ] = outputShape;
        this.outputShape = outputShape;
        this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${width}.0, ${height}.0);
            vec4 values = ${glsl.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${glsl.output} = result;
      }
    `;
    }
}

},{"../../glsl_version":"ezjL5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2YXCs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxConfig", ()=>maxConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _shared = require("../kernel_utils/shared");
var _maxImpl = require("./Max_impl");
var _transposeImpl = require("./Transpose_impl");
const maxConfig = {
    kernelName: (0, _tfjsCore.Max),
    backendName: "webgl",
    kernelFunc: ({ inputs , attrs , backend  })=>{
        const { x  } = inputs;
        const { reductionIndices  } = attrs;
        const webglBackend = backend;
        const xRank = x.shape.length;
        const origAxes = (0, _tfjsCore.util).parseAxisParam(reductionIndices, x.shape);
        let axes = origAxes;
        const permutedAxes = (0, _tfjsCore.backend_util).getAxesPermutation(axes, xRank);
        const maxInputIsTransposed = permutedAxes != null;
        const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([
            x
        ]);
        let maxInput = x;
        if (maxInputIsTransposed) {
            if (shouldExecuteOnCPU) {
                const xTexData = webglBackend.texData.get(maxInput.dataId);
                const values = xTexData.values;
                const newShape = new Array(xRank);
                for(let i = 0; i < newShape.length; i++)newShape[i] = x.shape[permutedAxes[i]];
                const maxInputValues = (0, _transposeImpl.transposeImplCPU)(values, x.shape, x.dtype, permutedAxes, newShape);
                maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);
                const maxInputData = webglBackend.texData.get(maxInput.dataId);
                maxInputData.values = maxInputValues;
            } else maxInput = (0, _transposeImpl.transposeImpl)(x, permutedAxes, webglBackend);
            axes = (0, _tfjsCore.backend_util).getInnerMostAxes(axes.length, xRank);
        }
        (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("max", axes, xRank);
        const [maxOutShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(maxInput.shape, axes);
        let out;
        if (shouldExecuteOnCPU) {
            const xTexData1 = webglBackend.texData.get(maxInput.dataId);
            const values1 = xTexData1.values;
            const outValues = (0, _shared.maxImplCPU)(values1, (0, _tfjsCore.util).sizeFromShape(reduceShape), maxOutShape, x.dtype);
            out = webglBackend.makeTensorInfo(maxOutShape, x.dtype);
            const outData = webglBackend.texData.get(out.dataId);
            outData.values = outValues;
        } else out = (0, _maxImpl.maxImpl)(maxInput, reduceShape, maxOutShape, webglBackend);
        if (maxInputIsTransposed) webglBackend.disposeData(maxInput.dataId);
        return out;
    }
};

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/shared":"hPCA0","./Max_impl":"VqtqQ","./Transpose_impl":"9N0dx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hPCA0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxImplCPU", ()=>maxImplCPU);
parcelHelpers.export(exports, "transposeImplCPU", ()=>transposeImplCPU);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Import shared functionality from tfjs-backend-cpu without triggering
// side effects.
// tslint:disable-next-line: no-imports-from-dist
var _base = require("@tensorflow/tfjs-backend-cpu/dist/base");
const { maxImpl: maxImplCPU , transposeImpl: transposeImplCPU  } = (0, _base.shared);

},{"@tensorflow/tfjs-backend-cpu/dist/base":"gHXpH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"VqtqQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxImpl", ()=>maxImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _reduce = require("../kernel_utils/reduce");
var _reshape = require("../kernel_utils/reshape");
function maxImpl(x, reduceShape, outShape, backend) {
    const inSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const xSize = (0, _tfjsCore.util).sizeFromShape(x.shape);
    const batchSize = xSize / inSize;
    const reshapedInput = (0, _reshape.reshape)(x, [
        batchSize,
        inSize
    ], backend);
    const reduced = (0, _reduce.reduce)(reshapedInput, x.dtype, "max", backend);
    if (reshapedInput.dataId !== x.dataId) // dispose the output of the packed reshape.
    backend.disposeData(reshapedInput.dataId);
    return (0, _reshape.reshape)(reduced, outShape, backend);
}

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/reduce":"p69KQ","../kernel_utils/reshape":"khCCe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"p69KQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reduce", ()=>reduce);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _reduceGpu = require("../reduce_gpu");
function reduce(x, dtype, reductionType, backend) {
    const [batchSize, inSize] = x.shape;
    const windowSize = (0, _tfjsCore.backend_util).computeOptimalWindowSize(inSize);
    const reduceInfo = {
        windowSize,
        inSize,
        batchSize
    };
    const program = new (0, _reduceGpu.ReduceProgram)(reduceInfo, reductionType);
    const output = backend.runWebGLProgram(program, [
        x
    ], dtype);
    if (output.shape[1] === 1) return output;
    return reduce(output, dtype, reductionType, backend);
}

},{"@tensorflow/tfjs-core":"2votT","../reduce_gpu":"d0Ozz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"khCCe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reshape", ()=>reshape);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _reshapePackedGpu = require("../reshape_packed_gpu");
var _webglUtil = require("../webgl_util");
function packedReshape(input, afterShape, backend) {
    const input3DShape = [
        (0, _webglUtil.getBatchDim)(input.shape),
        ...(0, _webglUtil.getRowsCols)(input.shape)
    ];
    const input3D = {
        dtype: input.dtype,
        shape: input3DShape,
        dataId: input.dataId
    };
    const afterShapeAs3D = [
        (0, _webglUtil.getBatchDim)(afterShape),
        ...(0, _webglUtil.getRowsCols)(afterShape)
    ];
    const program = new (0, _reshapePackedGpu.ReshapePackedProgram)(afterShapeAs3D, input3DShape);
    const preventEagerUnpackingOfOutput = true;
    const output = backend.runWebGLProgram(program, [
        input3D
    ], input.dtype, null, preventEagerUnpackingOfOutput);
    return {
        dataId: output.dataId,
        shape: afterShape,
        dtype: output.dtype
    };
}
function reshape(x, afterShape, backend) {
    const xTexData = backend.texData.get(x.dataId);
    if (xTexData.isPacked && !(0, _webglUtil.isReshapeFree)(x.shape, afterShape) && !(xTexData.texture !== null && (0, _webglUtil.isReshapeFree)(xTexData.shape, afterShape))) return packedReshape(x, afterShape, backend);
    return {
        dataId: x.dataId,
        shape: afterShape,
        dtype: x.dtype
    };
}

},{"../reshape_packed_gpu":"fUKmz","../webgl_util":"kgG6J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9N0dx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transposeImpl", ()=>transposeImpl);
parcelHelpers.export(exports, "transposeImplCPU", ()=>(0, _shared.transposeImplCPU));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _shared = require("../kernel_utils/shared");
var _transposeGpu = require("../transpose_gpu");
var _transposePackedGpu = require("../transpose_packed_gpu");
function transposeImpl(x, perm, backend) {
    const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new (0, _transposePackedGpu.TransposePackedProgram)(x.shape, perm) : new (0, _transposeGpu.TransposeProgram)(x.shape, perm);
    return backend.runWebGLProgram(program, [
        x
    ], x.dtype);
}

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/shared":"hPCA0","../transpose_gpu":"bxJRu","../transpose_packed_gpu":"hgHIS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bxJRu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TransposeProgram", ()=>TransposeProgram);
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _shaderCompiler = require("./shader_compiler");
class TransposeProgram {
    constructor(aShape, newDim){
        this.variableNames = [
            "A"
        ];
        const outputShape = new Array(aShape.length);
        for(let i = 0; i < outputShape.length; i++)outputShape[i] = aShape[newDim[i]];
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        const dtype = (0, _shaderCompiler.getCoordsDataType)(this.rank);
        const switched = getSwitchedCoords(newDim);
        this.userCode = `
    void main() {
      ${dtype} resRC = getOutputCoords();
      setOutput(getA(${switched}));
    }
    `;
    }
}
function getSwitchedCoords(newDim) {
    const rank = newDim.length;
    if (rank > 6) throw Error(`Transpose for rank ${rank} is not yet supported`);
    const originalOrder = [
        "resRC.x",
        "resRC.y",
        "resRC.z",
        "resRC.w",
        "resRC.u",
        "resRC.v"
    ];
    const switchedCoords = new Array(rank);
    for(let i = 0; i < newDim.length; i++)switchedCoords[newDim[i]] = originalOrder[i];
    return switchedCoords.join();
}

},{"./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hgHIS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TransposePackedProgram", ()=>TransposePackedProgram);
/**
 * @license
 * Copyright 2019 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _packingUtil = require("./packing_util");
var _shaderCompiler = require("./shader_compiler");
class TransposePackedProgram {
    constructor(aShape, newDim){
        this.variableNames = [
            "A"
        ];
        this.packedInputs = true;
        this.packedOutput = true;
        const outputShape = new Array(aShape.length);
        for(let i = 0; i < outputShape.length; i++)outputShape[i] = aShape[newDim[i]];
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        if (this.rank > 6) throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
        const dtype = (0, _shaderCompiler.getCoordsDataType)(this.rank);
        const outputOrder = (0, _packingUtil.getVecChannels)("rc", this.rank);
        const switchedOrder = new Array(this.rank);
        for(let i1 = 0; i1 < newDim.length; i1++)switchedOrder[newDim[i1]] = outputOrder[i1];
        const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;
        const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;
        const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;
        this.userCode = `
    void main() {
      ${dtype} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${getc};
      if(${nextColumn}) {
        result[1] = ${getc};
      }
      --${outputOrder[this.rank - 1]};
      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {
        result[2] = ${getc};
        if(${nextColumn}) {
          result[3] = ${getc};
        }
      }
      setOutput(result);
    }
    `;
    }
}

},{"./packing_util":"gITMM","./shader_compiler":"bpAco","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9DS0F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolWithArgmaxConfig", ()=>maxPoolWithArgmaxConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _maxPoolWithArgmaxImpl = require("./MaxPoolWithArgmax_impl");
const maxPoolWithArgmaxConfig = {
    kernelName: (0, _tfjsCore.MaxPoolWithArgmax),
    backendName: "webgl",
    kernelFunc: ({ inputs , attrs , backend  })=>{
        const { x  } = inputs;
        const { filterSize , strides , pad , includeBatchInIndex  } = attrs;
        const webglBackend = backend;
        (0, _tfjsCore.util).assert(x.shape.length === 4, ()=>`Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);
        const dilations = [
            1,
            1
        ];
        (0, _tfjsCore.util).assert((0, _tfjsCore.backend_util).eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in maxPool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
        const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, dilations, pad);
        const [result, indexes] = (0, _maxPoolWithArgmaxImpl.maxPoolWithArgmaxImpl)(x, includeBatchInIndex, convInfo, webglBackend);
        return [
            result,
            indexes
        ];
    }
};

},{"@tensorflow/tfjs-core":"2votT","./MaxPoolWithArgmax_impl":"byIiY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"byIiY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolWithArgmaxImpl", ()=>maxPoolWithArgmaxImpl);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _poolGpu = require("../pool_gpu");
function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {
    let program = new (0, _poolGpu.Pool2DProgram)(convInfo, "max", false);
    const poolOutput = backend.runWebGLProgram(program, [
        x
    ], "float32");
    program = new (0, _poolGpu.Pool2DProgram)(convInfo, "max", true, true, includeBatchInIndex);
    const indexOutput = backend.runWebGLProgram(program, [
        x
    ], "float32");
    return [
        poolOutput,
        indexOutput
    ];
}

},{"../pool_gpu":"kbW82","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Je7Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV3Config", ()=>nonMaxSuppressionV3Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const nonMaxSuppressionV3Config = {
    kernelName: (0, _tfjsCore.NonMaxSuppressionV3),
    backendName: "webgl",
    kernelFunc: ({ inputs , backend , attrs  })=>{
        (0, _tfjsCore.backend_util).warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
        const { boxes , scores  } = inputs;
        const { maxOutputSize , iouThreshold , scoreThreshold  } = attrs;
        const gpuBackend = backend;
        const boxesVals = gpuBackend.readSync(boxes.dataId);
        const scoresVals = gpuBackend.readSync(scores.dataId);
        const maxOutputSizeVal = maxOutputSize;
        const iouThresholdVal = iouThreshold;
        const scoreThresholdVal = scoreThreshold;
        return (0, _tfjsCore.kernel_impls).nonMaxSuppressionV3(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal);
    }
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4wjM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV5Config", ()=>nonMaxSuppressionV5Config);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const nonMaxSuppressionV5 = (0, _tfjsCore.kernel_impls).nonMaxSuppressionV5;
const nonMaxSuppressionV5Config = {
    kernelName: (0, _tfjsCore.NonMaxSuppressionV5),
    backendName: "webgl",
    kernelFunc: ({ inputs , backend , attrs  })=>{
        (0, _tfjsCore.backend_util).warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
        const { boxes , scores  } = inputs;
        const { maxOutputSize , iouThreshold , scoreThreshold , softNmsSigma  } = attrs;
        const gpuBackend = backend;
        const boxesVals = gpuBackend.readSync(boxes.dataId);
        const scoresVals = gpuBackend.readSync(scores.dataId);
        const maxOutputSizeVal = maxOutputSize;
        const iouThresholdVal = iouThreshold;
        const scoreThresholdVal = scoreThreshold;
        const softNmsSigmaVal = softNmsSigma;
        const { selectedIndices , selectedScores  } = nonMaxSuppressionV5(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);
        return [
            selectedIndices,
            selectedScores
        ];
    }
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1UkD1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squareConfig", ()=>squareConfig);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryopGpu = require("../unaryop_gpu");
const squareConfig = {
    kernelName: (0, _tfjsCore.Square),
    backendName: "webgl",
    kernelFunc: ({ inputs , backend  })=>{
        const { x  } = inputs;
        const webglBackend = backend;
        const program = new (0, _unaryopGpu.UnaryOpProgram)(x.shape, (0, _unaryopGpu.SQUARE));
        return webglBackend.runWebGLProgram(program, [
            x
        ], x.dtype);
    }
};

},{"@tensorflow/tfjs-core":"2votT","../unaryop_gpu":"cNA7x","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkzzH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squaredDifferenceConfig", ()=>squaredDifferenceConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryopGpu = require("../binaryop_gpu");
var _binaryopPackedGpu = require("../binaryop_packed_gpu");
const squaredDifferenceConfig = {
    kernelName: (0, _tfjsCore.SquaredDifference),
    backendName: "webgl",
    kernelFunc: ({ inputs , backend  })=>{
        const { a , b  } = inputs;
        const SQUARED_DIFFERENCE = "return (a - b) * (a - b);";
        const webGLBackend = backend;
        const program = (0, _tfjsCore.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new (0, _binaryopPackedGpu.BinaryOpPackedProgram)(SQUARED_DIFFERENCE, a.shape, b.shape) : new (0, _binaryopGpu.BinaryOpProgram)(SQUARED_DIFFERENCE, a.shape, b.shape);
        return webGLBackend.compileAndRun(program, [
            a,
            b
        ]);
    }
};

},{"@tensorflow/tfjs-core":"2votT","../binaryop_gpu":"lbbnp","../binaryop_packed_gpu":"gxIAI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fAs1H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transposeConfig", ()=>transposeConfig);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _transposeImpl = require("./Transpose_impl");
const transposeConfig = {
    kernelName: (0, _tfjsCore.Transpose),
    backendName: "webgl",
    kernelFunc: ({ inputs , attrs , backend  })=>{
        const { x  } = inputs;
        const { perm  } = attrs;
        const webglBackend = backend;
        const xRank = x.shape.length;
        const newShape = new Array(xRank);
        for(let i = 0; i < newShape.length; i++)newShape[i] = x.shape[perm[i]];
        let out;
        if (webglBackend.shouldExecuteOnCPU([
            x
        ])) {
            const xTexData = webglBackend.texData.get(x.dataId);
            const values = xTexData.values;
            const outValues = (0, _transposeImpl.transposeImplCPU)(values, x.shape, x.dtype, perm, newShape);
            out = webglBackend.makeTensorInfo(newShape, x.dtype);
            const outData = webglBackend.texData.get(out.dataId);
            outData.values = outValues;
        } else out = (0, _transposeImpl.transposeImpl)(x, perm, webglBackend);
        return out;
    }
};

},{"@tensorflow/tfjs-core":"2votT","./Transpose_impl":"9N0dx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b7la2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MathBackendWebGL", ()=>(0, _backendWebgl.MathBackendWebGL));
parcelHelpers.export(exports, "setWebGLContext", ()=>(0, _canvasUtil.setWebGLContext));
parcelHelpers.export(exports, "GPGPUContext", ()=>(0, _gpgpuContext.GPGPUContext));
// WebGL specific utils.
parcelHelpers.export(exports, "gpgpu_util", ()=>_gpgpuUtil);
parcelHelpers.export(exports, "webgl_util", ()=>_webglUtil);
/**
 * Enforce use of half precision textures if available on the platform.
 */ /** @doc {heading: 'Environment', namespace: 'webgl'} */ parcelHelpers.export(exports, "forceHalfFloat", ()=>forceHalfFloat);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _gpgpuUtil = require("./gpgpu_util");
var _webglUtil = require("./webgl_util");
var _backendWebgl = require("./backend_webgl");
var _canvasUtil = require("./canvas_util");
var _gpgpuContext = require("./gpgpu_context");
function forceHalfFloat() {
    (0, _tfjsCore.env)().set("WEBGL_FORCE_F16_TEXTURES", true);
}

},{"@tensorflow/tfjs-core":"2votT","./gpgpu_util":"96omO","./webgl_util":"kgG6J","./backend_webgl":"7gxxS","./canvas_util":"9eAXh","./gpgpu_context":"6X3q9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gSPzs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
const version = "2.0.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jH3jL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CallbackList", ()=>(0, _baseCallbacks.CallbackList));
parcelHelpers.export(exports, "CustomCallback", ()=>(0, _baseCallbacks.CustomCallback));
parcelHelpers.export(exports, "History", ()=>(0, _baseCallbacks.History));
parcelHelpers.export(exports, "Callback", ()=>(0, _callbacks.Callback));
parcelHelpers.export(exports, "callbacks", ()=>(0, _callbacks.callbacks));
parcelHelpers.export(exports, "EarlyStopping", ()=>(0, _callbacks.EarlyStopping));
parcelHelpers.export(exports, "InputSpec", ()=>(0, _topology.InputSpec));
parcelHelpers.export(exports, "SymbolicTensor", ()=>(0, _topology.SymbolicTensor));
parcelHelpers.export(exports, "LayersModel", ()=>(0, _training.LayersModel));
parcelHelpers.export(exports, "input", ()=>(0, _exports.input));
parcelHelpers.export(exports, "loadLayersModel", ()=>(0, _exports.loadLayersModel));
parcelHelpers.export(exports, "model", ()=>(0, _exports.model));
parcelHelpers.export(exports, "registerCallbackConstructor", ()=>(0, _exports.registerCallbackConstructor));
parcelHelpers.export(exports, "sequential", ()=>(0, _exports.sequential));
parcelHelpers.export(exports, "RNN", ()=>(0, _recurrent.RNN));
parcelHelpers.export(exports, "Sequential", ()=>(0, _models.Sequential));
parcelHelpers.export(exports, "LayerVariable", ()=>(0, _variables.LayerVariable));
parcelHelpers.export(exports, "version_layers", ()=>(0, _version.version));
parcelHelpers.export(exports, "constraints", ()=>_exportsConstraints);
parcelHelpers.export(exports, "initializers", ()=>_exportsInitializers);
parcelHelpers.export(exports, "layers", ()=>_exportsLayers);
parcelHelpers.export(exports, "metrics", ()=>_exportsMetrics);
parcelHelpers.export(exports, "models", ()=>_exportsModels);
parcelHelpers.export(exports, "regularizers", ()=>_exportsRegularizers);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ // This file lists all exports of TensorFlow.js Layers
var _exportsConstraints = require("./exports_constraints");
var _exportsInitializers = require("./exports_initializers");
var _exportsLayers = require("./exports_layers");
var _exportsMetrics = require("./exports_metrics");
var _exportsModels = require("./exports_models");
var _exportsRegularizers = require("./exports_regularizers");
var _baseCallbacks = require("./base_callbacks");
var _callbacks = require("./callbacks");
var _topology = require("./engine/topology");
var _training = require("./engine/training");
var _exports = require("./exports");
var _recurrent = require("./layers/recurrent");
var _models = require("./models");
var _variables = require("./variables");
var _version = require("./version");

},{"./exports_constraints":"7ix5g","./exports_initializers":"lecKi","./exports_layers":"bIANN","./exports_metrics":"acOjA","./exports_models":"gFv4M","./exports_regularizers":"dHNS5","./base_callbacks":"aV9CX","./callbacks":"9OlfS","./engine/topology":"2OPnm","./engine/training":"akRzZ","./exports":"18pwI","./layers/recurrent":"1N3a1","./models":"dis3W","./variables":"aWvBF","./version":"718Pb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ix5g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * MaxNorm weight constraint.
 *
 * Constrains the weights incident to each hidden unit
 * to have a norm less than or equal to a desired value.
 *
 * References
 *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting
 * Srivastava, Hinton, et al.
 * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)
 */ /** @doc {heading: 'Constraints',namespace: 'constraints'} */ parcelHelpers.export(exports, "maxNorm", ()=>maxNorm);
/**
 * Constrains the weights incident to each hidden unit to have unit norm.
 */ /** @doc {heading: 'Constraints', namespace: 'constraints'} */ parcelHelpers.export(exports, "unitNorm", ()=>unitNorm);
/**
 * Constains the weight to be non-negative.
 */ /** @doc {heading: 'Constraints', namespace: 'constraints'} */ parcelHelpers.export(exports, "nonNeg", ()=>nonNeg);
/** @doc {heading: 'Constraints', namespace: 'constraints'} */ parcelHelpers.export(exports, "minMaxNorm", ()=>minMaxNorm);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ // tslint:disable-next-line:max-line-length
var _constraints = require("./constraints");
function maxNorm(args) {
    return new (0, _constraints.MaxNorm)(args);
}
function unitNorm(args) {
    return new (0, _constraints.UnitNorm)(args);
}
function nonNeg() {
    return new (0, _constraints.NonNeg)();
}
function minMaxNorm(config) {
    return new (0, _constraints.MinMaxNorm)(config);
}

},{"./constraints":"kRkSV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kRkSV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Base class for functions that impose constraints on weight values
 */ /**
 * @doc {
 *   heading: 'Constraints',
 *   subheading: 'Classes',
 *   namespace: 'constraints'
 * }
 */ parcelHelpers.export(exports, "Constraint", ()=>Constraint);
parcelHelpers.export(exports, "MaxNorm", ()=>MaxNorm);
parcelHelpers.export(exports, "UnitNorm", ()=>UnitNorm);
parcelHelpers.export(exports, "NonNeg", ()=>NonNeg);
parcelHelpers.export(exports, "MinMaxNorm", ()=>MinMaxNorm);
parcelHelpers.export(exports, "CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP", ()=>CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP);
parcelHelpers.export(exports, "serializeConstraint", ()=>serializeConstraint);
parcelHelpers.export(exports, "deserializeConstraint", ()=>deserializeConstraint);
parcelHelpers.export(exports, "getConstraint", ()=>getConstraint);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original source: keras/contraints.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _common = require("./backend/common");
var _genericUtils = require("./utils/generic_utils");
/**
 * Helper function used by many of the Constraints to find the L2Norms.
 */ function calcL2Norms(w, axis) {
    return (0, _tfjsCore.tidy)(()=>_tfjsCore.sqrt(_tfjsCore.sum(_tfjsCore.mul(w, w), axis, true)));
}
class Constraint extends (0, _tfjsCore.serialization).Serializable {
    getConfig() {
        return {};
    }
}
class MaxNorm extends Constraint {
    constructor(args){
        super();
        this.defaultMaxValue = 2;
        this.defaultAxis = 0;
        this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;
        this.axis = args.axis != null ? args.axis : this.defaultAxis;
    }
    apply(w) {
        return (0, _tfjsCore.tidy)(()=>{
            const norms = calcL2Norms(w, this.axis);
            const desired = _tfjsCore.clipByValue(norms, 0, this.maxValue);
            return _tfjsCore.mul(w, _tfjsCore.div(desired, _tfjsCore.add((0, _common.epsilon)(), norms)));
        });
    }
    getConfig() {
        return {
            maxValue: this.maxValue,
            axis: this.axis
        };
    }
}
/** @nocollapse */ MaxNorm.className = "MaxNorm";
(0, _tfjsCore.serialization).registerClass(MaxNorm);
class UnitNorm extends Constraint {
    constructor(args){
        super();
        this.defaultAxis = 0;
        this.axis = args.axis != null ? args.axis : this.defaultAxis;
    }
    apply(w) {
        return (0, _tfjsCore.tidy)(()=>_tfjsCore.div(w, _tfjsCore.add((0, _common.epsilon)(), calcL2Norms(w, this.axis))));
    }
    getConfig() {
        return {
            axis: this.axis
        };
    }
}
/** @nocollapse */ UnitNorm.className = "UnitNorm";
(0, _tfjsCore.serialization).registerClass(UnitNorm);
class NonNeg extends Constraint {
    apply(w) {
        return _tfjsCore.relu(w);
    }
}
/** @nocollapse */ NonNeg.className = "NonNeg";
(0, _tfjsCore.serialization).registerClass(NonNeg);
class MinMaxNorm extends Constraint {
    constructor(args){
        super();
        this.defaultMinValue = 0.0;
        this.defaultMaxValue = 1.0;
        this.defaultRate = 1.0;
        this.defaultAxis = 0;
        this.minValue = args.minValue != null ? args.minValue : this.defaultMinValue;
        this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;
        this.rate = args.rate != null ? args.rate : this.defaultRate;
        this.axis = args.axis != null ? args.axis : this.defaultAxis;
    }
    apply(w) {
        return (0, _tfjsCore.tidy)(()=>{
            const norms = calcL2Norms(w, this.axis);
            const desired = _tfjsCore.add(_tfjsCore.mul(this.rate, _tfjsCore.clipByValue(norms, this.minValue, this.maxValue)), _tfjsCore.mul(1.0 - this.rate, norms));
            return _tfjsCore.mul(w, _tfjsCore.div(desired, _tfjsCore.add((0, _common.epsilon)(), norms)));
        });
    }
    getConfig() {
        return {
            minValue: this.minValue,
            maxValue: this.maxValue,
            rate: this.rate,
            axis: this.axis
        };
    }
}
/** @nocollapse */ MinMaxNorm.className = "MinMaxNorm";
(0, _tfjsCore.serialization).registerClass(MinMaxNorm);
const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    "maxNorm": "MaxNorm",
    "minMaxNorm": "MinMaxNorm",
    "nonNeg": "NonNeg",
    "unitNorm": "UnitNorm"
};
function serializeConstraint(constraint) {
    return (0, _genericUtils.serializeKerasObject)(constraint);
}
function deserializeConstraint(config, customObjects = {}) {
    return (0, _genericUtils.deserializeKerasObject)(config, (0, _tfjsCore.serialization).SerializationMap.getMap().classNameMap, customObjects, "constraint");
}
function getConstraint(identifier) {
    if (identifier == null) return null;
    if (typeof identifier === "string") {
        const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;
        const config = {
            className,
            config: {}
        };
        return deserializeConstraint(config);
    } else if (identifier instanceof Constraint) return identifier;
    else return deserializeConstraint(identifier);
}

},{"@tensorflow/tfjs-core":"2votT","./backend/common":"3qfoZ","./utils/generic_utils":"2cErd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3qfoZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns the value of the fuzz factor used in numeric expressions.
 */ parcelHelpers.export(exports, "epsilon", ()=>epsilon);
/**
 * Sets the value of the fuzz factor used in numeric expressions.
 * @param e New value of epsilon.
 */ parcelHelpers.export(exports, "setEpsilon", ()=>setEpsilon);
/**
 * Returns the default image data format convention.
 */ parcelHelpers.export(exports, "imageDataFormat", ()=>imageDataFormat);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
let _epsilon;
function epsilon() {
    if (_epsilon == null) _epsilon = (0, _tfjsCore.backend)().epsilon();
    return _epsilon;
}
function setEpsilon(e) {
    _epsilon = e;
}
function imageDataFormat() {
    return "channelsLast";
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2cErd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// tslint:enable
/**
 * If `value` is an Array, equivalent to Python's `value * numValues`.
 * If `value` is not an Array, equivalent to Python's `[value] * numValues`
 */ // tslint:disable-next-line:no-any
parcelHelpers.export(exports, "pyListRepeat", ()=>pyListRepeat);
parcelHelpers.export(exports, "assert", ()=>assert);
/**
 * Count the number of elements of the `array` that are equal to `reference`.
 */ parcelHelpers.export(exports, "count", ()=>count);
/**
 * If an array is of length 1, just return the first element. Otherwise, return
 * the full array.
 * @param tensors
 */ parcelHelpers.export(exports, "singletonOrArray", ()=>singletonOrArray);
/**
 * Normalizes a list/tensor into a list.
 *
 * If a tensor is passed, we return
 * a list of size 1 containing the tensor.
 *
 * @param x target object to be normalized.
 */ // tslint:disable-next-line:no-any
parcelHelpers.export(exports, "toList", ()=>toList);
/**
 * Generate a UID for a list
 */ // tslint:disable-next-line:no-any
parcelHelpers.export(exports, "objectListUid", ()=>objectListUid);
/**
 * Converts string to snake-case.
 * @param name
 */ parcelHelpers.export(exports, "toSnakeCase", ()=>toSnakeCase);
parcelHelpers.export(exports, "toCamelCase", ()=>toCamelCase);
parcelHelpers.export(exports, "serializeKerasObject", ()=>serializeKerasObject);
/**
 * Deserialize a saved Keras Object
 * @param identifier either a string ID or a saved Keras dictionary
 * @param moduleObjects a list of Python class names to object constructors
 * @param customObjects a list of Python class names to object constructors
 * @param printableModuleName debug text for the object being reconstituted
 * @param fastWeightInit Optional flag to use fast weight initialization
 *   during deserialization. This is applicable to cases in which
 *   the initialization will be immediately overwritten by loaded weight
 *   values. Default: `false`.
 * @returns a TensorFlow.js Layers object
 */ // tslint:disable:no-any
parcelHelpers.export(exports, "deserializeKerasObject", ()=>deserializeKerasObject);
/**
 * Compares two numbers for sorting.
 * @param a
 * @param b
 */ parcelHelpers.export(exports, "numberCompare", ()=>numberCompare);
/**
 * Comparison of two numbers for reverse sorting.
 * @param a
 * @param b
 */ parcelHelpers.export(exports, "reverseNumberCompare", ()=>reverseNumberCompare);
/**
 * Convert a string into the corresponding DType.
 * @param dtype
 * @returns An instance of DType.
 */ parcelHelpers.export(exports, "stringToDType", ()=>stringToDType);
/**
 * Test the element-by-element equality of two Arrays of strings.
 * @param xs First array of strings.
 * @param ys Second array of strings.
 * @returns Wether the two arrays are all equal, element by element.
 */ parcelHelpers.export(exports, "stringsEqual", ()=>stringsEqual);
/**
 * Get the unique elements of an array.
 * @param xs Array.
 * @returns An Array consisting of the unique elements in `xs`.
 */ parcelHelpers.export(exports, "unique", ()=>unique);
/**
 * Determine if an Object is empty (i.e., does not have own properties).
 * @param obj Object
 * @returns Whether the Object is empty.
 * @throws ValueError: If object is `null` or `undefined`.
 */ parcelHelpers.export(exports, "isObjectEmpty", ()=>isObjectEmpty);
/**
 * Helper function used to build type union/enum run-time checkers.
 * @param values The list of allowed values.
 * @param label A string name for the type
 * @param value The value to test.
 * @throws ValueError: If the value is not in values nor `undefined`/`null`.
 */ parcelHelpers.export(exports, "checkStringTypeUnionValue", ()=>checkStringTypeUnionValue);
/**
 * Helper function for verifying the types of inputs.
 *
 * Ensures that the elements of `x` are all of type `expectedType`.
 * Also verifies that the length of `x` is within bounds.
 *
 * @param x Object to test.
 * @param expectedType The string expected type of all of the elements in the
 * Array.
 * @param minLength Return false if x.length is less than this.
 * @param maxLength Return false if x.length is greater than this.
 * @returns true if and only if `x` is an `Array<expectedType>` with
 * length >= `minLength` and <= `maxLength`.
 */ // tslint:disable:no-any
parcelHelpers.export(exports, "checkArrayTypeAndLength", ()=>checkArrayTypeAndLength);
// tslint:enable:no-any
/**
 * Assert that a value or an array of value are positive integer.
 *
 * @param value The value being asserted on. May be a single number or an array
 *   of numbers.
 * @param name Name of the value, used to make the error message.
 */ parcelHelpers.export(exports, "assertPositiveInteger", ()=>assertPositiveInteger);
/**
 * Format a value into a display-friendly, human-readable fashion.
 *
 * - `null` is formatted as `'null'`
 * - Strings are formated with flanking pair of quotes.
 * - Arrays are formatted with flanking pair of square brackets.
 *
 * @param value The value to display.
 * @return Formatted string.
 */ // tslint:disable-next-line:no-any
parcelHelpers.export(exports, "formatAsFriendlyString", ()=>formatAsFriendlyString);
/**
 * Returns a function `f2` (decorator) which wraps the original function
 * `f`. `f2` guarantees that `f` can be called at most once
 * every `waitMs` ms. If `f2` is called more often, it will return
 * the last returned result of `f`.
 *
 * @param f The original function `f` to wrap.
 * @param waitMs The time between two consecutive calls to `f` in ms.
 */ parcelHelpers.export(exports, "debounce", ()=>debounce);
/**
 * Returns the fusable activation given a layers identifier.
 *
 * @param activationName The layers identifier string.
 * @return The name of the fusable activation.
 */ parcelHelpers.export(exports, "mapActivationToFusedKernel", ()=>mapActivationToFusedKernel);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original source: utils/generic_utils.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _errors = require("../errors");
function pyListRepeat(value, numValues) {
    if (Array.isArray(value)) {
        // tslint:disable-next-line:no-any
        let newArray = [];
        for(let i = 0; i < numValues; i++)newArray = newArray.concat(value);
        return newArray;
    } else {
        const newArray1 = new Array(numValues);
        newArray1.fill(value);
        return newArray1;
    }
}
function assert(val, message) {
    if (!val) throw new (0, _errors.AssertionError)(message);
}
function count(array, refernce) {
    let counter = 0;
    for (const item of array)if (item === refernce) counter++;
    return counter;
}
function singletonOrArray(xs) {
    if (xs.length === 1) return xs[0];
    return xs;
}
function toList(x) {
    if (Array.isArray(x)) return x;
    return [
        x
    ];
}
function objectListUid(objs) {
    const objectList = toList(objs);
    let retVal = "";
    for (const obj of objectList){
        if (obj.id == null) throw new (0, _errors.ValueError)(`Object ${obj} passed to objectListUid without an id`);
        if (retVal !== "") retVal = retVal + ", ";
        retVal = `${retVal}${Math.abs(obj.id)}`;
    }
    return retVal;
}
function toSnakeCase(name) {
    const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2");
    const insecure = intermediate.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
    /*
     If the class is private the name starts with "_" which is not secure
     for creating scopes. We prefix the name with "private" in this case.
     */ if (insecure[0] !== "_") return insecure;
    return "private" + insecure;
}
function toCamelCase(identifier) {
    // quick return for empty string or single character strings
    if (identifier.length <= 1) return identifier;
    // Check for the underscore indicating snake_case
    if (identifier.indexOf("_") === -1) return identifier;
    return identifier.replace(/[_]+(\w|$)/g, (m, p1)=>p1.toUpperCase());
}
// tslint:disable-next-line:no-any
let _GLOBAL_CUSTOM_OBJECTS = {};
function serializeKerasObject(instance) {
    if (instance === null || instance === undefined) return null;
    const dict = {};
    dict["className"] = instance.getClassName();
    dict["config"] = instance.getConfig();
    return dict;
}
/**
 * Replace ndarray-style scalar objects in serialization objects with numbers.
 *
 * Background: In some versions of tf.keras, certain scalar values in the HDF5
 * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,
 * where in `num` is a plain number. This method converts such serialization
 * to a `number`.
 *
 * @param config The keras-format serialization object to be processed
 *   (in place).
 */ function convertNDArrayScalarsInConfig(config) {
    if (config == null || typeof config !== "object") return;
    else if (Array.isArray(config)) config.forEach((configItem)=>convertNDArrayScalarsInConfig(configItem));
    else {
        const fields = Object.keys(config);
        for (const field of fields){
            const value = config[field];
            if (value != null && typeof value === "object") {
                if (!Array.isArray(value) && value["type"] === "ndarray" && typeof value["value"] === "number") config[field] = value["value"];
                else convertNDArrayScalarsInConfig(value);
            }
        }
    }
}
function deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = "object", fastWeightInit = false) {
    // tslint:enable
    if (typeof identifier === "string") {
        const functionName = identifier;
        let fn;
        if (functionName in customObjects) fn = customObjects[functionName];
        else if (functionName in _GLOBAL_CUSTOM_OBJECTS) fn = _GLOBAL_CUSTOM_OBJECTS[functionName];
        else {
            fn = moduleObjects[functionName];
            if (fn == null) throw new (0, _errors.ValueError)(`Unknown ${printableModuleName}: ${identifier}. ` + `This may be due to one of the following reasons:\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`);
        }
        return fn;
    } else {
        // In this case we are dealing with a Keras config dictionary.
        const config = identifier;
        if (config["className"] == null || config["config"] == null) throw new (0, _errors.ValueError)(`${printableModuleName}: Improper config format: ` + `${JSON.stringify(config)}.\n` + `'className' and 'config' must set.`);
        const className = config["className"];
        let cls, fromConfig;
        if (className in customObjects) [cls, fromConfig] = customObjects[className];
        else if (className in _GLOBAL_CUSTOM_OBJECTS) [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS["className"];
        else if (className in moduleObjects) [cls, fromConfig] = moduleObjects[className];
        if (cls == null) throw new (0, _errors.ValueError)(`Unknown ${printableModuleName}: ${className}. ` + `This may be due to one of the following reasons:\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`);
        if (fromConfig != null) {
            // Porting notes: Instead of checking to see whether fromConfig accepts
            // customObjects, we create a customObjects dictionary and tack it on to
            // config['config'] as config['config'].customObjects. Objects can use it,
            // if they want.
            // tslint:disable-next-line:no-any
            const customObjectsCombined = {};
            for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS))customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];
            for (const key1 of Object.keys(customObjects))customObjectsCombined[key1] = customObjects[key1];
            // Add the customObjects to config
            const nestedConfig = config["config"];
            nestedConfig["customObjects"] = customObjectsCombined;
            const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);
            for (const key2 of Object.keys(customObjects))_GLOBAL_CUSTOM_OBJECTS[key2] = customObjects[key2];
            convertNDArrayScalarsInConfig(config["config"]);
            const returnObj = fromConfig(cls, config["config"], customObjects, fastWeightInit);
            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);
            return returnObj;
        } else {
            // Then `cls` may be a function returning a class.
            // In this case by convention `config` holds
            // the kwargs of the function.
            const backupCustomObjects1 = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);
            for (const key3 of Object.keys(customObjects))_GLOBAL_CUSTOM_OBJECTS[key3] = customObjects[key3];
            // In python this is **config['config'], for tfjs-layers we require
            // classes that use this fall-through construction method to take
            // a config interface that mimics the expansion of named parameters.
            const returnObj1 = new cls(config["config"]);
            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects1);
            return returnObj1;
        }
    }
}
function numberCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
function reverseNumberCompare(a, b) {
    return -1 * numberCompare(a, b);
}
function stringToDType(dtype) {
    switch(dtype){
        case "float32":
            return "float32";
        default:
            throw new (0, _errors.ValueError)(`Invalid dtype: ${dtype}`);
    }
}
function stringsEqual(xs, ys) {
    if (xs == null || ys == null) return xs === ys;
    if (xs.length !== ys.length) return false;
    for(let i = 0; i < xs.length; ++i){
        if (xs[i] !== ys[i]) return false;
    }
    return true;
}
function unique(xs) {
    if (xs == null) return xs;
    const out = [];
    // TODO(cais): Maybe improve performance by sorting.
    for (const x of xs)if (out.indexOf(x) === -1) out.push(x);
    return out;
}
function isObjectEmpty(obj) {
    if (obj == null) throw new (0, _errors.ValueError)(`Invalid value in obj: ${JSON.stringify(obj)}`);
    for(const key in obj){
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}
function checkStringTypeUnionValue(values, label, value) {
    if (value == null) return;
    if (values.indexOf(value) < 0) throw new (0, _errors.ValueError)(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);
}
function checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {
    assert(minLength >= 0);
    assert(maxLength >= minLength);
    return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every((e)=>typeof e === expectedType);
}
function assertPositiveInteger(value, name) {
    if (Array.isArray(value)) {
        (0, _tfjsCore.util).assert(value.length > 0, ()=>`${name} is unexpectedly an empty array.`);
        value.forEach((v, i)=>assertPositiveInteger(v, `element ${i + 1} of ${name}`));
    } else (0, _tfjsCore.util).assert(Number.isInteger(value) && value > 0, ()=>`Expected ${name} to be a positive integer, but got ` + `${formatAsFriendlyString(value)}.`);
}
function formatAsFriendlyString(value) {
    if (value === null) return "null";
    else if (Array.isArray(value)) return "[" + value.map((v)=>formatAsFriendlyString(v)).join(",") + "]";
    else if (typeof value === "string") return `"${value}"`;
    else return `${value}`;
}
function debounce(f, waitMs) {
    let lastTime = (0, _tfjsCore.util).now();
    let lastResult;
    const f2 = (...args)=>{
        const now = (0, _tfjsCore.util).now();
        if (now - lastTime < waitMs) return lastResult;
        lastTime = now;
        lastResult = f(...args);
        return lastResult;
    };
    return f2;
}
function mapActivationToFusedKernel(activationName) {
    if (activationName === "relu") return "relu";
    if (activationName === "linear") return "linear";
    if (activationName === "elu") return "elu";
    return null;
}

},{"@tensorflow/tfjs-core":"2votT","../errors":"kA7ff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kA7ff":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Explicit error types.
 *
 * See the following link for more information about why the code includes
 * calls to setPrototypeOf:
 *
 * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
 */ // tslint:enable
/**
 * Equivalent of Python's AttributeError.
 */ parcelHelpers.export(exports, "AttributeError", ()=>AttributeError);
/**
 * Equivalent of Python's RuntimeError.
 */ parcelHelpers.export(exports, "RuntimeError", ()=>RuntimeError);
/**
 * Equivalent of Python's ValueError.
 */ parcelHelpers.export(exports, "ValueError", ()=>ValueError);
/**
 * Equivalent of Python's NotImplementedError.
 */ parcelHelpers.export(exports, "NotImplementedError", ()=>NotImplementedError);
/**
 * Equivalent of Python's AssertionError.
 */ parcelHelpers.export(exports, "AssertionError", ()=>AssertionError);
/**
 * Equivalent of Python's IndexError.
 */ parcelHelpers.export(exports, "IndexError", ()=>IndexError);
class AttributeError extends Error {
    constructor(message){
        super(message);
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, AttributeError.prototype);
    }
}
class RuntimeError extends Error {
    constructor(message){
        super(message);
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, RuntimeError.prototype);
    }
}
class ValueError extends Error {
    constructor(message){
        super(message);
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, ValueError.prototype);
    }
}
class NotImplementedError extends Error {
    constructor(message){
        super(message);
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, NotImplementedError.prototype);
    }
}
class AssertionError extends Error {
    constructor(message){
        super(message);
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, AssertionError.prototype);
    }
}
class IndexError extends Error {
    constructor(message){
        super(message);
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, IndexError.prototype);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lecKi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Initializer that generates tensors initialized to 0.
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "zeros", ()=>zeros);
/**
 * Initializer that generates tensors initialized to 1.
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "ones", ()=>ones);
/**
 * Initializer that generates values initialized to some constant.
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "constant", ()=>constant);
/**
 * Initializer that generates random values initialized to a uniform
 * distribution.
 *
 * Values will be distributed uniformly between the configured minval and
 * maxval.
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "randomUniform", ()=>randomUniform);
/**
 * Initializer that generates random values initialized to a normal
 * distribution.
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "randomNormal", ()=>randomNormal);
/**
 * Initializer that generates random values initialized to a truncated normal.
 * distribution.
 *
 * These values are similar to values from a `RandomNormal` except that values
 * more than two standard deviations from the mean are discarded and re-drawn.
 * This is the recommended initializer for neural network weights and filters.
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "truncatedNormal", ()=>truncatedNormal);
/**
 * Initializer that generates the identity matrix.
 * Only use for square 2D matrices.
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "identity", ()=>identity);
/**
 * Initializer capable of adapting its scale to the shape of weights.
 * With distribution=NORMAL, samples are drawn from a truncated normal
 * distribution centered on zero, with `stddev = sqrt(scale / n)` where n is:
 *   - number of input units in the weight tensor, if mode = FAN_IN.
 *   - number of output units, if mode = FAN_OUT.
 *   - average of the numbers of input and output units, if mode = FAN_AVG.
 * With distribution=UNIFORM,
 * samples are drawn from a uniform distribution
 * within [-limit, limit], with `limit = sqrt(3 * scale / n)`.
 */ /** @doc {heading: 'Initializers',namespace: 'initializers'} */ parcelHelpers.export(exports, "varianceScaling", ()=>varianceScaling);
/**
 * Glorot uniform initializer, also called Xavier uniform initializer.
 * It draws samples from a uniform distribution within [-limit, limit]
 * where `limit` is `sqrt(6 / (fan_in + fan_out))`
 * where `fan_in` is the number of input units in the weight tensor
 * and `fan_out` is the number of output units in the weight tensor
 *
 * Reference:
 *   Glorot & Bengio, AISTATS 2010
 *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "glorotUniform", ()=>glorotUniform);
/**
 * Glorot normal initializer, also called Xavier normal initializer.
 * It draws samples from a truncated normal distribution centered on 0
 * with `stddev = sqrt(2 / (fan_in + fan_out))`
 * where `fan_in` is the number of input units in the weight tensor
 * and `fan_out` is the number of output units in the weight tensor.
 *
 * Reference:
 *   Glorot & Bengio, AISTATS 2010
 *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "glorotNormal", ()=>glorotNormal);
/**
 * He normal initializer.
 *
 * It draws samples from a truncated normal distribution centered on 0
 * with `stddev = sqrt(2 / fanIn)`
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * Reference:
 *     He et al., http://arxiv.org/abs/1502.01852
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "heNormal", ()=>heNormal);
/**
 * He uniform initializer.
 *
 * It draws samples from a uniform distribution within [-limit, limit]
 * where `limit` is `sqrt(6 / fan_in)`
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * Reference:
 *     He et al., http://arxiv.org/abs/1502.01852
 */ /** @doc {heading: 'Initializers',namespace: 'initializers'} */ parcelHelpers.export(exports, "heUniform", ()=>heUniform);
/**
 * LeCun normal initializer.
 *
 * It draws samples from a truncated normal distribution centered on 0
 * with `stddev = sqrt(1 / fanIn)`
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * References:
 *   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
 *   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "leCunNormal", ()=>leCunNormal);
/**
 * LeCun uniform initializer.
 *
 * It draws samples from a uniform distribution in the interval
 * `[-limit, limit]` with `limit = sqrt(3 / fanIn)`,
 * where `fanIn` is the number of input units in the weight tensor.
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "leCunUniform", ()=>leCunUniform);
/**
 * Initializer that generates a random orthogonal matrix.
 *
 * Reference:
 * [Saxe et al., http://arxiv.org/abs/1312.6120](http://arxiv.org/abs/1312.6120)
 */ /** @doc {heading: 'Initializers', namespace: 'initializers'} */ parcelHelpers.export(exports, "orthogonal", ()=>orthogonal);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ // tslint:disable-next-line:max-line-length
var _initializers = require("./initializers");
function zeros() {
    return new (0, _initializers.Zeros)();
}
function ones() {
    return new (0, _initializers.Ones)();
}
function constant(args) {
    return new (0, _initializers.Constant)(args);
}
function randomUniform(args) {
    return new (0, _initializers.RandomUniform)(args);
}
function randomNormal(args) {
    return new (0, _initializers.RandomNormal)(args);
}
function truncatedNormal(args) {
    return new (0, _initializers.TruncatedNormal)(args);
}
function identity(args) {
    return new (0, _initializers.Identity)(args);
}
function varianceScaling(config) {
    return new (0, _initializers.VarianceScaling)(config);
}
function glorotUniform(args) {
    return new (0, _initializers.GlorotUniform)(args);
}
function glorotNormal(args) {
    return new (0, _initializers.GlorotNormal)(args);
}
function heNormal(args) {
    return new (0, _initializers.HeNormal)(args);
}
function heUniform(args) {
    return new (0, _initializers.HeUniform)(args);
}
function leCunNormal(args) {
    return new (0, _initializers.LeCunNormal)(args);
}
function leCunUniform(args) {
    return new (0, _initializers.LeCunUniform)(args);
}
function orthogonal(args) {
    return new (0, _initializers.Orthogonal)(args);
}

},{"./initializers":"4FrEp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4FrEp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkFanMode", ()=>checkFanMode);
parcelHelpers.export(exports, "checkDistribution", ()=>checkDistribution);
/**
 * Initializer base class.
 *
 * @doc {
 *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}
 */ parcelHelpers.export(exports, "Initializer", ()=>Initializer);
parcelHelpers.export(exports, "Zeros", ()=>Zeros);
parcelHelpers.export(exports, "Ones", ()=>Ones);
parcelHelpers.export(exports, "Constant", ()=>Constant);
parcelHelpers.export(exports, "RandomUniform", ()=>RandomUniform);
parcelHelpers.export(exports, "RandomNormal", ()=>RandomNormal);
parcelHelpers.export(exports, "TruncatedNormal", ()=>TruncatedNormal);
parcelHelpers.export(exports, "Identity", ()=>Identity);
parcelHelpers.export(exports, "VarianceScaling", ()=>VarianceScaling);
parcelHelpers.export(exports, "GlorotUniform", ()=>GlorotUniform);
parcelHelpers.export(exports, "GlorotNormal", ()=>GlorotNormal);
parcelHelpers.export(exports, "HeNormal", ()=>HeNormal);
parcelHelpers.export(exports, "HeUniform", ()=>HeUniform);
parcelHelpers.export(exports, "LeCunNormal", ()=>LeCunNormal);
parcelHelpers.export(exports, "LeCunUniform", ()=>LeCunUniform);
parcelHelpers.export(exports, "Orthogonal", ()=>Orthogonal);
parcelHelpers.export(exports, "INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP", ()=>INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP);
parcelHelpers.export(exports, "serializeInitializer", ()=>serializeInitializer);
parcelHelpers.export(exports, "getInitializer", ()=>getInitializer);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("./backend/tfjs_backend");
var _common = require("./common");
var _errors = require("./errors");
var _initializerConfig = require("./keras_format/initializer_config");
var _genericUtils = require("./utils/generic_utils");
var _mathUtils = require("./utils/math_utils");
function checkFanMode(value) {
    (0, _genericUtils.checkStringTypeUnionValue)((0, _initializerConfig.VALID_FAN_MODE_VALUES), "FanMode", value);
}
function checkDistribution(value) {
    (0, _genericUtils.checkStringTypeUnionValue)((0, _initializerConfig.VALID_DISTRIBUTION_VALUES), "Distribution", value);
}
class Initializer extends (0, _tfjsCore.serialization).Serializable {
    fromConfigUsesCustomObjects() {
        return false;
    }
    getConfig() {
        return {};
    }
}
class Zeros extends Initializer {
    apply(shape, dtype) {
        return (0, _tfjsCore.zeros)(shape, dtype);
    }
}
/** @nocollapse */ Zeros.className = "Zeros";
(0, _tfjsCore.serialization).registerClass(Zeros);
class Ones extends Initializer {
    apply(shape, dtype) {
        return (0, _tfjsCore.ones)(shape, dtype);
    }
}
/** @nocollapse */ Ones.className = "Ones";
(0, _tfjsCore.serialization).registerClass(Ones);
class Constant extends Initializer {
    constructor(args){
        super();
        if (typeof args !== "object") throw new (0, _errors.ValueError)(`Expected argument of type ConstantConfig but got ${args}`);
        if (args.value === undefined) throw new (0, _errors.ValueError)(`config must have value set but got ${args}`);
        this.value = args.value;
    }
    apply(shape, dtype) {
        return (0, _tfjsCore.tidy)(()=>(0, _tfjsCore.mul)((0, _tfjsCore.scalar)(this.value), (0, _tfjsCore.ones)(shape, dtype)));
    }
    getConfig() {
        return {
            value: this.value
        };
    }
}
/** @nocollapse */ Constant.className = "Constant";
(0, _tfjsCore.serialization).registerClass(Constant);
class RandomUniform extends Initializer {
    constructor(args){
        super();
        this.DEFAULT_MINVAL = -0.05;
        this.DEFAULT_MAXVAL = 0.05;
        this.minval = args.minval || this.DEFAULT_MINVAL;
        this.maxval = args.maxval || this.DEFAULT_MAXVAL;
        this.seed = args.seed;
    }
    apply(shape, dtype) {
        return (0, _tfjsCore.randomUniform)(shape, this.minval, this.maxval, dtype);
    }
    getConfig() {
        return {
            minval: this.minval,
            maxval: this.maxval,
            seed: this.seed
        };
    }
}
/** @nocollapse */ RandomUniform.className = "RandomUniform";
(0, _tfjsCore.serialization).registerClass(RandomUniform);
class RandomNormal extends Initializer {
    constructor(args){
        super();
        this.DEFAULT_MEAN = 0.;
        this.DEFAULT_STDDEV = 0.05;
        this.mean = args.mean || this.DEFAULT_MEAN;
        this.stddev = args.stddev || this.DEFAULT_STDDEV;
        this.seed = args.seed;
    }
    apply(shape, dtype) {
        dtype = dtype || "float32";
        if (dtype !== "float32" && dtype !== "int32") throw new (0, _errors.NotImplementedError)(`randomNormal does not support dType ${dtype}.`);
        return _tfjsBackend.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);
    }
    getConfig() {
        return {
            mean: this.mean,
            stddev: this.stddev,
            seed: this.seed
        };
    }
}
/** @nocollapse */ RandomNormal.className = "RandomNormal";
(0, _tfjsCore.serialization).registerClass(RandomNormal);
class TruncatedNormal extends Initializer {
    constructor(args){
        super();
        this.DEFAULT_MEAN = 0.;
        this.DEFAULT_STDDEV = 0.05;
        this.mean = args.mean || this.DEFAULT_MEAN;
        this.stddev = args.stddev || this.DEFAULT_STDDEV;
        this.seed = args.seed;
    }
    apply(shape, dtype) {
        dtype = dtype || "float32";
        if (dtype !== "float32" && dtype !== "int32") throw new (0, _errors.NotImplementedError)(`truncatedNormal does not support dType ${dtype}.`);
        return (0, _tfjsCore.truncatedNormal)(shape, this.mean, this.stddev, dtype, this.seed);
    }
    getConfig() {
        return {
            mean: this.mean,
            stddev: this.stddev,
            seed: this.seed
        };
    }
}
/** @nocollapse */ TruncatedNormal.className = "TruncatedNormal";
(0, _tfjsCore.serialization).registerClass(TruncatedNormal);
class Identity extends Initializer {
    constructor(args){
        super();
        this.gain = args.gain != null ? args.gain : 1.0;
    }
    apply(shape, dtype) {
        return (0, _tfjsCore.tidy)(()=>{
            if (shape.length !== 2 || shape[0] !== shape[1]) throw new (0, _errors.ValueError)("Identity matrix initializer can only be used for 2D square matrices.");
            else return (0, _tfjsCore.mul)(this.gain, (0, _tfjsCore.eye)(shape[0]));
        });
    }
    getConfig() {
        return {
            gain: this.gain
        };
    }
}
/** @nocollapse */ Identity.className = "Identity";
(0, _tfjsCore.serialization).registerClass(Identity);
/**
 * Computes the number of input and output units for a weight shape.
 * @param shape Shape of weight.
 * @param dataFormat data format to use for convolution kernels.
 *   Note that all kernels in Keras are standardized on the
 *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).
 * @return An length-2 array: fanIn, fanOut.
 */ function computeFans(shape, dataFormat = "channelsLast") {
    let fanIn;
    let fanOut;
    (0, _common.checkDataFormat)(dataFormat);
    if (shape.length === 2) {
        fanIn = shape[0];
        fanOut = shape[1];
    } else if ([
        3,
        4,
        5
    ].indexOf(shape.length) !== -1) {
        if (dataFormat === "channelsFirst") {
            const receptiveFieldSize = (0, _mathUtils.arrayProd)(shape, 2);
            fanIn = shape[1] * receptiveFieldSize;
            fanOut = shape[0] * receptiveFieldSize;
        } else if (dataFormat === "channelsLast") {
            const receptiveFieldSize1 = (0, _mathUtils.arrayProd)(shape, 0, shape.length - 2);
            fanIn = shape[shape.length - 2] * receptiveFieldSize1;
            fanOut = shape[shape.length - 1] * receptiveFieldSize1;
        }
    } else {
        const shapeProd = (0, _mathUtils.arrayProd)(shape);
        fanIn = Math.sqrt(shapeProd);
        fanOut = Math.sqrt(shapeProd);
    }
    return [
        fanIn,
        fanOut
    ];
}
class VarianceScaling extends Initializer {
    /**
     * Constructor of VarianceScaling.
     * @throws ValueError for invalid value in scale.
     */ constructor(args){
        super();
        if (args.scale < 0.0) throw new (0, _errors.ValueError)(`scale must be a positive float. Got: ${args.scale}`);
        this.scale = args.scale == null ? 1.0 : args.scale;
        this.mode = args.mode == null ? "fanIn" : args.mode;
        checkFanMode(this.mode);
        this.distribution = args.distribution == null ? "normal" : args.distribution;
        checkDistribution(this.distribution);
        this.seed = args.seed;
    }
    apply(shape, dtype) {
        const fans = computeFans(shape);
        const fanIn = fans[0];
        const fanOut = fans[1];
        let scale = this.scale;
        if (this.mode === "fanIn") scale /= Math.max(1, fanIn);
        else if (this.mode === "fanOut") scale /= Math.max(1, fanOut);
        else scale /= Math.max(1, (fanIn + fanOut) / 2);
        if (this.distribution === "normal") {
            const stddev = Math.sqrt(scale);
            dtype = dtype || "float32";
            if (dtype !== "float32" && dtype !== "int32") throw new (0, _errors.NotImplementedError)(`${this.getClassName()} does not support dType ${dtype}.`);
            return (0, _tfjsCore.truncatedNormal)(shape, 0, stddev, dtype, this.seed);
        } else {
            const limit = Math.sqrt(3 * scale);
            return (0, _tfjsCore.randomUniform)(shape, -limit, limit, dtype);
        }
    }
    getConfig() {
        return {
            scale: this.scale,
            mode: this.mode,
            distribution: this.distribution,
            seed: this.seed
        };
    }
}
/** @nocollapse */ VarianceScaling.className = "VarianceScaling";
(0, _tfjsCore.serialization).registerClass(VarianceScaling);
class GlorotUniform extends VarianceScaling {
    /**
     * Constructor of GlorotUniform
     * @param scale
     * @param mode
     * @param distribution
     * @param seed
     */ constructor(args){
        super({
            scale: 1.0,
            mode: "fanAvg",
            distribution: "uniform",
            seed: args == null ? null : args.seed
        });
    }
    getClassName() {
        // In Python Keras, GlorotUniform is not a class, but a helper method
        // that creates a VarianceScaling object. Use 'VarianceScaling' as
        // class name to be compatible with that.
        return VarianceScaling.className;
    }
}
/** @nocollapse */ GlorotUniform.className = "GlorotUniform";
(0, _tfjsCore.serialization).registerClass(GlorotUniform);
class GlorotNormal extends VarianceScaling {
    /**
     * Constructor of GlorotNormal.
     * @param scale
     * @param mode
     * @param distribution
     * @param seed
     */ constructor(args){
        super({
            scale: 1.0,
            mode: "fanAvg",
            distribution: "normal",
            seed: args == null ? null : args.seed
        });
    }
    getClassName() {
        // In Python Keras, GlorotNormal is not a class, but a helper method
        // that creates a VarianceScaling object. Use 'VarianceScaling' as
        // class name to be compatible with that.
        return VarianceScaling.className;
    }
}
/** @nocollapse */ GlorotNormal.className = "GlorotNormal";
(0, _tfjsCore.serialization).registerClass(GlorotNormal);
class HeNormal extends VarianceScaling {
    constructor(args){
        super({
            scale: 2.0,
            mode: "fanIn",
            distribution: "normal",
            seed: args == null ? null : args.seed
        });
    }
    getClassName() {
        // In Python Keras, HeNormal is not a class, but a helper method
        // that creates a VarianceScaling object. Use 'VarianceScaling' as
        // class name to be compatible with that.
        return VarianceScaling.className;
    }
}
/** @nocollapse */ HeNormal.className = "HeNormal";
(0, _tfjsCore.serialization).registerClass(HeNormal);
class HeUniform extends VarianceScaling {
    constructor(args){
        super({
            scale: 2.0,
            mode: "fanIn",
            distribution: "uniform",
            seed: args == null ? null : args.seed
        });
    }
    getClassName() {
        // In Python Keras, HeUniform is not a class, but a helper method
        // that creates a VarianceScaling object. Use 'VarianceScaling' as
        // class name to be compatible with that.
        return VarianceScaling.className;
    }
}
/** @nocollapse */ HeUniform.className = "HeUniform";
(0, _tfjsCore.serialization).registerClass(HeUniform);
class LeCunNormal extends VarianceScaling {
    constructor(args){
        super({
            scale: 1.0,
            mode: "fanIn",
            distribution: "normal",
            seed: args == null ? null : args.seed
        });
    }
    getClassName() {
        // In Python Keras, LeCunNormal is not a class, but a helper method
        // that creates a VarianceScaling object. Use 'VarianceScaling' as
        // class name to be compatible with that.
        return VarianceScaling.className;
    }
}
/** @nocollapse */ LeCunNormal.className = "LeCunNormal";
(0, _tfjsCore.serialization).registerClass(LeCunNormal);
class LeCunUniform extends VarianceScaling {
    constructor(args){
        super({
            scale: 1.0,
            mode: "fanIn",
            distribution: "uniform",
            seed: args == null ? null : args.seed
        });
    }
    getClassName() {
        // In Python Keras, LeCunUniform is not a class, but a helper method
        // that creates a VarianceScaling object. Use 'VarianceScaling' as
        // class name to be compatible with that.
        return VarianceScaling.className;
    }
}
/** @nocollapse */ LeCunUniform.className = "LeCunNormal";
(0, _tfjsCore.serialization).registerClass(LeCunUniform);
class Orthogonal extends Initializer {
    constructor(args){
        super();
        this.DEFAULT_GAIN = 1;
        this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;
        this.seed = args.seed;
        if (this.seed != null) throw new (0, _errors.NotImplementedError)("Random seed is not implemented for Orthogonal Initializer yet.");
    }
    apply(shape, dtype) {
        return (0, _tfjsCore.tidy)(()=>{
            if (shape.length !== 2) throw new (0, _errors.NotImplementedError)("The Orthogonal Initializer does not support non-2D shapes yet.");
            if (shape[0] * shape[1] > 2000) console.warn(`Orthogonal initializer is being called on a matrix with more ` + `than 2000 (${shape[0] * shape[1]}) elements: ` + `Slowness may result.`);
            // TODO(cais): Add seed support.
            const normalizedShape = shape[0] > shape[1] ? [
                shape[1],
                shape[0]
            ] : shape;
            const a = _tfjsBackend.randomNormal(normalizedShape, 0, 1, "float32");
            let q = (0, _tfjsCore.linalg).gramSchmidt(a);
            if (shape[0] > shape[1]) q = q.transpose();
            return (0, _tfjsCore.mul)(this.gain, q);
        });
    }
    getConfig() {
        return {
            gain: this.gain,
            seed: this.seed
        };
    }
}
/** @nocollapse */ Orthogonal.className = "Orthogonal";
(0, _tfjsCore.serialization).registerClass(Orthogonal);
const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    "constant": "Constant",
    "glorotNormal": "GlorotNormal",
    "glorotUniform": "GlorotUniform",
    "heNormal": "HeNormal",
    "heUniform": "HeUniform",
    "identity": "Identity",
    "leCunNormal": "LeCunNormal",
    "leCunUniform": "LeCunUniform",
    "ones": "Ones",
    "orthogonal": "Orthogonal",
    "randomNormal": "RandomNormal",
    "randomUniform": "RandomUniform",
    "truncatedNormal": "TruncatedNormal",
    "varianceScaling": "VarianceScaling",
    "zeros": "Zeros"
};
function deserializeInitializer(config, customObjects = {}) {
    return (0, _genericUtils.deserializeKerasObject)(config, (0, _tfjsCore.serialization).SerializationMap.getMap().classNameMap, customObjects, "initializer");
}
function serializeInitializer(initializer) {
    return (0, _genericUtils.serializeKerasObject)(initializer);
}
function getInitializer(identifier) {
    if (typeof identifier === "string") {
        const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;
        /* We have four 'helper' classes for common initializers that
        all get serialized as 'VarianceScaling' and shouldn't go through
        the deserializeInitializer pathway. */ if (className === "GlorotNormal") return new GlorotNormal();
        else if (className === "GlorotUniform") return new GlorotUniform();
        else if (className === "HeNormal") return new HeNormal();
        else if (className === "HeUniform") return new HeUniform();
        else if (className === "LeCunNormal") return new LeCunNormal();
        else if (className === "LeCunUniform") return new LeCunUniform();
        else {
            const config = {};
            config["className"] = className;
            config["config"] = {};
            return deserializeInitializer(config);
        }
    } else if (identifier instanceof Initializer) return identifier;
    else return deserializeInitializer(identifier);
}

},{"@tensorflow/tfjs-core":"2votT","./backend/tfjs_backend":"iABet","./common":"fOhOh","./errors":"kA7ff","./keras_format/initializer_config":"hAfoM","./utils/generic_utils":"2cErd","./utils/math_utils":"865Nd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iABet":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setBackend", ()=>setBackend);
parcelHelpers.export(exports, "getBackend", ()=>getBackend);
/**
 * Indicates whether the backend is operating symbolically.
 *
 * This function will be used to determine how to interpret user code. If
 * it returns true, calls to the backend construct a symbolic graph; if
 * it returns false, calls to the backend execute immediately.
 */ parcelHelpers.export(exports, "isBackendSymbolic", ()=>isBackendSymbolic);
/**
 * Get the number of elements in a Tensor.
 * @param x The Tensor.
 * @return Number of elements in `x`.
 */ parcelHelpers.export(exports, "countParams", ()=>countParams);
/**
 * Casts a tensor to a different dtype and returns it.
 * @param x Input tensor.
 * @param dtype String: 'float32'|'int32'|'bool'.
 * @returns Tensor of the specified `dtype`.
 */ parcelHelpers.export(exports, "cast", ()=>cast);
/**
 * Adds a 1-sized dimension at index "axis".
 * @param x Input tensor.
 * @param axis Position where to add the new axis.
 * @returns Result of the dimension expansion.
 */ parcelHelpers.export(exports, "expandDims", ()=>expandDims);
/**
 * Repeats a 2D tensor.
 *
 * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output
 * will have shape `[samples, 2, dim]`.
 *
 * @param x Input tensor.
 * @param n Integer, number of times to repeat.
 * @returns The result of the repeat operation.
 * @throws ValueError: If input tensor is not 2D.
 */ parcelHelpers.export(exports, "repeat", ()=>repeat);
/**
 * Flatten an Tensor into 1D.
 * @param x Input tensor.
 * @return The result of the flattening `x`.
 */ parcelHelpers.export(exports, "flatten", ()=>flatten);
/**
 * Turn a nD tensor into a 2D tensor with same 0th dimension.
 * In other words, it flattens each data samples of a batch.
 *
 * @param x The tensor to flatten. The rank of this tensor is required to be 2
 *   or higher.
 * @return The result of the flattening.
 */ parcelHelpers.export(exports, "batchFlatten", ()=>batchFlatten);
/**
 * Do slicing along the first axis.
 * @param array input `tf.Tensor`.
 * @param start starting index, inclusive.
 * @param size size of the slice along the first axis.
 * @returns result of the slicing.
 * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.
 */ parcelHelpers.export(exports, "sliceAlongFirstAxis", ()=>sliceAlongFirstAxis);
/**
 * Do slicing along the last axis.
 * @param array input `tf.Tensor`.
 * @param start starting index, inclusive.
 * @param size size of the slice along the last axis.
 * @returns result of the slicing.
 * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.
 */ parcelHelpers.export(exports, "sliceAlongLastAxis", ()=>sliceAlongLastAxis);
/**
 * Do slicing along the sepcified axis.
 * @param array input `tf.Tensor`.
 * @param start starting index, inclusive.
 * @param size of the slice along the chosen axis.
 * @param choose an axis.
 * @returns result of the slicing.
 * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.
 */ parcelHelpers.export(exports, "sliceAlongAxis", ()=>sliceAlongAxis);
/**
 * Concatenates a list of tensors alongside the specified axis.
 * @param tensors `Array` of tensors to concatenate.
 * @param axis Concatenation axis.
 * @returns The result of the concatenation.
 */ parcelHelpers.export(exports, "concatenate", ()=>concatenate);
/**
 * Concatenate two arrays along the first dimension.
 * @param a The 1st `tf.Tensor` to concatenate.
 * @param b The 2nd `tf.Tensor` to concatenate.
 * @returns Result of the concatenation.
 * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.
 */ parcelHelpers.export(exports, "concatAlongFirstAxis", ()=>concatAlongFirstAxis);
/**
 * Creates a tensor by tiling `x` by `n`.
 * @param x A tensor.
 * @param n An Array of integers or a single integer. If an Array, the length
 *   must be the same as the number of dimensions in `x`. If a single integer,
 *   it will be treated as an Array of length 1.
 */ parcelHelpers.export(exports, "tile", ()=>tile);
/* Creation of random tensors. */ /**
 * Get a tensor with normal distribution of values.
 *
 * @param shape Shape of the tensor.
 * @param mean mean value of the normal distribution.
 * @param stddev standard deviation of the normal distribution.
 * @param dtype
 * @param seed
 * @return The normal tensor.
 */ parcelHelpers.export(exports, "randomNormal", ()=>randomNormal);
/* Linear Algebra */ /**
 * Multiply two tensors and returns the result as a tensor.
 *
 * For 2D tensors, this is equivalent to matrix multiplication (matMul).
 * For tensors of higher ranks, it follows the Theano behavior,
 * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:
 *
 * For N dimensions it is a sum product over the last axis of x and the
 * second-to-last of y:
 *
 * @param a A tensor of at least rank 2.
 * @param b A tensor of at least rank 2.
 * @param activation (optional) A string identifying the activation
 *   function.
 * @return Result of the dot operation.
 */ parcelHelpers.export(exports, "dot", ()=>dot);
/**
 * Compute the sign Tensor of an input Tensor.
 *
 * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.
 * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.
 * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.
 *
 * @param x Input `tf.Tensor`.
 * @return The sign `tf.Tensor`.
 */ parcelHelpers.export(exports, "sign", ()=>sign);
/**
 * Computes the one-hot representation of an integer tensor.
 * @param indices nD integer tensor of shape
 *   `(batch_size, dim1, dim2, ... dim(n-1))`
 * @param numClasses Integer, number of classes to consider.
 * @returns (n + 1)D one hot representation of the input
 *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`
 */ parcelHelpers.export(exports, "oneHot", ()=>oneHot);
/* Elementary math functions. */ /**
 * Retrieves the elements of indices `indices` in the tensor `reference`.
 * @param reference A tensor.
 * @param indices An integer tensor of indices or an `Array` of integers.
 * @param axis Axis along which to perform the gather operation.
 * @returns The result of the gathering as a tensor.
 */ parcelHelpers.export(exports, "gather", ()=>gather);
/**
 * Element-wise square.
 * @param x Input tensor.
 * @return element-wise x^2
 */ parcelHelpers.export(exports, "square", ()=>square);
/**
 * Element-wise exponentiation.
 *
 * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which
 *   takes advatnage of the backend's (e.g., TensorFlow's) automatic
 * conversion to tensor. Here we allow `a` to be either a number or a tensor.
 *
 * @param x The base tensor.
 * @param a The exponent, tensor or number. If a number, it is rounded to the
 *   nearest integer and converted to a tensor.
 * @returns A tensor of the same shape as `x`.
 */ parcelHelpers.export(exports, "pow", ()=>pow);
/* Neural-network operations. */ /**
 * Add a bias to a tensor.
 *
 * @param x The tensor to add the bias to.
 * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.
 * @return Result of the bias adding.
 * @throws ValueError: If the rank of `bias` is incorrect.
 */ parcelHelpers.export(exports, "biasAdd", ()=>biasAdd);
/**
 * Exponential linear unit (ELU).
 * @param x A tensor or variable to compute the activation function for.
 * @param alpha: A scalar, a scaling factor for the negative section.
 * @return Output of the ELU operation.
 */ parcelHelpers.export(exports, "elu", ()=>elu);
/**
 * Softsign of a tensor.
 *
 * Defined as x / (abs(x) + 1), element-wise.
 *
 * @param x: Input.
 * @returns Output.
 */ parcelHelpers.export(exports, "softsign", ()=>softsign);
/**
 * Sets entries in `x` to zero at random, while scaling the entire tensor.
 *
 * @param x input tensor.
 * @param level fraction of the entries in the tensor that will be set to 0.
 * @param noiseShape shape of randomly generated keep/drop flags, must be
 *   broadcastable to the shape of `x`. Optional.
 * @param seed random seed to ensure determinism. Optional.
 * @returns Result of the dropout operation.
 */ parcelHelpers.export(exports, "dropout", ()=>dropout);
/**
 * Element-wise, segment-wise linear approximation of sigmoid.
 *
 * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.
 * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.
 *
 * @param x Input tensor.
 * @returns Output tensor.
 */ parcelHelpers.export(exports, "hardSigmoid", ()=>hardSigmoid);
/**
 * Invoke `x` in the training phase, and `alt` otherwise.
 *
 * Porting Note: We do not create placeholder tensors for the `training`
 * boolean flag here, because there is no such thing in the TF.js imperative
 * backend.
 *
 * @param x The function to invoke iff `training` is `true`.
 * @param alt The function to invoke iff `training` is `false`.
 * @param training Boolean flag for whether training phase is active.
 * @returns The return value of `x()` if `training` is `true`, or the return
 *   value of `alt()` if `training` is `false`.
 */ parcelHelpers.export(exports, "inTrainPhase", ()=>inTrainPhase);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * deeplearn.js backend.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _common = require("../common");
var _errors = require("../errors");
var _mathUtils = require("../utils/math_utils");
var _common1 = require("./common");
// tslint:enable
/* Setting and getting backend from deeplearn.js. */ // Default deeplearn.js backend is WebGL (GPU).
let backend = "webgl";
function setBackend(requestedBackend) {
    _tfjsCore.setBackend(requestedBackend);
    backend = requestedBackend;
}
function getBackend() {
    return backend;
}
function isBackendSymbolic() {
    return false;
}
function countParams(x) {
    const shape = x.shape;
    if (shape.length > 0) return shape.reduce((a, b)=>a * b);
    else // Scalar.
    return 1;
}
function cast(x, dtype) {
    return x.asType(dtype);
}
function expandDims(x, axis = -1) {
    const outShape = x.shape.slice();
    if (axis < 0) axis = outShape.length + axis + 1;
    outShape.splice(axis, 0, 1);
    return x.reshape(outShape);
}
function repeat(x, n) {
    return (0, _tfjsCore.tidy)(()=>{
        if (x.shape.length !== 2) throw new (0, _errors.ValueError)(`repeat() expects a rank-2 tensor, but received a ` + `rank-${x.shape.length} tensor.`);
        const y = expandDims(x, 1);
        return tile(y, [
            1,
            n,
            1
        ]);
    });
}
function flatten(x) {
    const newShape = [
        _mathUtils.arrayProd(x.shape)
    ];
    return x.reshape(newShape);
}
function batchFlatten(x) {
    if (x.rank <= 1) throw new (0, _errors.ValueError)(`batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);
    const newShape = [
        x.shape[0],
        _mathUtils.arrayProd(x.shape, 1)
    ];
    return x.reshape(newShape);
}
function sliceAlongFirstAxis(array, start, size) {
    return (0, _tfjsCore.tidy)(()=>{
        switch(array.rank){
            case 1:
                return _tfjsCore.slice1d(array, start, size);
            case 2:
                return _tfjsCore.slice2d(array, [
                    start,
                    0
                ], [
                    size,
                    array.shape[1]
                ]);
            case 3:
                return _tfjsCore.slice3d(array, [
                    start,
                    0,
                    0
                ], [
                    size,
                    array.shape[1],
                    array.shape[2]
                ]);
            case 4:
                return _tfjsCore.slice4d(array, [
                    start,
                    0,
                    0,
                    0
                ], [
                    size,
                    array.shape[1],
                    array.shape[2],
                    array.shape[3]
                ]);
            case 5:
                return _tfjsCore.slice(array, [
                    start,
                    0,
                    0,
                    0,
                    0
                ], [
                    size,
                    array.shape[1],
                    array.shape[2],
                    array.shape[3],
                    array.shape[4]
                ]);
            case 6:
                return _tfjsCore.slice(array, [
                    start,
                    0,
                    0,
                    0,
                    0,
                    0
                ], [
                    size,
                    array.shape[1],
                    array.shape[2],
                    array.shape[3],
                    array.shape[4],
                    array.shape[5]
                ]);
            default:
                throw new (0, _errors.ValueError)(`sliceAlongFirstAxis() received an unsupported tensor rank: ` + `${array.rank}`);
        }
    });
}
function sliceAlongLastAxis(array, start, size) {
    return (0, _tfjsCore.tidy)(()=>{
        switch(array.rank){
            case 1:
                return _tfjsCore.slice1d(array, start, size);
            case 2:
                return _tfjsCore.slice2d(array, [
                    0,
                    start
                ], [
                    array.shape[0],
                    size
                ]);
            case 3:
                return _tfjsCore.slice3d(array, [
                    0,
                    0,
                    start
                ], [
                    array.shape[0],
                    array.shape[1],
                    size
                ]);
            case 4:
                return _tfjsCore.slice4d(array, [
                    0,
                    0,
                    0,
                    start
                ], [
                    array.shape[0],
                    array.shape[1],
                    array.shape[2],
                    size
                ]);
            default:
                throw new (0, _errors.ValueError)(`sliceAlongLastAxis() received an unsupported tensor rank: ` + `${array.rank}`);
        }
    });
}
function sliceAlongAxis(array, start, size, axis) {
    return (0, _tfjsCore.tidy)(()=>{
        switch(array.rank){
            case 1:
                return _tfjsCore.slice1d(array, start, size);
            case 2:
                switch(axis){
                    case 1:
                        return sliceAlongFirstAxis(array, start, size);
                    case 2:
                        return sliceAlongLastAxis(array, start, size);
                    default:
                        throw new (0, _errors.ValueError)(`The axis is not within the rank of the tensor ` + `${axis}`);
                }
            case 3:
                switch(axis){
                    case 1:
                        return sliceAlongFirstAxis(array, start, size);
                    case 2:
                        return _tfjsCore.slice3d(array, [
                            0,
                            start,
                            0
                        ], [
                            array.shape[0],
                            size,
                            array.shape[2]
                        ]);
                    case 3:
                        return sliceAlongLastAxis(array, start, size);
                    default:
                        throw new (0, _errors.ValueError)(`The axis is not within the rank of the tensor ` + `${axis}`);
                }
            case 4:
                switch(axis){
                    case 1:
                        return sliceAlongFirstAxis(array, start, size);
                    case 2:
                        return _tfjsCore.slice4d(array, [
                            0,
                            start,
                            0,
                            0
                        ], [
                            array.shape[0],
                            size,
                            array.shape[2],
                            array.shape[3]
                        ]);
                    case 3:
                        return _tfjsCore.slice4d(array, [
                            0,
                            0,
                            start,
                            0
                        ], [
                            array.shape[0],
                            array.shape[1],
                            size,
                            array.shape[3]
                        ]);
                    case 4:
                        return sliceAlongLastAxis(array, start, size);
                    default:
                        throw new (0, _errors.ValueError)(`The axis is not within the rank of the tensor ` + `${axis}`);
                }
            default:
                throw new (0, _errors.ValueError)(`sliceAlongLastAxis() received an unsupported tensor rank: ` + `${array.rank}`);
        }
    });
}
function concatenate(tensors, axis = -1) {
    let rank;
    if (axis < 0) {
        rank = tensors[0].rank;
        if (rank !== 0) axis = rank;
        else axis = 0;
    }
    if (axis === tensors[0].rank) // Porting Note: This is necessary because tfc.concat() requires axis to be
    //   in the interval [-rank, rank).
    axis = -1;
    // Porting Note: Sparse concat is not supported yet.
    return _tfjsCore.concat(tensors, axis);
}
function concatAlongFirstAxis(a, b) {
    switch(a.rank){
        case 1:
            return _tfjsCore.concat1d([
                a,
                b
            ]);
        case 2:
            return _tfjsCore.concat2d([
                a,
                b
            ], 0);
        case 3:
            return _tfjsCore.concat3d([
                a,
                b
            ], 0);
        case 4:
            return _tfjsCore.concat4d([
                a,
                b
            ], 0);
        default:
            throw new (0, _errors.ValueError)(`concatAlongFirstAxis() received an unsupported ` + `tensor rank: ${a.rank}`);
    }
}
function tile(x, n) {
    if (!Array.isArray(n)) n = [
        n
    ];
    if (x.rank !== n.length) throw new (0, _errors.ValueError)(`The length of input n (${n.length}) does not match ` + `the number of dimensions in input x (${x.rank})`);
    return _tfjsCore.tile(x, n);
}
function randomNormal(shape, mean = 0.0, stddev = 1.0, dtype, seed) {
    return _tfjsCore.randomNormal(shape, mean, stddev, dtype, seed);
}
function dot(a, b, activation, bias) {
    if (a.rank < 2 || b.rank < 2) throw new (0, _errors.NotImplementedError)(`dot requires both inputs to be rank >= 2` + ` but got x shape = ${a.shape} and y shape = ${b.shape}`);
    if (b.rank >= 3) {
        const xLastDim = a.shape.slice(-1)[0];
        const ySecondLastDim = b.shape.slice(-2)[0];
        if (xLastDim !== ySecondLastDim) throw new (0, _errors.NotImplementedError)(`If rank y >= 3, then the second last dim` + ` of y must equal the last dim of x but got x shape = ${a.shape} and ` + ` y shape = ${b.shape}`);
    }
    // Handle basic 2D x 2D case.
    if (a.rank === 2 && b.rank === 2) {
        const transposeA = false;
        const transposeB = false;
        // tfc.fused.matMul only fuses certain activation functions. Unsupported
        // activation functions are treated as 'linear' activations, which is
        // equivalent to a no-op.
        return _tfjsCore.fused.matMul({
            a,
            b: b,
            transposeA,
            transposeB,
            bias: bias ? reshapeBias(a.rank, bias, (0, _common1.imageDataFormat)()) : null,
            activation
        });
    } else {
        // Reshape x into the analogous 2D Tensor.
        const aFirstDims = a.shape.slice(); // Holds all but the last dim of x.
        const aLastDim = aFirstDims.pop();
        a = a.reshape([
            -1,
            aLastDim
        ]);
        // Reshape y into the analogous 2D Tensor, and keep track of the
        // required dimensions to reproduce the output shape.
        const bShape = b.shape.slice();
        const bLastDim = bShape.pop();
        const ySecondLastDim1 = bShape.pop();
        const yOtherDims = [
            ...bShape,
            bLastDim
        ];
        // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]
        // where r is the rank of y.
        const perm = Array.from({
            length: b.rank
        }, (_, i)=>{
            if (i === 0) return b.rank - 2;
            else if (i <= b.rank - 2) return i - 1;
            return i;
        });
        b = b.transpose(perm).reshape([
            ySecondLastDim1,
            -1
        ]);
        // Multiply x and y as 2D Tensors, and then reshape back to original.
        const outputShape = [
            ...aFirstDims,
            ...yOtherDims
        ];
        const transposeA1 = false;
        const transposeB1 = false;
        return _tfjsCore.fused.matMul({
            a,
            b,
            transposeA: transposeA1,
            transposeB: transposeB1,
            bias: bias ? reshapeBias(a.rank, bias, (0, _common1.imageDataFormat)()) : null,
            activation
        }).reshape(outputShape);
    }
}
function sign(x) {
    // TODO(cais): Move to the core.
    return (0, _tfjsCore.tidy)(()=>{
        const zerosLikeX = (0, _tfjsCore.zerosLike)(x);
        const onesLikeX = (0, _tfjsCore.onesLike)(x);
        return (0, _tfjsCore.where)(_tfjsCore.equal(x, zerosLikeX), zerosLikeX, (0, _tfjsCore.where)(_tfjsCore.greater(x, (0, _tfjsCore.zerosLike)(x)), onesLikeX, _tfjsCore.mul(-1, onesLikeX)));
    });
}
function oneHot(indices, numClasses) {
    return (0, _tfjsCore.tidy)(()=>{
        if (indices.rank !== 1) throw new Error("Only 1D one-hot tensors are supported in the deeplearn backend, at present.");
        indices = indices.toInt();
        return _tfjsCore.oneHot(indices, numClasses).toFloat();
    });
}
function gather(reference, indices, axis) {
    return (0, _tfjsCore.tidy)(()=>{
        if (Array.isArray(indices)) indices = (0, _tfjsCore.tensor1d)(indices, "int32");
        else indices = indices.toInt();
        return _tfjsCore.gather(reference, indices, axis);
    });
}
function square(x) {
    return _tfjsCore.mul(x, x);
}
function pow(x, a) {
    return (0, _tfjsCore.tidy)(()=>{
        if (typeof a === "number") a = (0, _tfjsCore.scalar)(Math.round(a), "int32");
        if (a.dtype !== "int32") throw new (0, _errors.NotImplementedError)(`Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);
        return _tfjsCore.pow(x, a);
    });
}
/**
 * Reshapes bias tensor according to rank of x.
 */ function reshapeBias(xRank, bias, dataFormat) {
    const biasShape = bias.shape;
    if (bias.rank !== 1 && bias.rank !== xRank) throw new (0, _errors.ValueError)(`Unexpected bias dimensions: ${bias.rank}` + `; expected it to be 1 or ${xRank}`);
    if (xRank === 5) {
        if (dataFormat === "channelsFirst") {
            if (biasShape.length === 1) return bias.reshape([
                1,
                biasShape[0],
                1,
                1,
                1
            ]);
            else return bias.reshape([
                1,
                biasShape[3],
                biasShape[0],
                biasShape[1],
                biasShape[2]
            ]);
        } else if (dataFormat === "channelsLast") {
            if (biasShape.length === 1) return bias.reshape([
                1,
                1,
                1,
                1,
                biasShape[0]
            ]);
            else return bias.reshape([
                1
            ].concat(biasShape));
        }
    } else if (xRank === 4) {
        if (dataFormat === "channelsFirst") {
            if (biasShape.length === 1) return bias.reshape([
                1,
                biasShape[0],
                1,
                1
            ]);
            else return bias.reshape([
                1,
                biasShape[2],
                biasShape[0],
                biasShape[1]
            ]);
        } else if (dataFormat === "channelsLast") {
            if (biasShape.length === 1) return bias.reshape([
                1,
                1,
                1,
                biasShape[0]
            ]);
            else return bias.reshape([
                1
            ].concat(biasShape));
        }
    } else if (xRank === 3) {
        if (dataFormat === "channelsFirst") {
            if (biasShape.length === 1) return bias.reshape([
                1,
                biasShape[0],
                1
            ]);
            else return bias.reshape([
                1,
                biasShape[1],
                biasShape[0]
            ]);
        } else if (dataFormat === "channelsLast") {
            if (biasShape.length === 1) return bias.reshape([
                1,
                1,
                biasShape[0]
            ]);
            else return bias.reshape([
                1
            ].concat(biasShape));
        }
    } else if (xRank < 3) return bias;
    throw new (0, _errors.ValueError)(`Unsupported input rank by biasAdd: ${bias.rank}`);
}
function biasAdd(x, bias, dataFormat) {
    return (0, _tfjsCore.tidy)(()=>{
        if (dataFormat == null) dataFormat = (0, _common1.imageDataFormat)();
        (0, _common.checkDataFormat)(dataFormat);
        return x.add(reshapeBias(x.rank, bias, dataFormat));
    });
}
function elu(x, alpha = 1) {
    // TODO(cais): Add support for alpha values other than 1.
    if (alpha !== 1) throw new (0, _errors.NotImplementedError)(`Support for alpha values other than 1 (${alpha}) is not implemented ` + `yet.`);
    return _tfjsCore.elu(x);
}
function softsign(x) {
    return (0, _tfjsCore.tidy)(()=>_tfjsCore.div(x, _tfjsCore.abs(x).add(1)));
}
function dropout(x, level, noiseShape, seed) {
    return (0, _tfjsCore.tidy)(()=>_tfjsCore.dropout(x, level, noiseShape, seed));
}
function hardSigmoid(x) {
    return (0, _tfjsCore.tidy)(()=>{
        const y = _tfjsCore.add(.5, _tfjsCore.mul(.2, x));
        return _tfjsCore.clipByValue(y, 0, 1);
    });
}
function inTrainPhase(x, alt, training = false) {
    return training ? x() : alt();
}

},{"@tensorflow/tfjs-core":"2votT","../common":"fOhOh","../errors":"kA7ff","../utils/math_utils":"865Nd","./common":"3qfoZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fOhOh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkDataFormat", ()=>checkDataFormat);
parcelHelpers.export(exports, "checkPaddingMode", ()=>checkPaddingMode);
parcelHelpers.export(exports, "checkPoolMode", ()=>checkPoolMode);
/**
 * Enter namescope, which can be nested.
 */ parcelHelpers.export(exports, "nameScope", ()=>nameScope);
/**
 * Get the name a Tensor (or Variable) would have if not uniqueified.
 * @param tensorName
 * @return Scoped name string.
 */ parcelHelpers.export(exports, "getScopedTensorName", ()=>getScopedTensorName);
/**
 * Get unique names for Tensors and Variables.
 * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by
 *  `getScopedTensorName()`.
 * @return A unique version of the given fully scoped name.
 *   If this is the first time that the scoped name is seen in this session,
 *   then the given `scopedName` is returned unaltered.  If the same name is
 *   seen again (producing a collision), an incrementing suffix is added to the
 *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.
 */ parcelHelpers.export(exports, "getUniqueTensorName", ()=>getUniqueTensorName);
/**
 * Determine whether a string is a valid tensor name.
 * @param name
 * @returns A Boolean indicating whether `name` is a valid tensor name.
 */ parcelHelpers.export(exports, "isValidTensorName", ()=>isValidTensorName);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Common functions for TensorFlow.js Layers.
 */ var _common = require("./keras_format/common");
var _genericUtils = require("./utils/generic_utils");
// A map from the requested scoped name of a Tensor to the number of Tensors
// wanting that name so far.  This allows enforcing name uniqueness by appending
// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.
const nameMap = new Map();
function checkDataFormat(value) {
    (0, _genericUtils.checkStringTypeUnionValue)((0, _common.VALID_DATA_FORMAT_VALUES), "DataFormat", value);
}
function checkPaddingMode(value) {
    (0, _genericUtils.checkStringTypeUnionValue)((0, _common.VALID_PADDING_MODE_VALUES), "PaddingMode", value);
}
function checkPoolMode(value) {
    (0, _genericUtils.checkStringTypeUnionValue)((0, _common.VALID_POOL_MODE_VALUES), "PoolMode", value);
}
const _nameScopeStack = [];
const _nameScopeDivider = "/";
function nameScope(name, fn) {
    _nameScopeStack.push(name);
    try {
        const val = fn();
        _nameScopeStack.pop();
        return val;
    } catch (e) {
        _nameScopeStack.pop();
        throw e;
    }
}
/**
 * Get the current namescope as a flat, concatenated string.
 */ function currentNameScopePrefix() {
    if (_nameScopeStack.length === 0) return "";
    else return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;
}
function getScopedTensorName(tensorName) {
    if (!isValidTensorName(tensorName)) throw new Error("Not a valid tensor name: '" + tensorName + "'");
    return currentNameScopePrefix() + tensorName;
}
function getUniqueTensorName(scopedName) {
    if (!isValidTensorName(scopedName)) throw new Error("Not a valid tensor name: '" + scopedName + "'");
    if (!nameMap.has(scopedName)) nameMap.set(scopedName, 0);
    const index = nameMap.get(scopedName);
    nameMap.set(scopedName, nameMap.get(scopedName) + 1);
    if (index > 0) {
        const result = `${scopedName}_${index}`;
        // Mark the composed name as used in case someone wants
        // to call getUniqueTensorName("name_1").
        nameMap.set(result, 1);
        return result;
    } else return scopedName;
}
const tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function isValidTensorName(name) {
    return !!name.match(tensorNameRegex);
}

},{"./keras_format/common":"40Wbd","./utils/generic_utils":"2cErd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"40Wbd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VALID_DATA_FORMAT_VALUES", ()=>VALID_DATA_FORMAT_VALUES);
parcelHelpers.export(exports, "VALID_PADDING_MODE_VALUES", ()=>VALID_PADDING_MODE_VALUES);
parcelHelpers.export(exports, "VALID_POOL_MODE_VALUES", ()=>VALID_POOL_MODE_VALUES);
parcelHelpers.export(exports, "VALID_BIDIRECTIONAL_MERGE_MODES", ()=>VALID_BIDIRECTIONAL_MERGE_MODES);
parcelHelpers.export(exports, "VALID_SAMPLE_WEIGHT_MODES", ()=>VALID_SAMPLE_WEIGHT_MODES);
const VALID_DATA_FORMAT_VALUES = [
    "channelsFirst",
    "channelsLast"
];
const VALID_PADDING_MODE_VALUES = [
    "valid",
    "same",
    "causal"
];
const VALID_POOL_MODE_VALUES = [
    "max",
    "avg"
];
const VALID_BIDIRECTIONAL_MERGE_MODES = [
    "sum",
    "mul",
    "concat",
    "ave"
];
const VALID_SAMPLE_WEIGHT_MODES = [
    "temporal"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"865Nd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Determine if a number is an integer.
 */ parcelHelpers.export(exports, "isInteger", ()=>isInteger);
/**
 * Calculate the product of an array of numbers.
 * @param array The array to calculate the product over.
 * @param begin Beginning index, inclusive.
 * @param end Ending index, exclusive.
 * @return The product.
 */ parcelHelpers.export(exports, "arrayProd", ()=>arrayProd);
/**
 * Compute minimum value.
 * @param array
 * @return minimum value.
 */ parcelHelpers.export(exports, "min", ()=>min);
/**
 * Compute maximum value.
 * @param array
 * @return maximum value
 */ parcelHelpers.export(exports, "max", ()=>max);
/**
 * Compute sum of array.
 * @param array
 * @return The sum.
 */ parcelHelpers.export(exports, "sum", ()=>sum);
/**
 * Compute mean of array.
 * @param array
 * @return The mean.
 */ parcelHelpers.export(exports, "mean", ()=>mean);
/**
 * Compute variance of array.
 * @param array
 * @return The variance.
 */ parcelHelpers.export(exports, "variance", ()=>variance);
/**
 * Compute median of array.
 * @param array
 * @return The median value.
 */ parcelHelpers.export(exports, "median", ()=>median);
/**
 * Generate an array of integers in [begin, end).
 * @param begin Beginning integer, inclusive.
 * @param end Ending integer, exclusive.
 * @returns Range array.
 * @throws ValueError, iff `end` < `begin`.
 */ parcelHelpers.export(exports, "range", ()=>range);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Math utility functions.
 *
 * This file contains some frequently used math function that operates on
 * number[] or Float32Array and return a number. Many of these functions are
 * not-so-thick wrappers around TF.js Core functions. But they offer the
 * convenience of
 * 1) not having to convert the inputs into Tensors,
 * 2) not having to convert the returned Tensors to numbers.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _errors = require("../errors");
function isInteger(x) {
    return x === parseInt(x.toString(), 10);
}
function arrayProd(array, begin, end) {
    if (begin == null) begin = 0;
    if (end == null) end = array.length;
    let prod = 1;
    for(let i = begin; i < end; ++i)prod *= array[i];
    return prod;
}
/**
 * A helper function transforms the two input types to an instance of Tensor1D,
 * so the return value can be fed directly into various TF.js Core functions.
 * @param array
 */ function toArray1D(array) {
    array = Array.isArray(array) ? new Float32Array(array) : array;
    return (0, _tfjsCore.tensor1d)(array);
}
function min(array) {
    return _tfjsCore.min(toArray1D(array)).dataSync()[0];
}
function max(array) {
    return _tfjsCore.max(toArray1D(array)).dataSync()[0];
}
function sum(array) {
    return _tfjsCore.sum(toArray1D(array)).dataSync()[0];
}
function mean(array) {
    return sum(array) / array.length;
}
function variance(array) {
    const demeaned = _tfjsCore.sub(toArray1D(array), (0, _tfjsCore.scalar)(mean(array)));
    const sumSquare = _tfjsCore.sum(_tfjsCore.mul(demeaned, demeaned)).dataSync()[0];
    return sumSquare / array.length;
}
function median(array) {
    const arraySorted = array.slice().sort((a, b)=>a - b);
    const lowIdx = Math.floor((arraySorted.length - 1) / 2);
    const highIdx = Math.ceil((arraySorted.length - 1) / 2);
    if (lowIdx === highIdx) return arraySorted[lowIdx];
    return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;
}
function range(begin, end) {
    if (end < begin) throw new (0, _errors.ValueError)(`end (${end}) < begin (${begin}) is forbidden.`);
    const out = [];
    for(let i = begin; i < end; ++i)out.push(i);
    return out;
}

},{"@tensorflow/tfjs-core":"2votT","../errors":"kA7ff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hAfoM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VALID_FAN_MODE_VALUES", ()=>VALID_FAN_MODE_VALUES);
parcelHelpers.export(exports, "VALID_DISTRIBUTION_VALUES", ()=>VALID_DISTRIBUTION_VALUES);
parcelHelpers.export(exports, "initializerClassNames", ()=>initializerClassNames);
const VALID_FAN_MODE_VALUES = [
    "fanIn",
    "fanOut",
    "fanAvg"
];
const VALID_DISTRIBUTION_VALUES = [
    "normal",
    "uniform",
    "truncatedNormal"
];
const initializerClassNames = [
    "Zeros",
    "Ones",
    "Constant",
    "RandomNormal",
    "RandomUniform",
    "TruncatedNormal",
    "VarianceScaling",
    "Orthogonal",
    "Identity"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bIANN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// TODO(cais): Add doc string to all the public static functions in this
//   class; include exectuable JavaScript code snippets where applicable
//   (b/74074458).
// Input Layer.
/**
 * An input layer is an entry point into a `tf.LayersModel`.
 *
 * `InputLayer` is generated automatically for `tf.Sequential`` models by
 * specifying the `inputshape` or `batchInputShape` for the first layer.  It
 * should not be specified explicitly. However, it can be useful sometimes,
 * e.g., when constructing a sequential model from a subset of another
 * sequential model's layers. Like the code snippet below shows.
 *
 * ```js
 * // Define a model which simply adds two inputs.
 * const model1 = tf.sequential();
 * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));
 * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
 * model1.summary();
 * model1.predict(tf.zeros([1, 4])).print();
 *
 * // Construct another model, reusing the second layer of `model1` while
 * // not using the first layer of `model1`. Note that you cannot add the second
 * // layer of `model` directly as the first layer of the new sequential model,
 * // because doing so will lead to an error related to the fact that the layer
 * // is not an input layer. Instead, you need to create an `inputLayer` and add
 * // it to the new sequential model before adding the reused layer.
 * const model2 = tf.sequential();
 * // Use an inputShape that matches the input shape of `model1`'s second
 * // layer.
 * model2.add(tf.layers.inputLayer({inputShape: [3]}));
 * model2.add(model1.layers[1]);
 * model2.summary();
 * model2.predict(tf.zeros([1, 3])).print();
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'} */ parcelHelpers.export(exports, "inputLayer", ()=>inputLayer);
// Advanced Activation Layers.
/**
 * Exponetial Linear Unit (ELU).
 *
 * It follows:
 * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,
 * `f(x) = x for x >= 0`.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * References:
 *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units
 * (ELUs)](https://arxiv.org/abs/1511.07289v1)
 */ /**
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */ parcelHelpers.export(exports, "elu", ()=>elu);
/**
 * Rectified Linear Unit activation function.
 *
 * Input shape:
 *   Arbitrary. Use the config field `inputShape` (Array of integers, does
 *   not include the sample axis) when using this layer as the first layer
 *   in a model.
 *
 * Output shape:
 *   Same shape as the input.
 */ /**
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */ parcelHelpers.export(exports, "reLU", ()=>reLU);
/**
 * Leaky version of a rectified linear unit.
 *
 * It allows a small gradient when the unit is not active:
 * `f(x) = alpha * x for x < 0.`
 * `f(x) = x for x >= 0.`
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 */ /**
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */ parcelHelpers.export(exports, "leakyReLU", ()=>leakyReLU);
/**
 * Parameterized version of a leaky rectified linear unit.
 *
 * It follows
 * `f(x) = alpha * x for x < 0.`
 * `f(x) = x for x >= 0.`
 * wherein `alpha` is a trainable weight.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 */ /**
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */ parcelHelpers.export(exports, "prelu", ()=>prelu);
/**
 * Softmax activation layer.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 */ /**
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */ parcelHelpers.export(exports, "softmax", ()=>softmax);
/**
 * Thresholded Rectified Linear Unit.
 *
 * It follows:
 * `f(x) = x for x > theta`,
 * `f(x) = 0 otherwise`.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * References:
 *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting
 * Features](http://arxiv.org/abs/1402.3337)
 */ /**
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */ parcelHelpers.export(exports, "thresholdedReLU", ()=>thresholdedReLU);
// Convolutional Layers.
/**
 * 1D convolution layer (e.g., temporal convolution).
 *
 * This layer creates a convolution kernel that is convolved
 * with the layer input over a single spatial (or temporal) dimension
 * to produce a tensor of outputs.
 *
 * If `use_bias` is True, a bias vector is created and added to the outputs.
 *
 * If `activation` is not `null`, it is applied to the outputs as well.
 *
 * When using this layer as the first layer in a model, provide an
 * `inputShape` argument `Array` or `null`.
 *
 * For example, `inputShape` would be:
 * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors
 * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.
 */ /**
 * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}
 */ parcelHelpers.export(exports, "conv1d", ()=>conv1d);
/**
 * 2D convolution layer (e.g. spatial convolution over images).
 *
 * This layer creates a convolution kernel that is convolved
 * with the layer input to produce a tensor of outputs.
 *
 * If `useBias` is True, a bias vector is created and added to the outputs.
 *
 * If `activation` is not `null`, it is applied to the outputs as well.
 *
 * When using this layer as the first layer in a model,
 * provide the keyword argument `inputShape`
 * (Array of integers, does not include the sample axis),
 * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures
 * in `dataFormat='channelsLast'`.
 */ /**
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */ parcelHelpers.export(exports, "conv2d", ()=>conv2d);
/**
 * Transposed convolutional layer (sometimes called Deconvolution).
 *
 * The need for transposed convolutions generally arises
 * from the desire to use a transformation going in the opposite direction of
 * a normal convolution, i.e., from something that has the shape of the output
 * of some convolution to something that has the shape of its input while
 * maintaining a connectivity pattern that is compatible with said
 * convolution.
 *
 * When using this layer as the first layer in a model, provide the
 * configuration `inputShape` (`Array` of integers, does not include the
 * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in
 * `dataFormat: 'channelsLast'`.
 *
 * Input shape:
 *   4D tensor with shape:
 *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.
 *   or 4D tensor with shape
 *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.
 *
 * Output shape:
 *   4D tensor with shape:
 *   `[batch, filters, newRows, newCols]` if `dataFormat` is
 * `'channelsFirst'`. or 4D tensor with shape:
 *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.
 *
 * References:
 *   - [A guide to convolution arithmetic for deep
 * learning](https://arxiv.org/abs/1603.07285v1)
 *   - [Deconvolutional
 * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)
 */ /**
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */ parcelHelpers.export(exports, "conv2dTranspose", ()=>conv2dTranspose);
/**
 * 3D convolution layer (e.g. spatial convolution over volumes).
 *
 * This layer creates a convolution kernel that is convolved
 * with the layer input to produce a tensor of outputs.
 *
 * If `useBias` is True, a bias vector is created and added to the outputs.
 *
 * If `activation` is not `null`, it is applied to the outputs as well.
 *
 * When using this layer as the first layer in a model,
 * provide the keyword argument `inputShape`
 * (Array of integers, does not include the sample axis),
 * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes
 * in `dataFormat='channelsLast'`.
 */ /**
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */ parcelHelpers.export(exports, "conv3d", ()=>conv3d);
/**
 * Depthwise separable 2D convolution.
 *
 * Separable convolution consists of first performing
 * a depthwise spatial convolution
 * (which acts on each input channel separately)
 * followed by a pointwise convolution which mixes together the resulting
 * output channels. The `depthMultiplier` argument controls how many
 * output channels are generated per input channel in the depthwise step.
 *
 * Intuitively, separable convolutions can be understood as
 * a way to factorize a convolution kernel into two smaller kernels,
 * or as an extreme version of an Inception block.
 *
 * Input shape:
 *   4D tensor with shape:
 *     `[batch, channels, rows, cols]` if data_format='channelsFirst'
 *   or 4D tensor with shape:
 *     `[batch, rows, cols, channels]` if data_format='channelsLast'.
 *
 * Output shape:
 *   4D tensor with shape:
 *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'
 *   or 4D tensor with shape:
 *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.
 *     `rows` and `cols` values might have changed due to padding.
 */ /**
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */ parcelHelpers.export(exports, "separableConv2d", ()=>separableConv2d);
/**
 * Cropping layer for 2D input (e.g., image).
 *
 * This layer can crop an input
 * at the top, bottom, left and right side of an image tensor.
 *
 * Input shape:
 *   4D tensor with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, rows, cols, channels]`
 *   - If `data_format` is `"channels_first"`:
 *     `[batch, channels, rows, cols]`.
 *
 * Output shape:
 *   4D with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, croppedRows, croppedCols, channels]`
 *    - If `dataFormat` is `"channelsFirst"`:
 *     `[batch, channels, croppedRows, croppedCols]`.
 *
 * Examples
 * ```js
 *
 * const model = tf.sequential();
 * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],
 *                                inputShape: [128, 128, 3]}));
 * //now output shape is [batch, 124, 124, 3]
 * ```
 */ /**
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */ parcelHelpers.export(exports, "cropping2D", ()=>cropping2D);
/**
 * Upsampling layer for 2D inputs.
 *
 * Repeats the rows and columns of the data
 * by size[0] and size[1] respectively.
 *
 *
 * Input shape:
 *    4D tensor with shape:
 *     - If `dataFormat` is `"channelsLast"`:
 *         `[batch, rows, cols, channels]`
 *     - If `dataFormat` is `"channelsFirst"`:
 *        `[batch, channels, rows, cols]`
 *
 * Output shape:
 *     4D tensor with shape:
 *     - If `dataFormat` is `"channelsLast"`:
 *        `[batch, upsampledRows, upsampledCols, channels]`
 *     - If `dataFormat` is `"channelsFirst"`:
 *         `[batch, channels, upsampledRows, upsampledCols]`
 *
 */ /**
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */ parcelHelpers.export(exports, "upSampling2d", ()=>upSampling2d);
// Convolutional(depthwise) Layers.
/**
 * Depthwise separable 2D convolution.
 *
 * Depthwise Separable convolutions consists in performing just the first step
 * in a depthwise spatial convolution (which acts on each input channel
 * separately). The `depthMultplier` argument controls how many output channels
 * are generated per input channel in the depthwise step.
 */ /**
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */ parcelHelpers.export(exports, "depthwiseConv2d", ()=>depthwiseConv2d);
// Basic Layers.
/**
 * Applies an activation function to an output.
 *
 * This layer applies element-wise activation function.  Other layers, notably
 * `dense` can also apply activation functions.  Use this isolated activation
 * function to extract the values before and after the
 * activation. For instance:
 *
 * ```js
 * const input = tf.input({shape: [5]});
 * const denseLayer = tf.layers.dense({units: 1});
 * const activationLayer = tf.layers.activation({activation: 'relu6'});
 *
 * // Obtain the output symbolic tensors by applying the layers in order.
 * const denseOutput = denseLayer.apply(input);
 * const activationOutput = activationLayer.apply(denseOutput);
 *
 * // Create the model based on the inputs.
 * const model = tf.model({
 *     inputs: input,
 *     outputs: [denseOutput, activationOutput]
 * });
 *
 * // Collect both outputs and print separately.
 * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));
 * denseOut.print();
 * activationOut.print();
 * ```
 */ /**
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */ parcelHelpers.export(exports, "activation", ()=>activation);
/**
 * Creates a dense (fully connected) layer.
 *
 * This layer implements the operation:
 *   `output = activation(dot(input, kernel) + bias)`
 *
 * `activation` is the element-wise activation function
 *   passed as the `activation` argument.
 *
 * `kernel` is a weights matrix created by the layer.
 *
 * `bias` is a bias vector created by the layer (only applicable if `useBias`
 * is `true`).
 *
 * **Input shape:**
 *
 *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.
 *
 *   The most common situation would be
 *   a 2D input with shape `(batchSize, inputDim)`.
 *
 * **Output shape:**
 *
 *   nD tensor with shape: `(batchSize, ..., units)`.
 *
 *   For instance, for a 2D input with shape `(batchSize, inputDim)`,
 *   the output would have shape `(batchSize, units)`.
 *
 * Note: if the input to the layer has a rank greater than 2, then it is
 * flattened prior to the initial dot product with the kernel.
 */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */ parcelHelpers.export(exports, "dense", ()=>dense);
/**
 * Applies
 * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to
 * the input.
 *
 * Dropout consists in randomly setting a fraction `rate` of input units to 0 at
 * each update during training time, which helps prevent overfitting.
 */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */ parcelHelpers.export(exports, "dropout", ()=>dropout);
/**
 * Spatial 1D version of Dropout.
 *
 * This Layer type performs the same function as the Dropout layer, but it drops
 * entire 1D feature maps instead of individual elements. For example, if an
 * input example consists of 3 timesteps and the feature map for each timestep
 * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps
 * of the 1st timesteps and 2nd timesteps completely while sparing all feature
 * elements of the 3rd timestep.
 *
 * If adjacent frames (timesteps) are strongly correlated (as is normally the
 * case in early convolution layers), regular dropout will not regularize the
 * activation and will otherwise just result in merely an effective learning
 * rate decrease. In this case, `spatialDropout1d` will help promote
 * independence among feature maps and should be used instead.
 *
 * **Arguments:**
 *   rate: A floating-point number >=0 and <=1. Fraction of the input elements
 *     to drop.
 *
 * **Input shape:**
 *   3D tensor with shape `(samples, timesteps, channels)`.
 *
 * **Output shape:**
 *   Same as the input shape.
 *
 * References:
 *   - [Efficient Object Localization Using Convolutional
 *      Networks](https://arxiv.org/abs/1411.4280)
 */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */ parcelHelpers.export(exports, "spatialDropout1d", ()=>spatialDropout1d);
/**
 * Flattens the input. Does not affect the batch size.
 *
 * A `Flatten` layer flattens each batch in its inputs to 1D (making the output
 * 2D).
 *
 * For example:
 *
 * ```js
 * const input = tf.input({shape: [4, 3]});
 * const flattenLayer = tf.layers.flatten();
 * // Inspect the inferred output shape of the flatten layer, which
 * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the
 * // flattening. (The 1st dimension is the undermined batch size.)
 * console.log(JSON.stringify(flattenLayer.apply(input).shape));
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */ parcelHelpers.export(exports, "flatten", ()=>flatten);
/**
 * Repeats the input n times in a new dimension.
 *
 * ```js
 *  const model = tf.sequential();
 *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));
 *  const x = tf.tensor2d([[10, 20]]);
 *  // Use the model to do inference on a data point the model hasn't see
 *  model.predict(x).print();
 *  // output shape is now [batch, 2, 4]
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */ parcelHelpers.export(exports, "repeatVector", ()=>repeatVector);
/**
 * Reshapes an input to a certain shape.
 *
 * ```js
 * const input = tf.input({shape: [4, 3]});
 * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});
 * // Inspect the inferred output shape of the Reshape layer, which
 * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)
 * console.log(JSON.stringify(reshapeLayer.apply(input).shape));
 * ```
 *
 * Input shape:
 *   Arbitrary, although all dimensions in the input shape must be fixed.
 *   Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 *
 * Output shape:
 *   [batchSize, targetShape[0], targetShape[1], ...,
 *    targetShape[targetShape.length - 1]].
 */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */ parcelHelpers.export(exports, "reshape", ()=>reshape);
/**
 * Permutes the dimensions of the input according to a given pattern.
 *
 * Useful for, e.g., connecting RNNs and convnets together.
 *
 * Example:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.permute({
 *   dims: [2, 1],
 *   inputShape: [10, 64]
 * }));
 * console.log(model.outputShape);
 * // Now model's output shape is [null, 64, 10], where null is the
 * // unpermuted sample (batch) dimension.
 * ```
 *
 * Input shape:
 *   Arbitrary. Use the configuration field `inputShape` when using this
 *   layer as the first layer in a model.
 *
 * Output shape:
 *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,
 *   permuted) according to the `dims` configuration of this layer.
 */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */ parcelHelpers.export(exports, "permute", ()=>permute);
/**
 * Maps positive integers (indices) into dense vectors of fixed size.
 * eg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]
 *
 * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.
 *
 * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,
 * outputDim]`.
 */ /** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */ parcelHelpers.export(exports, "embedding", ()=>embedding);
// Merge Layers.
/**
 * Layer that performs element-wise addition on an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). The inputs are specified as an
 * `Array` when the `apply` method of the `Add` layer instance is called. For
 * example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const addLayer = tf.layers.add();
 * const sum = addLayer.apply([input1, input2]);
 * console.log(JSON.stringify(sum.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Layer that performs element-wise averaging on an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const averageLayer = tf.layers.average();
 * const average = averageLayer.apply([input1, input2]);
 * console.log(JSON.stringify(average.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */ parcelHelpers.export(exports, "average", ()=>average);
/**
 * Layer that concatenates an `Array` of inputs.
 *
 * It takes a list of tensors, all of the same shape except for the
 * concatenation axis, and returns a single tensor, the concatenation
 * of all inputs. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 3]});
 * const concatLayer = tf.layers.concatenate();
 * const output = concatLayer.apply([input1, input2]);
 * console.log(JSON.stringify(output.shape));
 * // You get [null, 2, 5], with the first dimension as the undetermined batch
 * // dimension. The last dimension (5) is the result of concatenating the
 * // last dimensions of the inputs (2 and 3).
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */ parcelHelpers.export(exports, "concatenate", ()=>concatenate);
/**
 * Layer that computes the element-wise maximum an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape and returns a
 * single tensor (also of the same shape). For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const maxLayer = tf.layers.maximum();
 * const max = maxLayer.apply([input1, input2]);
 * console.log(JSON.stringify(max.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */ parcelHelpers.export(exports, "maximum", ()=>maximum);
/**
 * Layer that computes the element-wise minimum of an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape and returns a
 * single tensor (also of the same shape). For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const minLayer = tf.layers.minimum();
 * const min = minLayer.apply([input1, input2]);
 * console.log(JSON.stringify(min.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */ parcelHelpers.export(exports, "minimum", ()=>minimum);
/**
 * Layer that multiplies (element-wise) an `Array` of inputs.
 *
 * It takes as input an Array of tensors, all of the same
 * shape, and returns a single tensor (also of the same shape).
 * For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const input3 = tf.input({shape: [2, 2]});
 * const multiplyLayer = tf.layers.multiply();
 * const product = multiplyLayer.apply([input1, input2, input3]);
 * console.log(product.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Layer that computes a dot product between samples in two tensors.
 *
 * E.g., if applied to a list of two tensors `a` and `b` both of shape
 * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,
 * where each entry at index `[i, 0]` will be the dot product between
 * `a[i, :]` and `b[i, :]`.
 *
 * Example:
 *
 * ```js
 * const dotLayer = tf.layers.dot({axes: -1});
 * const x1 = tf.tensor2d([[10, 20], [30, 40]]);
 * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);
 *
 * // Invoke the layer's apply() method in eager (imperative) mode.
 * const y = dotLayer.apply([x1, x2]);
 * y.print();
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */ parcelHelpers.export(exports, "dot", ()=>dot);
// Normalization Layers.
/**
 * Batch normalization layer (Ioffe and Szegedy, 2014).
 *
 * Normalize the activations of the previous layer at each batch,
 * i.e. applies a transformation that maintains the mean activation
 * close to 0 and the activation standard deviation close to 1.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does
 *   not include the sample axis) when calling the constructor of this class,
 *   if this layer is used as a first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Batch Normalization: Accelerating Deep Network Training by Reducing
 * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)
 */ /**
 * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}
 */ parcelHelpers.export(exports, "batchNormalization", ()=>batchNormalization);
/**
 * Layer-normalization layer (Ba et al., 2016).
 *
 * Normalizes the activations of the previous layer for each given example in a
 * batch independently, instead of across a batch like in `batchNormalization`.
 * In other words, this layer applies a transformation that maintanis the mean
 * activation within each example close to0 and activation variance close to 1.
 *
 * Input shape:
 *   Arbitrary. Use the argument `inputShape` when using this layer as the first
 *   layer in a model.
 *
 * Output shape:
 *   Same as input.
 *
 * References:
 *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)
 */ /**
 * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}
 */ parcelHelpers.export(exports, "layerNormalization", ()=>layerNormalization);
// Padding Layers.
/**
 * Zero-padding layer for 2D input (e.g., image).
 *
 * This layer can add rows and columns of zeros
 * at the top, bottom, left and right side of an image tensor.
 *
 * Input shape:
 *   4D tensor with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, rows, cols, channels]`
 *   - If `data_format` is `"channels_first"`:
 *     `[batch, channels, rows, cols]`.
 *
 * Output shape:
 *   4D with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, paddedRows, paddedCols, channels]`
 *    - If `dataFormat` is `"channelsFirst"`:
 *     `[batch, channels, paddedRows, paddedCols]`.
 */ /** @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'} */ parcelHelpers.export(exports, "zeroPadding2d", ()=>zeroPadding2d);
// Pooling Layers.
/**
 * Average pooling operation for spatial data.
 *
 * Input shape: `[batchSize, inLength, channels]`
 *
 * Output shape: `[batchSize, pooledLength, channels]`
 *
 * `tf.avgPool1d` is an alias.
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "averagePooling1d", ()=>averagePooling1d);
parcelHelpers.export(exports, "avgPool1d", ()=>avgPool1d);
// For backwards compatibility.
// See https://github.com/tensorflow/tfjs/issues/152
parcelHelpers.export(exports, "avgPooling1d", ()=>avgPooling1d);
/**
 * Average pooling operation for spatial data.
 *
 * Input shape:
 *  - If `dataFormat === CHANNEL_LAST`:
 *      4D tensor with shape:
 *      `[batchSize, rows, cols, channels]`
 *  - If `dataFormat === CHANNEL_FIRST`:
 *      4D tensor with shape:
 *      `[batchSize, channels, rows, cols]`
 *
 * Output shape
 *  - If `dataFormat === CHANNEL_LAST`:
 *      4D tensor with shape:
 *      `[batchSize, pooleRows, pooledCols, channels]`
 *  - If `dataFormat === CHANNEL_FIRST`:
 *      4D tensor with shape:
 *      `[batchSize, channels, pooleRows, pooledCols]`
 *
 * `tf.avgPool2d` is an alias.
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "averagePooling2d", ()=>averagePooling2d);
parcelHelpers.export(exports, "avgPool2d", ()=>avgPool2d);
// For backwards compatibility.
// See https://github.com/tensorflow/tfjs/issues/152
parcelHelpers.export(exports, "avgPooling2d", ()=>avgPooling2d);
/**
 * Average pooling operation for 3D data.
 *
 * Input shape
 *   - If `dataFormat === channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, depths, rows, cols, channels]`
 *   - If `dataFormat === channelsFirst`:
 *      4D tensor with shape:
 *       `[batchSize, channels, depths, rows, cols]`
 *
 * Output shape
 *   - If `dataFormat=channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`
 *   - If `dataFormat=channelsFirst`:
 *       5D tensor with shape:
 *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "averagePooling3d", ()=>averagePooling3d);
parcelHelpers.export(exports, "avgPool3d", ()=>avgPool3d);
// For backwards compatibility.
// See https://github.com/tensorflow/tfjs/issues/152
parcelHelpers.export(exports, "avgPooling3d", ()=>avgPooling3d);
/**
 * Global average pooling operation for temporal data.
 *
 * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.
 *
 * Output Shape:2D tensor with shape: `[batchSize, features]`.
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "globalAveragePooling1d", ()=>globalAveragePooling1d);
/**
 * Global average pooling operation for spatial data.
 *
 * Input shape:
 *   - If `dataFormat` is `CHANNEL_LAST`:
 *       4D tensor with shape: `[batchSize, rows, cols, channels]`.
 *   - If `dataFormat` is `CHANNEL_FIRST`:
 *       4D tensor with shape: `[batchSize, channels, rows, cols]`.
 *
 * Output shape:
 *   2D tensor with shape: `[batchSize, channels]`.
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "globalAveragePooling2d", ()=>globalAveragePooling2d);
/**
 * Global max pooling operation for temporal data.
 *
 * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.
 *
 * Output Shape:2D tensor with shape: `[batchSize, features]`.
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "globalMaxPooling1d", ()=>globalMaxPooling1d);
/**
 * Global max pooling operation for spatial data.
 *
 * Input shape:
 *   - If `dataFormat` is `CHANNEL_LAST`:
 *       4D tensor with shape: `[batchSize, rows, cols, channels]`.
 *   - If `dataFormat` is `CHANNEL_FIRST`:
 *       4D tensor with shape: `[batchSize, channels, rows, cols]`.
 *
 * Output shape:
 *   2D tensor with shape: `[batchSize, channels]`.
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "globalMaxPooling2d", ()=>globalMaxPooling2d);
/**
 * Max pooling operation for temporal data.
 *
 * Input shape:  `[batchSize, inLength, channels]`
 *
 * Output shape: `[batchSize, pooledLength, channels]`
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "maxPooling1d", ()=>maxPooling1d);
/**
 * Max pooling operation for spatial data.
 *
 * Input shape
 *   - If `dataFormat === CHANNEL_LAST`:
 *       4D tensor with shape:
 *       `[batchSize, rows, cols, channels]`
 *   - If `dataFormat === CHANNEL_FIRST`:
 *      4D tensor with shape:
 *       `[batchSize, channels, rows, cols]`
 *
 * Output shape
 *   - If `dataFormat=CHANNEL_LAST`:
 *       4D tensor with shape:
 *       `[batchSize, pooleRows, pooledCols, channels]`
 *   - If `dataFormat=CHANNEL_FIRST`:
 *       4D tensor with shape:
 *       `[batchSize, channels, pooleRows, pooledCols]`
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "maxPooling2d", ()=>maxPooling2d);
/**
 * Max pooling operation for 3D data.
 *
 * Input shape
 *   - If `dataFormat === channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, depths, rows, cols, channels]`
 *   - If `dataFormat === channelsFirst`:
 *      5D tensor with shape:
 *       `[batchSize, channels, depths, rows, cols]`
 *
 * Output shape
 *   - If `dataFormat=channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`
 *   - If `dataFormat=channelsFirst`:
 *       5D tensor with shape:
 *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`
 */ /** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */ parcelHelpers.export(exports, "maxPooling3d", ()=>maxPooling3d);
// Recurrent Layers.
/**
 * Gated Recurrent Unit - Cho et al. 2014.
 *
 * This is an `RNN` layer consisting of one `GRUCell`. However, unlike
 * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates
 * on a sequence of inputs. The shape of the input (not including the first,
 * batch dimension) needs to be at least 2-D, with the first dimension being
 * time steps. For example:
 *
 * ```js
 * const rnn = tf.layers.gru({units: 8, returnSequences: true});
 *
 * // Create an input with 10 time steps.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the `GRUCell`'s number of units.
 */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */ parcelHelpers.export(exports, "gru", ()=>gru);
/**
 * Cell class for `GRU`.
 *
 * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its
 * `apply` method takes the input data of only a single time step and returns
 * the cell's output at the time step, while `GRU` takes the input data
 * over a number of time steps. For example:
 *
 * ```js
 * const cell = tf.layers.gruCell({units: 2});
 * const input = tf.input({shape: [10]});
 * const output = cell.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10]: This is the cell's output at a single time step. The 1st
 * // dimension is the unknown batch size.
 * ```
 *
 * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The
 * most typical use of this workflow is to combine a number of cells into a
 * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an
 * RNN. For example:
 *
 * ```js
 * const cells = [
 *   tf.layers.gruCell({units: 4}),
 *   tf.layers.gruCell({units: 8}),
 * ];
 * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});
 *
 * // Create an input with 10 time steps and a length-20 vector at each step.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the last `gruCell`'s number of units.
 * ```
 *
 * To create an `RNN` consisting of only *one* `GRUCell`, use the
 * `tf.layers.gru`.
 */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */ parcelHelpers.export(exports, "gruCell", ()=>gruCell);
/**
 * Long-Short Term Memory layer - Hochreiter 1997.
 *
 * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike
 * the underlying `LSTMCell`, the `apply` method of `LSTM` operates
 * on a sequence of inputs. The shape of the input (not including the first,
 * batch dimension) needs to be at least 2-D, with the first dimension being
 * time steps. For example:
 *
 * ```js
 * const lstm = tf.layers.lstm({units: 8, returnSequences: true});
 *
 * // Create an input with 10 time steps.
 * const input = tf.input({shape: [10, 20]});
 * const output = lstm.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the `LSTMCell`'s number of units.
 */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */ parcelHelpers.export(exports, "lstm", ()=>lstm);
/**
 * Cell class for `LSTM`.
 *
 * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its
 * `apply` method takes the input data of only a single time step and returns
 * the cell's output at the time step, while `LSTM` takes the input data
 * over a number of time steps. For example:
 *
 * ```js
 * const cell = tf.layers.lstmCell({units: 2});
 * const input = tf.input({shape: [10]});
 * const output = cell.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10]: This is the cell's output at a single time step. The 1st
 * // dimension is the unknown batch size.
 * ```
 *
 * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The
 * most typical use of this workflow is to combine a number of cells into a
 * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an
 * RNN. For example:
 *
 * ```js
 * const cells = [
 *   tf.layers.lstmCell({units: 4}),
 *   tf.layers.lstmCell({units: 8}),
 * ];
 * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});
 *
 * // Create an input with 10 time steps and a length-20 vector at each step.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the last `lstmCell`'s number of units.
 * ```
 *
 * To create an `RNN` consisting of only *one* `LSTMCell`, use the
 * `tf.layers.lstm`.
 */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */ parcelHelpers.export(exports, "lstmCell", ()=>lstmCell);
/**
 * Fully-connected RNN where the output is to be fed back to input.
 *
 * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike
 * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates
 * on a sequence of inputs. The shape of the input (not including the first,
 * batch dimension) needs to be at least 2-D, with the first dimension being
 * time steps. For example:
 *
 * ```js
 * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});
 *
 * // Create an input with 10 time steps.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the `SimpleRNNCell`'s number of units.
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */ parcelHelpers.export(exports, "simpleRNN", ()=>simpleRNN);
/**
 * Cell class for `SimpleRNN`.
 *
 * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its
 * `apply` method takes the input data of only a single time step and returns
 * the cell's output at the time step, while `SimpleRNN` takes the input data
 * over a number of time steps. For example:
 *
 * ```js
 * const cell = tf.layers.simpleRNNCell({units: 2});
 * const input = tf.input({shape: [10]});
 * const output = cell.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10]: This is the cell's output at a single time step. The 1st
 * // dimension is the unknown batch size.
 * ```
 *
 * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The
 * most typical use of this workflow is to combine a number of cells into a
 * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an
 * RNN. For example:
 *
 * ```js
 * const cells = [
 *   tf.layers.simpleRNNCell({units: 4}),
 *   tf.layers.simpleRNNCell({units: 8}),
 * ];
 * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});
 *
 * // Create an input with 10 time steps and a length-20 vector at each step.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the last `SimpleRNNCell`'s number of units.
 * ```
 *
 * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the
 * `tf.layers.simpleRNN`.
 */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */ parcelHelpers.export(exports, "simpleRNNCell", ()=>simpleRNNCell);
/**
 * Base class for recurrent layers.
 *
 * Input shape:
 *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.
 *
 * Output shape:
 *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first
 *     tensor is the output. The remaining tensors are the states at the
 *     last time step, each with shape `[batchSize, units]`.
 *   - if `returnSequences`, the output will have shape
 *     `[batchSize, timeSteps, units]`.
 *   - else, the output will have shape `[batchSize, units]`.
 *
 * Masking:
 *   This layer supports masking for input data with a variable number
 *   of timesteps. To introduce masks to your data,
 *   use an embedding layer with the `mask_zero` parameter
 *   set to `True`.
 *
 * Notes on using statefulness in RNNs:
 *   You can set RNN layers to be 'stateful', which means that the states
 *   computed for the samples in one batch will be reused as initial states
 *   for the samples in the next batch. This assumes a one-to-one mapping
 *   between samples in different successive batches.
 *
 *   To enable statefulness:
 *     - specify `stateful: true` in the layer constructor.
 *     - specify a fixed batch size for your model, by passing
 *       if sequential model:
 *         `batchInputShape=[...]` to the first layer in your model.
 *       else for functional model with 1 or more Input layers:
 *         `batchShape=[...]` to all the first layers in your model.
 *       This is the expected shape of your inputs *including the batch size*.
 *       It should be a tuple of integers, e.g. `(32, 10, 100)`.
 *     - specify `shuffle=False` when calling fit().
 *
 *   To reset the states of your model, call `.resetStates()` on either
 *   a specific layer, or on your entire model.
 *
 * Note on specifying the initial state of RNNs
 *   You can specify the initial state of RNN layers symbolically by
 *   calling them with the option `initialState`. The value of
 *   `initialState` should be a tensor or list of tensors representing
 *   the initial state of the RNN layer.
 *
 *   You can specify the initial state of RNN layers numerically by
 *   calling `resetStates` with the keyword argument `states`. The value of
 *   `states` should be a numpy array or list of numpy arrays representing
 *   the initial state of the RNN layer.
 *
 * Note on passing external constants to RNNs
 *   You can pass "external" constants to the cell using the `constants`
 *   keyword argument of `RNN.call` method. This requires that the `cell.call`
 *   method accepts the same keyword argument `constants`. Such constants
 *   can be used to conditon the cell transformation on additional static inputs
 *   (not changing over time), a.k.a an attention mechanism.
 */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */ parcelHelpers.export(exports, "rnn", ()=>rnn);
/**
 * Wrapper allowing a stack of RNN cells to behave as a single cell.
 *
 * Used to implement efficient stacked RNNs.
 */ /** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */ parcelHelpers.export(exports, "stackedRNNCells", ()=>stackedRNNCells);
// Wrapper Layers.
/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */ parcelHelpers.export(exports, "bidirectional", ()=>bidirectional);
/**
 * This wrapper applies a layer to every temporal slice of an input.
 *
 * The input should be at least 3D,  and the dimension of the index `1` will be
 * considered to be the temporal dimension.
 *
 * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors
 * of 16 dimensions. The batch input shape of the layer is then `[32,  10,
 * 16]`, and the `inputShape`, not including the sample dimension, is
 * `[10, 16]`.
 *
 * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10
 * timesteps, independently:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.timeDistributed({
 *   layer: tf.layers.dense({units: 8}),
 *   inputShape: [10, 16],
 * }));
 *
 * // Now model.outputShape = [null, 10, 8].
 * // The output will then have shape `[32, 10, 8]`.
 *
 * // In subsequent layers, there is no need for `inputShape`:
 * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));
 * console.log(JSON.stringify(model.outputs[0].shape));
 * // Now model.outputShape = [null, 10, 32].
 * ```
 *
 * The output will then have shape `[32, 10, 32]`.
 *
 * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for
 * instance a `Conv2D` layer.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.timeDistributed({
 *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),
 *   inputShape: [10, 299, 299, 3],
 * }));
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 */ /** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */ parcelHelpers.export(exports, "timeDistributed", ()=>timeDistributed);
parcelHelpers.export(exports, "globalMaxPool1d", ()=>globalMaxPool1d);
parcelHelpers.export(exports, "globalMaxPool2d", ()=>globalMaxPool2d);
parcelHelpers.export(exports, "maxPool1d", ()=>maxPool1d);
parcelHelpers.export(exports, "maxPool2d", ()=>maxPool2d);
parcelHelpers.export(exports, "Layer", ()=>(0, _topology.Layer));
parcelHelpers.export(exports, "RNN", ()=>(0, _recurrent.RNN));
parcelHelpers.export(exports, "RNNCell", ()=>(0, _recurrent.RNNCell));
parcelHelpers.export(exports, "input", ()=>(0, _exports.input /* alias for tf.input */ ));
/**
 * Apply additive zero-centered Gaussian noise.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * This is useful to mitigate overfitting
 * (you could see it as a form of random data augmentation).
 * Gaussian Noise (GS) is a natural choice as corruption process
 * for real valued inputs.
 *
 * # Arguments
 *     stddev: float, standard deviation of the noise distribution.
 *
 * # Input shape
 *         Arbitrary. Use the keyword argument `input_shape`
 *         (tuple of integers, does not include the samples axis)
 *         when using this layer as the first layer in a model.
 *
 * # Output shape
 *         Same shape as input.
 */ /** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */ parcelHelpers.export(exports, "gaussianNoise", ()=>gaussianNoise);
/**
 * Apply multiplicative 1-centered Gaussian noise.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * Arguments:
 *   - `rate`: float, drop probability (as with `Dropout`).
 *     The multiplicative noise will have
 *     standard deviation `sqrt(rate / (1 - rate))`.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](
 *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)
 *
 */ /** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */ parcelHelpers.export(exports, "gaussianDropout", ()=>gaussianDropout);
/**
 * Applies Alpha Dropout to the input.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs
 * to their original values, in order to ensure the self-normalizing property
 * even after this dropout.
 * Alpha Dropout fits well to Scaled Exponential Linear Units
 * by randomly setting activations to the negative saturation value.
 *
 * Arguments:
 *   - `rate`: float, drop probability (as with `Dropout`).
 *     The multiplicative noise will have
 *     standard deviation `sqrt(rate / (1 - rate))`.
 *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the
 *     shape for randomly generated keep/drop flags.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
 */ /** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */ parcelHelpers.export(exports, "alphaDropout", ()=>alphaDropout);
/**
 * Masks a sequence by using a mask value to skip timesteps.
 *
 * If all features for a given sample timestep are equal to `mask_value`,
 * then the sample timestep will be masked (skipped) in all downstream layers
 * (as long as they support masking).
 *
 * If any downstream layer does not support masking yet receives such
 * an input mask, an exception will be raised.
 *
 * Arguments:
 *   - `maskValue`: Either None or mask value to skip.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 */ /** @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'} */ parcelHelpers.export(exports, "masking", ()=>masking);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _inputLayer = require("./engine/input_layer");
var _topology = require("./engine/topology");
var _exports = require("./exports");
var _advancedActivations = require("./layers/advanced_activations");
var _convolutional = require("./layers/convolutional");
var _convolutionalDepthwise = require("./layers/convolutional_depthwise");
var _core = require("./layers/core");
var _embeddings = require("./layers/embeddings");
var _merge = require("./layers/merge");
var _noise = require("./layers/noise");
var _normalization = require("./layers/normalization");
var _padding = require("./layers/padding");
var _pooling = require("./layers/pooling");
var _recurrent = require("./layers/recurrent");
var _wrappers = require("./layers/wrappers");
function inputLayer(args) {
    return new (0, _inputLayer.InputLayer)(args);
}
function elu(args) {
    return new (0, _advancedActivations.ELU)(args);
}
function reLU(args) {
    return new (0, _advancedActivations.ReLU)(args);
}
function leakyReLU(args) {
    return new (0, _advancedActivations.LeakyReLU)(args);
}
function prelu(args) {
    return new (0, _advancedActivations.PReLU)(args);
}
function softmax(args) {
    return new (0, _advancedActivations.Softmax)(args);
}
function thresholdedReLU(args) {
    return new (0, _advancedActivations.ThresholdedReLU)(args);
}
function conv1d(args) {
    return new (0, _convolutional.Conv1D)(args);
}
function conv2d(args) {
    return new (0, _convolutional.Conv2D)(args);
}
function conv2dTranspose(args) {
    return new (0, _convolutional.Conv2DTranspose)(args);
}
function conv3d(args) {
    return new (0, _convolutional.Conv3D)(args);
}
function separableConv2d(args) {
    return new (0, _convolutional.SeparableConv2D)(args);
}
function cropping2D(args) {
    return new (0, _convolutional.Cropping2D)(args);
}
function upSampling2d(args) {
    return new (0, _convolutional.UpSampling2D)(args);
}
function depthwiseConv2d(args) {
    return new (0, _convolutionalDepthwise.DepthwiseConv2D)(args);
}
function activation(args) {
    return new (0, _core.Activation)(args);
}
function dense(args) {
    return new (0, _core.Dense)(args);
}
function dropout(args) {
    return new (0, _core.Dropout)(args);
}
function spatialDropout1d(args) {
    return new (0, _core.SpatialDropout1D)(args);
}
function flatten(args) {
    return new (0, _core.Flatten)(args);
}
function repeatVector(args) {
    return new (0, _core.RepeatVector)(args);
}
function reshape(args) {
    return new (0, _core.Reshape)(args);
}
function permute(args) {
    return new (0, _core.Permute)(args);
}
function embedding(args) {
    return new (0, _embeddings.Embedding)(args);
}
function add(args) {
    return new (0, _merge.Add)(args);
}
function average(args) {
    return new (0, _merge.Average)(args);
}
function concatenate(args) {
    return new (0, _merge.Concatenate)(args);
}
function maximum(args) {
    return new (0, _merge.Maximum)(args);
}
function minimum(args) {
    return new (0, _merge.Minimum)(args);
}
function multiply(args) {
    return new (0, _merge.Multiply)(args);
}
function dot(args) {
    return new (0, _merge.Dot)(args);
}
function batchNormalization(args) {
    return new (0, _normalization.BatchNormalization)(args);
}
function layerNormalization(args) {
    return new (0, _normalization.LayerNormalization)(args);
}
function zeroPadding2d(args) {
    return new (0, _padding.ZeroPadding2D)(args);
}
function averagePooling1d(args) {
    return new (0, _pooling.AveragePooling1D)(args);
}
function avgPool1d(args) {
    return averagePooling1d(args);
}
function avgPooling1d(args) {
    return averagePooling1d(args);
}
function averagePooling2d(args) {
    return new (0, _pooling.AveragePooling2D)(args);
}
function avgPool2d(args) {
    return averagePooling2d(args);
}
function avgPooling2d(args) {
    return averagePooling2d(args);
}
function averagePooling3d(args) {
    return new (0, _pooling.AveragePooling3D)(args);
}
function avgPool3d(args) {
    return averagePooling3d(args);
}
function avgPooling3d(args) {
    return averagePooling3d(args);
}
function globalAveragePooling1d(args) {
    return new (0, _pooling.GlobalAveragePooling1D)(args);
}
function globalAveragePooling2d(args) {
    return new (0, _pooling.GlobalAveragePooling2D)(args);
}
function globalMaxPooling1d(args) {
    return new (0, _pooling.GlobalMaxPooling1D)(args);
}
function globalMaxPooling2d(args) {
    return new (0, _pooling.GlobalMaxPooling2D)(args);
}
function maxPooling1d(args) {
    return new (0, _pooling.MaxPooling1D)(args);
}
function maxPooling2d(args) {
    return new (0, _pooling.MaxPooling2D)(args);
}
function maxPooling3d(args) {
    return new (0, _pooling.MaxPooling3D)(args);
}
function gru(args) {
    return new (0, _recurrent.GRU)(args);
}
function gruCell(args) {
    return new (0, _recurrent.GRUCell)(args);
}
function lstm(args) {
    return new (0, _recurrent.LSTM)(args);
}
function lstmCell(args) {
    return new (0, _recurrent.LSTMCell)(args);
}
function simpleRNN(args) {
    return new (0, _recurrent.SimpleRNN)(args);
}
function simpleRNNCell(args) {
    return new (0, _recurrent.SimpleRNNCell)(args);
}
function rnn(args) {
    return new (0, _recurrent.RNN)(args);
}
function stackedRNNCells(args) {
    return new (0, _recurrent.StackedRNNCells)(args);
}
function bidirectional(args) {
    return new (0, _wrappers.Bidirectional)(args);
}
function timeDistributed(args) {
    return new (0, _wrappers.TimeDistributed)(args);
}
const globalMaxPool1d = globalMaxPooling1d;
const globalMaxPool2d = globalMaxPooling2d;
const maxPool1d = maxPooling1d;
const maxPool2d = maxPooling2d;
function gaussianNoise(args) {
    return new (0, _noise.GaussianNoise)(args);
}
function gaussianDropout(args) {
    return new (0, _noise.GaussianDropout)(args);
}
function alphaDropout(args) {
    return new (0, _noise.AlphaDropout)(args);
}
function masking(args) {
    return new (0, _core.Masking)(args);
}

},{"./engine/input_layer":"dMLUr","./engine/topology":"2OPnm","./exports":"18pwI","./layers/advanced_activations":"fCj9B","./layers/convolutional":"7yA90","./layers/convolutional_depthwise":"4H2CZ","./layers/core":"huFIs","./layers/embeddings":"bleLR","./layers/merge":"eLfYG","./layers/noise":"52dbb","./layers/normalization":"iEuUl","./layers/padding":"hiyXr","./layers/pooling":"d296C","./layers/recurrent":"1N3a1","./layers/wrappers":"b9fF5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dMLUr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InputLayer", ()=>InputLayer);
parcelHelpers.export(exports, "Input", ()=>Input);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _state = require("../backend/state");
var _errors = require("../errors");
var _topology = require("./topology");
class InputLayer extends (0, _topology.Layer) {
    constructor(args){
        super({
            dtype: args.dtype,
            name: args.name != null ? args.name : (0, _state.getUid)("input").toString()
        });
        // Normalize config.batchSize and config.sparse
        if (args.batchSize == null) args.batchSize = null;
        if (args.sparse == null) args.sparse = false;
        this.trainable = false;
        this.built = true;
        this.sparse = args.sparse;
        if (args.inputShape != null && args.batchInputShape != null) throw new (0, _errors.ValueError)("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
        let batchInputShape = args.batchInputShape;
        if (batchInputShape == null) {
            if (args.inputShape == null) throw new (0, _errors.ValueError)("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
            else batchInputShape = [
                args.batchSize
            ].concat(args.inputShape);
        } else {
            // TODO(michaelterry): Backport to PyKeras
            if (args.batchSize != null) throw new (0, _errors.ValueError)("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
        }
        const dtype = args.dtype || "float32";
        this.batchInputShape = batchInputShape;
        this.dtype = dtype;
        // TODO(michaelterry): Backport this to PyKeras?
        this.inputSpec = [
            {
                shape: batchInputShape
            }
        ];
        const inputTensor = new (0, _topology.SymbolicTensor)(this.dtype, this.batchInputShape, this, [], {}, this.name);
        inputTensor.nodeIndex = 0;
        inputTensor.tensorIndex = 0;
        // Create an input node to add to this.outboundNode.
        // (This call has side effects.)
        // tslint:disable-next-line:no-unused-expression
        new (0, _topology.Node)({
            outboundLayer: this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: [
                inputTensor
            ],
            outputTensors: [
                inputTensor
            ],
            inputMasks: [
                null
            ],
            outputMasks: [
                null
            ],
            inputShapes: [
                batchInputShape
            ],
            outputShapes: [
                batchInputShape
            ]
        });
    }
    apply(inputs, kwargs) {
        throw new (0, _errors.ValueError)("Cannot pass any input to an " + `InputLayer's apply() method. InputLayer name: ${this.name}`);
    }
    dispose() {
        // dispose() for InputLayer is overridden as no-op.
        return {
            refCountAfterDispose: this._refCount,
            numDisposedVariables: 0
        };
    }
    getConfig() {
        return {
            batchInputShape: this.batchInputShape,
            dtype: this.dtype,
            sparse: this.sparse,
            name: this.name
        };
    }
}
/** @nocollapse */ InputLayer.className = "InputLayer";
(0, _tfjsCore.serialization).registerClass(InputLayer);
function Input(config) {
    if (config.batchShape == null && config.shape == null) throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
    if (config.batchShape != null && config.shape != null) // TODO(michaelterry): Backport to PyKeras.
    throw new (0, _errors.ValueError)("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
    let batchShape = config.batchShape;
    if (config.shape != null && batchShape == null) batchShape = [
        null
    ].concat(config.shape);
    let dtype = config.dtype;
    if (dtype == null) dtype = "float32";
    const inputLayer = new InputLayer({
        batchInputShape: batchShape,
        name: config.name,
        dtype,
        sparse: config.sparse
    });
    const outputs = inputLayer.inboundNodes[0].outputTensors;
    return outputs[0];
}

},{"@tensorflow/tfjs-core":"2votT","../backend/state":"6G8m0","../errors":"kA7ff","./topology":"2OPnm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6G8m0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getNextUniqueTensorId", ()=>getNextUniqueTensorId);
/**
 * Provides a unique UID given a string prefix.
 *
 * @param prefix
 */ parcelHelpers.export(exports, "getUid", ()=>getUid);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Utilities related to persistent state in the backend.
 */ /**
 * An ID to track `tf.SymbolicTensor`s and derived classes.
 * Required in different places in engine/topology.ts to identify unique
 * tensors.
 */ let _nextUniqueTensorId = 0;
function getNextUniqueTensorId() {
    return _nextUniqueTensorId++;
}
const _uidPrefixes = {};
function getUid(prefix = "") {
    if (!(prefix in _uidPrefixes)) _uidPrefixes[prefix] = 0;
    _uidPrefixes[prefix] += 1;
    return prefix + _uidPrefixes[prefix].toString();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2OPnm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Specifies the ndim, dtype and shape of every input to a layer.
 *
 * Every layer should expose (if appropriate) an `inputSpec` attribute:
 * a list of instances of InputSpec (one per input tensor).
 *
 * A null entry in a shape is compatible with any dimension,
 * a null shape is compatible with any shape.
 */ parcelHelpers.export(exports, "InputSpec", ()=>InputSpec);
/**
 * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.
 *
 * They are most often encountered when building a graph of `Layer`s for a
 * a `tf.LayersModel` and the input data's shape, but not values are known.
 */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ parcelHelpers.export(exports, "SymbolicTensor", ()=>SymbolicTensor);
/**
 * A `Node` describes the connectivity between two layers.
 *
 * Each time a layer is connected to some new input,
 * a node is added to `layer.inboundNodes`.
 *
 * Each time the output of a layer is used by another layer,
 * a node is added to `layer.outboundNodes`.
 *
 * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates
 * describing the origin of the `inputTensors`, verifying the following:
 *
 * `inputTensors[i] ==
 * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[
 *   tensorIndices[i]]`
 *
 * A node from layer A to layer B is added to:
 *     A.outboundNodes
 *     B.inboundNodes
 */ parcelHelpers.export(exports, "Node", ()=>Node);
/**
 * A layer is a grouping of operations and weights that can be composed to
 * create a `tf.LayersModel`.
 *
 * Layers are constructed by using the functions under the
 * [tf.layers](#Layers-Basic) namespace.
 */ /** @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'} */ parcelHelpers.export(exports, "Layer", ()=>Layer);
/**
 * Returns the list of input tensors necessary to compute `tensor`.
 *
 * Output will always be a list of tensors (potentially with 1 element).
 *
 * @param tensor The tensor to start from.
 * @param layer Origin layer of the tensor.
 * @param nodeIndex Origin node index of the tensor.
 *
 * @return Array of input tensors.
 */ parcelHelpers.export(exports, "getSourceInputs", ()=>getSourceInputs);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original source: keras/engine/topology.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _state = require("../backend/state");
var _common = require("../common");
var _errors = require("../errors");
var _initializers = require("../initializers");
var _genericUtils = require("../utils/generic_utils");
var _typesUtils = require("../utils/types_utils");
var _variableUtils = require("../utils/variable_utils");
var _variables = require("../variables");
class InputSpec {
    constructor(args){
        this.dtype = args.dtype;
        this.shape = args.shape;
        /*
          TODO(michaelterry): Could throw error if ndim and shape are both defined
            (then backport).
        */ if (args.shape != null) this.ndim = args.shape.length;
        else this.ndim = args.ndim;
        this.maxNDim = args.maxNDim;
        this.minNDim = args.minNDim;
        this.axes = args.axes || {};
    }
}
class SymbolicTensor {
    /**
     *
     * @param dtype
     * @param shape
     * @param sourceLayer The Layer that produced this symbolic tensor.
     * @param inputs The inputs passed to sourceLayer's __call__() method.
     * @param nodeIndex
     * @param tensorIndex
     * @param callArgs The keyword arguments passed to the __call__() method.
     * @param name
     * @param outputTensorIndex The index of this tensor in the list of outputs
     *   returned by apply().
     */ constructor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex){
        this.dtype = dtype;
        this.shape = shape;
        this.sourceLayer = sourceLayer;
        this.inputs = inputs;
        this.callArgs = callArgs;
        this.outputTensorIndex = outputTensorIndex;
        this.id = (0, _state.getNextUniqueTensorId)();
        if (name != null) {
            this.originalName = (0, _common.getScopedTensorName)(name);
            this.name = (0, _common.getUniqueTensorName)(this.originalName);
        }
        this.rank = shape.length;
    }
}
let _nextNodeID = 0;
class Node {
    constructor(args, // TODO(michaelterry): Define actual type for this.
    callArgs){
        this.callArgs = callArgs;
        this.id = _nextNodeID++;
        /*
          Layer instance (NOT a list).
          this is the layer that takes a list of input tensors
          and turns them into a list of output tensors.
          the current node will be added to
          the inboundNodes of outboundLayer.
        */ this.outboundLayer = args.outboundLayer;
        /*
            The following 3 properties describe where
            the input tensors come from: which layers,
            and for each layer, which node and which
            tensor output of each node.
        */ // List of layer instances.
        this.inboundLayers = args.inboundLayers;
        // List of integers, 1:1 mapping with inboundLayers.
        this.nodeIndices = args.nodeIndices;
        // List of integers, 1:1 mapping with inboundLayers.
        this.tensorIndices = args.tensorIndices;
        /*
            Following 2 properties:
            tensor inputs and outputs of outboundLayer.
        */ // List of tensors. 1:1 mapping with inboundLayers.
        this.inputTensors = args.inputTensors;
        // List of tensors, created by outboundLayer.call().
        this.outputTensors = args.outputTensors;
        /*
            Following 2 properties: input and output masks.
            List of tensors, 1:1 mapping with inputTensor.
        */ this.inputMasks = args.inputMasks;
        // List of tensors, created by outboundLayer.computeMask().
        this.outputMasks = args.outputMasks;
        // Following 2 properties: input and output shapes.
        // List of shape tuples, shapes of inputTensors.
        this.inputShapes = args.inputShapes;
        // List of shape tuples, shapes of outputTensors.
        this.outputShapes = args.outputShapes;
        // Add nodes to all layers involved.
        for (const layer of args.inboundLayers)if (layer != null) layer.outboundNodes.push(this);
        args.outboundLayer.inboundNodes.push(this);
    }
    getConfig() {
        const inboundNames = [];
        for (const layer of this.inboundLayers)if (layer != null) inboundNames.push(layer.name);
        else inboundNames.push(null);
        return {
            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
            inboundLayers: inboundNames,
            nodeIndices: this.nodeIndices,
            tensorIndices: this.tensorIndices
        };
    }
}
let _nextLayerID = 0;
class Layer extends (0, _tfjsCore.serialization).Serializable {
    constructor(args = {}){
        super();
        this._callHook = null;
        this._addedWeightNames = [];
        // Porting Notes: PyKeras does not have this property in this base Layer
        //   class. Instead lets Layer subclass set it dynamically and checks the
        //   value with `hasattr`. In tfjs-layers, we let this be a member of this
        //   base class.
        this._stateful = false;
        this.id = _nextLayerID++;
        this.activityRegularizer = null;
        this.inputSpec = null;
        this.supportsMasking = false;
        // These properties will be set upon call of this.build()
        this._trainableWeights = [];
        this._nonTrainableWeights = [];
        this._losses = [];
        this._updates = [];
        this._built = false;
        /*
          These lists will be filled via successive calls
          to this.addInboundNode().
         */ this.inboundNodes = [];
        this.outboundNodes = [];
        let name = args.name;
        if (!name) {
            const prefix = this.getClassName();
            name = _genericUtils.toSnakeCase(prefix) + "_" + (0, _state.getUid)(prefix);
        }
        this.name = name;
        this.trainable_ = args.trainable == null ? true : args.trainable;
        if (args.inputShape != null || args.batchInputShape != null) {
            /*
              In this case we will later create an input layer
              to insert before the current layer
             */ let batchInputShape;
            if (args.batchInputShape != null) batchInputShape = args.batchInputShape;
            else if (args.inputShape != null) {
                let batchSize = null;
                if (args.batchSize != null) batchSize = args.batchSize;
                batchInputShape = [
                    batchSize
                ].concat(args.inputShape);
            }
            this.batchInputShape = batchInputShape;
            // Set dtype.
            let dtype = args.dtype;
            if (dtype == null) dtype = args.inputDType;
            if (dtype == null) dtype = "float32";
            this.dtype = dtype;
        }
        if (args.weights != null) this.initialWeights = args.weights;
        else this.initialWeights = null;
        // The value of `_refCount` is initialized to null. When the layer is used
        // in a symbolic way for the first time, it will be set to 1.
        this._refCount = null;
        this.fastWeightInitDuringBuild = false;
    }
    /**
     * Converts a layer and its index to a unique (immutable type) name.
     * This function is used internally with `this.containerNodes`.
     * @param layer The layer.
     * @param nodeIndex The layer's position (e.g. via enumerate) in a list of
     *   nodes.
     *
     * @returns The unique name.
     */ static nodeKey(layer, nodeIndex) {
        return layer.name + "_ib-" + nodeIndex.toString();
    }
    /**
     * Returns this.inboundNode at index nodeIndex.
     *
     * Porting note: This is a replacement for _get_node_attribute_at_index()
     * @param nodeIndex
     * @param attrName The name of the attribute related to request for this node.
     */ getNodeAtIndex(nodeIndex, attrName) {
        if (this.inboundNodes.length === 0) throw new (0, _errors.RuntimeError)("The layer has never been called " + `and thus has no defined ${attrName}.`);
        if (this.inboundNodes.length <= nodeIndex) throw new (0, _errors.ValueError)(`Asked to get ${attrName} at node ${nodeIndex}, ` + `but the layer has only ${this.inboundNodes.length} inbound nodes.`);
        return this.inboundNodes[nodeIndex];
    }
    /**
     * Retrieves the input tensor(s) of a layer at a given node.
     *
     * @param nodeIndex Integer, index of the node from which to retrieve the
     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
     *   was called.
     *
     * @return A tensor (or list of tensors if the layer has multiple inputs).
     */ getInputAt(nodeIndex) {
        return _genericUtils.singletonOrArray(this.getNodeAtIndex(nodeIndex, "input").inputTensors);
    }
    /**
     * Retrieves the output tensor(s) of a layer at a given node.
     *
     * @param nodeIndex Integer, index of the node from which to retrieve the
     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
     *   was called.
     *
     * @return A tensor (or list of tensors if the layer has multiple outputs).
     */ getOutputAt(nodeIndex) {
        return _genericUtils.singletonOrArray(this.getNodeAtIndex(nodeIndex, "output").outputTensors);
    }
    // Properties
    /**
     * Retrieves the input tensor(s) of a layer.
     *
     * Only applicable if the layer has exactly one inbound node,
     * i.e. if it is connected to one incoming layer.
     *
     * @return Input tensor or list of input tensors.
     *
     * @exception AttributeError if the layer is connected to more than one
     *   incoming layers.
     */ get input() {
        if (this.inboundNodes.length > 1) throw new (0, _errors.AttributeError)(`Layer ${this.name}` + " has multiple inbound nodes, " + 'hence the notion of "layer input" ' + "is ill-defined. " + "Use `getInputAt(nodeIndex)` instead.");
        else if (this.inboundNodes.length === 0) throw new (0, _errors.AttributeError)(`Layer ${this.name}` + " is not connected, no input to return.");
        return _genericUtils.singletonOrArray(this.getNodeAtIndex(0, "input").inputTensors);
    }
    /**
     * Retrieves the output tensor(s) of a layer.
     *
     * Only applicable if the layer has exactly one inbound node,
     * i.e. if it is connected to one incoming layer.
     *
     * @return Output tensor or list of output tensors.
     *
     * @exception AttributeError if the layer is connected to more than one
     *   incoming layers.
     */ get output() {
        if (this.inboundNodes.length === 0) throw new (0, _errors.AttributeError)(`Layer ${this.name}` + " has no inbound nodes.");
        if (this.inboundNodes.length > 1) throw new (0, _errors.AttributeError)(`Layer ${this.name}` + " has multiple inbound nodes, " + 'hence the notion of "layer output" ' + "is ill-defined. " + "Use `getOutputAt(nodeIndex)` instead.");
        return _genericUtils.singletonOrArray(this.getNodeAtIndex(0, "output").outputTensors);
    }
    get losses() {
        return this._losses;
    }
    /**
     * Retrieves the Layer's current loss values.
     *
     * Used for regularizers during training.
     */ calculateLosses() {
        // Porting Node: This is an augmentation to Layer.loss in PyKeras.
        //   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete
        //   Tensor (specifically Scalar) values are returned. This is due to the
        //   imperative backend.
        return this.losses.map((lossFn)=>lossFn());
    }
    get updates() {
        return this._updates;
    }
    get built() {
        return this._built;
    }
    set built(built) {
        this._built = built;
    }
    get trainable() {
        return this.trainable_;
    }
    set trainable(trainable) {
        this._trainableWeights.forEach((w)=>w.trainable = trainable);
        this.trainable_ = trainable;
    }
    get trainableWeights() {
        if (this.trainable_) return this._trainableWeights.filter((w)=>w.trainable);
        else return [];
    }
    set trainableWeights(weights) {
        this._trainableWeights = weights;
    }
    get nonTrainableWeights() {
        if (this.trainable) return this._trainableWeights.filter((w)=>!w.trainable).concat(this._nonTrainableWeights);
        else return this._trainableWeights.concat(this._nonTrainableWeights);
    }
    set nonTrainableWeights(weights) {
        this._nonTrainableWeights = weights;
    }
    /**
     * The concatenation of the lists trainableWeights and nonTrainableWeights
     * (in this order).
     */ get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
    }
    get stateful() {
        return this._stateful;
    }
    /**
     * Reset the states of the layer.
     *
     * This method of the base Layer class is essentially a no-op.
     * Subclasses that are stateful (e.g., stateful RNNs) should override this
     * method.
     */ resetStates() {
        if (!this.stateful) throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
    }
    /**
     * Checks compatibility between the layer and provided inputs.
     *
     * This checks that the tensor(s) `input`
     * verify the input assumptions of the layer
     * (if any). If not, exceptions are raised.
     *
     * @param inputs Input tensor or list of input tensors.
     *
     * @exception ValueError in case of mismatch between
     *   the provided inputs and the expectations of the layer.
     */ assertInputCompatibility(inputs) {
        inputs = _genericUtils.toList(inputs);
        if (this.inputSpec == null || this.inputSpec.length === 0) return;
        const inputSpec = _genericUtils.toList(this.inputSpec);
        if (inputs.length !== inputSpec.length) throw new (0, _errors.ValueError)(`Layer ${this.name} expects ${inputSpec.length} inputs, ` + `but it received ${inputs.length} input tensors. ` + `Input received: ${inputs}`);
        for(let inputIndex = 0; inputIndex < inputs.length; inputIndex++){
            const x = inputs[inputIndex];
            const spec = inputSpec[inputIndex];
            if (spec == null) continue;
            // Check ndim.
            const ndim = x.rank;
            if (spec.ndim != null) {
                if (ndim !== spec.ndim) throw new (0, _errors.ValueError)(`Input ${inputIndex} is incompatible with layer ${this.name}: ` + `expected ndim=${spec.ndim}, found ndim=${ndim}`);
            }
            if (spec.maxNDim != null) {
                if (ndim > spec.maxNDim) throw new (0, _errors.ValueError)(`Input ${inputIndex} is incompatible with layer ${this.name}` + `: expected max_ndim=${spec.maxNDim}, found ndim=${ndim}`);
            }
            if (spec.minNDim != null) {
                if (ndim < spec.minNDim) throw new (0, _errors.ValueError)(`Input ${inputIndex} is incompatible with layer ${this.name}` + `: expected min_ndim=${spec.minNDim}, found ndim=${ndim}.`);
            }
            // Check dtype.
            if (spec.dtype != null) {
                if (x.dtype !== spec.dtype) throw new (0, _errors.ValueError)(`Input ${inputIndex} is incompatible with layer ${this.name} ` + `: expected dtype=${spec.dtype}, found dtype=${x.dtype}.`);
            }
            // Check specific shape axes.
            if (spec.axes) {
                const xShape = x.shape;
                for(const key in spec.axes){
                    const axis = Number(key);
                    const value = spec.axes[key];
                    // Perform Python-style slicing in case axis < 0;
                    // TODO(cais): Use https://github.com/alvivi/typescript-underscore to
                    // ensure type safety through Underscore calls.
                    const xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];
                    if (value != null && [
                        value,
                        null
                    ].indexOf(xShapeAtAxis) === -1) throw new (0, _errors.ValueError)(`Input ${inputIndex} is incompatible with layer ` + `${this.name}: expected axis ${axis} of input shape to ` + `have value ${value} but got shape ${xShape}.`);
                }
            }
            // Check shape.
            if (spec.shape != null) for(let i = 0; i < spec.shape.length; ++i){
                const specDim = spec.shape[i];
                const dim = x.shape[i];
                if (specDim != null && dim != null) {
                    if (specDim !== dim) throw new (0, _errors.ValueError)(`Input ${inputIndex} is incompatible with layer ` + `${this.name}: expected shape=${spec.shape}, ` + `found shape=${x.shape}.`);
                }
            }
        }
    }
    /**
     * This is where the layer's logic lives.
     *
     * @param inputs Input tensor, or list/tuple of input tensors.
     * @param kwargs Additional keyword arguments.
     *
     * @return A tensor or list/tuple of tensors.
     */ call(inputs, kwargs) {
        return inputs;
    }
    invokeCallHook(inputs, kwargs) {
        if (this._callHook != null) this._callHook(inputs, kwargs);
    }
    /**
     * Set call hook.
     * This is currently used for testing only.
     * @param callHook
     */ setCallHook(callHook) {
        this._callHook = callHook;
    }
    /**
     * Clear call hook.
     * This is currently used for testing only.
     */ clearCallHook() {
        this._callHook = null;
    }
    /**
     * Builds or executes a `Layer's logic.
     *
     * When called with `tf.Tensor`(s), execute the `Layer`s computation and
     * return Tensor(s). For example:
     *
     * ```js
     * const denseLayer = tf.layers.dense({
     *   units: 1,
     *   kernelInitializer: 'zeros',
     *   useBias: false
     * });
     *
     * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete
     * // numeric values).
     * const input = tf.ones([2, 2]);
     * const output = denseLayer.apply(input);
     *
     * // The output's value is expected to be [[0], [0]], due to the fact that
     * // the dense layer has a kernel initialized to all-zeros and does not have
     * // a bias.
     * output.print();
     * ```
     *
     * When called with `tf.SymbolicTensor`(s), this will prepare the layer for
     * future execution.  This entails internal book-keeping on shapes of
     * expected Tensors, wiring layers together, and initializing weights.
     *
     * Calling `apply` with `tf.SymbolicTensor`s are typically used during the
     * building of non-`tf.Sequential` models. For example:
     *
     * ```js
     * const flattenLayer = tf.layers.flatten();
     * const denseLayer = tf.layers.dense({units: 1});
     *
     * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().
     * const input = tf.input({shape: [2, 2]});
     * const output1 = flattenLayer.apply(input);
     *
     * // output1.shape is [null, 4]. The first dimension is the undetermined
     * // batch size. The second dimension comes from flattening the [2, 2]
     * // shape.
     * console.log(JSON.stringify(output1.shape));
     *
     * // The output SymbolicTensor of the flatten layer can be used to call
     * // the apply() of the dense layer:
     * const output2 = denseLayer.apply(output1);
     *
     * // output2.shape is [null, 1]. The first dimension is the undetermined
     * // batch size. The second dimension matches the number of units of the
     * // dense layer.
     * console.log(JSON.stringify(output2.shape));
     *
     * // The input and output and be used to construct a model that consists
     * // of the flatten and dense layers.
     * const model = tf.model({inputs: input, outputs: output2});
     * ```
     *
     * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.
     * @param kwargs Additional keyword arguments to be passed to `call()`.
     *
     * @return Output of the layer's `call` method.
     *
     * @exception ValueError error in case the layer is missing shape information
     *   for its `build` call.
     */ // Porting Note: This is a replacement for __call__() in Python.
    /** @doc {heading: 'Models', 'subheading': 'Classes'} */ apply(inputs, kwargs) {
        kwargs = kwargs || {};
        this.assertNotDisposed();
        // Ensure inputs are all the same type.
        const inputsList = _genericUtils.toList(inputs);
        let allAreSymbolic = true;
        for (const input of inputsList)if (!(input instanceof SymbolicTensor)) {
            allAreSymbolic = false;
            break;
        }
        let noneAreSymbolic = true;
        for (const input1 of inputsList)if (input1 instanceof SymbolicTensor) {
            noneAreSymbolic = false;
            break;
        }
        if (allAreSymbolic === noneAreSymbolic) throw new (0, _errors.ValueError)("Arguments to apply() must be all SymbolicTensors or all Tensors");
        // TODO(michaelterry): nameScope() may not be necessary.
        return (0, _common.nameScope)(this.name, ()=>{
            // Handle laying building (weight creating, input spec locking).
            if (!this.built) {
                /*
                  Throw exceptions in case the input is not compatible
                  with the inputSpec specified in the layer constructor.
                 */ this.assertInputCompatibility(inputs);
                // Collect input shapes to build layer.
                const inputShapes = [];
                for (const xElem of _genericUtils.toList(inputs))inputShapes.push(xElem.shape);
                this.build(_genericUtils.singletonOrArray(inputShapes));
                this.built = true;
                // Load weights that were specified at layer instantiation.
                if (this.initialWeights) this.setWeights(this.initialWeights);
                if (this._refCount === null && noneAreSymbolic) // The first use of this layer is a non-symbolic call, set ref count
                // to 1 so the Layer can be properly disposed if its dispose() method
                // is called.
                this._refCount = 1;
            }
            /*
              Throw exceptions in case the input is not compatible
              with the inputSpec set at build time.
            */ this.assertInputCompatibility(inputs);
            // Handle mask propagation.
            // TODO(michaelterry): Mask propagation not currently implemented.
            // Actually call the layer, collecting output(s), mask(s), and shape(s).
            if (noneAreSymbolic) {
                let output = this.call(inputs, kwargs);
                // TODO(michaelterry): Compute the outputMask
                // If the layer returns tensors from its inputs, unmodified,
                // we copy them to avoid loss of tensor metadata.
                const outputList = _genericUtils.toList(output);
                const outputListCopy = [];
                // TODO(michaelterry): This copying may not be necessary given our eager
                // backend.
                for (let x of outputList){
                    if (inputsList.indexOf(x) !== -1) x = x.clone();
                    outputListCopy.push(x);
                }
                output = _genericUtils.singletonOrArray(outputListCopy);
                if (this.activityRegularizer != null) throw new (0, _errors.NotImplementedError)("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
                // TODO(michaelterry): Call addInboundNode()?
                return output;
            } else {
                const inputShape = collectInputShape(inputs);
                const outputShape = this.computeOutputShape(inputShape);
                let output1;
                const outputDType = guessOutputDType(inputs);
                this.warnOnIncompatibleInputShape(Array.isArray(inputs) ? inputShape[0] : inputShape);
                if (outputShape != null && outputShape.length > 0 && Array.isArray(outputShape[0])) // We have multiple output shapes. Create multiple output tensors.
                output1 = outputShape.map((shape, index)=>new SymbolicTensor(outputDType, shape, this, _genericUtils.toList(inputs), kwargs, this.name, index));
                else output1 = new SymbolicTensor(outputDType, outputShape, this, _genericUtils.toList(inputs), kwargs, this.name);
                /*
                  Add an inbound node to the layer, so that it keeps track
                  of the call and of all new variables created during the call.
                  This also updates the layer history of the output tensor(s).
                  If the input tensor(s) had no previous history,
                  this does nothing.
                */ this.addInboundNode(inputs, output1, null, null, inputShape, outputShape, kwargs);
                this._refCount++;
                if (this.activityRegularizer != null) throw new (0, _errors.NotImplementedError)("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
                return output1;
            }
        });
    }
    /**
     * Check compatibility between input shape and this layer's batchInputShape.
     *
     * Print warning if any incompatibility is found.
     *
     * @param inputShape Input shape to be checked.
     */ warnOnIncompatibleInputShape(inputShape) {
        if (this.batchInputShape == null) return;
        else if (inputShape.length !== this.batchInputShape.length) console.warn(`The rank of the input tensor provided (shape: ` + `${JSON.stringify(inputShape)}) does not match that of the ` + `batchInputShape (${JSON.stringify(this.batchInputShape)}) ` + `of the layer ${this.name}`);
        else {
            let dimMismatch = false;
            this.batchInputShape.forEach((dimension, i)=>{
                if (dimension != null && inputShape[i] != null && inputShape[i] !== dimension) dimMismatch = true;
            });
            if (dimMismatch) console.warn(`The shape of the input tensor ` + `(${JSON.stringify(inputShape)}) does not ` + `match the expectation of layer ${this.name}: ` + `${JSON.stringify(this.batchInputShape)}`);
        }
    }
    /**
     * Retrieves the output shape(s) of a layer.
     *
     * Only applicable if the layer has only one inbound node, or if all inbound
     * nodes have the same output shape.
     *
     * @returns Output shape or shapes.
     * @throws AttributeError: if the layer is connected to more than one incoming
     *   nodes.
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ get outputShape() {
        if (this.inboundNodes == null || this.inboundNodes.length === 0) throw new (0, _errors.AttributeError)(`The layer ${this.name} has never been called and thus has no ` + `defined output shape.`);
        const allOutputShapes = [];
        for (const node of this.inboundNodes){
            const shapeString = JSON.stringify(node.outputShapes);
            if (allOutputShapes.indexOf(shapeString) === -1) allOutputShapes.push(shapeString);
        }
        if (allOutputShapes.length === 1) {
            const outputShapes = this.inboundNodes[0].outputShapes;
            if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) && outputShapes.length === 1) return outputShapes[0];
            else return outputShapes;
        } else throw new (0, _errors.AttributeError)(`The layer ${this.name} has multiple inbound nodes with different ` + `output shapes. Hence the notion of "outut shape" is ill-defined ` + `for the layer.`);
    }
    /**
     * Counts the total number of numbers (e.g., float32, int32) in the
     * weights.
     *
     * @returns An integer count.
     * @throws RuntimeError: If the layer is not built yet (in which case its
     *   weights are not defined yet.)
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ countParams() {
        if (!this.built) throw new (0, _errors.RuntimeError)(`You tried to call countParams() on ${this.name}, ` + `but the layer is not built yet. Build it first by calling ` + `build(batchInputShape).`);
        return _variableUtils.countParamsInWeights(this.weights);
    }
    /**
     * Creates the layer weights.
     *
     * Must be implemented on all layers that have weights.
     *
     * Called when apply() is called to construct the weights.
     *
     * @param inputShape A `Shape` or array of `Shape` (unused).
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ build(inputShape) {
        this.built = true;
    }
    /**
     * Returns the current values of the weights of the layer.
     *
     * @param trainableOnly Whether to get the values of only trainable weights.
     * @returns Weight values as an `Array` of `tf.Tensor`s.
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ getWeights(trainableOnly = false) {
        return (0, _variables.batchGetValue)(trainableOnly ? this.trainableWeights : this.weights);
    }
    /**
     * Sets the weights of the layer, from Tensors.
     *
     * @param weights a list of Tensors. The number of arrays and their shape
     *   must match number of the dimensions of the weights of the layer (i.e.
     *   it should match the output of `getWeights`).
     *
     * @exception ValueError If the provided weights list does not match the
     *   layer's specifications.
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ setWeights(weights) {
        (0, _tfjsCore.tidy)(()=>{
            const params = this.weights;
            if (params.length !== weights.length) // TODO(cais): Restore the following and use `providedWeights`, instead
            // of `weights` in the error message, once the deeplearn.js bug is
            // fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const
            // providedWeights = JSON.stringify(weights).substr(0, 50);
            throw new (0, _errors.ValueError)(`You called setWeights(weights) on layer "${this.name}" ` + `with a weight list of length ${weights.length}, ` + `but the layer was expecting ${params.length} weights. ` + `Provided weights: ${weights}...`);
            if (params.length === 0) return;
            const weightValueTuples = [];
            const paramValues = (0, _variables.batchGetValue)(params);
            for(let i = 0; i < paramValues.length; ++i){
                const pv = paramValues[i];
                const p = params[i];
                const w = weights[i];
                if (!(0, _tfjsCore.util).arraysEqual(pv.shape, w.shape)) throw new (0, _errors.ValueError)(`Layer weight shape ${pv.shape} ` + `not compatible with provided weight shape ${w.shape}`);
                weightValueTuples.push([
                    p,
                    w
                ]);
            }
            (0, _variables.batchSetValue)(weightValueTuples);
        });
    }
    /**
     * Adds a weight variable to the layer.
     *
     * @param name Name of the new weight variable.
     * @param shape The shape of the weight.
     * @param dtype The dtype of the weight.
     * @param initializer An initializer instance.
     * @param regularizer A regularizer instance.
     * @param trainable Whether the weight should be trained via backprop or not
     *   (assuming that the layer itself is also trainable).
     * @param constraint An optional trainable.
     * @return The created weight variable.
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ addWeight(name, shape, dtype, initializer, regularizer, trainable, constraint) {
        // Reject duplicate weight names.
        if (this._addedWeightNames.indexOf(name) !== -1) throw new (0, _errors.ValueError)(`Duplicate weight name ${name} for layer ${this.name}`);
        this._addedWeightNames.push(name);
        if (dtype == null) dtype = "float32";
        if (this.fastWeightInitDuringBuild) initializer = (0, _initializers.getInitializer)("zeros");
        const initValue = initializer.apply(shape, dtype);
        const weight = new (0, _variables.LayerVariable)(initValue, dtype, name, trainable, constraint);
        initValue.dispose();
        // Request backend not to dispose the weights of the model on scope() exit.
        if (regularizer != null) this.addLoss(()=>regularizer.apply(weight.read()));
        if (trainable == null) trainable = true;
        if (trainable) this._trainableWeights.push(weight);
        else this._nonTrainableWeights.push(weight);
        return weight;
    }
    /**
     * Set the fast-weight-initialization flag.
     *
     * In cases where the initialized weight values will be immediately
     * overwritten by loaded weight values during model loading, setting
     * the flag to `true` saves unnecessary calls to potentially expensive
     * initializers and speeds up the loading process.
     *
     * @param value Target value of the flag.
     */ setFastWeightInitDuringBuild(value) {
        this.fastWeightInitDuringBuild = value;
    }
    /**
     * Add losses to the layer.
     *
     * The loss may potentionally be conditional on some inputs tensors,
     * for instance activity losses are conditional on the layer's inputs.
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ addLoss(losses) {
        if (losses == null || Array.isArray(losses) && losses.length === 0) return;
        // Update this.losses
        losses = _genericUtils.toList(losses);
        if (this._losses !== undefined && this._losses !== null) this.losses.push(...losses);
    }
    /**
     * Computes the output shape of the layer.
     *
     * Assumes that the layer will be built to match that input shape provided.
     *
     * @param inputShape A shape (tuple of integers) or a list of shape tuples
     *   (one per output tensor of the layer). Shape tuples can include null for
     *   free dimensions, instead of an integer.
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ computeOutputShape(inputShape) {
        return inputShape;
    }
    /**
     * Computes an output mask tensor.
     *
     * @param inputs Tensor or list of tensors.
     * @param mask Tensor or list of tensors.
     *
     * @return null or a tensor (or list of tensors, one per output tensor of the
     * layer).
     */ computeMask(inputs, mask) {
        if (!this.supportsMasking) {
            if (mask != null) {
                if (Array.isArray(mask)) mask.forEach((maskElement)=>{
                    if (maskElement != null) throw new TypeError(`Layer ${this.name} does not support masking, ` + "but was passed an inputMask.");
                });
                else throw new TypeError(`Layer ${this.name} does not support masking, ` + "but was passed an inputMask.");
            }
            // masking not explicitly supported: return null as mask
            return null;
        }
        // if masking is explictly supported, by default
        // carry over the input mask
        return mask;
    }
    /**
     * Internal method to create an inbound node for the layer.
     *
     * @param inputTensors List of input tensors.
     * @param outputTensors List of output tensors.
     * @param inputMasks List of input masks (a mask can be a tensor, or null).
     * @param outputMasks List of output masks (a mask can be a tensor, or null).
     * @param inputShapes List of input shape tuples.
     * @param outputShapes List of output shape tuples.
     * @param kwargs Dictionary of keyword arguments that were passed to the
     *   `call` method of the layer at the call that created the node.
     */ addInboundNode(inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs = null) {
        const inputTensorList = _genericUtils.toList(inputTensors);
        outputTensors = _genericUtils.toList(outputTensors);
        inputMasks = _genericUtils.toList(inputMasks);
        outputMasks = _genericUtils.toList(outputMasks);
        inputShapes = _typesUtils.normalizeShapeList(inputShapes);
        outputShapes = _typesUtils.normalizeShapeList(outputShapes);
        // Collect input tensor(s) coordinates.
        const inboundLayers = [];
        const nodeIndices = [];
        const tensorIndices = [];
        for (const x of inputTensorList){
            /*
             * TODO(michaelterry): Keras adds this value to tensors; it's not
             * clear whether we'll use this or not.
             */ inboundLayers.push(x.sourceLayer);
            nodeIndices.push(x.nodeIndex);
            tensorIndices.push(x.tensorIndex);
        }
        // Create node, add it to inbound nodes.
        // (This call has side effects.)
        // tslint:disable-next-line:no-unused-expression
        new Node({
            outboundLayer: this,
            inboundLayers,
            nodeIndices,
            tensorIndices,
            inputTensors: inputTensorList,
            outputTensors,
            inputMasks,
            outputMasks,
            inputShapes,
            outputShapes
        }, kwargs);
        // Update tensor history
        for(let i = 0; i < outputTensors.length; i++){
            // TODO(michaelterry: _uses_learning_phase not tracked.
            outputTensors[i].sourceLayer = this;
            outputTensors[i].nodeIndex = this.inboundNodes.length - 1;
            outputTensors[i].tensorIndex = i;
        }
    }
    /**
     * Returns the config of the layer.
     *
     * A layer config is a TS dictionary (serializable)
     * containing the configuration of a layer.
     * The same layer can be reinstantiated later
     * (without its trained weights) from this configuration.
     *
     * The config of a layer does not include connectivity
     * information, nor the layer class name.  These are handled
     * by 'Container' (one layer of abstraction above).
     *
     * Porting Note: The TS dictionary follows TS naming standrds for
     * keys, and uses tfjs-layers type-safe Enums.  Serialization methods
     * should use a helper function to convert to the pythonic storage
     * standard. (see serialization_utils.convertTsToPythonic)
     *
     * @returns TS dictionary of configuration.
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ getConfig() {
        const config = {
            name: this.name,
            trainable: this.trainable
        };
        if (this.batchInputShape != null) config["batchInputShape"] = this.batchInputShape;
        if (this.dtype != null) config["dtype"] = this.dtype;
        return config;
    }
    /**
     * Dispose the weight variables that this Layer instance holds.
     *
     * @returns {number} Number of disposed variables.
     */ disposeWeights() {
        this.weights.forEach((weight)=>weight.dispose());
        return this.weights.length;
    }
    assertNotDisposed() {
        if (this._refCount === 0) throw new Error(`Layer '${this.name}' is already disposed.`);
    }
    /**
     * Attempt to dispose layer's weights.
     *
     * This method decrease the reference count of the Layer object by 1.
     *
     * A Layer is reference-counted. Its reference count is incremented by 1
     * the first item its `apply()` method is called and when it becomes a part
     * of a new `Node` (through calling the `apply()`) method on a
     * `tf.SymbolicTensor`).
     *
     * If the reference count of a Layer becomes 0, all the weights will be
     * disposed and the underlying memory (e.g., the textures allocated in WebGL)
     * will be freed.
     *
     * Note: If the reference count is greater than 0 after the decrement, the
     * weights of the Layer will *not* be disposed.
     *
     * After a Layer is disposed, it cannot be used in calls such as `apply()`,
     * `getWeights()` or `setWeights()` anymore.
     *
     * @returns A DisposeResult Object with the following fields:
     *   - refCountAfterDispose: The reference count of the Container after this
     *     `dispose()` call.
     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
     *     during this `dispose()` call.
     * @throws {Error} If the layer is not built yet, or if the layer has already
     *   been disposed.
     */ /** @doc {heading: 'Models', 'subheading': 'Classes'} */ dispose() {
        if (!this.built) throw new Error(`Cannot dispose Layer ${this.name} because it has not been ` + `built yet.`);
        if (this._refCount === null) throw new Error(`Cannot dispose Layer ${this.name} because it has not been used ` + `yet.`);
        this.assertNotDisposed();
        let numDisposedVariables = 0;
        if (--this._refCount === 0) numDisposedVariables = this.disposeWeights();
        return {
            refCountAfterDispose: this._refCount,
            numDisposedVariables
        };
    }
}
/**
 * Collects the input shape(s) of a list of `tf.Tensor`s or
 * `tf.SymbolicTensor`s.
 *
 * TODO(michaelterry): Update PyKeras docs (backport).
 *
 * @param inputTensors List of input tensors (or single input tensor).
 *
 * @return List of shape tuples (or single tuple), one tuple per input.
 */ function collectInputShape(inputTensors) {
    inputTensors = _genericUtils.toList(inputTensors);
    const shapes = [];
    for (const x of inputTensors)shapes.push(x.shape);
    return _genericUtils.singletonOrArray(shapes);
}
/**
 * Guesses output dtype based on inputs.
 *
 * At present, just returns 'float32' for any input.
 *
 * @param inputTensors List of input tensors (or single input tensor).
 *
 * @return The guessed DType. At present, always returns 'float32'.
 */ function guessOutputDType(inputTensors) {
    return "float32";
}
function getSourceInputs(tensor, layer, nodeIndex) {
    if (layer == null || nodeIndex != null && nodeIndex > 0) {
        layer = tensor.sourceLayer;
        nodeIndex = tensor.nodeIndex;
    }
    if (layer.inboundNodes.length === 0) return [
        tensor
    ];
    else {
        const node = layer.inboundNodes[nodeIndex];
        if (node.inboundLayers.length === 0) return node.inputTensors;
        else {
            const sourceTensors = [];
            for(let i = 0; i < node.inboundLayers.length; i++){
                const x = node.inputTensors[i];
                const layer1 = node.inboundLayers[i];
                const nodeIndex1 = node.nodeIndices[i];
                const previousSources = getSourceInputs(x, layer1, nodeIndex1);
                // Avoid input redundancy.
                for (const x1 of previousSources)if (sourceTensors.indexOf(x1) === -1) sourceTensors.push(x1);
            }
            return sourceTensors;
        }
    }
}

},{"@tensorflow/tfjs-core":"2votT","../backend/state":"6G8m0","../common":"fOhOh","../errors":"kA7ff","../initializers":"4FrEp","../utils/generic_utils":"2cErd","../utils/types_utils":"70VAF","../utils/variable_utils":"9jOJL","../variables":"aWvBF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"70VAF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// tslint:enable
/**
 * Determine whether the input is an Array of Shapes.
 */ parcelHelpers.export(exports, "isArrayOfShapes", ()=>isArrayOfShapes);
/**
 * Special case of normalizing shapes to lists.
 *
 * @param x A shape or list of shapes to normalize into a list of Shapes.
 * @return A list of Shapes.
 */ parcelHelpers.export(exports, "normalizeShapeList", ()=>normalizeShapeList);
/**
 * Helper function to obtain exactly one Tensor.
 * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.
 * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.
 * @throws ValueError: If `xs` is an `Array` and its length is not 1.
 */ parcelHelpers.export(exports, "getExactlyOneTensor", ()=>getExactlyOneTensor);
/**
 * Helper function to obtain exactly on instance of Shape.
 *
 * @param shapes Input single `Shape` or Array of `Shape`s.
 * @returns If input is a single `Shape`, return it unchanged. If the input is
 *   an `Array` containing exactly one instance of `Shape`, return the instance.
 *   Otherwise, throw a `ValueError`.
 * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not
 *   1.
 */ parcelHelpers.export(exports, "getExactlyOneShape", ()=>getExactlyOneShape);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _errors = require("../errors");
function isArrayOfShapes(x) {
    return Array.isArray(x) && Array.isArray(x[0]);
}
function normalizeShapeList(x) {
    if (x.length === 0) return [];
    if (!Array.isArray(x[0])) return [
        x
    ];
    return x;
}
function getExactlyOneTensor(xs) {
    let x;
    if (Array.isArray(xs)) {
        if (xs.length !== 1) throw new (0, _errors.ValueError)(`Expected Tensor length to be 1; got ${xs.length}`);
        x = xs[0];
    } else x = xs;
    return x;
}
function getExactlyOneShape(shapes) {
    if (Array.isArray(shapes) && Array.isArray(shapes[0])) {
        if (shapes.length === 1) {
            shapes;
            return shapes[0];
        } else throw new (0, _errors.ValueError)(`Expected exactly 1 Shape; got ${shapes.length}`);
    } else return shapes;
}

},{"../errors":"kA7ff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jOJL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Count the elements in an Array of LayerVariables.
 *
 * @param weights: The LayerVariables of which the constituent numbers are to
 *   be counted.
 * @returns A count of the elements in all the LayerVariables
 */ parcelHelpers.export(exports, "countParamsInWeights", ()=>countParamsInWeights);
function countParamsInWeights(weights) {
    let count = 0;
    for (const weight of weights)if (weight.shape.length === 0) count += 1;
    else count += weight.shape.reduce((a, b)=>a * b);
    return count;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aWvBF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a
 * dtype and shape, but its value is mutable.  The value is itself represented
 * as a`tf.Tensor`, and can be read with the `read()` method and updated with
 * the `write()` method.
 */ parcelHelpers.export(exports, "LayerVariable", ()=>LayerVariable);
/**
 * Create a Variable.
 * @param x The initial value of the `Variable`.
 * @param dtype optional, the type of the variable.
 * @param name optional, the name of the variable, default provided by
 * Variable.
 * @param constraint optional, a constraint to be applied after every update.
 * @return The newly instantiated `Variable`.
 */ parcelHelpers.export(exports, "variable", ()=>variable);
/**
 * Instantiates an all-zeros Variable and returns it.
 *
 * @param shape Shape of the tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return An all-zero Variable.
 */ parcelHelpers.export(exports, "zerosVariable", ()=>zerosVariable);
/**
 * Instantiates an all-zeros tensor of the same shape as another tensor.
 *
 * @param x The other tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return A newly instantiated Variable.
 */ parcelHelpers.export(exports, "zerosLike", ()=>zerosLike);
/**
 * Instantiates an all-ones tensor and returns it.
 *
 * @param shape Shape of the tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return An all-ones Variable.
 */ parcelHelpers.export(exports, "onesVariable", ()=>onesVariable);
/**
 * Instantiates an all-ones tensor of the same shape as another tensor.
 *
 * @param x The other tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return A newly instantiated Variable.
 */ parcelHelpers.export(exports, "onesLike", ()=>onesLike);
/**
 * Instantiate an identity matrix and returns it, as a Variable
 *
 * @param size Number of rows/columns.
 * @param dtype Data type of returned Variable.
 * @param name Name of returned Variable.
 * @return A Variable, an identity matrix.
 */ parcelHelpers.export(exports, "eyeVariable", ()=>eyeVariable);
/**
 * Get a Variable with uniform distribution of values.
 * @param shape Shape of the tensor.
 * @param minval Lower bound of the uniform distribution.
 * @param maxval Upper bound of the uniform distribution.
 * @param dtype
 * @param seed
 * @param name Optional name.
 * @return The uniform-random Variable.
 */ parcelHelpers.export(exports, "randomUniformVariable", ()=>randomUniformVariable);
/**
 * Get a Variable with truncated-normal distribution of values.
 * @param shape Shape of the tensor.
 * @param mean mean value of the normal distribution.
 * @param stddev standard deviation of the normal distribution.
 * @param dtype
 * @param seed
 * @param name Optional name.
 * @return The truncated-normal-random Variable.
 */ parcelHelpers.export(exports, "truncatedNormalVariable", ()=>truncatedNormalVariable);
/**
 * Get a Variable with normal distribution of values.
 * @param shape Shape of the tensor.
 * @param mean mean value of the normal distribution.
 * @param stddev standard deviation of the normal distribution.
 * @param dtype
 * @param seed
 * @param name Optional name.
 * @return The truncated-normal-random Variable.
 */ parcelHelpers.export(exports, "randomNormalVariable", ()=>randomNormalVariable);
/**
 * Update the value of a Variable.
 * @param x The Variable to be updated.
 * @param xNew The new value to update to.
 * @return The Variable updated.
 */ parcelHelpers.export(exports, "update", ()=>update);
/**
 * Update the value of a Variable by adding an increment.
 * @param x The Variable to be updated.
 * @param increment The incrment to add to `x`.
 * @return The Variable updated.
 */ parcelHelpers.export(exports, "updateAdd", ()=>updateAdd);
/**
 * Update the value of a Variable by subtracting a decrement.
 * @param x The Variable to be updated.
 * @param decrement The decrement to subtract from `x`.
 * @return The Variable updated.
 */ parcelHelpers.export(exports, "updateSub", ()=>updateSub);
/**
 * Get the values of an array of Variables.
 *
 * @param tensors An `Array` of `Variable`s to get the values of.
 * @return The values of the inputs, as an `Array` of`tf.Tensor`s.
 */ parcelHelpers.export(exports, "batchGetValue", ()=>batchGetValue);
/**
 * Update the value of multiple Variables at once.
 *
 * @param variablesAndValues An `Array`, each element is of type
 *   [Variable, Tensor]. The first item is the
 *   `Variable` of which the value is to be updated. The second item
 *   carries the new value.
 */ parcelHelpers.export(exports, "batchSetValue", ()=>batchSetValue);
/**
 * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.
 * @param lossFn A function which returns a Scalar to be used as the function
 *   value (i.e., numerator) for differentiation.
 * @param variables List of variables to be used as the independent variables
 *   (i.e., denominator) for differentiation.
 * @returns An Array of gradients tensors.
 */ parcelHelpers.export(exports, "gradients", ()=>gradients);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _state = require("./backend/state");
var _common = require("./common");
var _errors = require("./errors");
const DEFAULT_VARIABLE_NAME_PREFIX = "Variable";
class LayerVariable {
    /**
     * Construct Variable from a `tf.Tensor`.
     *
     * If not explicitly named, the Variable will be given a name with the
     * prefix 'Variable'. Variable names are unique. In the case of name
     * collision, suffixies '_<num>' will be added to the name.
     *
     * @param val Initial value of the Variable.
     * @param name Name of the variable. If `null` or `undefined` is provided, it
     *   will default a name with the prefix 'Variable'.
     * @param constraint Optional, projection function to be applied to the
     * variable after optimize updates
     * @throws ValueError if `name` is `null` or `undefined`.
     */ constructor(val, dtype = "float32", name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true, constraint = null){
        this.dtype = dtype == null ? "float32" : dtype;
        this.shape = val.shape;
        this.id = (0, _state.getNextUniqueTensorId)();
        name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;
        this.originalName = (0, _common.getScopedTensorName)(name);
        this.name = (0, _common.getUniqueTensorName)(this.originalName);
        this.trainable_ = trainable;
        this.constraint = constraint;
        this.val = _tfjsCore.variable(val, this.trainable_, this.name, this.dtype);
    }
    /**
     * Get a snapshot of the Variable's value.
     *
     * The returned value is a snapshot of the Variable's value at the time of
     * the invocation. Future mutations in the value of the tensor will only
     * be reflected by future calls to this method.
     */ read() {
        this.assertNotDisposed();
        return this.val;
    }
    /**
     * Update the value of the Variable.
     *
     * @param newVal: The new value to update to. Must be consistent with the
     *   dtype and shape of the Variable.
     * @return This Variable.
     */ write(newVal) {
        // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.
        this.assertNotDisposed();
        checkShapesMatch(this.val, newVal);
        // Skip updating if this is the exact same tensor.
        if (this.val.id !== newVal.id) {
            this.val.assign(newVal);
            if (this.constraint != null) this.val.assign(this.constraint.apply(this.val));
        }
        return this;
    }
    /**
     * Dispose this LayersVariable instance from memory.
     */ dispose() {
        this.assertNotDisposed();
        this.val.dispose();
    }
    assertNotDisposed() {
        if (this.val.isDisposed) throw new Error(`LayersVariable ${this.name} is already disposed.`);
    }
    get trainable() {
        return this.trainable_;
    }
    set trainable(trainable) {
        this.trainable_ = trainable;
        this.val.trainable = trainable;
    }
}
function checkShapesMatch(x, y) {
    if (x.shape.toString() !== y.shape.toString()) throw new Error("Shape mismatch: " + JSON.stringify(x.shape) + " vs. " + JSON.stringify(y.shape));
}
function variable(x, dtype, name, constraint) {
    return new LayerVariable(x, dtype, name, true, constraint);
}
function zerosVariable(shape, dtype, name) {
    // TODO(cais): Implement logic for dtype.
    return new LayerVariable(_tfjsCore.zeros(shape), dtype, name);
}
function zerosLike(x, dtype, name) {
    return new LayerVariable(_tfjsCore.zerosLike(x), dtype, name);
}
function onesVariable(shape, dtype, name) {
    // TODO(cais): Implement logic for dtype.
    const allocated = _tfjsCore.ones(shape);
    return new LayerVariable(allocated, dtype, name);
}
function onesLike(x, dtype, name) {
    const allocated = _tfjsCore.onesLike(x);
    return new LayerVariable(allocated, dtype, name);
}
function eyeVariable(size, dtype, name) {
    return new LayerVariable(_tfjsCore.eye(size), dtype, name);
}
function randomUniformVariable(shape, minval, maxval, dtype, seed, name = "randomUniform") {
    return new LayerVariable(_tfjsCore.randomUniform(shape, minval, maxval, dtype), dtype, name);
}
function truncatedNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = "truncatedNormal") {
    // TODO(cais): Implement logic for dtype and seed once they are supported
    // by deeplearn.js.
    dtype = dtype || "float32";
    if (dtype !== "float32" && dtype !== "int32") throw new (0, _errors.NotImplementedError)(`randomNormal does not support dType ${dtype}.`);
    return new LayerVariable(_tfjsCore.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);
}
function randomNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = "randomNormal") {
    dtype = dtype || "float32";
    if (dtype !== "float32" && dtype !== "int32") throw new (0, _errors.NotImplementedError)(`randomNormalVariable does not support dType ${dtype}.`);
    return new LayerVariable(_tfjsCore.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);
}
function update(x, xNew) {
    return x.write(xNew);
}
function updateAdd(x, increment) {
    return x.write(_tfjsCore.add(x.read(), increment));
}
function updateSub(x, decrement) {
    return x.write(_tfjsCore.sub(x.read(), decrement));
}
function batchGetValue(xs) {
    return xs.map((x)=>x.read());
}
function batchSetValue(variablesAndValues) {
    variablesAndValues.forEach((variableAndValue)=>{
        const variable = variableAndValue[0];
        variable.write(variableAndValue[1]);
    });
}
function gradients(lossFn, variables) {
    // TODO(cais): The return type signature can be simplified if deeplearn makes
    //   the corresponding type public.
    const variableList = variables.map((variable)=>variable.read());
    const valudAndGrads = (0, _tfjsCore.variableGrads)(lossFn, variableList);
    return variables.map((variable)=>valudAndGrads.grads[variable.name]);
}

},{"@tensorflow/tfjs-core":"2votT","./backend/state":"6G8m0","./common":"fOhOh","./errors":"kA7ff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"18pwI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// TODO(cais): Add doc string to all the public static functions in this
//   class; include exectuable JavaScript code snippets where applicable
//   (b/74074458).
// LayersModel and related factory methods.
/**
 * A model is a data structure that consists of `Layers` and defines inputs
 * and outputs.
 *
 * The key difference between `tf.model` and `tf.sequential` is that
 * `tf.model` is more generic, supporting an arbitrary graph (without
 * cycles) of layers. `tf.sequential` is less generic and supports only a linear
 * stack of layers.
 *
 * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers
 * are used to wire input(s) to output(s).
 *
 * For example, the following code snippet defines a model consisting of
 * two `dense` layers, with 10 and 4 units, respectively.
 *
 * ```js
 * // Define input, which has a size of 5 (not including batch dimension).
 * const input = tf.input({shape: [5]});
 *
 * // First dense layer uses relu activation.
 * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});
 * // Second dense layer uses softmax activation.
 * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});
 *
 * // Obtain the output symbolic tensor by applying the layers on the input.
 * const output = denseLayer2.apply(denseLayer1.apply(input));
 *
 * // Create the model based on the inputs.
 * const model = tf.model({inputs: input, outputs: output});
 *
 * // The model can be used for training, evaluation and prediction.
 * // For example, the following line runs prediction with the model on
 * // some fake data.
 * model.predict(tf.ones([2, 5])).print();
 * ```
 * See also:
 *   `tf.sequential`, `tf.loadLayersModel`.
 */ /**
 * @doc {heading: 'Models', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "model", ()=>model);
/**
 * Creates a `tf.Sequential` model.  A sequential model is any model where the
 * outputs of one layer are the inputs to the next layer, i.e. the model
 * topology is a simple 'stack' of layers, with no branching or skipping.
 *
 * This means that the first layer passed to a `tf.Sequential` model should have
 * a defined input shape. What that means is that it should have received an
 * `inputShape` or `batchInputShape` argument, or for some type of layers
 * (recurrent, Dense...) an `inputDim` argument.
 *
 * The key difference between `tf.model` and `tf.sequential` is that
 * `tf.sequential` is less generic, supporting only a linear stack of layers.
 * `tf.model` is more generic and supports an arbitrary graph (without
 * cycles) of layers.
 *
 * Examples:
 *
 * ```js
 * const model = tf.sequential();
 *
 * // First layer must have an input shape defined.
 * model.add(tf.layers.dense({units: 32, inputShape: [50]}));
 * // Afterwards, TF.js does automatic shape inference.
 * model.add(tf.layers.dense({units: 4}));
 *
 * // Inspect the inferred shape of the model's output, which equals
 * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the
 * // 2nd is the output size of the model's last layer.
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * It is also possible to specify a batch size (with potentially undetermined
 * batch dimension, denoted by "null") for the first layer using the
 * `batchInputShape` key. The following example is equivalent to the above:
 *
 * ```js
 * const model = tf.sequential();
 *
 * // First layer must have a defined input shape
 * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));
 * // Afterwards, TF.js does automatic shape inference.
 * model.add(tf.layers.dense({units: 4}));
 *
 * // Inspect the inferred shape of the model's output.
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * You can also use an `Array` of already-constructed `Layer`s to create
 * a `tf.Sequential` model:
 *
 * ```js
 * const model = tf.sequential({
 *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),
 *            tf.layers.dense({units: 4})]
 * });
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 */ /**
 * @doc {heading: 'Models', subheading: 'Creation'}
 */ parcelHelpers.export(exports, "sequential", ()=>sequential);
/**
 * Load a model composed of Layer objects, including its topology and optionally
 * weights. See the Tutorial named "How to import a Keras Model" for usage
 * examples.
 *
 * This method is applicable to:
 *
 * 1. Models created with the `tf.layers.*`, `tf.sequential`, and
 * `tf.model` APIs of TensorFlow.js and later saved with the
 * `tf.LayersModel.save` method.
 * 2. Models converted from Keras or TensorFlow tf.keras using
 *    the [tensorflowjs_converter](https://github.com/tensorflow/tfjs-converter)
 *
 * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted
 * forms. For those models, use `tf.loadGraphModel`.
 *
 * Example 1. Load a model from an HTTP server.
 *
 * ```js
 * const model = await tf.loadLayersModel(
 *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');
 * model.summary();
 * ```
 *
 * Example 2: Save `model`'s topology and weights to browser [local
 * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('localstorage://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 3. Saving `model`'s topology and weights to browser
 * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('indexeddb://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 4. Load a model from user-selected files from HTML
 * [file input
 * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).
 *
 * ```js
 * // Note: this code snippet will not work without the HTML elements in the
 * //   page
 * const jsonUpload = document.getElementById('json-upload');
 * const weightsUpload = document.getElementById('weights-upload');
 *
 * const model = await tf.loadLayersModel(
 *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));
 * ```
 *
 * @param pathOrIOHandler Can be either of the two formats
 *   1. A string path to the `ModelAndWeightsConfig` JSON describing
 *      the model in the canonical TensorFlow.js format. For file://
 *      (tfjs-node-only), http:// and https:// schemas, the path can be
 *      either absolute or relative.
 *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`
 *      method.
 * @param options Optional configuration arguments for the model loading,
 *   including:
 *   - `strict`: Require that the provided weights exactly match those required
 *     by the layers.  Default true.  Passing false means that both extra
 *     weights and missing weights will be silently ignored.
 *   - ｀onProgress｀: A function of the signature `(fraction: number) => void',
 *     that can be used as the progress callback for the model loading.
 * @returns A `Promise` of `tf.LayersModel`, with the topology and weights
 *     loaded.
 */ /** @doc {heading: 'Models', subheading: 'Loading'} */ parcelHelpers.export(exports, "loadLayersModel", ()=>loadLayersModel);
/**
 * Used to instantiate an input to a model as a `tf.SymbolicTensor`.
 *
 * Users should call the `input` factory function for
 * consistency with other generator functions.
 *
 * Example:
 *
 * ```js
 * // Defines a simple logistic regression model with 32 dimensional input
 * // and 3 dimensional output.
 * const x = tf.input({shape: [32]});
 * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);
 * const model = tf.model({inputs: x, outputs: y});
 * model.predict(tf.ones([2, 32])).print();
 * ```
 *
 * Note: `input` is only necessary when using `model`. When using
 * `sequential`, specify `inputShape` for the first layer or use `inputLayer`
 * as the first layer.
 */ /** @doc {heading: 'Models', subheading: 'Inputs'} */ parcelHelpers.export(exports, "input", ()=>input);
parcelHelpers.export(exports, "registerCallbackConstructor", ()=>registerCallbackConstructor);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _baseCallbacks = require("./base_callbacks");
var _inputLayer = require("./engine/input_layer");
var _training = require("./engine/training");
var _models = require("./models");
function model(args) {
    return new (0, _training.LayersModel)(args);
}
function sequential(config) {
    return new (0, _models.Sequential)(config);
}
function loadLayersModel(pathOrIOHandler, options) {
    if (options == null) options = {};
    return (0, _models.loadLayersModelInternal)(pathOrIOHandler, options);
}
function input(config) {
    return (0, _inputLayer.Input)(config);
}
function registerCallbackConstructor(verbosityLevel, callbackConstructor) {
    (0, _baseCallbacks.CallbackConstructorRegistry).registerCallbackConstructor(verbosityLevel, callbackConstructor);
}

},{"./base_callbacks":"aV9CX","./engine/input_layer":"dMLUr","./engine/training":"akRzZ","./models":"dis3W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aV9CX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModelLoggingVerbosity", ()=>ModelLoggingVerbosity);
parcelHelpers.export(exports, "DEFAULT_YIELD_EVERY_MS", ()=>DEFAULT_YIELD_EVERY_MS);
/**
 * Abstract base class used to build new callbacks.
 *
 * The `logs` dictionary that callback methods take as argument will contain
 * keys for quantities relevant to the current batch or epoch.
 *
 * Currently, the `.fit()` method of the `Sequential` model class
 * will include the following quantities in the `logs` that
 * it passes to its callbacks:
 *
 * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`
 *   (if validation is enabled in `fit`), and `valAcc` (if validation and
 *   accuracy monitoring are enabled).
 * onBatchBegin: Logs include `size`, the number of samples in the current
 *   batch.
 * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring
 *   is enabled).
 */ parcelHelpers.export(exports, "BaseCallback", ()=>BaseCallback);
/**
 * Container abstracting a list of callbacks.
 */ parcelHelpers.export(exports, "CallbackList", ()=>CallbackList);
/**
 * Callback that accumulates epoch averages of metrics.
 *
 * This callback is automatically applied to every LayersModel.
 */ parcelHelpers.export(exports, "BaseLogger", ()=>BaseLogger);
/**
 * Callback that records events into a `History` object. This callback is
 * automatically applied to every TF.js Layers model. The `History` object
 * gets returned by the `fit` method of models.
 */ parcelHelpers.export(exports, "History", ()=>History);
/**
 * Custom callback for training.
 */ parcelHelpers.export(exports, "CustomCallback", ()=>CustomCallback);
/**
 * Standardize callbacks or configurations of them to an Array of callbacks.
 */ parcelHelpers.export(exports, "standardizeCallbacks", ()=>standardizeCallbacks);
/**
 * A global registry for callback constructors to be used during
 * LayersModel.fit().
 */ parcelHelpers.export(exports, "CallbackConstructorRegistry", ()=>CallbackConstructorRegistry);
parcelHelpers.export(exports, "configureCallbacks", ()=>configureCallbacks);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original source: keras/callbacks.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _errors = require("./errors");
var _logs = require("./logs");
var _genericUtils = require("./utils/generic_utils");
var ModelLoggingVerbosity;
(function(ModelLoggingVerbosity) {
    ModelLoggingVerbosity[ModelLoggingVerbosity["SILENT"] = 0] = "SILENT";
    ModelLoggingVerbosity[ModelLoggingVerbosity["VERBOSE"] = 1] = "VERBOSE";
})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));
const DEFAULT_YIELD_EVERY_MS = 125;
class BaseCallback {
    constructor(){
        // TODO(michaelterry): This type is a best guess.
        this.validationData = null;
    }
    setParams(params) {
        this.params = params;
    }
    async onEpochBegin(epoch, logs) {}
    async onEpochEnd(epoch, logs) {}
    async onBatchBegin(batch, logs) {}
    async onBatchEnd(batch, logs) {}
    async onTrainBegin(logs) {}
    async onTrainEnd(logs) {}
    // LayersModel needs to call Callback.setModel(), but cannot actually depend
    // on Callback because that creates a cyclic dependency.  Providing this no-op
    // method on BaseCallback breaks the cycle: this way LayersModel can depend on
    // BaseCallback but not on Callback.  The argument is typed as `Container`
    // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback
    // overrides this method and enforces that the argument is really a
    // LayersModel.
    setModel(model) {
    // Do nothing. Use Callback instead of BaseCallback to track the model.
    }
}
class CallbackList {
    // TODO(cais): When the need arises, uncomment the following lines and
    // implement the queue for time values.
    // private deltaTBatch: number;
    // private deltaTsBatchBegin: Array<number>;
    // private deltaTsBatchEnd: Array<number>;
    /**
     * Constructor of CallbackList.
     * @param callbacks Array of `Callback` instances.
     * @param queueLength Queue length for keeping running statistics over
     *   callback execution time.
     */ constructor(callbacks, queueLength = 10){
        // TODO(cais): Make use of queueLength when implementing the queue for time
        // values.
        if (callbacks == null) callbacks = [];
        this.callbacks = callbacks;
        this.queueLength = queueLength;
    }
    append(callback) {
        this.callbacks.push(callback);
    }
    setParams(params) {
        for (const callback of this.callbacks)callback.setParams(params);
    }
    setModel(model) {
        for (const callback of this.callbacks)callback.setModel(model);
    }
    /**
     * Called at the start of an epoch.
     * @param epoch Index of epoch.
     * @param logs Dictionary of logs.
     */ async onEpochBegin(epoch, logs) {
        if (logs == null) logs = {};
        for (const callback of this.callbacks)await callback.onEpochBegin(epoch, logs);
    }
    /**
     * Called at the end of an epoch.
     * @param epoch Index of epoch.
     * @param logs Dictionary of logs.
     */ async onEpochEnd(epoch, logs) {
        if (logs == null) logs = {};
        for (const callback of this.callbacks)await callback.onEpochEnd(epoch, logs);
    }
    /**
     * Called  right before processing a batch.
     * @param batch Index of batch within the current epoch.
     * @param logs Dictionary of logs.
     */ async onBatchBegin(batch, logs) {
        if (logs == null) logs = {};
        for (const callback of this.callbacks)await callback.onBatchBegin(batch, logs);
    }
    /**
     * Called at the end of a batch.
     * @param batch Index of batch within the current epoch.
     * @param logs Dictionary of logs.
     */ async onBatchEnd(batch, logs) {
        if (logs == null) logs = {};
        for (const callback of this.callbacks)await callback.onBatchEnd(batch, logs);
    }
    /**
     * Called at the beginning of training.
     * @param logs Dictionary of logs.
     */ async onTrainBegin(logs) {
        if (logs == null) logs = {};
        for (const callback of this.callbacks)await callback.onTrainBegin(logs);
    }
    /**
     * Called at the end of training.
     * @param logs Dictionary of logs.
     */ async onTrainEnd(logs) {
        if (logs == null) logs = {};
        for (const callback of this.callbacks)await callback.onTrainEnd(logs);
    }
}
class BaseLogger extends BaseCallback {
    constructor(){
        super();
    }
    async onEpochBegin(epoch) {
        this.seen = 0;
        this.totals = {};
    }
    async onBatchEnd(batch, logs) {
        if (logs == null) logs = {};
        const batchSize = logs["size"] == null ? 0 : logs["size"];
        this.seen += batchSize;
        for(const key in logs){
            const value = logs[key];
            if (typeof value === "number") {
                if (!this.totals.hasOwnProperty(key)) this.totals[key] = 0;
                this.totals[key] = this.totals[key] + value * batchSize;
            } else {
                let oldTotalsToDispose;
                if (key in this.totals) oldTotalsToDispose = this.totals[key];
                else this.totals[key] = 0;
                const total = (0, _tfjsCore.tidy)(()=>(0, _tfjsCore.add)(this.totals[key], (0, _tfjsCore.mul)(value, batchSize)));
                this.totals[key] = total;
                if (oldTotalsToDispose != null) oldTotalsToDispose.dispose();
            }
        }
    }
    async onEpochEnd(epoch, logs) {
        if (logs != null) for (const key of this.params["metrics"]){
            if (this.totals[key] == null) continue;
            if (typeof this.totals[key] === "number") logs[key] = this.totals[key] / this.seen;
            else (0, _tfjsCore.tidy)(()=>{
                const log = (0, _tfjsCore.mul)((0, _tfjsCore.div)(1, this.seen), this.totals[key]);
                logs[key] = log;
                this.totals[key].dispose();
                (0, _tfjsCore.keep)(logs[key]);
            });
        }
    }
}
class History extends BaseCallback {
    async onTrainBegin(logs) {
        this.epoch = [];
        this.history = {};
    }
    async onEpochEnd(epoch, logs) {
        if (logs == null) logs = {};
        this.epoch.push(epoch);
        for(const key in logs){
            if (this.history[key] == null) this.history[key] = [];
            this.history[key].push(logs[key]);
        }
    }
    /**
     * Await the values of all losses and metrics.
     */ async syncData() {
        const promises = [];
        const keys = [];
        const indices = [];
        for(const key in this.history){
            const valueArray = this.history[key];
            for(let i = 0; i < valueArray.length; ++i)if (typeof valueArray[i] !== "number") {
                const valueScalar = valueArray[i];
                promises.push(valueScalar.data());
                keys.push(key);
                indices.push(i);
            }
        }
        const values = await Promise.all(promises);
        for(let n = 0; n < values.length; ++n){
            const tensorToDispose = this.history[keys[n]][indices[n]];
            tensorToDispose.dispose();
            this.history[keys[n]][indices[n]] = values[n][0];
        }
    }
}
class CustomCallback extends BaseCallback {
    constructor(args, yieldEvery){
        super();
        this.currentEpoch = 0;
        this.yieldEvery = yieldEvery || "auto";
        if (this.yieldEvery === "auto") this.yieldEvery = DEFAULT_YIELD_EVERY_MS;
        if (this.yieldEvery === "never" && args.onYield != null) throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
        if ((0, _tfjsCore.util).isNumber(this.yieldEvery)) // Decorate `maybeWait` so it will be called at most once every
        // `yieldEvery` ms.
        this.maybeWait = _genericUtils.debounce(this.maybeWait.bind(this), this.yieldEvery);
        this.trainBegin = args.onTrainBegin;
        this.trainEnd = args.onTrainEnd;
        this.epochBegin = args.onEpochBegin;
        this.epochEnd = args.onEpochEnd;
        this.batchBegin = args.onBatchBegin;
        this.batchEnd = args.onBatchEnd;
        this.yield = args.onYield;
    }
    async maybeWait(epoch, batch, logs) {
        const ps = [];
        if (this.yield != null) {
            await (0, _logs.resolveScalarsInLogs)(logs);
            ps.push(this.yield(epoch, batch, logs));
        }
        ps.push((0, _tfjsCore.nextFrame)());
        await Promise.all(ps);
    }
    async onEpochBegin(epoch, logs) {
        this.currentEpoch = epoch;
        if (this.epochBegin != null) {
            await (0, _logs.resolveScalarsInLogs)(logs);
            await this.epochBegin(epoch, logs);
        }
    }
    async onEpochEnd(epoch, logs) {
        const ps = [];
        if (this.epochEnd != null) {
            await (0, _logs.resolveScalarsInLogs)(logs);
            ps.push(this.epochEnd(epoch, logs));
        }
        if (this.yieldEvery === "epoch") ps.push((0, _tfjsCore.nextFrame)());
        await Promise.all(ps);
    }
    async onBatchBegin(batch, logs) {
        if (this.batchBegin != null) {
            await (0, _logs.resolveScalarsInLogs)(logs);
            await this.batchBegin(batch, logs);
        }
    }
    async onBatchEnd(batch, logs) {
        const ps = [];
        if (this.batchEnd != null) {
            await (0, _logs.resolveScalarsInLogs)(logs);
            ps.push(this.batchEnd(batch, logs));
        }
        if (this.yieldEvery === "batch") ps.push((0, _tfjsCore.nextFrame)());
        else if ((0, _tfjsCore.util).isNumber(this.yieldEvery)) ps.push(this.maybeWait(this.currentEpoch, batch, logs));
        await Promise.all(ps);
    }
    async onTrainBegin(logs) {
        if (this.trainBegin != null) {
            await (0, _logs.resolveScalarsInLogs)(logs);
            await this.trainBegin(logs);
        }
    }
    async onTrainEnd(logs) {
        if (this.trainEnd != null) {
            await (0, _logs.resolveScalarsInLogs)(logs);
            await this.trainEnd(logs);
        }
    }
}
function standardizeCallbacks(callbacks, yieldEvery) {
    if (callbacks == null) callbacks = {};
    if (callbacks instanceof BaseCallback) return [
        callbacks
    ];
    if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) return callbacks;
    // Convert custom callback configs to custom callback objects.
    const callbackConfigs = _genericUtils.toList(callbacks);
    return callbackConfigs.map((callbackConfig)=>new CustomCallback(callbackConfig, yieldEvery));
}
class CallbackConstructorRegistry {
    /**
     * Blocks public access to constructor.
     */ constructor(){}
    /**
     * Register a tf.LayersModel.fit() callback constructor.
     *
     * The registered callback constructor will be used to instantiate
     * callbacks for every tf.LayersModel.fit() call afterwards.
     *
     * @param verbosityLevel Level of verbosity at which the `callbackConstructor`
     *   is to be reigstered.
     * @param callbackConstructor A no-arg constructor for `tf.Callback`.
     * @throws Error, if the same callbackConstructor has been registered before,
     *   either at the same or a different `verbosityLevel`.
     */ static registerCallbackConstructor(verbosityLevel, callbackConstructor) {
        (0, _tfjsCore.util).assert(verbosityLevel >= 0 && Number.isInteger(verbosityLevel), ()=>`Verbosity level is expected to be an integer >= 0, ` + `but got ${verbosityLevel}`);
        CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);
        if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) CallbackConstructorRegistry.constructors[verbosityLevel] = [];
        CallbackConstructorRegistry.constructors[verbosityLevel].push(callbackConstructor);
    }
    static checkForDuplicate(callbackConstructor) {
        for(const levelName in CallbackConstructorRegistry.constructors){
            const constructors = CallbackConstructorRegistry.constructors[+levelName];
            constructors.forEach((ctor)=>{
                if (ctor === callbackConstructor) throw new (0, _errors.ValueError)("Duplicate callback constructor.");
            });
        }
    }
    /**
     * Clear all registered callback constructors.
     */ static clear() {
        CallbackConstructorRegistry.constructors = {};
    }
    /**
     * Create callbacks using the registered callback constructors.
     *
     * Given `verbosityLevel`, all constructors registered at that level or above
     * will be called and the instantiated callbacks will be used.
     *
     * @param verbosityLevel: Level of verbosity.
     */ static createCallbacks(verbosityLevel) {
        const constructors = [];
        for(const levelName in CallbackConstructorRegistry.constructors){
            const level = +levelName;
            if (verbosityLevel >= level) constructors.push(...CallbackConstructorRegistry.constructors[level]);
        }
        return constructors.map((ctor)=>new ctor());
    }
}
CallbackConstructorRegistry.constructors = {};
function configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics) {
    const history = new History();
    const actualCallbacks = [
        new BaseLogger(),
        ...CallbackConstructorRegistry.createCallbacks(verbose)
    ];
    if (callbacks != null) actualCallbacks.push(...callbacks);
    actualCallbacks.push(history);
    const callbackList = new CallbackList(actualCallbacks);
    // TODO(cais): Figure out when this LayersModel instance can have a
    // dynamically
    //   set property called 'callback_model' as in PyKeras.
    callbackList.setParams({
        epochs,
        initialEpoch,
        samples: numTrainSamples,
        steps: stepsPerEpoch,
        batchSize,
        verbose,
        doValidation,
        metrics: callbackMetrics
    });
    return {
        callbackList,
        history
    };
}

},{"@tensorflow/tfjs-core":"2votT","./errors":"kA7ff","./logs":"f24Yn","./utils/generic_utils":"2cErd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f24Yn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Turn any Scalar values in a Logs object into actual number values.
 *
 * @param logs The `Logs` object to be resolved in place.
 */ parcelHelpers.export(exports, "resolveScalarsInLogs", ()=>resolveScalarsInLogs);
/**
 * Dispose all Tensors in an UnresolvedLogs object.
 *
 * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in
 *   places where the values can be `tf.Tensor` or `number`.
 */ parcelHelpers.export(exports, "disposeTensorsInLogs", ()=>disposeTensorsInLogs);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
async function resolveScalarsInLogs(logs) {
    if (logs == null) return;
    const promises = [];
    const keys = [];
    const scalarsToDispose = [];
    for(const key in logs){
        const value = logs[key];
        if (typeof value !== "number") {
            const valueScalar = value;
            promises.push(valueScalar.data());
            keys.push(key);
            scalarsToDispose.push(valueScalar);
        }
    }
    if (promises.length > 0) {
        const values = await Promise.all(promises);
        for(let i = 0; i < values.length; ++i)logs[keys[i]] = values[i][0];
        // Dispose the original scalar tensors.
        (0, _tfjsCore.dispose)(scalarsToDispose);
    }
}
function disposeTensorsInLogs(logs) {
    if (logs == null) return;
    for(const key in logs){
        const value = logs[key];
        if (typeof value !== "number") value.dispose();
    }
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"akRzZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Helper function for polymorphic input data: 1. singleton Tensor.
 */ parcelHelpers.export(exports, "isDataTensor", ()=>isDataTensor);
/**
 * Helper function for polymorphic input data: 2. Array of Tensor.
 */ parcelHelpers.export(exports, "isDataArray", ()=>isDataArray);
/**
 * Helper function for polymorphic input data: 3. "dict" of Tensor.
 */ parcelHelpers.export(exports, "isDataDict", ()=>isDataDict);
/**
 * Normalizes inputs and targets provided by users.
 * @param data User-provided input data (polymorphic).
 * @param names An Array of expected Tensor names.
 * @param shapes Optional Array of expected Tensor shapes.
 * @param checkBatchAxis Whether to check that the batch axis of the arrays
 *   match  the expected value found in `shapes`.
 * @param exceptionPrefix String prefix used for exception formatting.
 * @returns List of standardized input Tensors (one Tensor per model input).
 * @throws ValueError: in case of improperly formatted user data.
 */ parcelHelpers.export(exports, "standardizeInputData", ()=>standardizeInputData);
/**
 * User input validation for Tensors.
 * @param inputs `Array` of `tf.Tensor`s for inputs.
 * @param targets `Array` of `tf.Tensor`s for targets.
 * @param weights Optional `Array` of `tf.Tensor`s for sample weights.
 * @throws ValueError: in case of incorrectly formatted data.
 */ parcelHelpers.export(exports, "checkArrayLengths", ()=>checkArrayLengths);
/**
 * Maps metric functions to model outputs.
 * @param metrics An shortcut strings name, metric function, `Array` or dict
 *   (`Object`) of metric functions.
 * @param outputNames An `Array` of the names of model outputs.
 * @returns An `Array` (one entry per model output) of `Array` of metric
 *   functions. For instance, if the model has 2 outputs, and for the first
 *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,
 *   and just `binaryAccuracy` for the second output, the `Array` would look
 *   like:
 *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`
 * @throws TypeError: incompatible metrics format.
 */ parcelHelpers.export(exports, "collectMetrics", ()=>collectMetrics);
/**
 * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods
 * for training, evaluation, prediction and saving.
 *
 * `tf.LayersModel` is the basic unit of training, inference and evaluation in
 * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.
 *
 * See also:
 *   `tf.Sequential`, `tf.loadLayersModel`.
 */ /** @doc {heading: 'Models', subheading: 'Classes'} */ parcelHelpers.export(exports, "LayersModel", ()=>LayersModel);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original Source: engine/training.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("../backend/tfjs_backend");
var _common = require("../common");
var _errors = require("../errors");
var _serialization = require("../layers/serialization");
var _losses = require("../losses");
var _metrics = require("../metrics");
var _optimizers = require("../optimizers");
var _userDefinedMetadata = require("../user_defined_metadata");
var _genericUtils = require("../utils/generic_utils");
var _layerUtils = require("../utils/layer_utils");
var _mathUtils = require("../utils/math_utils");
var _serializationUtils = require("../utils/serialization_utils");
var _version = require("../version");
var _container = require("./container");
var _executor = require("./executor");
var _trainingDataset = require("./training_dataset");
var _trainingTensors = require("./training_tensors");
var _trainingUtils = require("./training_utils");
function isDataTensor(x) {
    return x instanceof (0, _tfjsCore.Tensor);
}
function isDataArray(x) {
    return Array.isArray(x);
}
function isDataDict(x) {
    return !isDataTensor(x) && !isDataArray(x);
}
function standardizeInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = "") {
    if (names == null || names.length === 0) {
        // Check for the case where the model expected no data, but some data got
        // sent.
        if (data != null) {
            let gotUnexpectedData = false;
            if (isDataArray(data) && data.length > 0) gotUnexpectedData = true;
            else if (isDataDict(data)) {
                for(const key in data)if (data.hasOwnProperty(key)) {
                    gotUnexpectedData = true;
                    break;
                }
            } else // `data` is a singleton Tensor in this case.
            gotUnexpectedData = true;
            if (gotUnexpectedData) throw new (0, _errors.ValueError)(`Error when checking model ${exceptionPrefix} expected no data, ` + `but got ${data}`);
        }
        return [];
    }
    if (data == null) return names.map((name)=>null);
    let arrays;
    if (isDataDict(data)) {
        data;
        arrays = [];
        for (const name of names){
            if (data[name] == null) throw new (0, _errors.ValueError)(`No data provided for "${name}". Need data for each key in: ` + `${names}`);
            arrays.push(data[name]);
        }
    } else if (isDataArray(data)) {
        data;
        if (data.length !== names.length) throw new (0, _errors.ValueError)(`Error when checking model ${exceptionPrefix}: the Array of ` + `Tensors that you are passing to your model is not the size the ` + `model expected. Expected to see ${names.length} Tensor(s), but ` + `instead got the following list of Tensor(s): ${data}`);
        arrays = data;
    } else {
        data;
        if (names.length > 1) throw new (0, _errors.ValueError)(`The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` + `but only received one Tensor. Found: Tensor with shape ${data.shape}`);
        arrays = [
            data
        ];
    }
    arrays = (0, _trainingTensors.ensureTensorsRank2OrHigher)(arrays);
    // Check shape compatibility.
    if (shapes != null) for(let i = 0; i < names.length; ++i){
        if (shapes[i] == null) continue;
        const array = arrays[i];
        if (array.shape.length !== shapes[i].length) throw new (0, _errors.ValueError)(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have ${shapes[i].length} dimension(s). but got array with ` + `shape ${array.shape}`);
        for(let j = 0; j < shapes[i].length; ++j){
            if (j === 0 && !checkBatchAxis) continue;
            const dim = array.shape[j];
            const refDim = shapes[i][j];
            if (refDim != null && refDim >= 0 && dim !== refDim) throw new (0, _errors.ValueError)(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have shape [${shapes[i]}], but got array with shape ` + `[${array.shape}].`);
        }
    }
    return arrays;
}
function checkArrayLengths(inputs, targets, weights) {
    const setX = (0, _genericUtils.unique)(inputs.map((input)=>input.shape[0]));
    setX.sort();
    const setY = (0, _genericUtils.unique)(targets.map((target)=>target.shape[0]));
    setY.sort();
    // TODO(cais): Check `weights` as well.
    if (setX.length > 1) throw new (0, _errors.ValueError)(`All input Tensors (x) should have the same number of samples. ` + `Got array shapes: ` + `${JSON.stringify(inputs.map((input)=>input.shape))}`);
    if (setY.length > 1) throw new (0, _errors.ValueError)(`All target Tensors (y) should have the same number of samples. ` + `Got array shapes: ` + `${JSON.stringify(targets.map((target)=>target.shape))}`);
    if (setX.length > 0 && setY.length > 0 && !(0, _tfjsCore.util).arraysEqual(setX, setY)) throw new (0, _errors.ValueError)(`Input Tensors should have the same number of samples as target ` + `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` + `sample(s).`);
}
/**
 * Validation on the compatibility of targes and loss functions.
 *
 * This helps prevent users from using loss functions incorrectly.
 *
 * @param targets `Array` of `tf.Tensor`s of targets.
 * @param lossFns `Array` of loss functions.
 * @param outputShapes `Array` of shapes of model outputs.
 */ function checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {
    // TODO(cais): Dedicated test coverage?
    const keyLosses = [
        _losses.meanSquaredError,
        _losses.binaryCrossentropy,
        _losses.categoricalCrossentropy
    ];
    for(let i = 0; i < targets.length; ++i){
        const y = targets[i];
        const loss = lossFns[i];
        const shape = outputShapes[i];
        if (loss == null) continue;
        if (loss === _losses.categoricalCrossentropy) {
            if (y.shape[y.shape.length - 1] === 1) throw new (0, _errors.ValueError)(`You are passing a target array of shape ${y.shape} while using ` + `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` + `expects targets to be binary matrices (1s and 0s) of shape ` + `[samples, classes].`);
        }
        if (keyLosses.indexOf(loss) !== -1) {
            const slicedYShape = y.shape.slice(1);
            const slicedShape = shape.slice(1);
            for(let j = 0; j < slicedYShape.length; ++j){
                const targetDim = slicedYShape[j];
                const outDim = slicedShape[j];
                if (outDim != null && targetDim !== outDim) throw new (0, _errors.ValueError)(`A target Tensor with shape ${y.shape} was passed for an ` + `output of shape ${shape}, while using a loss function that ` + `expects targets to have the same shape as the output.`);
            }
        }
    }
}
/**
 * Check inputs provided by the user.
 *
 * Porting Note: This corresponds to _standardize_input_data() in Python
 *   Keras. Because of the strong typing in TF.js, we do not need to convert
 *   the data. Specifically:
 *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for
 *      example. We don't need to worry about that here because there is no
 *      widely popular javascript/typesdcript equivalent of pandas (so far).
 *      If one becomes available in the future, we can add support.
 *   2) in PyKeras, inputs can be Python dict. But here we are stipulating
 * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We
 * may add support for `Object` data inputs in the future when the need
 * arises.
 *
 * Instead, we perform basic checks for number of parameters and shapes.
 *
 * @param data: The input data.
 * @param names: Name for the inputs, from the model.
 * @param shapes: Expected shapes for the input data, from the model.
 * @param checkBatchAxis: Whether the size along the batch axis (i.e., the
 *   first dimension) will be checked for matching.
 * @param exceptionPrefix: Execption prefix message, used in generating error
 *   messages.
 * @throws ValueError: on incorrect number of inputs or mismatches in shapes.
 */ function checkInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = "") {
    let arrays;
    if (Array.isArray(data)) {
        if (data.length !== names.length) throw new (0, _errors.ValueError)(`Error when checking model ${exceptionPrefix}: the Array of ` + `Tensors that you are passing to your model is not the size the ` + `the model expected. Expected to see ${names.length} Tensor(s),` + ` but instead got ${data.length} Tensors(s).`);
        arrays = data;
    } else {
        if (names.length > 1) throw new (0, _errors.ValueError)(`The model expects ${names.length} ${exceptionPrefix} Tensors, ` + `but only received one Tensor. Found: array with shape ` + `${JSON.stringify(data.shape)}.`);
        arrays = [
            data
        ];
    }
    if (shapes != null) for(let i = 0; i < names.length; ++i){
        if (shapes[i] == null) continue;
        const array = arrays[i];
        if (array.shape.length !== shapes[i].length) throw new (0, _errors.ValueError)(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have ${shapes[i].length} dimension(s), but got array with ` + `shape ${JSON.stringify(array.shape)}`);
        for(let j = 0; j < shapes[i].length; ++j){
            if (j === 0 && !checkBatchAxis) continue;
            const dim = array.shape[j];
            const refDim = shapes[i][j];
            if (refDim != null) {
                if (refDim !== dim) throw new (0, _errors.ValueError)(`Error when checking ${exceptionPrefix}: expected ` + `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` + `got array with shape ${JSON.stringify(array.shape)}.`);
            }
        }
    }
}
function collectMetrics(metrics, outputNames) {
    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) return outputNames.map((name)=>[]);
    let wrappedMetrics;
    if (typeof metrics === "string" || typeof metrics === "function") wrappedMetrics = [
        metrics
    ];
    else if (Array.isArray(metrics) || typeof metrics === "object") wrappedMetrics = metrics;
    else throw new TypeError("Type of metrics argument not understood. Expected an string," + `function, Array, or Object, found: ${metrics}`);
    if (Array.isArray(wrappedMetrics)) // We then apply all metrics to all outputs.
    return outputNames.map((name)=>wrappedMetrics);
    else {
        // In this case, metrics is a dict.
        const nestedMetrics = [];
        for (const name of outputNames){
            let outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];
            if (!Array.isArray(outputMetrics)) outputMetrics = [
                outputMetrics
            ];
            nestedMetrics.push(outputMetrics);
        }
        return nestedMetrics;
    }
}
const LAYERS_MODEL_FORMAT_NAME = "layers-model";
class LayersModel extends (0, _container.Container) {
    constructor(args){
        super(args);
        this.isTraining = false;
    }
    /**
     * Print a text summary of the model's layers.
     *
     * The summary includes
     * - Name and type of all layers that comprise the model.
     * - Output shape(s) of the layers
     * - Number of weight parameters of each layer
     * - If the model has non-sequential-like topology, the inputs each layer
     *   receives
     * - The total number of trainable and non-trainable parameters of the model.
     *
     * ```js
     * const input1 = tf.input({shape: [10]});
     * const input2 = tf.input({shape: [20]});
     * const dense1 = tf.layers.dense({units: 4}).apply(input1);
     * const dense2 = tf.layers.dense({units: 8}).apply(input2);
     * const concat = tf.layers.concatenate().apply([dense1, dense2]);
     * const output =
     *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);
     *
     * const model = tf.model({inputs: [input1, input2], outputs: output});
     * model.summary();
     * ```
     *
     * @param lineLength Custom line length, in number of characters.
     * @param positions Custom widths of each of the columns, as either
     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
     *   right-most (i.e., ending) position of a column.
     * @param printFn Custom print function. Can be used to replace the default
     *   `console.log`. For example, you can use `x => {}` to mute the printed
     *   messages in the console.
     */ /** @doc {heading: 'Models', subheading: 'Classes'} */ summary(lineLength, positions, printFn = console.log) {
        if (!this.built) throw new (0, _errors.ValueError)(`This model has never been called, thus its weights have not been ` + `created yet. So no summary can be displayed. Build the model ` + `first (e.g., by calling it on some test data).`);
        (0, _layerUtils.printSummary)(this, lineLength, positions, printFn);
    }
    /**
     * Configures and prepares the model for training and evaluation.  Compiling
     * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`
     * or `evaluate` on an un-compiled model will throw an error.
     *
     * @param args a `ModelCompileArgs` specifying the loss, optimizer, and
     * metrics to be used for fitting and evaluating this model.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ compile(args) {
        if (args.loss == null) args.loss = [];
        this.loss = args.loss;
        if (typeof args.optimizer === "string") {
            this.optimizer_ = _optimizers.getOptimizer(args.optimizer);
            this.isOptimizerOwned = true;
        } else {
            if (!(args.optimizer instanceof (0, _tfjsCore.Optimizer))) throw new (0, _errors.ValueError)(`User-defined optimizer must be an instance of tf.Optimizer.`);
            this.optimizer_ = args.optimizer;
            this.isOptimizerOwned = false;
        }
        // TODO(cais): Add lossWeights.
        // TODO(cais): Add sampleWeightMode.
        // Prepare loss functions.
        let lossFunctions = [];
        if (!Array.isArray(args.loss) && typeof args.loss !== "string" && typeof args.loss !== "function") {
            args.loss = args.loss;
            for(const name in args.loss){
                if (this.outputNames.indexOf(name) === -1) throw new (0, _errors.ValueError)(`Unknown entry in loss dictionary: "${name}". ` + `Only expected the following keys: ${this.outputNames}`);
            }
            for (const name1 of this.outputNames){
                if (args.loss[name1] == null) console.warn(`Output "${name1}" is missing from loss dictionary. We assume ` + `this was done on purpose, and we will not be expecting data ` + `to be passed to ${name1} during training`);
                lossFunctions.push(_losses.get(args.loss[name1]));
            }
        } else if (Array.isArray(args.loss)) {
            if (args.loss.length !== this.outputs.length) throw new (0, _errors.ValueError)(`When passing an Array as loss, it should have one entry per ` + `model output. The model has ${this.outputs.length} output(s), ` + `but you passed loss=${args.loss}.`);
            const theLosses = args.loss;
            lossFunctions = theLosses.map((l)=>_losses.get(l));
        } else {
            const lossFunction = _losses.get(args.loss);
            this.outputs.forEach((_)=>{
                lossFunctions.push(lossFunction);
            });
        }
        this.lossFunctions = lossFunctions;
        this.feedOutputNames = [];
        this.feedOutputShapes = [];
        this.feedLossFns = [];
        for(let i = 0; i < this.outputs.length; ++i){
            // TODO(cais): Logic for skipping target(s).
            const shape = this.internalOutputShapes[i];
            const name2 = this.outputNames[i];
            this.feedOutputNames.push(name2);
            this.feedOutputShapes.push(shape);
            this.feedLossFns.push(this.lossFunctions[i]);
        }
        // TODO(cais): Add logic for output masks.
        // TODO(cais): Add logic for sample weights.
        const skipTargetIndices = [];
        // Prepare metrics.
        this.metrics = args.metrics;
        // TODO(cais): Add weightedMetrics.
        this.metricsNames = [
            "loss"
        ];
        this.metricsTensors = [];
        // Compute total loss.
        // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.
        //   Here, metricsTensors are TypeScript functions. This difference is due
        //   to the difference in symbolic/imperative property of the backends.
        (0, _common.nameScope)("loss", ()=>{
            for(let i = 0; i < this.outputs.length; ++i){
                if (skipTargetIndices.indexOf(i) !== -1) continue;
                // TODO(cais): Add weightedLoss, sampleWeight and mask.
                //   The following line should be weightedLoss
                const weightedLoss = this.lossFunctions[i];
                if (this.outputs.length > 1) {
                    this.metricsTensors.push([
                        weightedLoss,
                        i
                    ]);
                    this.metricsNames.push(this.outputNames[i] + "_loss");
                }
            }
        // Porting Note: Due to the imperative nature of the backend, we calculate
        //   the regularizer penalties in the totalLossFunction, instead of here.
        });
        const nestedMetrics = collectMetrics(args.metrics, this.outputNames);
        // TODO(cais): Add nestedWeightedMetrics.
        /**
         * Helper function used in loop below.
         */ const appendMetric = (outputIndex, metricName, metricTensor)=>{
            if (this.outputNames.length > 1) metricName = this.outputNames[outputIndex] + "_" + metricName;
            this.metricsNames.push(metricName);
            this.metricsTensors.push([
                metricTensor,
                outputIndex
            ]);
        };
        (0, _common.nameScope)("metric", ()=>{
            for(let i = 0; i < this.outputs.length; ++i){
                if (skipTargetIndices.indexOf(i) !== -1) continue;
                const outputMetrics = nestedMetrics[i];
                // TODO(cais): Add weights and outputWeightedMetrics.
                // TODO(cais): Add optional arg `weights` to the following function.
                const handleMetrics = (metrics)=>{
                    const metricNamePrefix = "";
                    let metricName;
                    let accFn;
                    let weightedMetricFn;
                    //  TODO(cais): Use 'weights_' for weighted metrics.
                    for (const metric of metrics){
                        if (typeof metric === "string" && [
                            "accuracy",
                            "acc",
                            "crossentropy",
                            "ce"
                        ].indexOf(metric) !== -1) {
                            const outputShape = this.internalOutputShapes[i];
                            if (outputShape[outputShape.length - 1] === 1 || this.lossFunctions[i] === _losses.binaryCrossentropy) {
                                // case: binary accuracy/crossentropy.
                                if ([
                                    "accuracy",
                                    "acc"
                                ].indexOf(metric) !== -1) accFn = _metrics.binaryAccuracy;
                                else if ([
                                    "crossentropy",
                                    "ce"
                                ].indexOf(metric) !== -1) accFn = _metrics.binaryCrossentropy;
                            } else if (this.lossFunctions[i] === _losses.sparseCategoricalCrossentropy) {
                                // case: categorical accuracy / crossentropy with sparse
                                // targets.
                                if ([
                                    "accuracy",
                                    "acc"
                                ].indexOf(metric) !== -1) accFn = _metrics.sparseCategoricalAccuracy;
                                else if ([
                                    "crossentropy",
                                    "ce"
                                ].indexOf(metric) !== -1) accFn = _metrics.sparseCategoricalCrossentropy;
                            } else {
                                // case: categorical accuracy / crossentropy.
                                if ([
                                    "accuracy",
                                    "acc"
                                ].indexOf(metric) !== -1) accFn = _metrics.categoricalAccuracy;
                                else if ([
                                    "crossentropy",
                                    "ce"
                                ].indexOf(metric) !== -1) accFn = _metrics.categoricalCrossentropy;
                            }
                            let suffix;
                            if ([
                                "accuracy",
                                "acc"
                            ].indexOf(metric) !== -1) suffix = "acc";
                            else if ([
                                "crossentropy",
                                "ce"
                            ].indexOf(metric) !== -1) suffix = "ce";
                            // TODO(cais): Add weighting actually.
                            weightedMetricFn = accFn;
                            metricName = metricNamePrefix + suffix;
                        } else {
                            const metricFn = _metrics.get(metric);
                            // TODO(cais): Add weighting actually.
                            weightedMetricFn = metricFn;
                            metricName = metricNamePrefix + _metrics.getLossOrMetricName(metric);
                        }
                        // TODO(cais): Add weighting and masking to metricResult.
                        let metricResult;
                        (0, _common.nameScope)(metricName, ()=>{
                            metricResult = weightedMetricFn;
                        });
                        appendMetric(i, metricName, metricResult);
                    }
                };
                handleMetrics(outputMetrics);
            // TODO(cais): Call handleMetrics with weights.
            }
        });
        // Porting Notes: Given the imperative backend of tfjs-core,
        //   there is no need for constructing the symbolic graph and placeholders.
        this.collectedTrainableWeights = this.trainableWeights;
    }
    /**
     * Check trainable weights count consistency.
     *
     * This will raise a warning if `this.trainableWeights` and
     * `this.collectedTrainableWeights` are inconsistent (i.e., have different
     * numbers of parameters).
     * Inconsistency will typically arise when one modifies `model.trainable`
     * without calling `model.compile()` again.
     */ checkTrainableWeightsConsistency() {
        if (this.collectedTrainableWeights == null) return;
        if (this.trainableWeights.length !== this.collectedTrainableWeights.length) console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
    }
    /**
     * Returns the loss value & metrics values for the model in test mode.
     *
     * Loss and metrics are specified during `compile()`, which needs to happen
     * before calls to `evaluate()`.
     *
     * Computation is done in batches.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const result = model.evaluate(
     *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});
     * result.print();
     * ```
     *
     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
     * model has multiple inputs.
     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
     * model has multiple outputs.
     * @param args A `ModelEvaluateArgs`, containing optional fields.
     *
     * @return `Scalar` test loss (if the model has a single output and no
     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
     *   and/or metrics). The attribute `model.metricsNames`
     *   will give you the display labels for the scalar outputs.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ evaluate(x, y, args = {}) {
        const batchSize = args.batchSize == null ? 32 : args.batchSize;
        (0, _trainingTensors.checkBatchSize)(batchSize);
        // TODO(cais): Standardize `config.sampleWeights` as well.
        // Validate user data.
        const checkBatchAxis = true;
        const standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);
        try {
            // TODO(cais): If uses `useLearningPhase`, set the corresponding element
            // of the input to 0.
            const ins = standardizedOuts[0].concat(standardizedOuts[1]);
            this.makeTestFunction();
            const f = this.testFunction;
            const testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);
            return (0, _genericUtils.singletonOrArray)(testOuts);
        } finally{
            (0, _trainingTensors.disposeNewTensors)(standardizedOuts[0], x);
            (0, _trainingTensors.disposeNewTensors)(standardizedOuts[1], y);
        }
    }
    // TODO(cais): Add code snippet below once real dataset objects are
    //   available.
    /**
     * Evaluate model using a dataset object.
     *
     * Note: Unlike `evaluate()`, this method is asynchronous (`async`);
     *
     * @param dataset A dataset object. Its `iterator()` method is expected
     *   to generate a dataset iterator object, the `next()` method of which
     *   is expected to produce data batches for evaluation. The return value
     *   of the `next()` call ought to contain a boolean `done` field and a
     *   `value` field. The `value` field is expected to be an array of two
     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
     *   case is for models with exactly one input and one output (e.g..
     *   a sequential model). The latter case is for models with multiple
     *   inputs and/or multiple outputs. Of the two items in the array, the
     *   first is the input feature(s) and the second is the output target(s).
     * @param args A configuration object for the dataset-based evaluation.
     * @returns Loss and metric values as an Array of `Scalar` objects.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ async evaluateDataset(dataset, args) {
        this.makeTestFunction();
        return (0, _trainingDataset.evaluateDataset)(this, dataset, args);
    }
    /**
     * Get number of samples provided for training, evaluation or prediction.
     *
     * @param ins Input `tf.Tensor`.
     * @param batchSize Integer batch size, optional.
     * @param steps Total number of steps (batches of samples) before
     * declaring loop finished. Optional.
     * @param stepsName The public API's parameter name for `steps`.
     * @returns Number of samples provided.
     */ checkNumSamples(ins, batchSize, steps, stepsName = "steps") {
        let numSamples;
        if (steps != null) {
            numSamples = null;
            if (batchSize != null) throw new (0, _errors.ValueError)(`If ${stepsName} is set, batchSize must be null or undefined.` + `Got batchSize = ${batchSize}`);
        } else if (ins != null) {
            if (Array.isArray(ins)) numSamples = ins[0].shape[0];
            else numSamples = ins.shape[0];
        } else throw new (0, _errors.ValueError)(`Either the input data should have a defined shape, or ` + `${stepsName} shoud be specified.`);
        return numSamples;
    }
    /**
     * Execute internal tensors of the model with input data feed.
     * @param inputs Input data feed. Must match the inputs of the model.
     * @param outputs Names of the output tensors to be fetched. Must match
     *   names of the SymbolicTensors that belong to the graph.
     * @returns Fetched values for `outputs`.
     */ execute(inputs, outputs) {
        if (Array.isArray(outputs) && outputs.length === 0) throw new (0, _errors.ValueError)("`outputs` is an empty Array, which is not allowed.");
        const outputsIsArray = Array.isArray(outputs);
        const outputNames = outputsIsArray ? outputs : [
            outputs
        ];
        const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);
        // Format the input into a FeedDict.
        const feedDict = new (0, _executor.FeedDict)();
        if (inputs instanceof (0, _tfjsCore.Tensor)) inputs = [
            inputs
        ];
        if (Array.isArray(inputs)) {
            if (inputs.length !== this.inputs.length) throw new (0, _errors.ValueError)(`The number of inputs provided (${inputs.length}) ` + `does not match the number of inputs of this model ` + `(${this.inputs.length}).`);
            for(let i = 0; i < this.inputs.length; ++i)feedDict.add(this.inputs[i], inputs[i]);
        } else for (const input of this.inputs){
            const tensorValue = inputs[input.name];
            if (tensorValue == null) throw new (0, _errors.ValueError)(`No value is provided for the model's input ${input.name}`);
            feedDict.add(input, tensorValue);
        }
        // Run execution.
        const executeOutputs = (0, _executor.execute)(outputSymbolicTensors, feedDict);
        return outputsIsArray ? executeOutputs : executeOutputs[0];
    }
    /**
     * Retrieve the model's internal symbolic tensors from symbolic-tensor names.
     */ retrieveSymbolicTensors(symbolicTensorNames) {
        const outputSymbolicTensors = (0, _genericUtils.pyListRepeat)(null, symbolicTensorNames.length);
        let outputsRemaining = symbolicTensorNames.length;
        for (const layer of this.layers){
            const layerOutputs = Array.isArray(layer.output) ? layer.output : [
                layer.output
            ];
            const layerOutputNames = layerOutputs.map((output)=>output.name);
            for(let i = 0; i < symbolicTensorNames.length; ++i){
                const index = layerOutputNames.indexOf(symbolicTensorNames[i]);
                if (index !== -1) {
                    outputSymbolicTensors[i] = layerOutputs[index];
                    outputsRemaining--;
                }
                if (outputsRemaining === 0) break;
            }
            if (outputsRemaining === 0) break;
        }
        if (outputsRemaining > 0) {
            const remainingNames = [];
            outputSymbolicTensors.forEach((tensor, i)=>{
                if (tensor == null) remainingNames.push(symbolicTensorNames[i]);
            });
            throw new (0, _errors.ValueError)(`Cannot find SymbolicTensors for output name(s): ` + `${JSON.stringify(remainingNames)}`);
        }
        return outputSymbolicTensors;
    }
    /**
     * Helper method to loop over some data in batches.
     *
     * Porting Note: Not using the functional approach in the Python equivalent
     *   due to the imperative backend.
     * Porting Note: Does not support step mode currently.
     *
     * @param ins: input data
     * @param batchSize: integer batch size.
     * @param verbose: verbosity model
     * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of
     *   `tf.Tensor` (if multipe outputs).
     */ predictLoop(ins, batchSize = 32, verbose = false) {
        return _tfjsCore.tidy(()=>{
            const numSamples = this.checkNumSamples(ins);
            if (verbose) throw new (0, _errors.NotImplementedError)("Verbose predictLoop() is not implemented yet.");
            // Sample-based predictions.
            // Porting Note: Tensor currently does not support sliced assignments as
            //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while
            //   iterating over the batches.
            const batches = (0, _trainingTensors.makeBatches)(numSamples, batchSize);
            const outsBatches = this.outputs.map((output)=>[]);
            // TODO(cais): Can the scope() be pushed down inside the for loop?
            for(let batchIndex = 0; batchIndex < batches.length; ++batchIndex){
                const batchOuts = _tfjsCore.tidy(()=>{
                    const batchStart = batches[batchIndex][0];
                    const batchEnd = batches[batchIndex][1];
                    // TODO(cais): Take care of the case of the last element is a flag for
                    //   training/test.
                    const insBatch = (0, _trainingTensors.sliceArrays)(ins, batchStart, batchEnd);
                    // Construct the feeds for execute();
                    const feeds = [];
                    if (Array.isArray(insBatch)) for(let i = 0; i < insBatch.length; ++i)feeds.push({
                        key: this.inputs[i],
                        value: insBatch[i]
                    });
                    else feeds.push({
                        key: this.inputs[0],
                        value: insBatch
                    });
                    const feedDict = new (0, _executor.FeedDict)(feeds);
                    return (0, _executor.execute)(this.outputs, feedDict);
                });
                batchOuts.forEach((batchOut, i)=>outsBatches[i].push(batchOut));
            }
            return (0, _genericUtils.singletonOrArray)(outsBatches.map((batches)=>_tfjsCore.concat(batches, 0)));
        });
    }
    /**
     * Generates output predictions for the input samples.
     *
     * Computation is done in batches.
     *
     * Note: the "step" mode of predict() is currently not supported.
     *   This is because the TensorFlow.js core backend is imperative only.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();
     * ```
     *
     * @param x The input data, as an Tensor, or an `Array` of `tf.Tensor`s if
     *   the model has multiple inputs.
     * @param args A `ModelPredictArgs` object containing optional fields.
     *
     * @return Prediction results as a `tf.Tensor`(s).
     *
     * @exception ValueError In case of mismatch between the provided input data
     *   and the model's expectations, or in case a stateful model receives a
     *   number of samples that is not a multiple of the batch size.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ predict(x, args = {}) {
        const xsRank2OrHigher = (0, _trainingTensors.ensureTensorsRank2OrHigher)(x);
        checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);
        try {
            // TODO(cais): Take care of stateful models.
            //   if (this.stateful) ...
            // TODO(cais): Take care of the learning_phase boolean flag.
            //   if (this.useLearningPhase) ...
            const batchSize = args.batchSize == null ? 32 : args.batchSize;
            (0, _trainingTensors.checkBatchSize)(batchSize);
            return this.predictLoop(xsRank2OrHigher, batchSize);
        } finally{
            (0, _trainingTensors.disposeNewTensors)(xsRank2OrHigher, x);
        }
    }
    /**
     * Returns predictions for a single batch of samples.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.predictOnBatch(tf.ones([8, 10])).print();
     * ```
     * @param x: Input samples, as an Tensor (for models with exactly one
     *   input) or an array of Tensors (for models with more than one input).
     * @return Tensor(s) of predictions
     */ /** @doc {heading: 'Models', subheading: 'Classes'} */ predictOnBatch(x) {
        checkInputData(x, this.inputNames, this.feedInputShapes, true);
        // TODO(cais): Take care of the learning_phase boolean flag.
        //   if (this.useLearningPhase) ...
        const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];
        return this.predictLoop(x, batchSize);
    }
    standardizeUserDataXY(x, y, checkBatchAxis = true, batchSize) {
        // TODO(cais): Add sampleWeight, classWeight
        if (this.optimizer_ == null) throw new (0, _errors.RuntimeError)("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
        const outputShapes = [];
        for(let i = 0; i < this.feedOutputShapes.length; ++i){
            const outputShape = this.feedOutputShapes[i];
            const lossFn = this.feedLossFns[i];
            if (lossFn === _losses.sparseCategoricalCrossentropy) outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([
                1
            ]));
            else // Porting Note: Because of strong typing `lossFn` must be a function.
            outputShapes.push(outputShape);
        }
        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, "input");
        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, "target");
        // TODO(cais): Standardize sampleWeights & classWeights.
        checkArrayLengths(x, y, null);
        // TODO(cais): Check sampleWeights as well.
        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);
        if (this.stateful && batchSize != null && batchSize > 0) {
            if (x[0].shape[0] % batchSize !== 0) throw new (0, _errors.ValueError)(`In a stateful network, you should only pass inputs with a ` + `number of samples that is divisible by the batch size ` + `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);
        }
        return [
            x,
            y
        ];
    }
    async standardizeUserData(x, y, sampleWeight, classWeight, checkBatchAxis = true, batchSize) {
        const [standardXs, standardYs] = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);
        // TODO(cais): Handle sampleWeights.
        if (sampleWeight != null) throw new Error("sample weight is not supported yet.");
        let standardSampleWeights = null;
        if (classWeight != null) {
            const classWeights = (0, _trainingUtils.standardizeClassWeights)(classWeight, this.outputNames);
            standardSampleWeights = [];
            for(let i = 0; i < classWeights.length; ++i)standardSampleWeights.push(await (0, _trainingUtils.standardizeWeights)(standardYs[i], null, classWeights[i]));
        }
        // TODO(cais): Deal with the case of model.stateful == true.
        return [
            standardXs,
            standardYs,
            standardSampleWeights
        ];
    }
    /**
     * Loop over some test data in batches.
     * @param f A Function returning a list of tensors.
     * @param ins Array of tensors to be fed to `f`.
     * @param batchSize Integer batch size or `null` / `undefined`.
     * @param verbose verbosity mode.
     * @param steps Total number of steps (batches of samples) before
     * declaring test finished. Ignored with the default value of `null` /
     * `undefined`.
     * @returns Array of Scalars.
     */ testLoop(f, ins, batchSize, verbose = 0, steps) {
        return _tfjsCore.tidy(()=>{
            const numSamples = this.checkNumSamples(ins, batchSize, steps, "steps");
            const outs = [];
            if (verbose > 0) throw new (0, _errors.NotImplementedError)("Verbose mode is not implemented yet.");
            // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.
            if (steps != null) throw new (0, _errors.NotImplementedError)("steps mode in testLoop() is not implemented yet");
            else {
                const batches = (0, _trainingTensors.makeBatches)(numSamples, batchSize);
                const indexArray = (0, _tfjsCore.tensor1d)((0, _mathUtils.range)(0, numSamples));
                for(let batchIndex = 0; batchIndex < batches.length; ++batchIndex){
                    const batchStart = batches[batchIndex][0];
                    const batchEnd = batches[batchIndex][1];
                    const batchIds = _tfjsBackend.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);
                    // TODO(cais): In ins, train flag can be a number, instead of an
                    //   Tensor? Do we need to handle this in tfjs-layers?
                    const insBatch = (0, _trainingTensors.sliceArraysByIndices)(ins, batchIds);
                    const batchOuts = f(insBatch);
                    if (batchIndex === 0) for(let i = 0; i < batchOuts.length; ++i)outs.push((0, _tfjsCore.scalar)(0));
                    for(let i1 = 0; i1 < batchOuts.length; ++i1){
                        const batchOut = batchOuts[i1];
                        outs[i1] = _tfjsCore.add(outs[i1], _tfjsCore.mul(batchEnd - batchStart, batchOut));
                    }
                }
                for(let i2 = 0; i2 < outs.length; ++i2)outs[i2] = _tfjsCore.div(outs[i2], numSamples);
            }
            return outs;
        });
    }
    getDedupedMetricsNames() {
        const outLabels = this.metricsNames;
        // Rename duplicated metrics names (can happen with an output layer
        // shared among multiple dataflows).
        const dedupedOutLabels = [];
        for(let i = 0; i < outLabels.length; ++i){
            const label = outLabels[i];
            let newLabel = label;
            if ((0, _genericUtils.count)(outLabels, label) > 1) {
                const dupIndex = (0, _genericUtils.count)(outLabels.slice(0, i), label);
                newLabel += `_${dupIndex}`;
            }
            dedupedOutLabels.push(newLabel);
        }
        return dedupedOutLabels;
    }
    /**
     * Creates a function that performs the following actions:
     *
     * 1. computes the losses
     * 2. sums them to get the total loss
     * 3. call the optimizer computes the gradients of the LayersModel's
     *    trainable weights w.r.t. the total loss and update the variables
     * 4. calculates the metrics
     * 5. returns the values of the losses and metrics.
     */ makeTrainFunction() {
        return (data)=>{
            const lossValues = [];
            const inputs = data.slice(0, this.inputs.length);
            const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);
            const sampleWeights = data.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2);
            const metricsValues = [];
            // Create a function that computes the total loss based on the
            // inputs. This function is used for obtaining gradients through
            // backprop.
            const totalLossFunction = ()=>{
                const feeds = [];
                for(let i = 0; i < this.inputs.length; ++i)feeds.push({
                    key: this.inputs[i],
                    value: inputs[i]
                });
                const feedDict = new (0, _executor.FeedDict)(feeds);
                const outputs = (0, _executor.execute)(this.outputs, feedDict, {
                    "training": true
                });
                // TODO(cais): Take care of the case of multiple outputs from a
                //   single layer?
                let totalLoss;
                for(let i1 = 0; i1 < this.lossFunctions.length; ++i1){
                    const lossFunction = this.lossFunctions[i1];
                    let loss = lossFunction(targets[i1], outputs[i1]);
                    if (sampleWeights[i1] != null) loss = (0, _trainingUtils.computeWeightedLoss)(loss, sampleWeights[i1]);
                    // TODO(cais): push Scalar instead.
                    const meanLoss = _tfjsCore.mean(loss);
                    // TODO(cais): Use a scope() instead, to avoid ownership.
                    lossValues.push(meanLoss);
                    if (i1 === 0) totalLoss = loss;
                    else totalLoss = _tfjsCore.add(totalLoss, loss);
                }
                // Compute the metrics.
                // TODO(cais): These should probably be calculated outside
                //   totalLossFunction to benefit speed?
                for(let i2 = 0; i2 < this.metricsTensors.length; ++i2){
                    let weightedMetric;
                    if (this.outputs.length > 1 && i2 < this.outputs.length) weightedMetric = lossValues[i2];
                    else {
                        const metric = this.metricsTensors[i2][0];
                        const outputIndex = this.metricsTensors[i2][1];
                        weightedMetric = _tfjsCore.mean(metric(targets[outputIndex], outputs[outputIndex]));
                    }
                    _tfjsCore.keep(weightedMetric);
                    // TODO(cais): Use a scope() instead, to avoid ownership.
                    metricsValues.push(weightedMetric);
                }
                totalLoss = _tfjsCore.mean(totalLoss);
                // Add regularizer penalties.
                this.calculateLosses().forEach((regularizerLoss)=>{
                    totalLoss = _tfjsCore.add(totalLoss, regularizerLoss);
                });
                return totalLoss;
            };
            const variables = this.collectedTrainableWeights.map((param)=>param.read());
            const returnCost = true;
            const totalLossValue = this.optimizer_.minimize(totalLossFunction, returnCost, variables);
            return [
                totalLossValue
            ].concat(metricsValues);
        };
    }
    /**
     * Create a function which, when invoked with an array of `tf.Tensor`s as a
     * batch of inputs, returns the prespecified loss and metrics of the model
     * under the batch of input data.
     */ makeTestFunction() {
        this.testFunction = (data)=>{
            return _tfjsCore.tidy(()=>{
                const valOutputs = [];
                let totalLoss;
                const inputs = data.slice(0, this.inputs.length);
                const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);
                const feeds = [];
                for(let i = 0; i < this.inputs.length; ++i)feeds.push({
                    key: this.inputs[i],
                    value: inputs[i]
                });
                const feedDict = new (0, _executor.FeedDict)(feeds);
                const outputs = (0, _executor.execute)(this.outputs, feedDict);
                // Compute total loss.
                for(let i1 = 0; i1 < this.lossFunctions.length; ++i1){
                    const lossFunction = this.lossFunctions[i1];
                    // TODO(cais): Add sample weighting and replace the simple
                    // averaging.
                    const loss = _tfjsCore.mean(lossFunction(targets[i1], outputs[i1]));
                    if (i1 === 0) totalLoss = loss;
                    else totalLoss = _tfjsCore.add(totalLoss, loss);
                    valOutputs.push(totalLoss);
                }
                // Compute the metrics.
                for(let i2 = 0; i2 < this.metricsTensors.length; ++i2){
                    const metric = this.metricsTensors[i2][0];
                    const outputIndex = this.metricsTensors[i2][1];
                    // TODO(cais): Replace K.mean() with a proper weighting function.
                    const meanMetric = _tfjsCore.mean(metric(targets[outputIndex], outputs[outputIndex]));
                    valOutputs.push(meanMetric);
                }
                return valOutputs;
            });
        };
    }
    /**
     * Trains the model for a fixed number of epochs (iterations on a
     * dataset).
     *
     * ```js
     * const model = tf.sequential({
     *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * for (let i = 1; i < 5 ; ++i) {
     *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
     *       batchSize: 4,
     *       epochs: 3
     *   });
     *   console.log("Loss after Epoch " + i + " : " + h.history.loss[0]);
     * }
     * ```
     *
     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
     * model has multiple inputs. If all inputs in the model are named, you
     * can also pass a dictionary mapping input names to `tf.Tensor`s.
     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
     * the model has multiple outputs. If all outputs in the model are named,
     * you can also pass a dictionary mapping output names to `tf.Tensor`s.
     * @param args A `ModelFitArgs`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @exception ValueError In case of mismatch between the provided input
     * data and what the model expects.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ async fit(x, y, args = {}) {
        return (0, _trainingTensors.fitTensors)(this, x, y, args);
    }
    // TODO(cais): Add code snippet below when it's possible to instantiate
    //   actual dataset objects.
    /**
     * Trains the model using a dataset object.
     *
     * @param dataset A dataset object. Its `iterator()` method is expected
     *   to generate a dataset iterator object, the `next()` method of which
     *   is expected to produce data batches for training. The return value
     *   of the `next()` call ought to contain a boolean `done` field and a
     *   `value` field. The `value` field is expected to be an array of two
     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
     *   case is for models with exactly one input and one output (e.g..
     *   a sequential model). The latter case is for models with multiple
     *   inputs and/or multiple outputs.
     *   Of the two items in the array, the first is the input feature(s) and
     *   the second is the output target(s).
     * @param args A `ModelFitDatasetArgs`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ async fitDataset(dataset, args) {
        return (0, _trainingDataset.fitDataset)(this, dataset, args);
    }
    /**
     * Runs a single gradient update on a single batch of data.
     *
     * This method differs from `fit()` and `fitDataset()` in the following
     * regards:
     *   - It operates on exactly one batch of data.
     *   - It returns only the loss and matric values, instead of
     *     returning the batch-by-batch loss and metric values.
     *   - It doesn't support fine-grained options such as verbosity and
     *     callbacks.
     *
     * @param x Input data. It could be one of the following:
     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
     *     multiple inputs).
     *   - An Object mapping input names to corresponding `tf.Tensor` (if the
     *     model has named inputs).
     * @param y Target darta. It could be either a `tf.Tensor` a multiple
     *   `tf.Tensor`s. It should be consistent with `x`.
     * @returns Training loss or losses (in case the model has
     *   multiple outputs), along with metrics (if any), as numbers.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ async trainOnBatch(x, y) {
        // TODO(cais): Support sampleWeight and classWeight.
        // TODO(cais): Support Dataset objects.
        const standardizeOut = await this.standardizeUserData(x, y);
        const inputs = standardizeOut[0];
        const targets = standardizeOut[1];
        const trainFunction = this.makeTrainFunction();
        const losses = trainFunction(inputs.concat(targets));
        const lossValues = [];
        for (const loss of losses){
            const v = await loss.data();
            lossValues.push(v[0]);
        }
        _tfjsCore.dispose(losses);
        return (0, _genericUtils.singletonOrArray)(lossValues);
    }
    /**
     * Extract weight values of the model.
     *
     * @param config: An instance of `io.SaveConfig`, which specifies
     * model-saving options such as whether only trainable weights are to be
     * saved.
     * @returns A `NamedTensorMap` mapping original weight names (i.e.,
     *   non-uniqueified weight names) to their values.
     */ getNamedWeights(config) {
        const namedWeights = [];
        const trainableOnly = config != null && config.trainableOnly;
        const weights = trainableOnly ? this.trainableWeights : this.weights;
        const weightValues = this.getWeights(trainableOnly);
        for(let i = 0; i < weights.length; ++i){
            if (trainableOnly && !weights[i].trainable) continue;
            namedWeights.push({
                name: weights[i].originalName,
                tensor: weightValues[i]
            });
        }
        return namedWeights;
    }
    /**
     * Setter used for force stopping of LayersModel.fit() (i.e., training).
     *
     * Example:
     *
     * ```js
     * const input = tf.input({shape: [10]});
     * const output = tf.layers.dense({units: 1}).apply(input);
     * const model = tf.model({inputs: [input], outputs: [output]});
     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
     * const xs = tf.ones([8, 10]);
     * const ys = tf.zeros([8, 1]);
     *
     * const history = await model.fit(xs, ys, {
     *   epochs: 10,
     *   callbacks: {
     *     onEpochEnd: async (epoch, logs) => {
     *       if (epoch === 2) {
     *         model.stopTraining = true;
     *       }
     *     }
     *   }
     * });
     *
     * // There should be only 3 values in the loss array, instead of 10
     * values,
     * // due to the stopping after 3 epochs.
     * console.log(history.history.loss);
     * ```
     */ set stopTraining(stop) {
        this.stopTraining_ = stop;
    }
    get stopTraining() {
        return this.stopTraining_;
    }
    get optimizer() {
        return this.optimizer_;
    }
    set optimizer(optimizer) {
        if (this.optimizer_ !== optimizer) {
            this.optimizer_ = optimizer;
            this.isOptimizerOwned = false;
        }
    }
    dispose() {
        const result = super.dispose();
        if (result.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
            const numTensorsBeforeOptmizerDisposal = _tfjsCore.memory().numTensors;
            this.optimizer_.dispose();
            result.numDisposedVariables += numTensorsBeforeOptmizerDisposal - _tfjsCore.memory().numTensors;
        }
        return result;
    }
    getLossIdentifiers() {
        let lossNames;
        if (typeof this.loss === "string") lossNames = (0, _genericUtils.toSnakeCase)(this.loss);
        else if (Array.isArray(this.loss)) {
            for (const loss of this.loss){
                if (typeof loss !== "string") throw new Error("Serialization of non-string loss is not supported.");
            }
            lossNames = this.loss.map((name)=>(0, _genericUtils.toSnakeCase)(name));
        } else {
            const outputNames = Object.keys(this.loss);
            lossNames = {};
            const losses = this.loss;
            for (const outputName of outputNames){
                if (typeof losses[outputName] === "string") lossNames[outputName] = (0, _genericUtils.toSnakeCase)(losses[outputName]);
                else throw new Error("Serialization of non-string loss is not supported.");
            }
        }
        return lossNames;
    }
    getMetricIdentifiers() {
        if (typeof this.metrics === "string" || typeof this.metrics === "function") return [
            (0, _genericUtils.toSnakeCase)(_metrics.getLossOrMetricName(this.metrics))
        ];
        else if (Array.isArray(this.metrics)) return this.metrics.map((metric)=>(0, _genericUtils.toSnakeCase)(_metrics.getLossOrMetricName(metric)));
        else {
            const metricsIdentifiers = {};
            for(const key in this.metrics)metricsIdentifiers[key] = (0, _genericUtils.toSnakeCase)(_metrics.getLossOrMetricName(this.metrics[key]));
            return metricsIdentifiers;
        }
    }
    getTrainingConfig() {
        return {
            loss: this.getLossIdentifiers(),
            metrics: this.getMetricIdentifiers(),
            optimizer_config: {
                class_name: this.optimizer.getClassName(),
                config: this.optimizer.getConfig()
            }
        };
    // TODO(cais): Add weight_metrics when they are supported.
    // TODO(cais): Add sample_weight_mode when it's supported.
    // TODO(cais): Add loss_weights when it's supported.
    }
    loadTrainingConfig(trainingConfig) {
        if (trainingConfig.weighted_metrics != null) throw new Error("Loading weight_metrics is not supported yet.");
        if (trainingConfig.loss_weights != null) throw new Error("Loading loss_weights is not supported yet.");
        if (trainingConfig.sample_weight_mode != null) throw new Error("Loading sample_weight_mode is not supported yet.");
        const tsConfig = (0, _serializationUtils.convertPythonicToTs)(trainingConfig.optimizer_config);
        const optimizer = (0, _serialization.deserialize)(tsConfig);
        let loss;
        if (typeof trainingConfig.loss === "string") loss = (0, _genericUtils.toCamelCase)(trainingConfig.loss);
        else if (Array.isArray(trainingConfig.loss)) loss = trainingConfig.loss.map((lossEntry)=>(0, _genericUtils.toCamelCase)(lossEntry));
        else if (trainingConfig.loss != null) {
            loss = {};
            for(const key in trainingConfig.loss)loss[key] = (0, _genericUtils.toCamelCase)(trainingConfig.loss[key]);
        }
        let metrics;
        if (Array.isArray(trainingConfig.metrics)) metrics = trainingConfig.metrics.map((metric)=>(0, _genericUtils.toCamelCase)(metric));
        else if (trainingConfig.metrics != null) {
            metrics = {};
            for(const key1 in trainingConfig.metrics)metrics[key1] = (0, _genericUtils.toCamelCase)(trainingConfig.metrics[key1]);
        }
        this.compile({
            loss,
            metrics,
            optimizer
        });
    }
    /**
     * Save the configuration and/or weights of the LayersModel.
     *
     * An `IOHandler` is an object that has a `save` method of the proper
     * signature defined. The `save` method manages the storing or
     * transmission of serialized data ("artifacts") that represent the
     * model's topology and weights onto or via a specific medium, such as
     * file downloads, local storage, IndexedDB in the web browser and HTTP
     * requests to a server. TensorFlow.js provides `IOHandler`
     * implementations for a number of frequently used saving mediums, such as
     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
     * for more details.
     *
     * This method also allows you to refer to certain types of `IOHandler`s
     * as URL-like string shortcuts, such as 'localstorage://' and
     * 'indexeddb://'.
     *
     * Example 1: Save `model`'s topology and weights to browser [local
     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
     * then load it back.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * console.log('Prediction from original model:');
     * model.predict(tf.ones([1, 3])).print();
     *
     * const saveResults = await model.save('localstorage://my-model-1');
     *
     * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
     * console.log('Prediction from loaded model:');
     * loadedModel.predict(tf.ones([1, 3])).print();
     * ```
     *
     * Example 2. Saving `model`'s topology and weights to browser
     * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
     * then load it back.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * console.log('Prediction from original model:');
     * model.predict(tf.ones([1, 3])).print();
     *
     * const saveResults = await model.save('indexeddb://my-model-1');
     *
     * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
     * console.log('Prediction from loaded model:');
     * loadedModel.predict(tf.ones([1, 3])).print();
     * ```
     *
     * Example 3. Saving `model`'s topology and weights as two files
     * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from
     * browser.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * const saveResults = await model.save('downloads://my-model-1');
     * ```
     *
     * Example 4. Send  `model`'s topology and weights to an HTTP server.
     * See the documentation of `tf.io.http` for more details
     * including specifying request parameters and implementation of the
     * server.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * const saveResults = await model.save('http://my-server/model/upload');
     * ```
     *
     * @param handlerOrURL An instance of `IOHandler` or a URL-like,
     * scheme-based string shortcut for `IOHandler`.
     * @param config Options for saving the model.
     * @returns A `Promise` of `SaveResult`, which summarizes the result of
     * the saving, such as byte sizes of the saved artifacts for the model's
     *   topology and weight values.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */ async save(handlerOrURL, config) {
        if (typeof handlerOrURL === "string") {
            const handlers = (0, _tfjsCore.io).getSaveHandlers(handlerOrURL);
            if (handlers.length === 0) throw new (0, _errors.ValueError)(`Cannot find any save handlers for URL '${handlerOrURL}'`);
            else if (handlers.length > 1) throw new (0, _errors.ValueError)(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);
            handlerOrURL = handlers[0];
        }
        if (handlerOrURL.save == null) throw new (0, _errors.ValueError)("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
        const weightDataAndSpecs = await (0, _tfjsCore.io).encodeWeights(this.getNamedWeights(config));
        const returnString = false;
        const unusedArg = null;
        const modelConfig = this.toJSON(unusedArg, returnString);
        const modelArtifacts = {
            modelTopology: modelConfig,
            format: LAYERS_MODEL_FORMAT_NAME,
            generatedBy: `TensorFlow.js tfjs-layers v${(0, _version.version)}`,
            convertedBy: null
        };
        const includeOptimizer = config == null ? false : config.includeOptimizer;
        if (includeOptimizer && this.optimizer != null) {
            modelArtifacts.trainingConfig = this.getTrainingConfig();
            const weightType = "optimizer";
            const { data: optimizerWeightData , specs: optimizerWeightSpecs  } = await (0, _tfjsCore.io).encodeWeights(await this.optimizer.getWeights(), weightType);
            weightDataAndSpecs.specs.push(...optimizerWeightSpecs);
            weightDataAndSpecs.data = (0, _tfjsCore.io).concatenateArrayBuffers([
                weightDataAndSpecs.data,
                optimizerWeightData
            ]);
        }
        if (this.userDefinedMetadata != null) {
            // Check serialized size of user-defined metadata.
            const checkSize = true;
            (0, _userDefinedMetadata.checkUserDefinedMetadata)(this.userDefinedMetadata, this.name, checkSize);
            modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;
        }
        modelArtifacts.weightData = weightDataAndSpecs.data;
        modelArtifacts.weightSpecs = weightDataAndSpecs.specs;
        return handlerOrURL.save(modelArtifacts);
    }
    /**
     * Set user-defined metadata.
     *
     * The set metadata will be serialized together with the topology
     * and weights of the model during `save()` calls.
     *
     * @param setUserDefinedMetadata
     */ setUserDefinedMetadata(userDefinedMetadata) {
        (0, _userDefinedMetadata.checkUserDefinedMetadata)(userDefinedMetadata, this.name);
        this.userDefinedMetadata = userDefinedMetadata;
    }
    /**
     * Get user-defined metadata.
     *
     * The metadata is supplied via one of the two routes:
     *   1. By calling `setUserDefinedMetadata()`.
     *   2. Loaded during model loading (if the model is constructed
     *      via `tf.loadLayersModel()`.)
     *
     * If no user-defined metadata is available from either of the
     * two routes, this function will return `undefined`.
     */ getUserDefinedMetadata() {
        return this.userDefinedMetadata;
    }
}
// The class name is 'Model' rather than 'LayersModel' for backwards
// compatibility since this class name shows up in the serialization format.
/** @nocollapse */ LayersModel.className = "Model";
(0, _tfjsCore.serialization).registerClass(LayersModel);

},{"@tensorflow/tfjs-core":"2votT","../backend/tfjs_backend":"iABet","../common":"fOhOh","../errors":"kA7ff","../layers/serialization":"9miVs","../losses":"fAGPb","../metrics":"2pHnM","../optimizers":"7QmGh","../user_defined_metadata":"aMBgC","../utils/generic_utils":"2cErd","../utils/layer_utils":"7Sgsh","../utils/math_utils":"865Nd","../utils/serialization_utils":"lKIeB","../version":"718Pb","./container":"44Joi","./executor":"jgqvu","./training_dataset":"2CJJw","./training_tensors":"U9ogk","./training_utils":"g43Vp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9miVs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Instantiate a layer from a config dictionary.
 * @param config dict of the form {class_name: str, config: dict}
 * @param customObjects dict mapping class names (or function names)
 *   of custom (non-Keras) objects to class/functions
 * @param fastWeightInit Optional flag to use fast weight initialization
 *   during deserialization. This is applicable to cases in which
 *   the initialization will be immediately overwritten by loaded weight
 *   values. Default: `false`.
 * @returns Layer instance (may be LayersModel, Sequential, Layer...)
 */ parcelHelpers.export(exports, "deserialize", ()=>deserialize);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original Source layers/__init__.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _genericUtils = require("../utils/generic_utils");
function deserialize(config, customObjects = {}, fastWeightInit = false) {
    return (0, _genericUtils.deserializeKerasObject)(config, (0, _tfjsCore.serialization).SerializationMap.getMap().classNameMap, customObjects, "layer", fastWeightInit);
}

},{"@tensorflow/tfjs-core":"2votT","../utils/generic_utils":"2cErd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fAGPb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Normalizes a tensor wrt the L2 norm alongside the specified axis.
 * @param x
 * @param axis Axis along which to perform normalization.
 */ parcelHelpers.export(exports, "l2Normalize", ()=>l2Normalize);
parcelHelpers.export(exports, "meanSquaredError", ()=>meanSquaredError);
parcelHelpers.export(exports, "meanAbsoluteError", ()=>meanAbsoluteError);
parcelHelpers.export(exports, "meanAbsolutePercentageError", ()=>meanAbsolutePercentageError);
parcelHelpers.export(exports, "meanSquaredLogarithmicError", ()=>meanSquaredLogarithmicError);
parcelHelpers.export(exports, "squaredHinge", ()=>squaredHinge);
parcelHelpers.export(exports, "hinge", ()=>hinge);
parcelHelpers.export(exports, "categoricalHinge", ()=>categoricalHinge);
/**
 * Logarithm of the hyperbolic cosine of the prediction error.
 *
 * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and
 * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly
 * like the mean squared error, but will not be so strongly affected by the
 * occasional wildly incorrect prediction.
 */ parcelHelpers.export(exports, "logcosh", ()=>logcosh);
parcelHelpers.export(exports, "categoricalCrossentropy", ()=>categoricalCrossentropy);
/**
 * Categorical crossentropy with integer targets.
 *
 * @param target An integer tensor.
 * @param output A tensor resulting from a softmax (unless `fromLogits` is
 *  `true`, in which case `output` is expected to be the logits).
 * @param fromLogits Boolean, whether `output` is the result of a softmax, or is
 *   a tensor of logits.
 */ parcelHelpers.export(exports, "sparseCategoricalCrossentropy", ()=>sparseCategoricalCrossentropy);
/**
 * From TensorFlow's implementation in nn_impl.py:
 *
 * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
 *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
 *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
 *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
 *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
 *    = (1 - z) * x + log(1 + exp(-x))
 *    = x - x * z + log(1 + exp(-x))
 * For x < 0, to avoid overflow in exp(-x), we reformulate the above
 *      x - x * z + log(1 + exp(-x))
 *    = log(exp(x)) - x * z + log(1 + exp(-x))
 *    = - x * z + log(1 + exp(x))
 * Hence, to ensure stability and avoid overflow, the implementation uses this
 * equivalent formulation
 *    max(x, 0) - x * z + log(1 + exp(-abs(x)))
 *
 * @param labels The labels.
 * @param logits The logits.
 */ parcelHelpers.export(exports, "sigmoidCrossEntropyWithLogits", ()=>sigmoidCrossEntropyWithLogits);
parcelHelpers.export(exports, "binaryCrossentropy", ()=>binaryCrossentropy);
parcelHelpers.export(exports, "kullbackLeiblerDivergence", ()=>kullbackLeiblerDivergence);
parcelHelpers.export(exports, "poisson", ()=>poisson);
parcelHelpers.export(exports, "cosineProximity", ()=>cosineProximity);
parcelHelpers.export(exports, "mse", ()=>mse);
parcelHelpers.export(exports, "MSE", ()=>MSE);
parcelHelpers.export(exports, "mae", ()=>mae);
parcelHelpers.export(exports, "MAE", ()=>MAE);
parcelHelpers.export(exports, "mape", ()=>mape);
parcelHelpers.export(exports, "MAPE", ()=>MAPE);
parcelHelpers.export(exports, "msle", ()=>msle);
parcelHelpers.export(exports, "MSLE", ()=>MSLE);
parcelHelpers.export(exports, "kld", ()=>kld);
parcelHelpers.export(exports, "KLD", ()=>KLD);
parcelHelpers.export(exports, "cosine", ()=>cosine);
parcelHelpers.export(exports, "lossesMap", ()=>lossesMap);
// Porting note: This diverges from the PyKeras implementation and may need to
// change based on (de)serialization requirements.
parcelHelpers.export(exports, "get", ()=>get);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original Source: losses.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _common = require("./backend/common");
var _tfjsBackend = require("./backend/tfjs_backend");
var _errors = require("./errors");
function l2Normalize(x, axis) {
    return (0, _tfjsCore.tidy)(()=>{
        if (x.dtype !== "float32") x = x.asType("float32");
        const squareSum = _tfjsCore.sum(_tfjsBackend.square(x), axis, true);
        const epsilonTensor = _tfjsCore.fill(squareSum.shape, (0, _common.epsilon)());
        const norm = _tfjsCore.sqrt(_tfjsCore.maximum(squareSum, epsilonTensor));
        return _tfjsCore.div(x, norm);
    });
}
function meanSquaredError(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>_tfjsCore.mean(_tfjsBackend.square(_tfjsCore.sub(yPred, yTrue)), -1));
}
function meanAbsoluteError(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>_tfjsCore.mean(_tfjsCore.abs(_tfjsCore.sub(yPred, yTrue)), -1));
}
function meanAbsolutePercentageError(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const diff = _tfjsCore.sub(yTrue, yPred);
        const clippedTrue = _tfjsCore.clipByValue(_tfjsCore.abs(yTrue), (0, _common.epsilon)(), Number.MAX_VALUE);
        const absResult = _tfjsCore.abs(_tfjsCore.div(diff, clippedTrue));
        return _tfjsCore.mul(100, _tfjsCore.mean(absResult, -1));
    });
}
function meanSquaredLogarithmicError(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const clippedPred = _tfjsCore.clipByValue(yPred, (0, _common.epsilon)(), Number.MAX_VALUE);
        const firstLog = _tfjsCore.log(_tfjsCore.add(1, clippedPred));
        const clippedTrue = _tfjsCore.clipByValue(yTrue, (0, _common.epsilon)(), Number.MAX_VALUE);
        const secondLog = _tfjsCore.log(_tfjsCore.add(1, clippedTrue));
        return _tfjsCore.mean(_tfjsBackend.square(_tfjsCore.sub(firstLog, secondLog)), -1);
    });
}
function squaredHinge(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const maxResult = _tfjsCore.maximum(0, _tfjsCore.sub(1, _tfjsCore.mul(yTrue, yPred)));
        return _tfjsCore.mean(_tfjsBackend.square(maxResult), -1);
    });
}
function hinge(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const maxResult = _tfjsCore.maximum(0, _tfjsCore.sub(1, _tfjsCore.mul(yTrue, yPred)));
        return _tfjsCore.mean(maxResult, -1);
    });
}
function categoricalHinge(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const pos = _tfjsCore.sum(_tfjsCore.mul(yTrue, yPred), -1);
        const neg = _tfjsCore.max(_tfjsCore.mul(_tfjsCore.sub(1, yTrue), yPred), -1);
        return _tfjsCore.maximum(0, _tfjsCore.add(1, _tfjsCore.sub(neg, pos)));
    });
}
function logcosh(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const log2 = Math.log(2);
        const predictionDiff = _tfjsCore.sub(yPred, yTrue);
        const logcoshResult = _tfjsCore.sub(_tfjsCore.add(predictionDiff, _tfjsCore.softplus(_tfjsCore.mul(-2, predictionDiff))), log2);
        return _tfjsCore.mean(logcoshResult, -1);
    });
}
function categoricalCrossentropy(target, output, fromLogits = false) {
    return (0, _tfjsCore.tidy)(()=>{
        if (fromLogits) output = _tfjsCore.softmax(output);
        else {
            // scale preds so that the class probabilities of each sample sum to 1.
            const outputSum = _tfjsCore.sum(output, output.shape.length - 1, true);
            output = _tfjsCore.div(output, outputSum);
        }
        output = _tfjsCore.clipByValue(output, (0, _common.epsilon)(), 1 - (0, _common.epsilon)());
        return _tfjsCore.neg(_tfjsCore.sum(_tfjsCore.mul(target.toFloat(), _tfjsCore.log(output)), output.shape.length - 1));
    });
}
function sparseCategoricalCrossentropy(target, output, fromLogits = false) {
    return (0, _tfjsCore.tidy)(()=>{
        const flatTarget = _tfjsCore.floor(_tfjsBackend.flatten(target)).toInt();
        output = _tfjsCore.clipByValue(output, (0, _common.epsilon)(), 1 - (0, _common.epsilon)());
        const outputShape = output.shape;
        const oneHotTarget = _tfjsCore.oneHot(flatTarget, outputShape[outputShape.length - 1]).reshape(outputShape);
        return categoricalCrossentropy(oneHotTarget, output, fromLogits);
    });
}
function sigmoidCrossEntropyWithLogits(labels, logits) {
    if (!(0, _tfjsCore.util).arraysEqual(labels.shape, logits.shape)) throw new (0, _errors.ValueError)(`logits and labels must have the same shape, but got shapes ` + `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);
    return (0, _tfjsCore.tidy)(()=>{
        // The logistic loss formula from above is
        //   x - x * z + log(1 + exp(-x))
        // For x < 0, a more numerically stable formula is
        //   -x * z + log(1 + exp(x))
        // Note that these two expressions can be combined into the following:
        //   max(x, 0) - x * z + log(1 + exp(-abs(x)))
        const reluLogits = logits.relu();
        const negAbsLogits = logits.abs().neg();
        return reluLogits.sub(logits.mul(labels)).add(negAbsLogits.exp().log1p());
    });
}
function binaryCrossentropy(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        let y;
        y = _tfjsCore.clipByValue(yPred, (0, _common.epsilon)(), 1 - (0, _common.epsilon)());
        y = _tfjsCore.log(_tfjsCore.div(y, _tfjsCore.sub(1, y)));
        return _tfjsCore.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);
    });
}
function kullbackLeiblerDivergence(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const clippedTrue = _tfjsCore.clipByValue(yTrue, (0, _common.epsilon)(), 1);
        const clippedPred = _tfjsCore.clipByValue(yPred, (0, _common.epsilon)(), 1);
        return _tfjsCore.sum(_tfjsCore.mul(yTrue, _tfjsCore.log(_tfjsCore.div(clippedTrue, clippedPred))), -1);
    });
}
function poisson(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const logPred = _tfjsCore.log(_tfjsCore.add((0, _common.epsilon)(), yPred));
        return _tfjsCore.mean(_tfjsCore.sub(yPred, _tfjsCore.mul(yTrue, logPred)), -1);
    });
}
function cosineProximity(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const trueNormalized = l2Normalize(yTrue, -1);
        const predNormalized = l2Normalize(yPred, -1);
        const trueXPred = _tfjsCore.mul(trueNormalized, predNormalized);
        return _tfjsCore.neg(_tfjsCore.sum(trueXPred, -1));
    });
}
const mse = meanSquaredError;
const MSE = meanSquaredError;
const mae = meanAbsoluteError;
const MAE = meanAbsoluteError;
const mape = meanAbsolutePercentageError;
const MAPE = meanAbsolutePercentageError;
const msle = meanSquaredLogarithmicError;
const MSLE = meanSquaredLogarithmicError;
const kld = kullbackLeiblerDivergence;
const KLD = kullbackLeiblerDivergence;
const cosine = cosineProximity;
const lossesMap = {
    meanSquaredError,
    meanAbsoluteError,
    meanAbsolutePercentageError,
    meanSquaredLogarithmicError,
    squaredHinge,
    hinge,
    categoricalHinge,
    logcosh,
    categoricalCrossentropy,
    sparseCategoricalCrossentropy,
    binaryCrossentropy,
    kullbackLeiblerDivergence,
    poisson,
    cosineProximity
};
function get(identifierOrFn) {
    if (typeof identifierOrFn === "string") {
        if (identifierOrFn in lossesMap) return lossesMap[identifierOrFn];
        let errMsg = `Unknown loss ${identifierOrFn}`;
        if (identifierOrFn.toLowerCase().includes("softmaxcrossentropy")) errMsg = `Unknown loss ${identifierOrFn}. ` + 'Use "categoricalCrossentropy" as the string name for ' + "tf.losses.softmaxCrossEntropy";
        throw new (0, _errors.ValueError)(errMsg);
    } else return identifierOrFn;
}

},{"@tensorflow/tfjs-core":"2votT","./backend/common":"3qfoZ","./backend/tfjs_backend":"iABet","./errors":"kA7ff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2pHnM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "binaryAccuracy", ()=>binaryAccuracy);
parcelHelpers.export(exports, "categoricalAccuracy", ()=>categoricalAccuracy);
parcelHelpers.export(exports, "precision", ()=>precision);
parcelHelpers.export(exports, "recall", ()=>recall);
parcelHelpers.export(exports, "binaryCrossentropy", ()=>binaryCrossentropy);
parcelHelpers.export(exports, "sparseCategoricalAccuracy", ()=>sparseCategoricalAccuracy);
parcelHelpers.export(exports, "topKCategoricalAccuracy", ()=>topKCategoricalAccuracy);
parcelHelpers.export(exports, "sparseTopKCategoricalAccuracy", ()=>sparseTopKCategoricalAccuracy);
parcelHelpers.export(exports, "mse", ()=>mse);
parcelHelpers.export(exports, "MSE", ()=>MSE);
parcelHelpers.export(exports, "mae", ()=>mae);
parcelHelpers.export(exports, "MAE", ()=>MAE);
parcelHelpers.export(exports, "mape", ()=>mape);
parcelHelpers.export(exports, "MAPE", ()=>MAPE);
parcelHelpers.export(exports, "categoricalCrossentropy", ()=>categoricalCrossentropy);
parcelHelpers.export(exports, "cosine", ()=>cosine);
parcelHelpers.export(exports, "sparseCategoricalCrossentropy", ()=>sparseCategoricalCrossentropy);
parcelHelpers.export(exports, "metricsMap", ()=>metricsMap);
parcelHelpers.export(exports, "get", ()=>get);
/**
 * Get the shortcut function name.
 *
 * If the fn name is a string,
 *   directly return the string name.
 * If the function is included in metricsMap or lossesMap,
 *   return key of the map.
 *   - If the function relative to multiple keys,
 *     return the first found key as the function name.
 *   - If the function exists in both lossesMap and metricsMap,
 *     search lossesMap first.
 * If the function is not included in metricsMap or lossesMap,
 *   return the function name.
 *
 * @param fn loss function, metric function, or short cut name.
 * @returns Loss or Metric name in string.
 */ parcelHelpers.export(exports, "getLossOrMetricName", ()=>getLossOrMetricName);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Built-in metrics.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("./backend/tfjs_backend");
var _errors = require("./errors");
var _losses = require("./losses");
var _genericUtils = require("./utils/generic_utils");
function binaryAccuracy(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const threshold = _tfjsCore.mul(.5, _tfjsCore.onesLike(yPred));
        const yPredThresholded = _tfjsBackend.cast(_tfjsCore.greater(yPred, threshold), yTrue.dtype);
        return _tfjsCore.mean(_tfjsCore.equal(yTrue, yPredThresholded), -1);
    });
}
function categoricalAccuracy(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>_tfjsBackend.cast(_tfjsCore.equal(_tfjsCore.argMax(yTrue, -1), _tfjsCore.argMax(yPred, -1)), "float32"));
}
function truePositives(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        return _tfjsCore.logicalAnd(yTrue.equal(1), yPred.equal(1)).sum().cast("float32");
    });
}
function falseNegatives(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        return _tfjsCore.logicalAnd(yTrue.equal(1), yPred.equal(0)).sum().cast("float32");
    });
}
function falsePositives(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        return _tfjsCore.logicalAnd(yTrue.equal(0), yPred.equal(1)).sum().cast("float32");
    });
}
function precision(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const tp = truePositives(yTrue, yPred);
        const fp = falsePositives(yTrue, yPred);
        const denominator = tp.add(fp);
        return _tfjsCore.where(_tfjsCore.greater(denominator, 0), tp.div(denominator), 0).cast("float32");
    });
}
function recall(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(()=>{
        const tp = truePositives(yTrue, yPred);
        const fn = falseNegatives(yTrue, yPred);
        const denominator = tp.add(fn);
        return _tfjsCore.where(_tfjsCore.greater(denominator, 0), tp.div(denominator), 0).cast("float32");
    });
}
function binaryCrossentropy(yTrue, yPred) {
    return (0, _losses.binaryCrossentropy)(yTrue, yPred);
}
function sparseCategoricalAccuracy(yTrue, yPred) {
    if (yTrue.rank === yPred.rank) yTrue = yTrue.squeeze([
        yTrue.rank - 1
    ]);
    yPred = yPred.argMax(-1);
    if (yPred.dtype !== yTrue.dtype) yPred = yPred.asType(yTrue.dtype);
    return _tfjsCore.equal(yTrue, yPred).asType("float32");
}
function topKCategoricalAccuracy(yTrue, yPred) {
    throw new (0, _errors.NotImplementedError)();
}
function sparseTopKCategoricalAccuracy(yTrue, yPred) {
    throw new (0, _errors.NotImplementedError)();
}
const mse = (0, _losses.meanSquaredError);
const MSE = (0, _losses.meanSquaredError);
const mae = (0, _losses.meanAbsoluteError);
const MAE = (0, _losses.meanAbsoluteError);
const mape = (0, _losses.meanAbsolutePercentageError);
const MAPE = (0, _losses.meanAbsolutePercentageError);
const categoricalCrossentropy = (0, _losses.categoricalCrossentropy);
const cosine = (0, _losses.cosineProximity);
const sparseCategoricalCrossentropy = (0, _losses.sparseCategoricalCrossentropy);
const metricsMap = {
    binaryAccuracy,
    categoricalAccuracy,
    precision,
    categoricalCrossentropy,
    sparseCategoricalCrossentropy,
    mse,
    MSE,
    mae,
    MAE,
    mape,
    MAPE,
    cosine
};
function get(identifier) {
    if (typeof identifier === "string" && identifier in metricsMap) return metricsMap[identifier];
    else if (typeof identifier !== "string" && identifier != null) return identifier;
    else throw new (0, _errors.ValueError)(`Unknown metric ${identifier}`);
}
function getLossOrMetricName(fn) {
    _genericUtils.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);
    if (typeof fn === "string") return fn;
    else {
        let fnName;
        for (const key of Object.keys((0, _losses.lossesMap)))if ((0, _losses.lossesMap)[key] === fn) {
            fnName = key;
            break;
        }
        if (fnName !== undefined) return fnName;
        for (const key1 of Object.keys(metricsMap))if (metricsMap[key1] === fn) {
            fnName = key1;
            break;
        }
        if (fnName !== undefined) return fnName;
        return fn.name;
    }
}

},{"@tensorflow/tfjs-core":"2votT","./backend/tfjs_backend":"iABet","./errors":"kA7ff","./losses":"fAGPb","./utils/generic_utils":"2cErd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7QmGh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Add (de)serialize()
// Porting note: This diverges from the PyKeras implementation and may need to
// change based on (de)serialization requirements.
parcelHelpers.export(exports, "getOptimizer", ()=>getOptimizer);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Optimizers.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _common = require("./backend/common");
var _errors = require("./errors");
function getOptimizer(identifier) {
    const optimizerMap = {
        "Adagrad": ()=>(0, _tfjsCore.train).adagrad(0.01),
        "Adadelta": ()=>(0, _tfjsCore.train).adadelta(1, 0.95, (0, _common.epsilon)()),
        "Adam": ()=>(0, _tfjsCore.train).adam(0.001, 0.9, 0.999, (0, _common.epsilon)()),
        "Adamax": ()=>(0, _tfjsCore.train).adamax(0.002, 0.9, 0.999, (0, _common.epsilon)(), 0),
        "RMSProp": ()=>(0, _tfjsCore.train).rmsprop(0.001, 0.9, 0, (0, _common.epsilon)()),
        "SGD": ()=>(0, _tfjsCore.train).sgd(0.01)
    };
    optimizerMap["adagrad"] = optimizerMap["Adagrad"];
    optimizerMap["adadelta"] = optimizerMap["Adadelta"];
    optimizerMap["adam"] = optimizerMap["Adam"];
    optimizerMap["adamax"] = optimizerMap["Adamax"];
    optimizerMap["rmsprop"] = optimizerMap["RMSProp"];
    optimizerMap["sgd"] = optimizerMap["SGD"];
    if (identifier in optimizerMap) return optimizerMap[identifier]();
    throw new (0, _errors.ValueError)(`Unknown Optimizer ${identifier}`);
}

},{"@tensorflow/tfjs-core":"2votT","./backend/common":"3qfoZ","./errors":"kA7ff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMBgC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH", ()=>MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH);
/**
 * Check validity of user-defined metadata.
 *
 * @param userDefinedMetadata
 * @param modelName Name of the model that the user-defined metadata belongs to.
 *   Used during construction of error messages.
 * @param checkSize Whether to check the size of the metadata is under
 *   recommended limit. Default: `false`. If `true`, will try stringify the
 *   JSON object and print a console warning if the serialzied size is above the
 *   limit.
 * @throws Error if `userDefinedMetadata` is not a plain JSON object.
 */ parcelHelpers.export(exports, "checkUserDefinedMetadata", ()=>checkUserDefinedMetadata);
/**
 * Check if an input is plain JSON object or any valid subfield of it.
 *
 * @param x The input to be checked.
 * @param assertObject Whether to assert `x` is a JSON object, i.e., reject
 *   cases of arrays and primitives.
 * @return Returns `true` if and only if `x` is a plain JSON object,
 *   a JSON-valid primitive including string, number, boolean and null,
 *   or an array of the said types.
 */ // tslint:disable-next-line:no-any
parcelHelpers.export(exports, "plainObjectCheck", ()=>plainObjectCheck);
const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1048576;
function checkUserDefinedMetadata(userDefinedMetadata, modelName, checkSize = false) {
    if (userDefinedMetadata == null || typeof userDefinedMetadata !== "object" || Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype || !plainObjectCheck(userDefinedMetadata)) throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
    if (checkSize) {
        const out = JSON.stringify(userDefinedMetadata);
        if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) console.warn(`User-defined metadata of model "${modelName}" is too large in ` + `size (length=${out.length} when serialized). It is not ` + `recommended to store such large objects in user-defined metadata. ` + `Please make sure its serialized length is <= ` + `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);
    }
}
function plainObjectCheck(x) {
    if (x === null) // Note: typeof `null` is 'object', and `null` is valid in JSON.
    return true;
    else if (typeof x === "object") {
        if (Object.getPrototypeOf(x) === Object.prototype) {
            // `x` is a JavaScript object and its prototype is Object.
            const keys = Object.keys(x);
            for (const key of keys){
                if (typeof key !== "string") // JSON keys must be strings.
                return false;
                if (!plainObjectCheck(x[key])) return false;
            }
            return true;
        } else {
            // `x` is a JavaScript object but its prototype is not Object.
            if (Array.isArray(x)) {
                // `x` is a JavaScript array.
                for (const item of x){
                    if (!plainObjectCheck(item)) return false;
                }
                return true;
            } else // `x` is a JavaScript object and its prototype is not Object,
            // and it's not an Array. I.e., it's a complex object such as
            // `Error` and `Date`.
            return false;
        }
    } else {
        // `x` is not a JavaScript object or `null`.
        const xType = typeof x;
        return xType === "string" || xType === "number" || xType === "boolean";
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Sgsh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Print the summary of a LayersModel object.
 *
 * @param model tf.LayersModel instance.
 * @param lineLength Total length of printed lines. Set this to adapt to the
 *   display to different terminal or console sizes.
 * @param positions Relative or absolute positions of log elements in each
 *   line. Each number corresponds to right-most (i.e., ending) position of a
 *   column.
 *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like
 *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.
 * @param printFn Print function to use.
 *   It will be called on each line of the summary. You can provide a custom
 *   function in order to capture the string summary. Defaults to `console.log`.
 */ parcelHelpers.export(exports, "printSummary", ()=>printSummary);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _variableUtils = require("./variable_utils");
function printSummary(model, lineLength, positions, // tslint:disable-next-line:no-any
printFn = console.log) {
    const sequentialLike = isModelSequentialLike(model);
    // Header names for different log elements.
    const toDisplay = [
        "Layer (type)",
        "Output shape",
        "Param #"
    ];
    if (sequentialLike) {
        lineLength = lineLength || 65;
        positions = positions || [
            0.45,
            0.85,
            1
        ];
    } else {
        lineLength = lineLength || 98;
        positions = positions || [
            0.33,
            0.55,
            0.67,
            1
        ];
    // Header names for different log elements.
    }
    if (positions[positions.length - 1] <= 1) // `positions` is relative. Convert it to absolute positioning.
    positions = positions.map((p)=>Math.floor(lineLength * p));
    let relevantNodes;
    if (!sequentialLike) {
        toDisplay.push("Receives inputs");
        relevantNodes = [];
        for(const depth in model.nodesByDepth)relevantNodes.push(...model.nodesByDepth[depth]);
    }
    printFn("_".repeat(lineLength));
    printRow(toDisplay, positions, printFn);
    printFn("=".repeat(lineLength));
    const layers = model.layers;
    for(let i = 0; i < layers.length; ++i){
        if (sequentialLike) printLayerSummary(layers[i], positions, printFn);
        else printLayerSummaryWithConnections(layers[i], positions, relevantNodes, printFn);
        printFn((i === layers.length - 1 ? "=" : "_").repeat(lineLength));
    }
    // tslint:disable-next-line:no-any
    model.checkTrainableWeightsConsistency();
    const trainableCount = countTrainableParams(model);
    const nonTrainableCount = (0, _variableUtils.countParamsInWeights)(model.nonTrainableWeights);
    printFn(`Total params: ${trainableCount + nonTrainableCount}`);
    printFn(`Trainable params: ${trainableCount}`);
    printFn(`Non-trainable params: ${nonTrainableCount}`);
    printFn("_".repeat(lineLength));
}
function countTrainableParams(model) {
    let trainableCount;
    // tslint:disable:no-any
    if (model.collectedTrainableWeights != null) trainableCount = (0, _variableUtils.countParamsInWeights)(model.collectedTrainableWeights);
    else trainableCount = (0, _variableUtils.countParamsInWeights)(model.trainableWeights);
    // tslint:enable:no-any
    return trainableCount;
}
function isModelSequentialLike(model) {
    let sequentialLike = true;
    const nodesByDepth = [];
    const nodes = [];
    for(const depth in model.nodesByDepth)nodesByDepth.push(model.nodesByDepth[depth]);
    for (const depthNodes of nodesByDepth){
        if (depthNodes.length > 1 || depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {
            sequentialLike = false;
            break;
        }
        nodes.push(...depthNodes);
    }
    if (sequentialLike) // Search for shared layers.
    for (const layer of model.layers){
        let flag = false;
        for (const node of layer.inboundNodes)if (nodes.indexOf(node) !== -1) {
            if (flag) {
                sequentialLike = false;
                break;
            } else flag = true;
        }
        if (!sequentialLike) break;
    }
    return sequentialLike;
}
function printRow(fields, positions, // tslint:disable-next-line:no-any
printFn = console.log) {
    let line = "";
    for(let i = 0; i < fields.length; ++i){
        if (i > 0) line = line.slice(0, line.length - 1) + " ";
        line += fields[i];
        line = line.slice(0, positions[i]);
        line += " ".repeat(positions[i] - line.length);
    }
    printFn(line);
}
/**
 * Prints a summary for a single Layer, without connectivity information.
 *
 * @param layer: Layer instance to print.
 */ function printLayerSummary(layer, positions, // tslint:disable-next-line:no-any
printFn) {
    let outputShape;
    try {
        outputShape = JSON.stringify(layer.outputShape);
    } catch (err) {
        outputShape = "multiple";
    }
    const name = layer.name;
    const className = layer.getClassName();
    const fields = [
        `${name} (${className})`,
        outputShape,
        layer.countParams().toString()
    ];
    printRow(fields, positions, printFn);
}
/**
 * Prints a summary for a single Layer, with connectivity information.
 */ function printLayerSummaryWithConnections(layer, positions, relevantNodes, // tslint:disable-next-line:no-any
printFn) {
    let outputShape;
    try {
        outputShape = JSON.stringify(layer.outputShape);
    } catch (err) {
        outputShape = "multiple";
    }
    const connections = [];
    for (const node of layer.inboundNodes){
        if (relevantNodes != null && relevantNodes.length > 0 && relevantNodes.indexOf(node) === -1) continue;
        for(let i = 0; i < node.inboundLayers.length; ++i){
            const inboundLayer = node.inboundLayers[i].name;
            const inboundLayerIndex = node.nodeIndices[i];
            const inboundTensorIndex = node.tensorIndices[i];
            connections.push(`${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);
        }
    }
    const name = layer.name;
    const className = layer.getClassName();
    const firstConnection = connections.length === 0 ? "" : connections[0];
    const fields = [
        `${name} (${className})`,
        outputShape,
        layer.countParams().toString(),
        firstConnection
    ];
    printRow(fields, positions, printFn);
    for(let i1 = 1; i1 < connections.length; ++i1)printRow([
        "",
        "",
        "",
        connections[i1]
    ], positions, printFn);
}

},{"./variable_utils":"9jOJL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lKIeB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Convert a Pythonic config object to TypeScript config object.
 * @param pythonicConfig The config object to convert.
 * @param key Optional key name of the object being converted.
 * @returns Result of the conversion.
 */ parcelHelpers.export(exports, "convertPythonicToTs", ()=>convertPythonicToTs);
/**
 * Convert a TypeScript config object to Python config object.
 * @param tsConfig The config object to convert.
 * @param key Optional key name of the object being converted.
 * @returns Result of the conversion.
 */ parcelHelpers.export(exports, "convertTsToPythonic", ()=>convertTsToPythonic);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _genericUtils = require("../utils/generic_utils");
// tslint:enable
/**
 * Test whether a value in an array is the name of a LayersModel or Layer.
 * @param key The key name that the value is found under. Note that the key
 *   may not be at the level immediately above the value, if the value is in a
 *   nested array.
 * @param index Index of the value in the Array that it is found in.
 * @param value The value object.
 * @returns A boolean indicating whether value is a name.
 */ function isArrayItemInputOrOutputName(key, index, value) {
    return (key === "inboundNodes" || key === "outputLayers" || key === "inputLayers") && index === 0 && typeof value === "string";
}
function convertPythonicToTs(pythonicConfig, key) {
    if (pythonicConfig === null) return null;
    else if (typeof pythonicConfig === "string") return _genericUtils.toCamelCase(pythonicConfig);
    else if (typeof pythonicConfig === "number" || typeof pythonicConfig === "boolean") return pythonicConfig;
    else if (pythonicConfig instanceof Array) {
        const tsArray = [];
        const arrayLength = pythonicConfig.length;
        for(let i = 0; i < arrayLength; ++i){
            const item = pythonicConfig[i];
            if (isArrayItemInputOrOutputName(key, i, item)) tsArray.push(item);
            else tsArray.push(convertPythonicToTs(item, key));
        }
        return tsArray;
    } else {
        const tsDict = {};
        for (const pythonicKey of Object.keys(pythonicConfig)){
            const pythonicValue = pythonicConfig[pythonicKey];
            if (pythonicKey === "name" && typeof pythonicValue === "string") // Special case the 'name' key with a string value. Name values, such as
            // the names of LayersModel and Layer instances, should not undergo the
            // camel-case conversion.
            tsDict[pythonicKey] = pythonicValue;
            else {
                const tsKey = _genericUtils.toCamelCase(pythonicKey);
                tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);
            }
        }
        return tsDict;
    }
}
function convertTsToPythonic(tsConfig, key) {
    if (tsConfig === null || tsConfig === undefined) return null;
    else if (typeof tsConfig === "string") return _genericUtils.toSnakeCase(tsConfig);
    else if (typeof tsConfig === "number" || typeof tsConfig === "boolean") return tsConfig;
    else if (tsConfig instanceof Array) {
        const pyArray = [];
        const arrayLength = tsConfig.length;
        for(let i = 0; i < arrayLength; ++i){
            const item = tsConfig[i];
            if (isArrayItemInputOrOutputName(key, i, item)) pyArray.push(item);
            else pyArray.push(convertTsToPythonic(item, key));
        }
        return pyArray;
    } else {
        const pyDict = {};
        for (const tsKey of Object.keys(tsConfig)){
            const tsValue = tsConfig[tsKey];
            const pyKey = _genericUtils.toSnakeCase(tsKey);
            if ((tsKey === "name" || tsKey === "className") && typeof tsValue === "string") // Special case the 'name' key with a string value. Name values, such as
            // the names of LayersModel and Layer instances, should not undergo the
            // snake-case conversion.
            pyDict[pyKey] = tsValue;
            else pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);
        }
        return pyDict;
    }
}

},{"../utils/generic_utils":"2cErd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"718Pb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
const version = "2.0.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"44Joi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A Container is a directed acyclic graph of layers.
 *
 * It is the topological form of a "model". A LayersModel
 * is simply a Container with added training routines.
 *
 */ parcelHelpers.export(exports, "Container", ()=>Container);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original source: keras/engine/topology.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _state = require("../backend/state");
var _errors = require("../errors");
var _serialization = require("../layers/serialization");
var _genericUtils = require("../utils/generic_utils");
var _serializationUtils = require("../utils/serialization_utils");
var _typesUtils = require("../utils/types_utils");
var _variables = require("../variables");
var _version = require("../version");
var _executor = require("./executor");
var _inputLayer = require("./input_layer");
var _topology = require("./topology");
class Container extends (0, _topology.Layer) {
    constructor(args){
        // No args passed to super's constructor.
        super({});
        this.containerNodes = new Set();
        this.name = args.name;
        if (this.name == null) {
            const prefix = this.getClassName().toLowerCase();
            this.name = (0, _state.getUid)(prefix);
        }
        this.supportsMasking = false;
        this.trainable_ = true;
        // TODO(michaelterry): Initialize perInputLosses/Updates here.
        // Container-specific properties.
        if (Array.isArray(args.inputs)) this.inputs = args.inputs.slice();
        else this.inputs = [
            args.inputs
        ];
        if (Array.isArray(args.outputs)) this.outputs = args.outputs.slice();
        else this.outputs = [
            args.outputs
        ];
        // Check for redundancy in inputs.
        if (_genericUtils.unique(this.inputs).length !== this.inputs.length) throw new (0, _errors.ValueError)("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: " + `${this.inputs.map((x)=>x.name)}`);
        // Check for redundancy in outputs.
        if (_genericUtils.unique(this.outputs).length !== this.outputs.length) console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: " + `${this.outputs.map((x)=>x.name)}`);
        /*
          List of initial layers (1 to 1 mapping with this.inputs, hence the same
          layer might appear twice)
        */ this.inputLayers = [];
        this.inputLayersNodeIndices = [];
        this.inputLayersTensorIndices = [];
        /*
          List of layers (1 to 1 mapping with this.outputs, hence the same layer
          might appear twice)
        */ this.outputLayers = [];
        this.outputLayersNodeIndices = [];
        this.outputLayersTensorIndices = [];
        /*
          All layers in order of horizontal graph traversal. Entries are unique.
          Includes input and output layers.
        */ this.layers = [];
        /*
          References to container layers that were constructed internally. We need
          these to properly dispose of tensors from nested containers.
        */ this.internalContainerRefs = [];
        // TODO(michaelterry): Determine if caching still needed with eager
        // backend.
        /*
          This is for performance optimization when calling the Container on new
          inputs. Every time the Container is called on a set on input tensors,
          we compute the output tensors, output masks and output shapes in one pass,
          then cache them here. When one of these outputs is queried later,
          we retrieve it from there instead of recomputing it.
        */ // this.outputTensorCache = {};
        // this.outputShapeCache = {};
        // Build this.outputLayers:
        for (const x of this.outputs){
            const layer = x.sourceLayer;
            const nodeIndex = x.nodeIndex;
            const tensorIndex = x.tensorIndex;
            this.outputLayers.push(layer);
            this.outputLayersNodeIndices.push(nodeIndex);
            this.outputLayersTensorIndices.push(tensorIndex);
        }
        // TODO(michaelterry): Add output mask cache code.
        // Build this.inputLayers:
        for (const x1 of this.inputs){
            const layer1 = x1.sourceLayer;
            const nodeIndex1 = x1.nodeIndex;
            const tensorIndex1 = x1.tensorIndex;
            /*
              It's supposed to be an input layer, so only one node
              and one tensor output.
            */ _genericUtils.assert(nodeIndex1 === 0, "input layer has >1 nodes");
            _genericUtils.assert(tensorIndex1 === 0, "input layer has >1 tensors");
            this.inputLayers.push(layer1);
            this.inputLayersNodeIndices.push(nodeIndex1);
            this.inputLayersTensorIndices.push(tensorIndex1);
        }
        // Build this.inputNames and this.outputNames.
        this.inputNames = [];
        this.outputNames = [];
        this.feedInputShapes = [];
        this.feedInputNames = [];
        this.feedOutputNames = [];
        for(let i = 0; i < this.inputLayers.length; i++){
            const layer2 = this.inputLayers[i];
            // Check that layer is an InputLayer.
            if (!(layer2 instanceof (0, _inputLayer.InputLayer))) throw new TypeError("Input layers to a LayersModel must be InputLayer objects. " + `Received inputs: ${args.inputs}. ` + `Input ${i} (0-based) originates ` + `from layer type ${layer2.getClassName()}.`);
            this.inputNames.push(layer2.name);
            this.feedInputShapes.push(layer2.batchInputShape);
            this.feedInputNames.push(layer2.name);
        }
        for (const layer3 of this.outputLayers)this.outputNames.push(layer3.name);
        this.internalInputShapes = this.inputs.map((x)=>x.shape);
        this.internalOutputShapes = this.outputs.map((x)=>x.shape);
        /*
          Container_nodes: set of nodes included in the graph (not all nodes
          included in the layers are relevant to the current graph).
        */ // ids of all nodes relevant to the Container:
        const nodesDepths = {};
        // To recover nodes from their ID.
        const nodeIDToNode = {};
        const layersDepths = {};
        // To layers from their ID.
        const layerIDToLayer = {};
        const layerIndices = {};
        const nodesInDecreasingDepth = [];
        /**
         * Builds a map of the graph of layers.
         *
         * This recursively updates the map `layerIndices`,
         * the list `nodesInDecreasingDepth` and the set `containerNodes`.
         *
         * @param tensor Some tensor in a graph.
         * @param finishedNodes Set of nodes whose subgraphs have been traversed
         *         completely. Useful to prevent duplicated work.
         * @param nodesInProgress Set of nodes that are currently active on the
         *         recursion stack. Useful to detect cycles.
         * @param layer Layer from which `tensor` comes from. If not provided,
         *   will be obtained from tensor.sourceLayer.
         * @param nodeIndex Node index from which `tensor` comes from.
         * @param tensorIndex TensorIndex from which `tensor` comes from.
         *
         * @exception RuntimeError if a cycle is detected.
         */ const buildMapOfGraph = (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex)=>{
            if (layer == null || nodeIndex == null || tensorIndex == null) {
                layer = tensor.sourceLayer;
                nodeIndex = tensor.nodeIndex;
                tensorIndex = tensor.tensorIndex;
            }
            const node = layer.inboundNodes[nodeIndex];
            // Prevent cycles.
            if (nodesInProgress.indexOf(node) !== -1) throw new (0, _errors.RuntimeError)(`The tensor ${tensor.name} at layer "${layer.name}" ` + "is part of a cycle.");
            // Don't repeat work for shared subgraphs
            if (finishedNodes.indexOf(node) !== -1) return;
            // Update containerNodes.
            this.containerNodes.add(Container.nodeKey(layer, nodeIndex));
            // Store the traversal order for layer sorting.
            if (!(layer.id in layerIndices)) layerIndices[layer.id] = Object.keys(layerIndices).length;
            if (nodesInProgress.indexOf(node) === -1) nodesInProgress.push(node);
            // Propagate to all previous tensors connected to this node.
            const numInboundLayers = node.inboundLayers.length;
            for(let i = 0; i < numInboundLayers; i++){
                const x = node.inputTensors[i];
                const layer1 = node.inboundLayers[i];
                const nodeIndex1 = node.nodeIndices[i];
                const tensorIndex1 = node.tensorIndices[i];
                buildMapOfGraph(x, finishedNodes, nodesInProgress, layer1, nodeIndex1, tensorIndex1);
            }
            finishedNodes.push(node);
            while(nodesInProgress.indexOf(node) >= 0)nodesInProgress.splice(nodesInProgress.indexOf(node), 1);
            nodesInDecreasingDepth.push(node);
        };
        const finishedNodes = [];
        const nodesInProgress = [];
        for (const x2 of this.outputs)buildMapOfGraph(x2, finishedNodes, nodesInProgress);
        const reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();
        for (const node of reversedNodesInDecreasingDepth){
            nodeIDToNode[node.id] = node;
            // If the depth is not set, the node has no outbound nodes (depth 0).
            if (!(node.id in nodesDepths)) nodesDepths[node.id] = 0;
            let depth = nodesDepths[node.id];
            // Update the depth of the corresponding layer
            const previousDepth = layersDepths[node.outboundLayer.id] == null ? 0 : layersDepths[node.outboundLayer.id];
            /*
              If we've seen this layer before at a higher depth, we should use that
              depth instead of the node depth.  This is necessary for shared layers
              that have inputs at different depth levels in the graph.
            */ depth = Math.max(depth, previousDepth);
            layersDepths[node.outboundLayer.id] = depth;
            layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;
            nodesDepths[node.id] = depth;
            // Update the depth of inbound nodes.
            for(let i1 = 0; i1 < node.inboundLayers.length; i1++){
                const inboundLayer = node.inboundLayers[i1];
                const nodeIndex2 = node.nodeIndices[i1];
                const inboundNode = inboundLayer.inboundNodes[nodeIndex2];
                const previousDepth1 = nodesDepths[inboundNode.id] == null ? 0 : nodesDepths[inboundNode.id];
                nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth1);
                nodeIDToNode[inboundNode.id] = inboundNode;
            }
        }
        // Build a dict {depth: list of nodes with this depth}
        const nodesByDepth = {};
        for(const nodeID in nodesDepths){
            const depth1 = nodesDepths[nodeID];
            if (!(depth1 in nodesByDepth)) nodesByDepth[depth1] = [];
            nodesByDepth[depth1].push(nodeIDToNode[nodeID]);
        }
        // Build a dict {depth: list of layers with this depth}
        const layersByDepth = {};
        for(const layerID in layersDepths){
            const depth2 = layersDepths[layerID];
            if (!(depth2 in layersByDepth)) layersByDepth[depth2] = [];
            layersByDepth[depth2].push(layerIDToLayer[layerID]);
        }
        // Get sorted list of layer depths.
        let depthKeys = Object.keys(layersByDepth).map((x)=>parseInt(x, 10)).sort(_genericUtils.reverseNumberCompare);
        // Set this.layers and this.layersByDepth.
        this.layers = [];
        for (const depth3 of depthKeys){
            const layersForDepth = layersByDepth[depth3];
            // Container.layers needs to have a deterministic order:
            // here we order them by traversal order.
            layersForDepth.sort((a, b)=>{
                const aIndex = layerIndices[a.id];
                const bIndex = layerIndices[b.id];
                if (aIndex < bIndex) return -1;
                if (aIndex > bIndex) return 1;
                return 0;
            });
            for (const layer4 of layersForDepth){
                if (layer4 instanceof Container) this.internalContainerRefs.push(layer4);
                this.layers.push(layer4);
            }
        }
        this.layersByDepth = layersByDepth;
        // Get sorted list of node depths;
        depthKeys = Object.keys(nodesByDepth).map((x)=>parseInt(x, 10)).sort(_genericUtils.reverseNumberCompare);
        // Check that all tensors required are computable.
        // computable_tensors: all tensors in the graph
        // that can be computed from the inputs provided.
        const computableTensors = this.inputs.slice();
        // To provide a better error msg.
        const layersWithCompleteInput = [];
        for (const depth4 of depthKeys)for (const node1 of nodesByDepth[depth4]){
            const layer5 = node1.outboundLayer;
            if (layer5 != null) {
                for (const x3 of node1.inputTensors){
                    if (computableTensors.indexOf(x3) === -1) throw new (0, _errors.RuntimeError)(`Graph disconnected: cannot obtain value for tensor ${x3}` + ` at layer "${layer5.name}". ` + "The following previous layers were accessed without " + `issue: ${layersWithCompleteInput}`);
                }
                for (const x4 of node1.outputTensors)computableTensors.push(x4);
                layersWithCompleteInput.push(layer5.name);
            }
        }
        // Set this.containerNodes and this.nodesByDepth.
        this.nodesByDepth = nodesByDepth;
        // Ensure name unicity, which will be crucial for serialization
        // (since serialized nodes refer to layers by their name).
        const allNames = this.layers.map((x)=>x.name);
        for (const name of allNames){
            const numOccurrences = allNames.filter((x)=>x === name).length;
            if (numOccurrences !== 1) throw new (0, _errors.RuntimeError)(`The name "${name}" is used ${numOccurrences} times ` + "in the model. All layer names should be unique. Layer names: " + JSON.stringify(allNames));
        }
        // Layer parameters.
        // The new container starts with a single inbound node
        // for its inputs, and no outbound nodes.
        // Will be appended to by future calls to apply().
        this.outboundNodes = [];
        // Will be appended to below, and by future calls to apply().
        this.inboundNodes = [];
        // Create the node linking internal inputs to internal outputs.
        // (This call has side effects.)
        // tslint:disable-next-line:no-unused-expression
        new (0, _topology.Node)({
            outboundLayer: this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: this.inputs,
            outputTensors: this.outputs,
            inputMasks: this.inputs.map((x)=>null),
            outputMasks: this.outputs.map((x)=>null),
            inputShapes: this.inputs.map((x)=>x.shape),
            outputShapes: this.outputs.map((x)=>x.shape)
        });
        this.built = true;
        this._refCount = 1; // The ref count of a container always start at 1.
    }
    assertNotDisposed() {
        if (this._refCount === 0) throw new Error(`Container '${this.name}' is already disposed.`);
    }
    /**
     * Attempt to dispose a LayersModel's weights.
     *
     * This method decrease the reference count of the LayersModel object by 1.
     *
     * A LayersModel is reference-counted. Its reference count is incremented by 1
     * when it is first constructed and when it is used as a Layer of another
     * LayersModel.
     *
     * If the reference count of a LayersModel becomes 0, the `dispose` method of
     * all its constituent `Layer`s will be called.
     *
     * Note: If the reference count is greater than 0 after the decrement, the
     * `dispose` method of its constituent `Layer`s will *not* be called.
     *
     * After a LayersModel is disposed, it cannot be used in calls such as
     * 'predict`, `evaluate` or `fit` anymore.
     *
     * @returns A DisposeResult Object with the following fields:
     *   - refCountAfterDispose: The reference count of the LayersModel after this
     *     `dispose()` call.
     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
     *     during this `dispose()` call.
     * @throws {Error} If the layer is not built yet, or if the LayersModel has
     *   already been disposed.
     */ dispose() {
        this.assertNotDisposed();
        const result = {
            refCountAfterDispose: null,
            numDisposedVariables: 0
        };
        if (--this._refCount === 0) {
            for (const layer of this.layers)result.numDisposedVariables += layer.dispose().numDisposedVariables;
            // Call dispose on each internally created container layer again to ensure
            // their refCounts hit zero and their tensors are subsequently deleted.
            for (const container of this.internalContainerRefs)result.numDisposedVariables += container.dispose().numDisposedVariables;
        }
        result.refCountAfterDispose = this._refCount;
        return result;
    }
    get trainable() {
        return this.trainable_;
    }
    set trainable(trainable) {
        this.layers.forEach((layer)=>{
            // tslint:disable-next-line:no-any
            layer._trainableWeights.forEach((w)=>w.trainable = trainable);
        });
        this.trainable_ = trainable;
    }
    get trainableWeights() {
        // Porting Note: This check below is to prevent errors where the
        //   _trainableWeights inherited from the parent class (Layer) gets
        //   inadvertently used.
        if (this._trainableWeights.length > 0) throw new (0, _errors.ValueError)("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
        if (!this.trainable) return [];
        let weights = [];
        for (const layer of this.layers)weights = weights.concat(layer.trainableWeights);
        return weights;
    }
    get nonTrainableWeights() {
        const weights = [];
        for (const layer of this.layers)weights.push(...layer.nonTrainableWeights);
        if (!this.trainable) {
            const trainableWeights = [];
            for (const layer1 of this.layers)trainableWeights.push(...layer1.trainableWeights);
            return trainableWeights.concat(weights);
        }
        return weights;
    }
    get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
    }
    /**
     * Loads all layer weights from a JSON object.
     *
     * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /
     *   TypeScript. The utility script at `scripts/pykeras.py` offers means
     *   to convert them into JSON strings compatible with this method.
     * Porting Note: TensorFlow.js Layers supports only loading by name currently.
     *
     * @param weights A JSON mapping weight names to weight values as nested
     *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight
     *   names to `tf.Tensor` objects.
     * @param strict Require that the provided weights exactly match those
     *   required by the container.  Default: `true`.  Passing `false` means that
     *   extra weights and missing weights will be silently ignored.
     */ loadWeights(weights, strict = true) {
        const nameToWeight = {};
        let totalWeightsCount = 0;
        for (const layer of this.layers)for (const weight of layer.weights){
            if (nameToWeight[weight.originalName] != null) throw new (0, _errors.ValueError)(`Duplicate weight name: ${weight.originalName}`);
            nameToWeight[weight.originalName] = weight;
            totalWeightsCount++;
        }
        const weightValueTuples = [];
        for(const name in weights){
            if (nameToWeight[name] != null) weightValueTuples.push([
                nameToWeight[name],
                weights[name]
            ]);
            else if (strict) throw new (0, _errors.ValueError)(`Provided weight data has no target variable: ${name}`);
            delete nameToWeight[name];
        }
        if (strict) {
            // Check that all weights are set.
            const unsetNames = [];
            for(const name1 in nameToWeight)unsetNames.push(name1);
            if (unsetNames.length > 0) throw new (0, _errors.ValueError)(`${unsetNames.length} of ${totalWeightsCount} weights are not set: ` + `${unsetNames}`);
        }
        (0, _variables.batchSetValue)(weightValueTuples);
    }
    /**
     * Util shared between different serialization methods.
     * @returns LayersModel config with Keras version information added.
     */ updatedConfig() {
        const theConfig = this.getConfig();
        const modelConfig = {};
        modelConfig["className"] = this.getClassName();
        modelConfig["config"] = theConfig;
        modelConfig["kerasVersion"] = `tfjs-layers ${0, _version.version}`;
        // TODO(nielsene): Replace something like K.backend() once
        // possible.
        modelConfig["backend"] = "TensorFlow.js";
        return modelConfig;
    }
    /**
     * Returns a JSON string containing the network configuration.
     *
     * To load a network from a JSON save file, use
     * models.modelFromJSON(jsonString);
     * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras
     * @param returnString Whether the return value should be stringified
     *    (default: `true`).
     * @returns a JSON string if `returnString` (default), or a JSON object if
     *   `!returnString`.
     */ // tslint:disable-next-line:no-any
    toJSON(unused, returnString = true) {
        const modelConfig = (0, _serializationUtils.convertTsToPythonic)(this.updatedConfig());
        return returnString ? JSON.stringify(modelConfig) : modelConfig;
    }
    /**
     * Call the model on new inputs.
     *
     * In this case `call` just reapplies all ops in the graph to the new inputs
     * (e.g. build a new computational graph from the provided inputs).
     *
     * @param inputs A tensor or list of tensors.
     * @param mask A mask or list of masks. A mask can be either a tensor or null
     *   (no mask).
     *
     * @return A tensor if there is a single output, or a list of tensors if there
     *   are more than one outputs.
     */ call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs = _genericUtils.toList(inputs);
            const feedDict = new (0, _executor.FeedDict)();
            for(let i = 0; i < this.inputs.length; ++i)feedDict.add(this.inputs[i], inputs[i]);
            return (0, _executor.execute)(this.outputs, feedDict, kwargs);
        });
    }
    /**
     * Computes an output mask tensor.
     *
     * @param inputs Tensor or list of tensors.
     * @param mask Tensor or list of tensors.
     *
     * @return null or a tensor (or list of tensors, one per output tensor of the
     * layer).
     */ computeMask(inputs, mask) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs = _genericUtils.toList(inputs);
            let masks;
            if (mask == null) masks = _genericUtils.pyListRepeat(null, inputs.length);
            else masks = _genericUtils.toList(mask);
            // TODO(michaelterry): Add support for mask caching.
            return this.runInternalGraph(inputs, masks)[1];
        });
    }
    /**
     * Computes the output shape of the layer.
     *
     * Assumes that the layer will be built to match that input shape provided.
     *
     * @param inputShape A shape (tuple of integers) or a list of shape tuples
     *   (one per output tensor of the layer). Shape tuples can include null for
     *   free dimensions, instead of an integer.
     */ computeOutputShape(inputShape) {
        const inputShapes = _typesUtils.normalizeShapeList(inputShape);
        if (inputShapes.length !== this.inputLayers.length) throw new (0, _errors.ValueError)(`Invalid inputShape argument ${inputShape}: ` + `model has ${this.inputLayers.length} tensor inputs.`);
        // TODO(michaelterry): Add caching
        const layersToOutputShapes = {};
        for(let i = 0; i < inputShapes.length; i++){
            const layer = this.inputLayers[i];
            const inputShape1 = inputShapes[i];
            // It's an input layer: computeOutputShape is identity,
            // and there is only one node and one tensor output.
            const shapeKey = layer.name + "_0_0";
            layersToOutputShapes[shapeKey] = inputShape1;
        }
        const depthKeys = Object.keys(this.nodesByDepth).map((x)=>parseInt(x, 10)).sort(_genericUtils.reverseNumberCompare);
        // Iterate over nodes, by depth level.
        if (depthKeys.length > 1) for (const depth of depthKeys){
            const nodes = this.nodesByDepth[depth];
            for (const node of nodes){
                // This is always a single layer, never a list.
                const layer1 = node.outboundLayer;
                if (this.inputLayers.map((x)=>x.id).indexOf(layer1.id) !== -1) continue;
                // Potentially redundant list, same size of node.inputTensors.
                const inputShapes1 = [];
                for(let j = 0; j < node.inboundLayers.length; j++){
                    const inboundLayer = node.inboundLayers[j];
                    const nodeIndex = node.nodeIndices[j];
                    const tensorIndex = node.tensorIndices[j];
                    const shapeKey1 = `${inboundLayer.name}_${nodeIndex}_${tensorIndex}`;
                    const inputShape2 = layersToOutputShapes[shapeKey1];
                    inputShapes1.push(inputShape2);
                }
                const outputShape = layer1.computeOutputShape(_genericUtils.singletonOrArray(inputShapes1));
                const outputShapes = _typesUtils.normalizeShapeList(outputShape);
                const nodeIndex1 = layer1.inboundNodes.indexOf(node);
                for(let j1 = 0; j1 < outputShapes.length; j1++){
                    const shapeKey2 = `${layer1.name}_${nodeIndex1}_${j1}`;
                    layersToOutputShapes[shapeKey2] = outputShapes[j1];
                }
            }
        }
        // Read final output shapes from layersToOutputShapes.
        const outputShapes1 = [];
        const outputShapeKeys = [];
        for(let i1 = 0; i1 < this.outputLayers.length; i1++){
            const layer2 = this.outputLayers[i1];
            const nodeIndex2 = this.outputLayersNodeIndices[i1];
            const tensorIndex1 = this.outputLayersTensorIndices[i1];
            const shapeKey3 = `${layer2.name}_${nodeIndex2}_${tensorIndex1}`;
            outputShapeKeys.push(shapeKey3);
        }
        for(let i2 = 0; i2 < outputShapeKeys.length; i2++){
            const key = outputShapeKeys[i2];
            _genericUtils.assert(key in layersToOutputShapes);
            outputShapes1.push(layersToOutputShapes[key]);
        }
        // TODO(michaelterry): Update cache
        return _genericUtils.singletonOrArray(outputShapes1);
    }
    /**
     * Computes output tensors for new inputs.
     *
     * Note:
     *   - Expects `inputs` to be a list (potentially with 1 element).
     *
     * @param inputs List of tensors
     * @param masks List of masks (tensors or null).
     * @return Three lists: outputTensors, outputMasks, outputShapes
     */ runInternalGraph(inputs, masks) {
        if (masks == null) masks = _genericUtils.pyListRepeat(null, inputs.length);
        // Dictionary mapping reference tensors to tuples
        // (computed tensor, compute mask)
        // we assume a 1:1 mapping from tensor to mask
        // TODO: raise exception when a `.computeMask()` call
        // does not return a list the same size as `call`
        const tensorMap = {};
        for(let i = 0; i < this.inputs.length; ++i){
            const x = this.inputs[i];
            const y = inputs[i];
            const mask = masks[i];
            tensorMap[x.id] = [
                y,
                mask
            ];
        }
        const depthKeys = Object.keys(this.nodesByDepth).map((x)=>parseInt(x, 10)).sort(_genericUtils.reverseNumberCompare);
        for (const depth of depthKeys){
            const nodes = this.nodesByDepth[depth];
            for (const node of nodes){
                // This is always a single layer, never a list.
                const layer = node.outboundLayer;
                const referenceInputTensors = node.inputTensors;
                const referenceOutputTensors = node.outputTensors;
                // If all previous input tensors are available in tensorMap,
                // then call node.inboundLayer on them.
                // List of tuples [input, mask]:
                const computedData = new Array();
                for (const x1 of referenceInputTensors)if (x1.id in tensorMap) computedData.push(tensorMap[x1.id]);
                if (computedData.length === referenceInputTensors.length) {
                    // TODO(michaelterry): Add K.name_scope here, if we need it.
                    let kwargs = {};
                    let computedTensors;
                    let computedMasks;
                    let outputTensors;
                    let outputMasks;
                    // call layer
                    if (node.callArgs != null) kwargs = node.callArgs;
                    if (computedData.length === 1) {
                        const [computedTensor, computedMask] = computedData[0];
                        if (kwargs["mask"] == null) kwargs["mask"] = computedMask;
                        outputTensors = _genericUtils.toList(layer.call(computedTensor, kwargs));
                        outputMasks = _genericUtils.toList(layer.computeMask(computedTensor, computedMask));
                        computedTensors = [
                            computedTensor
                        ];
                        computedMasks = [
                            computedMask
                        ];
                    } else {
                        computedTensors = computedData.map((x)=>x[0]);
                        computedMasks = computedData.map((x)=>x[1]);
                        if (kwargs["mask"] == null) kwargs["mask"] = computedMasks;
                        outputTensors = _genericUtils.toList(layer.call(computedTensors, kwargs));
                        outputMasks = _genericUtils.toList(layer.computeMask(computedTensors, computedMasks));
                    }
                    if (layer.activityRegularizer) throw new (0, _errors.NotImplementedError)("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
                    // TODO(michaelterry): Add model updates and losses
                    // Update tensor map.
                    for(let i1 = 0; i1 < referenceOutputTensors.length; ++i1){
                        const x2 = referenceOutputTensors[i1];
                        const y1 = outputTensors[i1];
                        const mask1 = outputMasks[i1];
                        tensorMap[x2.id] = [
                            y1,
                            mask1
                        ];
                    }
                }
            }
        }
        const outputTensors1 = [];
        const outputMasks1 = [];
        const outputShapes = [];
        for (const x3 of this.outputs){
            _genericUtils.assert(x3.id in tensorMap, `Could not compute output ${x3.name} : ${x3.id}`);
            const [tensor, mask2] = tensorMap[x3.id];
            outputShapes.push(tensor.shape);
            outputTensors1.push(tensor);
            outputMasks1.push(mask2);
        }
        // TODO(michaelterry): Add support for caches.
        return [
            outputTensors1,
            outputMasks1,
            outputShapes
        ];
    }
    /**
     * Builds a map of internal node keys to node ordering.
     * Used in serializaion a node orderings may change as unused nodes are
     * dropped. Porting Note:  This helper method was pulled out of getConfig to
     * improve readability.
     * @param layers An array of Layers in the model.
     * @returns Map of Node Keys to index order within the layer.
     */ buildNodeConversionMap(layers) {
        const nodeConversionMap = {};
        let keptNodes;
        for (const layer of this.layers){
            keptNodes = layer instanceof Container ? 1 : 0;
            for(let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++){
                const nodeKey = Container.nodeKey(layer, originalNodeIndex);
                if (this.containerNodes.has(nodeKey)) {
                    // i.e. we mark it to be saved
                    nodeConversionMap[nodeKey] = keptNodes;
                    keptNodes += 1;
                }
            }
        }
        return nodeConversionMap;
    }
    /**
     * Retrieves a layer based on either its name (unique) or index.
     *
     * Indices are based on order of horizontal graph traversal (bottom-up).
     *
     * If both `name` and `index` are specified, `index` takes precedence.
     *
     * @param name Name of layer.
     * @param index Index of layer.
     * @returns A Layer instance.
     * @throws ValueError: In case of invalid layer name or index.
     */ /**
     * @doc {
     *    heading: 'Layers',
     *    subheading: 'Classes',
     *    namespace: 'layers',
     *    subclasses: ['LayersModel']
     * }
     */ getLayer(name, index) {
        if (index != null) {
            if (this.layers.length <= index) throw new (0, _errors.ValueError)(`Was asked to retrieve layer at index ${index}, but model only ` + `has ${this.layers.length} layer(s).`);
            else return this.layers[index];
        } else {
            if (name == null) throw new (0, _errors.ValueError)("Provide either a layer name or layer index");
        }
        for (const layer of this.layers){
            if (layer.name === name) return layer;
        }
        throw new (0, _errors.ValueError)(`No such layer: ${name}`);
    }
    /**
     * Retrieves the Container's current loss values.
     *
     * Used for regularizers during training.
     */ calculateLosses() {
        // Porting Node: This is an augmentation to Container.loss in PyKeras.
        //   In PyKeras, Container.loss returns symbolic tensors. Here a concrete
        //   Tensor (specifically Scalar) values are returned. This is due to the
        //   imperative backend.
        return (0, _tfjsCore.tidy)(()=>{
            const losses = [];
            for (const layer of this.layers)for(let nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex){
                const nodeKey = Container.nodeKey(layer, nodeIndex);
                if (this.containerNodes.has(nodeKey)) losses.push(...layer.calculateLosses());
            }
            // TODO(cais): Add any unconditional model-level losses?
            return losses;
        });
    }
    getConfig() {
        const config = {
            name: this.name
        };
        // Build a map from layer unique name (self._node_key)
        // to the index of the nodes that are saved in the config.
        // Only nodes in container_nodes are saved.
        const nodeConversionMap = this.buildNodeConversionMap(this.layers);
        // Serialize and save the layers in layerConfigs
        const layerConfigs = [];
        for (const layer of this.layers){
            const layerClassName = layer.getClassName();
            const layerConfig = layer.getConfig();
            const filteredInboundNodes = [];
            for(let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++){
                const node = layer.inboundNodes[originalNodeIndex];
                const nodeKey = Container.nodeKey(layer, originalNodeIndex);
                let kwargs = {};
                if (this.containerNodes.has(nodeKey)) {
                    // The node is relevant to the model:
                    // add to filteredInboundNodes.
                    if (node.callArgs) try {
                        JSON.stringify(node.callArgs);
                        kwargs = node.callArgs;
                    } catch (err) {
                        console.warn(`Layer ${layer.name} was passed ` + `non-serializable keyword arguments: ` + `${node.callArgs}. They will not be included ` + `in the serialized model (and thus will be ` + `missing at deserialization time).`);
                        kwargs = {};
                    }
                    if (node.inboundLayers.length > 0) {
                        const nodeData = [];
                        for(let i = 0; i < node.inboundLayers.length; i++){
                            const inboundLayer = node.inboundLayers[i];
                            const nodeIndex = node.nodeIndices[i];
                            const tensorIndex = node.tensorIndices[i];
                            const nodeKey1 = Container.nodeKey(inboundLayer, nodeIndex);
                            let newNodeIndex = nodeConversionMap[nodeKey1];
                            if (newNodeIndex == null) newNodeIndex = 0;
                            nodeData.push([
                                inboundLayer.name,
                                newNodeIndex,
                                tensorIndex,
                                kwargs
                            ]);
                        }
                        filteredInboundNodes.push(nodeData);
                    }
                }
            }
            const dict = {};
            dict["name"] = layer.name;
            dict["className"] = layerClassName;
            dict["config"] = layerConfig;
            dict["inboundNodes"] = filteredInboundNodes;
            layerConfigs.push(dict);
        }
        config["layers"] = layerConfigs;
        // Gather info about inputs and outputs
        const modelInputs = [];
        for(let i1 = 0; i1 < this.inputLayers.length; i1++){
            const layer1 = this.inputLayers[i1];
            const nodeIndex1 = this.inputLayersNodeIndices[i1];
            const nodeKey2 = Container.nodeKey(layer1, nodeIndex1);
            if (!this.containerNodes.has(nodeKey2)) continue;
            let newNodeIndex1 = nodeConversionMap[nodeKey2];
            if (newNodeIndex1 === null || newNodeIndex1 === undefined) newNodeIndex1 = 0;
            const tensorIndex1 = this.inputLayersTensorIndices[i1];
            modelInputs.push([
                layer1.name,
                newNodeIndex1,
                tensorIndex1
            ]);
        }
        config["inputLayers"] = modelInputs;
        const modelOutputs = [];
        for(let i2 = 0; i2 < this.outputLayers.length; i2++){
            const layer2 = this.outputLayers[i2];
            const nodeIndex2 = this.outputLayersNodeIndices[i2];
            const nodeKey3 = Container.nodeKey(layer2, nodeIndex2);
            if (!this.containerNodes.has(nodeKey3)) continue;
            let newNodeIndex2 = nodeConversionMap[nodeKey3];
            if (newNodeIndex2 === null || newNodeIndex2 === undefined) newNodeIndex2 = 0;
            const tensorIndex2 = this.outputLayersTensorIndices[i2];
            modelOutputs.push([
                layer2.name,
                newNodeIndex2,
                tensorIndex2
            ]);
        }
        config["outputLayers"] = modelOutputs;
        return config;
    }
    /**
     * Instantiates a LayersModel from its config (output of `get_config()`).
     * @param cls the class to create
     * @param config LayersModel config dictionary.
     * @param customObjects An optional dictionary of custom objects.
     * @param fastWeightInit Optional flag to use fast weight initialization
     *   during deserialization. This is applicable to cases in which
     *   the initialization will be immediately overwritten by loaded weight
     *   values. Default: `false`.
     * @returns A LayersModel instance.
     * @throws ValueError: In case of improperly formatted config dict.
     */ /** @nocollapse */ static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {
        // Layer instances created during
        // the graph reconstruction process
        const createdLayers = {};
        // Dictionary mapping layer instances to
        // node data that specifies a layer call.
        // It acts as a queue that maintains any unprocessed
        // layer call until it becomes possible to process it
        // (i.e. until the input tensors to the call all exist).
        const unprocessedNodes = {};
        function addUnprocessedNode(layer, nodeData) {
            if (!(layer.name in unprocessedNodes)) unprocessedNodes[layer.name] = [
                nodeData
            ];
            else unprocessedNodes[layer.name].push(nodeData);
        }
        function processNode(layer, nodeData) {
            const inputTensors = [];
            let kwargs;
            for (const inputData of nodeData){
                const inboundLayerName = inputData[0];
                const inboundNodeIndex = inputData[1];
                const inboundTensorIndex = inputData[2];
                kwargs = inputData[3] == null ? {} : inputData[3];
                if (!(inboundLayerName in createdLayers)) {
                    addUnprocessedNode(layer, nodeData);
                    return;
                }
                const inboundLayer = createdLayers[inboundLayerName];
                if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {
                    addUnprocessedNode(layer, nodeData);
                    return;
                }
                const inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];
                inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);
            }
            // Call layer on its inputs, thus creating the node
            // and building the layer if needed.
            // Note: This has Eager vs Graph Implications.
            if (inputTensors.length > 0) layer.apply(_genericUtils.singletonOrArray(inputTensors), kwargs); // was ** kwargs
        }
        /**
         * Deserialize a layer, then call it on appropriate inputs.
         * @param layerData: layer config dict.
         * @throws ValueError: In case of improperly formatted `layer_data`
         * dict.
         */ function processLayer(layerData) {
            const layerName = layerData["name"];
            // Instantiate layer.
            const layer = (0, _serialization.deserialize)(layerData, config["customObjects"] != null ? config["customObjects"] : {});
            layer.setFastWeightInitDuringBuild(fastWeightInit);
            createdLayers[layerName] = layer;
            // Gather layer inputs.
            const inboundNodesData = layerData["inboundNodes"];
            inboundNodesData.forEach((nodeData)=>{
                if (!(nodeData instanceof Array)) throw new (0, _errors.ValueError)(`Corrupted configuration, expected array for nodeData: ${nodeData}`);
                // We don't process nodes (i.e. make layer calls)
                // on the fly because the inbound node may not yet exist,
                // in case of layer shared at different topological depths
                // (e.g.a model such as A(B(A(B(x)))))
                addUnprocessedNode(layer, nodeData);
            });
        }
        // First, we create all layers and enqueue nodes to be processed.
        const name = config["name"];
        const layersFromConfig = config["layers"];
        for (const layerData of layersFromConfig)processLayer(layerData);
        // Then we process nodes in order of layer depth.
        // Nodes that cannot yet be processed(if the inbound node
        // does not yet exist) are re - enqueued, and the process
        // is repeated until all nodes are processed.
        while(!_genericUtils.isObjectEmpty(unprocessedNodes))for (const layerData1 of layersFromConfig){
            const layer = createdLayers[layerData1["name"]];
            if (layer.name in unprocessedNodes) {
                const currentUnprocessedNodesForLayer = unprocessedNodes[layer.name];
                delete unprocessedNodes[layer.name];
                for (const nodeData of currentUnprocessedNodesForLayer)processNode(layer, nodeData);
            }
        }
        const inputTensors = [];
        const outputTensors = [];
        const inputLayersFromConfig = config["inputLayers"];
        for (const layerData2 of inputLayersFromConfig){
            const layerName = layerData2[0];
            const nodeIndex = layerData2[1];
            const tensorIndex = layerData2[2];
            _genericUtils.assert(layerName in createdLayers);
            const layer1 = createdLayers[layerName];
            const layerOutputTensors = layer1.inboundNodes[nodeIndex].outputTensors;
            inputTensors.push(layerOutputTensors[tensorIndex]);
        }
        const outputLayersFromConfig = config["outputLayers"];
        for (const layerData3 of outputLayersFromConfig){
            const layerName1 = layerData3[0];
            const nodeIndex1 = layerData3[1];
            const tensorIndex1 = layerData3[2];
            _genericUtils.assert(layerName1 in createdLayers);
            const layer2 = createdLayers[layerName1];
            const layerOutputTensors1 = layer2.inboundNodes[nodeIndex1].outputTensors;
            outputTensors.push(layerOutputTensors1[tensorIndex1]);
        }
        return new cls({
            inputs: inputTensors,
            outputs: outputTensors,
            name
        });
    }
    /**
     * Determine whether the container is stateful.
     *
     * Porting Note: this is the equivalent of the stateful @property of
     *   the Container class in PyKeras.
     */ get stateful() {
        // Porting Note: This check is to prevent inadvertent setting of the
        //   _stateful property of the Container instance.
        if (this._stateful) throw new (0, _errors.ValueError)("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
        for (const layer of this.layers){
            if (layer.stateful) return true;
        }
        return false;
    }
    /**
     * Reset the state of all stateful constituent layers (if any).
     *
     * Examples of stateful layers include RNN layers whose `stateful` property
     * is set as `true`.
     */ resetStates() {
        (0, _tfjsCore.tidy)(()=>{
            this.layers.forEach((layer)=>{
                // tslint:disable:no-any
                if (layer.stateful) layer.resetStates();
            // tslint:enable:no-any
            });
        });
    }
}

},{"@tensorflow/tfjs-core":"2votT","../backend/state":"6G8m0","../errors":"kA7ff","../layers/serialization":"9miVs","../utils/generic_utils":"2cErd","../utils/serialization_utils":"lKIeB","../utils/types_utils":"70VAF","../variables":"aWvBF","../version":"718Pb","./executor":"jgqvu","./input_layer":"dMLUr","./topology":"2OPnm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jgqvu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * FeedDict: A mapping from unique SymbolicTensors to feed values for them.
 * A feed value is a concrete value represented as an `Tensor`.
 */ parcelHelpers.export(exports, "FeedDict", ()=>FeedDict);
/**
 * Execute a SymbolicTensor by using concrete feed values.
 *
 * A `SymbolicTensor` object is a node in a computation graph of TF.js
 * Layers. The object is backed by a source layer and input
 * `SymbolicTensor`s to the source layer. This method evaluates
 * the `call()` method of the source layer, using concrete values of the
 * inputs obtained from either
 * * `feedDict`, if the input key exists in `feedDict`, or else,
 * * a recursive call to `execute()` itself.
 *
 * @param x: The `SymbolicTensor` to execute.
 * @param feedDict: The feed values, as base condition of the recursion.
 *   execution.
 * @param kwargs: Optional keyword arguments.
 * @param probe: A probe object (of interface `ExecutionProbe`) used for
 *   testing memory footprint of `execute` calls.
 * @returns Result of the execution.
 * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s
 *   encountered during the execution lacks a feed value in `feedDict`.
 */ parcelHelpers.export(exports, "execute", ()=>execute);
/**
 * Sort the `SymbolicTensor`s topologically, for a single fetch.
 *
 * This helper function processes the upstream SymbolicTensors of a single
 * fetch.
 *
 * @param fetch The single fetch requested.
 * @param feedDict The dictionary of fed values.
 * @returns sorted: Topologically-sorted array of SymbolicTensors.
 *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.
 */ parcelHelpers.export(exports, "getTopologicalSortAndRecipientCountsForOneFetch", ()=>getTopologicalSortAndRecipientCountsForOneFetch);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Executor: Evaluates SymbolicTensor based on feeds.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _errors = require("../errors");
var _genericUtils = require("../utils/generic_utils");
var _inputLayer = require("./input_layer");
var _topology = require("./topology");
/**
 * Helper function to check the dtype and shape compatibility of a feed value.
 */ function assertFeedCompatibility(key, val) {
    // Check dtype compatibility.
    if (key.dtype == null || key.dtype === val.dtype) //  a.  If types match, return val tensor as is.
    return val;
    try {
        //  b. Attempt to convert to expected type.
        return (0, _tfjsCore.cast)(val, key.dtype);
    } catch (err) {
        //  c. If conversion fails, return helpful error.
        throw new (0, _errors.ValueError)(`The dtype of the feed (${val.dtype}) can not be cast to the dtype ` + `of the key '${key.name}' (${key.dtype}).`);
    }
}
class FeedDict {
    /**
     * Constructor, optionally does copy-construction.
     * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case
     *   copy-construction will be performed.
     */ constructor(feeds){
        this.id2Value = {};
        this.id2Mask = {};
        this.name2Id = {};
        if (feeds instanceof FeedDict) for(const id in feeds.id2Value){
            this.id2Value[id] = feeds.id2Value[id];
            if (id in feeds.id2Mask) this.id2Mask[id] = feeds.id2Mask[id];
        }
        else {
            if (feeds == null) return;
            for (const feed of feeds)this.add(feed.key, feed.value);
        }
    }
    /**
     * Add a key-value pair to the FeedDict.
     *
     * @param key The key of the feed.
     * @param value The value of the tensor feed.
     * @param mask The value of the mask feed (optional).
     * @returns This `FeedDict`.
     * @throws ValueError: If the key `SymbolicTensor` already exists in the
     *   `FeedDict`.
     */ add(key, value, mask) {
        if (this.id2Value[key.id] == null) {
            this.id2Value[key.id] = assertFeedCompatibility(key, value);
            this.name2Id[key.name] = key.id;
            if (mask != null) this.id2Mask[key.id] = mask;
        } else throw new (0, _errors.ValueError)(`Duplicate key: name=${key.name}, id=${key.id}`);
        return this;
    }
    /**
     * Add a Feed to the FeedDict.
     * @param feed The new `Feed` to add.
     * @returns This `FeedDict`.
     */ addFeed(feed) {
        this.add(feed.key, feed.value);
    }
    /**
     * Probe whether a key already exists in the FeedDict.
     * @param key
     */ hasKey(key) {
        return this.id2Value[key.id] != null;
    }
    /**
     * Get all the SymbolicTensor available in this FeedDict.
     */ names() {
        return Object.keys(this.name2Id);
    }
    /**
     * Get the feed value for given key.
     * @param key The SymbolicTensor, or its name (as a string), of which the
     *     value is sought.
     * @returns If `key` exists, the corresponding feed value.
     * @throws ValueError: If `key` does not exist in this `FeedDict`.
     */ getValue(key) {
        if (key instanceof (0, _topology.SymbolicTensor)) {
            if (this.id2Value[key.id] == null) throw new (0, _errors.ValueError)(`Nonexistent key: ${key.name}`);
            else return this.id2Value[key.id];
        } else {
            const id = this.name2Id[key];
            if (id == null) throw new (0, _errors.ValueError)(`Feed dict has no SymbolicTensor name: ${key}`);
            return this.id2Value[id];
        }
    }
    /**
     * Get the feed mask for given key.
     * @param key The SymbolicTensor, or its name (as a string), of which the
     *     value is sought.
     * @returns If `key` exists, the corresponding feed mask.
     * @throws ValueError: If `key` does not exist in this `FeedDict`.
     */ getMask(key) {
        if (key instanceof (0, _topology.SymbolicTensor)) {
            if (this.id2Value[key.id] == null) throw new (0, _errors.ValueError)(`Nonexistent key: ${key.name}`);
            else return this.id2Mask[key.id];
        } else {
            const id = this.name2Id[key];
            if (id == null) throw new (0, _errors.ValueError)(`Feed dict has no SymbolicTensor name: ${key}`);
            return this.id2Mask[id];
        }
    }
    /** Dispose all mask Tensors held by this object. */ disposeMasks() {
        if (this.id2Mask != null) (0, _tfjsCore.dispose)(this.id2Mask);
    }
}
// Cache for topologically sorted SymbolicTensors for given execution
// targets (i.e., fetches).
const cachedSorted = {};
// Cache for recipient count maps for given execution targets (i.e., fetches).
const cachedRecipientCounts = {};
function execute(fetches, feedDict, kwargs, probe) {
    const training = kwargs == null ? false : kwargs["training"];
    const arrayFetches = Array.isArray(fetches);
    const fetchArray = arrayFetches ? fetches : [
        fetches
    ];
    const outputNames = fetchArray.map((t)=>t.name);
    const finalOutputs = [];
    const feedNames = feedDict.names();
    for (const outputName of outputNames)if (feedNames.indexOf(outputName) !== -1) finalOutputs.push(feedDict.getValue(outputName));
    else finalOutputs.push(null);
    if (probe != null) {
        // For optional probing of memory footprint during execution.
        probe.maxNumTensors = -Infinity;
        probe.minNumTensors = Infinity;
    }
    // Check cache.
    const fetchAndFeedKey = outputNames.join(",") + "|" + feedDict.names().join(",");
    let sorted;
    let recipientCounts;
    if (cachedSorted[fetchAndFeedKey] == null) {
        // Cache doesn't contain the desired combination of fetches. Compute
        // topological sort for the combination for the first time.
        const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);
        sorted = out.sorted;
        recipientCounts = out.recipientCounts;
        // Store results in cache for future use.
        cachedSorted[fetchAndFeedKey] = sorted;
        cachedRecipientCounts[fetchAndFeedKey] = recipientCounts;
    }
    sorted = cachedSorted[fetchAndFeedKey];
    recipientCounts = {};
    if (!training) Object.assign(recipientCounts, cachedRecipientCounts[fetchAndFeedKey]);
    const internalFeedDict = new FeedDict(feedDict);
    // Start iterative execution on the topologically-sorted SymbolicTensors.
    for(let i = 0; i < sorted.length; ++i){
        if (probe != null) {
            // For optional probing of memory usage during execution.
            const numTensors = (0, _tfjsCore.memory)().numTensors;
            if (numTensors > probe.maxNumTensors) probe.maxNumTensors = numTensors;
            if (numTensors < probe.minNumTensors) probe.minNumTensors = numTensors;
        }
        const symbolic = sorted[i];
        const srcLayer = symbolic.sourceLayer;
        if (srcLayer instanceof (0, _inputLayer.InputLayer)) continue;
        const inputValues = [];
        const inputMasks = [];
        const tensorsToDispose = [];
        let maskExists = false;
        for (const input of symbolic.inputs){
            const value = internalFeedDict.getValue(input);
            const mask = internalFeedDict.getMask(input);
            inputValues.push(value);
            inputMasks.push(mask);
            if (mask != null) maskExists = true;
            if (!training) {
                recipientCounts[input.name]--;
                if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) && outputNames.indexOf(input.name) === -1 && !value.isDisposed && input.sourceLayer.stateful !== true) tensorsToDispose.push(value);
            }
        }
        if (maskExists) {
            kwargs = kwargs || {};
            kwargs["mask"] = inputMasks[0];
        }
        const outputTensors = (0, _genericUtils.toList)(srcLayer.apply(inputValues, kwargs));
        let outputMask = null;
        if (srcLayer.supportsMasking) outputMask = srcLayer.computeMask(inputValues, inputMasks);
        const layerOutputs = getNodeOutputs(symbolic);
        const outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [
            layerOutputs
        ];
        for(let i1 = 0; i1 < outputSymbolicTensors.length; ++i1){
            if (!internalFeedDict.hasKey(outputSymbolicTensors[i1])) internalFeedDict.add(outputSymbolicTensors[i1], outputTensors[i1], Array.isArray(outputMask) ? outputMask[0] : outputMask);
            const index = outputNames.indexOf(outputSymbolicTensors[i1].name);
            if (index !== -1) finalOutputs[index] = outputTensors[i1];
        }
        if (!training) // Clean up Tensors that are no longer needed.
        (0, _tfjsCore.dispose)(tensorsToDispose);
    }
    // NOTE(cais): Unlike intermediate tensors, we don't discard mask
    // tensors as we go, because these tensors are sometimes passed over a
    // series of mutliple layers, i.e., not obeying the immediate input
    // relations in the graph. If this becomes a memory-usage concern,
    // we can improve this in the future.
    internalFeedDict.disposeMasks();
    return arrayFetches ? finalOutputs : finalOutputs[0];
}
/**
 * Sort the `SymbolicTensor`s topologically, for an array of fetches.
 *
 * This function calls getTopologicalSortAndRecipientCountsForOneFetch and
 * merges their results.
 *
 * @param fetch The array of fetches requested. Must be a non-empty array.
 * @param feedDict The dictionary of fed values.
 * @returns sorted: Topologically-sorted array of SymbolicTensors.
 *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.
 */ function getTopologicalSortAndRecipientCounts(fetches, feedDict) {
    (0, _tfjsCore.util).assert(fetches != null && fetches.length > 0, ()=>`Expected at least one fetch, got none`);
    let finalSorted = [];
    let finalRecipientMap = {};
    if (fetches.length === 1) {
        // Special-casing 1 fetch for efficiency.
        const out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);
        finalSorted = out.sorted;
        finalRecipientMap = out.recipientMap;
    } else {
        const visited = new Set();
        for (const fetch of fetches){
            const { sorted , recipientMap  } = getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);
            // Merge sorted SymbolicTensor Arrays.
            for (const symbolicTensor of sorted)if (!visited.has(symbolicTensor.name)) {
                finalSorted.push(symbolicTensor);
                visited.add(symbolicTensor.name);
            }
            // Merge recipient maps.
            for(const name in recipientMap){
                if (finalRecipientMap[name] == null) finalRecipientMap[name] = new Set();
                recipientMap[name].forEach((recipient)=>finalRecipientMap[name].add(recipient));
            }
        }
    }
    return {
        sorted: finalSorted,
        recipientCounts: recipientMap2Counts(finalRecipientMap)
    };
}
function recipientMap2Counts(recipientMap) {
    const recipientCounts = {};
    for(const name in recipientMap)recipientCounts[name] = recipientMap[name].size;
    return recipientCounts;
}
function getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict) {
    const visited = new Set();
    const sorted = [];
    const recipientMap = {};
    // Put keys of the feedDict into visited first, so they don't have to be
    // walked. This is needed in case where there are feeds for intermediate
    // SymbolicTensors of the graph.
    for (const key of feedDict.names())visited.add(key);
    const stack = [];
    const marks = [];
    // Initial population of stack and marks.
    stack.push(fetch);
    while(stack.length > 0){
        const top = stack[stack.length - 1];
        if (visited.has(top.name)) {
            stack.pop();
            continue;
        }
        const topIsMarked = marks[marks.length - 1] === stack.length - 1;
        if (top.inputs.length === 0 || topIsMarked) {
            // Input SymbolicTensor or all children have been visited.
            stack.pop();
            sorted.push(top);
            visited.add(top.name);
            if (topIsMarked) marks.pop();
        } else {
            // A non-input SymbolicTensor whose upstream SymbolicTensors haven't
            // been visited yet. Push them onto the stack.
            marks.push(stack.length - 1);
            for (const input of top.inputs){
                // Increment the recipient count. Note that this needs to happen
                // regardless of whether the SymbolicTensor has been visited before.
                if (recipientMap[input.name] == null) recipientMap[input.name] = new Set();
                recipientMap[input.name].add(top.name);
                if (visited.has(input.name)) continue; // Avoid repeated visits to the same SymbolicTensor.
                stack.push(input);
            }
        }
    }
    return {
        sorted,
        recipientMap
    };
}
/**
 * Get the symbolic output tensors of the node to which a given fetch belongs.
 * @param fetch The fetched symbolic tensor.
 * @returns The Array of symbolic tensors output by the node to which `fetch`
 *   belongs.
 */ function getNodeOutputs(fetch) {
    let layerOutputs;
    if (fetch.sourceLayer.inboundNodes.length === 1) layerOutputs = fetch.sourceLayer.output;
    else {
        let nodeIndex = null;
        for(let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i){
            for (const outputTensor of fetch.sourceLayer.inboundNodes[i].outputTensors)if (outputTensor.id === fetch.id) {
                nodeIndex = i;
                break;
            }
        }
        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);
    }
    return layerOutputs;
}

},{"@tensorflow/tfjs-core":"2votT","../errors":"kA7ff","../utils/generic_utils":"2cErd","./input_layer":"dMLUr","./topology":"2OPnm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2CJJw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fitDataset", ()=>fitDataset);
parcelHelpers.export(exports, "evaluateDataset", ()=>evaluateDataset);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Interfaces and methods for training models using TensorFlow.js datasets.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _baseCallbacks = require("../base_callbacks");
var _errors = require("../errors");
var _logs = require("../logs");
var _genericUtils = require("../utils/generic_utils");
var _trainingUtils = require("./training_utils");
// Default batch size used during tensor-based validation.
const DEFAULT_VALIDATION_BATCH_SIZE = 32;
/**
 * Standardize the output of a dataset iterator for use by
 * LayersModel.fitDataset().
 *
 * @param model: A `tf.LayersModel` object.
 * @param iteratorOut The output of a dataset iterator. It is required to be
 *   an object of the form `{xs: TensorOrArrayOrMap, ys:
 * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,
 * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.
 * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s
 *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided
 *   as a map, the order in the resulting array is taken from the `inputNames`
 *   and `outputNames` of the model.
 */ function standardizeDataIteratorOutput(// Type `model` as `any` here to avoid circular dependency w/
// training.ts.
// tslint:disable-next-line:no-any
model, iteratorOut) {
    let xs;
    let ys;
    const iteratorOutObj = iteratorOut;
    xs = iteratorOutObj["xs"];
    ys = iteratorOutObj["ys"];
    _tfjsCore.util.assert(xs != null && ys != null, ()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates " + `${iteratorOut}`);
    const flattenedXs = flattenTensorOrArrayOrMap("input", model.inputNames, xs);
    const flattenedYs = flattenTensorOrArrayOrMap("output", model.outputNames, ys);
    const batchSize = flattenedXs[0].shape[0];
    _tfjsCore.util.assert(flattenedXs.length === model.inputs.length, ()=>`LayersModel has ${model.inputs.length} inputs, but the dataset ` + `provides ${flattenedXs.length} inputs.  (Expected input keys: ` + `${JSON.stringify(model.inputNames)})`);
    _tfjsCore.util.assert(flattenedYs.length === model.outputs.length, ()=>`LayersModel has ${model.outputs.length} outputs, but the dataset ` + `provides ${flattenedYs.length} outputs.  (Expected output keys: ` + `${JSON.stringify(model.outputNames)})`);
    for(let xIndex = 0; xIndex < flattenedXs.length; xIndex++)_tfjsCore.util.assert(flattenedXs[xIndex].shape[0] === batchSize, ()=>`Batch size mismatch: input ` + `${model.inputNames[xIndex]} has ${flattenedXs[xIndex].shape[0]}; ` + `expected  ${batchSize} based on input ${model.inputNames[0]}.`);
    for(let yIndex = 0; yIndex < flattenedYs.length; yIndex++)_tfjsCore.util.assert(flattenedYs[yIndex].shape[0] === batchSize, ()=>`Batch size mismatch: output ` + `${model.outputNames[yIndex]} has ${flattenedYs[yIndex].shape[0]}; ` + `expected  ${batchSize} based on input ${model.inputNames[0]}.`);
    return {
        xs: flattenedXs,
        ys: flattenedYs
    };
}
function flattenTensorOrArrayOrMap(inputOrOutput, names, values) {
    if (values instanceof _tfjsCore.Tensor) return [
        values
    ];
    else if (Array.isArray(values)) {
        _tfjsCore.util.assert(values.length === names.length, ()=>`Received an array of ${values.length} Tensors, but expected ${names.length} to match the ${inputOrOutput} keys ${names}.`);
        return values;
    } else {
        const result = [];
        // Check that all the required keys are available.
        for (const name of names){
            if (values[name] == null) throw new (0, _errors.ValueError)(`The feature data generated by the dataset lacks the required ` + `${inputOrOutput} key '${name}'.`);
            result.push(values[name]);
        }
        return result;
    }
}
function standardizeTensorValidationData(data) {
    if (data.length === 3) throw new (0, _errors.NotImplementedError)("Validation with sample weights is not implemented yet.");
    return {
        xs: data[0],
        ys: data[1]
    };
}
async function fitDataset(// Type `model` as `any` here to avoid circular dependency w/
// training.ts.
// tslint:disable-next-line:no-any
model, dataset, args) {
    const hasBatchesPerEpoch = args.batchesPerEpoch != null;
    _tfjsCore.util.assert(model.optimizer != null, ()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).");
    _tfjsCore.util.assert(args != null, ()=>`For fitDataset(), the 2nd argument (config) is required, ` + `but it is not provided in this call.`);
    _tfjsCore.util.assert(args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs), ()=>`For fitDataset(), config.epochs is expected to be a positive ` + `integer, but got ${args.epochs}`);
    _tfjsCore.util.assert(!hasBatchesPerEpoch || args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch), ()=>`For fitDataset(), config.batchesPerEpoch is expected to be a ` + `positive integer if specified, but got ${args.batchesPerEpoch}`);
    _tfjsCore.util.assert(// tslint:disable-next-line:no-any
    args["validationSplit"] == null, ()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.");
    if (model.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
    model.isTraining = true;
    try {
        const doValidation = args.validationData != null;
        let valXs;
        let valYs;
        if (doValidation) {
            if (isDatasetObject(args.validationData)) _tfjsCore.util.assert(args.validationBatches == null || args.validationBatches > 0 && Number.isInteger(args.validationBatches), ()=>`For fitDataset() with dataset-based validation, ` + `config.validationBatches is expected not to be provided, ` + `or to be a positive integer, ` + `but got ${args.validationBatches}`);
            else {
                const validationData = standardizeTensorValidationData(args.validationData);
                valXs = validationData.xs;
                valYs = validationData.ys;
            }
        }
        const trainFunction = model.makeTrainFunction();
        const outLabels = model.getDedupedMetricsNames();
        let callbackMetrics;
        if (doValidation) callbackMetrics = outLabels.slice().concat(outLabels.map((n)=>"val_" + n));
        else callbackMetrics = outLabels.slice();
        const callbacks = (0, _baseCallbacks.standardizeCallbacks)(args.callbacks, args.yieldEvery);
        const verbose = args.verbose == null ? 1 : args.verbose;
        const { callbackList , history  } = (0, _baseCallbacks.configureCallbacks)(callbacks, verbose, args.epochs, null, null, getStepsPerEpoch(dataset, args), null, doValidation, callbackMetrics);
        callbackList.setModel(model);
        model.history = history;
        await callbackList.onTrainBegin();
        model.stopTraining_ = false;
        let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;
        let dataIterator = await dataset.iterator();
        while(epoch < args.epochs){
            const epochLogs = {};
            await callbackList.onEpochBegin(epoch);
            let stepsDone = 0;
            let batchIndex = 0;
            if (!hasBatchesPerEpoch) dataIterator = await dataset.iterator();
            while(hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true){
                const iteratorOut = await dataIterator.next();
                // If `batchesPerEpoch` is specified, the dataset should not be
                // exhausted until all epoches are done.
                if (hasBatchesPerEpoch && iteratorOut.done) {
                    console.warn("You provided `batchesPerEpoch` as " + `${args.batchesPerEpoch}, ` + "but your dataset iterator ran out of data after " + `${stepsDone} batches; ` + "interrupting training. Make sure that your " + "dataset can generate at least `batchesPerEpoch * epochs` " + "batches (in this case, " + `${args.batchesPerEpoch * args.epochs} batches). ` + "You may need to use the repeat() function when building " + "your dataset.");
                    break;
                }
                if (iteratorOut.value != null) {
                    const { xs , ys  } = standardizeDataIteratorOutput(model, iteratorOut.value);
                    const batchLogs = {};
                    batchLogs["batch"] = batchIndex;
                    batchLogs["size"] = xs[0].shape[0];
                    await callbackList.onBatchBegin(batchIndex, batchLogs);
                    const sampleWeights = [];
                    if (args.classWeight != null) {
                        const standardClassWeights = (0, _trainingUtils.standardizeClassWeights)(args.classWeight, model.outputNames);
                        for(let i = 0; i < standardClassWeights.length; ++i)sampleWeights.push(await (0, _trainingUtils.standardizeWeights)(ys[i], null, standardClassWeights[i]));
                    }
                    // Train on batch.
                    const ins = xs.concat(ys).concat(sampleWeights);
                    const outs = trainFunction(ins);
                    _tfjsCore.dispose(ins);
                    for(let i1 = 0; i1 < outLabels.length; ++i1){
                        const label = outLabels[i1];
                        const out = outs[i1];
                        batchLogs[label] = out;
                        _tfjsCore.keep(out);
                    }
                    await callbackList.onBatchEnd(batchIndex, batchLogs);
                    (0, _logs.disposeTensorsInLogs)(batchLogs);
                    batchIndex++;
                    stepsDone++;
                }
                if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch : iteratorOut.done) {
                    // Epoch finished. Perform validation.
                    if (doValidation) {
                        let valOuts;
                        if (isDatasetObject(args.validationData)) valOuts = (0, _genericUtils.toList)(await model.evaluateDataset(args.validationData, {
                            batches: args.validationBatches
                        }));
                        else valOuts = (0, _genericUtils.toList)(model.evaluate(valXs, valYs, {
                            batchSize: args.validationBatchSize == null ? DEFAULT_VALIDATION_BATCH_SIZE : args.validationBatchSize,
                            verbose: 0
                        }));
                        for(let i2 = 0; i2 < model.metricsNames.length; ++i2)epochLogs[`val_${model.metricsNames[i2]}`] = valOuts[i2];
                    }
                    break;
                }
                if (model.stopTraining_) break;
            }
            await callbackList.onEpochEnd(epoch, epochLogs);
            epoch++;
            if (model.stopTraining_) break;
        }
        await callbackList.onTrainEnd();
        await model.history.syncData();
        return model.history;
    } finally{
        model.isTraining = false;
    }
}
/** Helper function that determines number of steps (batches) per epoch. */ function getStepsPerEpoch(dataset, args) {
    // Attempt to determine # of batches in an epoch.
    let stepsPerEpoch = null;
    if (args.batchesPerEpoch != null) stepsPerEpoch = args.batchesPerEpoch;
    else if (Number.isFinite(dataset.size)) stepsPerEpoch = dataset.size;
    return stepsPerEpoch;
}
// Check if provided object is a Dataset object by checking it's .iterator
// element.
function isDatasetObject(dataset) {
    return typeof dataset.iterator === "function";
}
// Check if provided object is a LazyIterator object by checking it's .next
// element.
function isLazyIteratorObject(iterator) {
    return typeof iterator.next === "function";
}
async function evaluateDataset(// Type `model` as `any` here to avoid circular dependency w/
// training.ts.
// tslint:disable-next-line:no-any
model, dataset, args) {
    args = args || {};
    const hasBatches = args.batches != null;
    const f = model.testFunction;
    let outs = [];
    if (args.verbose > 0) throw new (0, _errors.NotImplementedError)("Verbose mode is not implemented yet.");
    _tfjsCore.util.assert(!hasBatches || args.batches > 0 && Number.isInteger(args.batches), ()=>"Test loop expects `batches` to be a positive integer, but " + `received ${JSON.stringify(args.batches)}`);
    const dataIterator = isLazyIteratorObject(dataset) ? dataset : await dataset.iterator();
    // Keeps track of number of examples used in this evaluation.
    let numExamples = 0;
    let batch = 0;
    while(hasBatches ? batch < args.batches : true){
        const iteratorOut = await dataIterator.next();
        outs = _tfjsCore.tidy(()=>{
            if (iteratorOut.value) {
                // TODO(cais): Once real dataset is available, use
                //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.
                const { xs , ys  } = standardizeDataIteratorOutput(model, iteratorOut.value);
                const xsAndYs = xs.concat(ys);
                const batchOuts = _tfjsCore.tidy(()=>f(xsAndYs));
                _tfjsCore.dispose(xsAndYs);
                if (batch === 0) for(let i = 0; i < batchOuts.length; ++i)outs.push((0, _tfjsCore.scalar)(0));
                const batchSize = xsAndYs[0].shape[0];
                for(let i1 = 0; i1 < batchOuts.length; ++i1){
                    const batchOut = batchOuts[i1];
                    const oldScalar = outs[i1];
                    outs[i1] = _tfjsCore.tidy(()=>_tfjsCore.add(outs[i1], _tfjsCore.mul(batchSize, batchOut)));
                    if (batch > 0) _tfjsCore.dispose(oldScalar);
                }
                _tfjsCore.dispose(batchOuts);
                numExamples += batchSize;
                ++batch;
            }
            return outs;
        });
        if (iteratorOut.done) {
            if (hasBatches) console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` " + `batches (in this case, ${args.batches} batches). ` + "You may need to use the repeat() function when building " + "your dataset.");
            break;
        }
    }
    for(let i = 0; i < outs.length; ++i){
        const oldScalar = outs[i];
        outs[i] = _tfjsCore.div(outs[i], numExamples);
        _tfjsCore.dispose(oldScalar);
    }
    return (0, _genericUtils.singletonOrArray)(outs);
}

},{"@tensorflow/tfjs-core":"2votT","../base_callbacks":"aV9CX","../errors":"kA7ff","../logs":"f24Yn","../utils/generic_utils":"2cErd","./training_utils":"g43Vp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g43Vp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Standardize class weighting objects.
 *
 * This function takes a single class-weighting object, an array of them,
 * or a map from output name to class-weighting object. It compares it to the
 * output name(s) of the model, base on which it outputs an array of
 * class-weighting objects of which the length matches the number of outputs.
 *
 * @param classWeight Input class-weighting object(s).
 * @param outputNames All output name(s) of the model.
 * @return An array of class-weighting objects. The length of the array matches
 *   the model's number of outputs.
 */ parcelHelpers.export(exports, "standardizeClassWeights", ()=>standardizeClassWeights);
parcelHelpers.export(exports, "standardizeSampleWeights", ()=>standardizeSampleWeights);
/**
 * Standardize by-sample and/or by-class weights for training.
 *
 * Note that this function operates on one model output at a time. For a model
 * with multiple outputs, you must call this function multiple times.
 *
 * @param y The target tensor that the by-sample and/or by-class weight is for.
 *     The values of y are assumed to encode the classes, either directly
 *     as an integer index, or as one-hot encoding.
 * @param sampleWeight By-sample weights.
 * @param classWeight By-class weights: an object mapping class indices
 *     (integers) to a weight (float) to apply to the model's loss for the
 *     samples from this class during training. This can be useful to tell the
 *     model to "pay more attention" to samples from an under-represented class.
 * @param sampleWeightMode The mode for the sample weights.
 * @return A Promise of weight tensor, of which the size of the first dimension
 *     matches that of `y`.
 */ parcelHelpers.export(exports, "standardizeWeights", ()=>standardizeWeights);
/**
 * Apply per-sample weights on the loss values from a number of samples.
 *
 * @param losses Loss tensor of shape `[batchSize]`.
 * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.
 * @returns Tensor of the same shape as`losses`.
 */ parcelHelpers.export(exports, "computeWeightedLoss", ()=>computeWeightedLoss);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
function standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {
    const numOutputs = outputNames.length;
    if (xWeight == null || Array.isArray(xWeight) && xWeight.length === 0) return outputNames.map((name)=>null);
    if (numOutputs === 1) {
        if (Array.isArray(xWeight) && xWeight.length === 1) return xWeight;
        else if (typeof xWeight === "object" && outputNames[0] in xWeight) return [
            xWeight[outputNames[0]]
        ];
        else return [
            xWeight
        ];
    }
    if (Array.isArray(xWeight)) {
        if (xWeight.length !== numOutputs) throw new Error(`Provided ${weightType} is an array of ${xWeight.length} ` + `element(s), but the model has ${numOutputs} outputs. ` + `Make sure a set of weights is provided for each model output.`);
        return xWeight;
    } else if (typeof xWeight === "object" && Object.keys(xWeight).length > 0 && typeof xWeight[Object.keys(xWeight)[0]] === "object") {
        const output = [];
        outputNames.forEach((outputName)=>{
            if (outputName in xWeight) output.push(xWeight[outputName]);
            else output.push(null);
        });
        return output;
    } else throw new Error(`The model has multiple (${numOutputs}) outputs, ` + `so ${weightType} must be either an array with ` + `${numOutputs} elements or an object with ${outputNames} keys. ` + `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);
}
function standardizeClassWeights(classWeight, outputNames) {
    return standardizeSampleOrClassWeights(classWeight, outputNames, "classWeight");
}
function standardizeSampleWeights(classWeight, outputNames) {
    return standardizeSampleOrClassWeights(classWeight, outputNames, "sampleWeight");
}
async function standardizeWeights(y, sampleWeight, classWeight, sampleWeightMode) {
    if (sampleWeight != null || sampleWeightMode != null) // TODO(cais): Once 'temporal' mode is implemented, document it in the doc
    // string.
    throw new Error("Support sampleWeight is not implemented yet");
    if (classWeight != null) {
        // Apply class weights per sample.
        const yClasses = (0, _tfjsCore.tidy)(()=>{
            if (y.shape.length === 1) // Assume class indices.
            return y.clone();
            else if (y.shape.length === 2) {
                if (y.shape[1] > 1) {
                    // Assume one-hot encoding of classes.
                    const axis = 1;
                    return y.argMax(axis);
                } else if (y.shape[1] === 1) // Class index.
                return y.reshape([
                    y.shape[0]
                ]);
                else throw new Error(`Encountered unexpected last-dimension size (${y.shape[1]}) ` + `during handling of class weights. The size is expected to be ` + `>= 1.`);
            } else throw new Error(`Unexpected rank of target (y) tensor (${y.rank}) during ` + `handling of class weights. The rank is expected to be 1 or 2.`);
        });
        const yClassIndices = Array.from(await yClasses.data());
        (0, _tfjsCore.dispose)(yClasses);
        const classSampleWeight = [];
        yClassIndices.forEach((classIndex)=>{
            if (classWeight[classIndex] == null) throw new Error(`classWeight must contain all classes in the training data. ` + `The class ${classIndex} exists in the data but not in ` + `classWeight`);
            else classSampleWeight.push(classWeight[classIndex]);
        });
        return (0, _tfjsCore.tensor1d)(classSampleWeight, "float32");
    } else return null;
}
function computeWeightedLoss(losses, sampleWeights) {
    return (0, _tfjsCore.mul)(losses, sampleWeights);
}

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"U9ogk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkBatchSize", ()=>checkBatchSize);
/**
 * Slice an Tensor or an Array of Tensors, by start and stop indices.
 *
 * Porting Note: The `_slice_arrays` function in PyKeras is covered by this
 *   function and `sliceArraysByIndices()` together.
 *
 * @param arrays: the input.
 * @param start: the starting index (inclusive).
 * @param stop: the stopping index (exclusive).
 * @returns The result of the slicing. If `arrays` is an `Array` of
 *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`
 *   in the same way.
 */ parcelHelpers.export(exports, "sliceArrays", ()=>sliceArrays);
/**
 * Slice an Tensor or an Array of Tensors, by random-order indices.
 *
 * Porting Note: The `_slice_arrays` function in PyKeras is covered by this
 *   function and `sliceArrays()` together.
 *
 * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.
 *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the
 *   same fashion.
 * @param indices The indices to use for slicing along the first (batch)
 *   dimension.
 * @returns Result(s) of the slicing.
 */ parcelHelpers.export(exports, "sliceArraysByIndices", ()=>sliceArraysByIndices);
/**
 * Returns a list of batch indices (tuples of indices).
 * @param size: Integer, total size of the data to slice into batches.
 * @param batchSize: Integer, batch size.
 * @returns An Array of [batchStart, batchEnd] tuples. batchStart is
 *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x
 *   that satisfy batchStart <= x < batchEnd.
 */ parcelHelpers.export(exports, "makeBatches", ()=>makeBatches);
parcelHelpers.export(exports, "fitTensors", ()=>fitTensors);
/**
 * Ensure tensors all have a rank of at least 2.
 *
 * If a tensor has a rank of 1, it is dimension-expanded to rank 2.
 * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.
 */ parcelHelpers.export(exports, "ensureTensorsRank2OrHigher", ()=>ensureTensorsRank2OrHigher);
/**
 * Compare a set of tensors with a reference (old) set, discard the ones
 * in the new set that are not present in the reference set.
 *
 * This method is used for memory clenaup during calls such as
 * LayersModel.fit().
 *
 * @param tensors New set which may contain Tensors not present in
 *   `refTensors`.
 * @param refTensors Reference Tensor set.
 */ // TODO(cais, kangyizhang): Deduplicate with tfjs-data.
parcelHelpers.export(exports, "disposeNewTensors", ()=>disposeNewTensors);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Interfaces and methods for training models using tf.Tensor objects.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("../backend/tfjs_backend");
var _baseCallbacks = require("../base_callbacks");
var _errors = require("../errors");
var _logs = require("../logs");
var _mathUtils = require("../utils/math_utils");
function checkBatchSize(batchSize) {
    _tfjsCore.util.assert(batchSize > 0 && Number.isInteger(batchSize), ()=>`batchSize is required to be a positive integer, but got ${batchSize}`);
}
function sliceArrays(arrays, start, stop) {
    if (arrays == null) return [
        null
    ];
    else if (Array.isArray(arrays)) return arrays.map((array)=>(0, _tfjsBackend.sliceAlongFirstAxis)(array, start, stop - start));
    else return (0, _tfjsBackend.sliceAlongFirstAxis)(arrays, start, stop - start);
}
function sliceArraysByIndices(arrays, indices) {
    return _tfjsCore.tidy(()=>{
        if (arrays == null) return null;
        else if (Array.isArray(arrays)) return arrays.map((array)=>sliceArraysByIndices(array, indices));
        else // TODO(cais): indices should be a pre-constructed Tensor1D to avoid
        //   tensor1d() calls.
        return (0, _tfjsBackend.gather)(arrays, indices.dtype === "int32" ? indices : indices.toInt());
    });
}
function makeBatches(size, batchSize) {
    const output = [];
    let batchStart = 0;
    let batchEnd = null;
    while(batchStart < size){
        batchEnd = batchStart + batchSize;
        if (batchEnd >= size) batchEnd = size;
        output.push([
            batchStart,
            batchEnd
        ]);
        batchStart = batchEnd;
    }
    return output;
}
/**
 * Abstract fit function for `f(ins)`.
 * @param f A Function returning a list of tensors. For training, this
 *   function is expected to perform the updates to the variables.
 * @param ins List of tensors to be fed to `f`.
 * @param outLabels List of strings, display names of the outputs of `f`.
 * @param batchSize Integer batch size or `== null` if unknown. Default : 32.
 * @param epochs Number of times to iterate over the data. Default : 1.
 * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.
 * @param callbacks List of callbacks to be called during training.
 * @param valF Function to call for validation.
 * @param valIns List of tensors to be fed to `valF`.
 * @param shuffle Whether to shuffle the data at the beginning of every
 * epoch. Default : true.
 * @param callbackMetrics List of strings, the display names of the metrics
 *   passed to the callbacks. They should be the concatenation of the
 *   display names of the outputs of `f` and the list of display names
 *   of the outputs of `valF`.
 * @param initialEpoch Epoch at which to start training (useful for
 *   resuming a previous training run). Default : 0.
 * @param stepsPerEpoch Total number of steps (batches on samples) before
 *   declaring one epoch finished and starting the next epoch. Ignored with
 *   the default value of `undefined` or `null`.
 * @param validationSteps Number of steps to run validation for (only if
 *   doing validation from data tensors). Not applicable for tfjs-layers.
 * @returns A `History` object.
 */ async function fitLoop(// Type `model` as `any` here to avoid circular dependency w/ training.ts.
// tslint:disable-next-line:no-any
model, f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {
    if (batchSize == null) batchSize = 32;
    if (epochs == null) epochs = 1;
    if (shuffle == null) shuffle = true;
    if (initialEpoch == null) initialEpoch = 0;
    // TODO(cais): Change const to let below when implementing validation.
    let doValidation = false;
    if (valF != null && valIns != null) doValidation = true;
    if (validationSteps != null) {
        doValidation = true;
        if (stepsPerEpoch == null) throw new (0, _errors.ValueError)("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
    }
    const numTrainSamples = model.checkNumSamples(ins, batchSize, stepsPerEpoch, "steps_per_epoch");
    let indexArray;
    if (numTrainSamples != null) indexArray = (0, _mathUtils.range)(0, numTrainSamples);
    if (verbose == null) verbose = 1;
    const { callbackList , history  } = (0, _baseCallbacks.configureCallbacks)(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics);
    callbackList.setModel(model);
    model.history = history;
    await callbackList.onTrainBegin();
    model.stopTraining_ = false;
    // TODO(cais): Take care of callbacks.validation_data as in PyKeras.
    // TODO(cais): Pre-convert feeds for performance as in PyKeras.
    for(let epoch = initialEpoch; epoch < epochs; ++epoch){
        await callbackList.onEpochBegin(epoch);
        const epochLogs = {};
        if (stepsPerEpoch != null) throw new (0, _errors.NotImplementedError)("stepsPerEpoch mode is not implemented yet.");
        else {
            if (shuffle === "batch") throw new (0, _errors.NotImplementedError)("batch shuffling is not implemneted yet");
            else if (shuffle) (0, _tfjsCore.util).shuffle(indexArray);
            // Convert the potentially shuffled indices to Tensor1D, to avoid the
            // cost of repeated creation of Array1Ds later on.
            const epochIndexArray1D = (0, _tfjsCore.tensor1d)(indexArray);
            const batches = makeBatches(numTrainSamples, batchSize);
            for(let batchIndex = 0; batchIndex < batches.length; ++batchIndex){
                const batchLogs = {};
                await callbackList.onBatchBegin(batchIndex, batchLogs);
                _tfjsCore.tidy(()=>{
                    const batchStart = batches[batchIndex][0];
                    const batchEnd = batches[batchIndex][1];
                    const batchIds = (0, _tfjsBackend.sliceAlongFirstAxis)(epochIndexArray1D, batchStart, batchEnd - batchStart);
                    batchLogs["batch"] = batchIndex;
                    batchLogs["size"] = batchEnd - batchStart;
                    // TODO(cais): In ins, train flag can be a number, instead of an
                    //   Tensor? Do we need to handle this in tfjs-layers?
                    const insBatch = sliceArraysByIndices(ins, batchIds);
                    const outs = f(insBatch);
                    for(let i = 0; i < outLabels.length; ++i){
                        const label = outLabels[i];
                        const out = outs[i];
                        batchLogs[label] = out;
                        _tfjsCore.keep(out);
                    // TODO(cais): Use scope() to avoid ownership.
                    }
                    if (batchIndex === batches.length - 1) {
                        if (doValidation) {
                            const valOuts = model.testLoop(valF, valIns, batchSize);
                            // Porting Notes: In tfjs-layers, valOuts is always an Array.
                            for(let i1 = 0; i1 < outLabels.length; ++i1){
                                const label1 = outLabels[i1];
                                const out1 = valOuts[i1];
                                _tfjsCore.keep(out1);
                                // TODO(cais): Use scope() to avoid ownership.
                                epochLogs["val_" + label1] = out1;
                            }
                        }
                    }
                });
                await callbackList.onBatchEnd(batchIndex, batchLogs);
                (0, _logs.disposeTensorsInLogs)(batchLogs);
                if (model.stopTraining_) break;
            // TODO(cais): return outs as list of Tensor.
            }
            epochIndexArray1D.dispose();
        }
        // TODO(cais): Run validation at the end of the epoch.
        await callbackList.onEpochEnd(epoch, epochLogs);
        if (model.stopTraining_) break;
    }
    await callbackList.onTrainEnd();
    await model.history.syncData();
    return model.history;
}
async function fitTensors(// Type `model` as `any` here to avoid circular dependency w/ training.ts.
// tslint:disable-next-line:no-any
model, x, y, args = {}) {
    if (model.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
    model.isTraining = true;
    let inputs;
    let targets;
    let inputValX;
    let inputValY;
    let valX;
    let valY;
    let sampleWeights;
    try {
        const batchSize = args.batchSize == null ? 32 : args.batchSize;
        checkBatchSize(batchSize);
        // Validate user data.
        // TODO(cais): Support sampleWeight.
        const checkBatchAxis = false;
        const standardizedOuts = await model.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);
        inputs = standardizedOuts[0];
        targets = standardizedOuts[1];
        sampleWeights = standardizedOuts[2];
        // Prepare validation data.
        let doValidation = false;
        let valIns;
        if (args.validationData != null && args.validationData.length > 0) {
            doValidation = true;
            if (args.validationData.length === 2) {
                // config.validationData consists of valX and valY.
                inputValX = args.validationData[0];
                inputValY = args.validationData[1];
            } else if (args.validationData.length === 3) throw new (0, _errors.NotImplementedError)("validationData including sample weights is not supported yet.");
            else throw new (0, _errors.ValueError)(`When passing validation data, it must contain 2 (valX, valY) ` + `or 3 (valX, valY, valSampleWeight) items; ` + `${args.validationData} is invalid.`);
            const checkBatchAxis1 = true;
            const valStandardized = await model.standardizeUserData(inputValX, inputValY, null, /** Unused sample weights. */ null, /** Unused class weights. */ checkBatchAxis1, batchSize);
            valX = valStandardized[0];
            valY = valStandardized[1];
            valIns = valX.concat(valY);
        // TODO(cais): Add useLearningPhase data properly.
        } else if (args.validationSplit != null && args.validationSplit > 0 && args.validationSplit < 1) {
            doValidation = true;
            // Porting Note: In tfjs-layers, inputs[0] is always an Tensor.
            const splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));
            const originalBatchSize = inputs[0].shape[0];
            valX = sliceArrays(inputs, splitAt, originalBatchSize);
            inputs = sliceArrays(inputs, 0, splitAt);
            valY = sliceArrays(targets, splitAt, originalBatchSize);
            targets = sliceArrays(targets, 0, splitAt);
            // TODO(cais): Once sampleWeights becomes available, slice it to get
            //   valSampleWeights.
            valIns = valX.concat(valY);
        // TODO(cais): Add useLearningPhase data properly.
        } else if (args.validationSteps != null) doValidation = true;
        const ins = inputs.concat(targets).concat(sampleWeights);
        model.checkTrainableWeightsConsistency();
        // TODO(cais): Handle use_learning_phase and learning_phase?
        // Porting Note: Here we see a key deviation of tfjs-layers from
        // Keras.
        //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),
        //  we do not construct symbolic computation graphs to embody the
        //  training process. Instead, we define a function that performs the
        //  training action. In PyKeras, the data (inputs and targets) are fed
        //  through graph placeholders. In tfjs-layers, the data are fed as
        //  function arguments. Since the function are defined below in the
        //  scope, we don't have equivalents of PyKeras's
        //  `_make_train_funciton`.
        const trainFunction = model.makeTrainFunction();
        const outLabels = model.getDedupedMetricsNames();
        let valFunction;
        let callbackMetrics;
        if (doValidation) {
            model.makeTestFunction();
            valFunction = model.testFunction;
            callbackMetrics = outLabels.slice().concat(outLabels.map((n)=>"val_" + n));
        } else {
            valFunction = null;
            valIns = [];
            callbackMetrics = outLabels.slice();
        }
        const callbacks = (0, _baseCallbacks.standardizeCallbacks)(args.callbacks, args.yieldEvery);
        const out = await fitLoop(model, trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);
        return out;
    } finally{
        model.isTraining = false;
        // Memory clean up.
        disposeNewTensors(inputs, x);
        disposeNewTensors(targets, y);
        disposeNewTensors(valX, inputValX);
        disposeNewTensors(valY, inputValY);
        if (sampleWeights != null) _tfjsCore.dispose(sampleWeights);
    }
// TODO(cais): Add value to outLabels.
}
function ensureTensorsRank2OrHigher(tensors) {
    const outs = [];
    if (tensors instanceof (0, _tfjsCore.Tensor)) tensors = [
        tensors
    ];
    // Make Tensors at least 2D.
    for(let i = 0; i < tensors.length; ++i){
        const tensor = tensors[i];
        if (tensor.rank === 1) outs.push((0, _tfjsBackend.expandDims)(tensor, 1));
        else if (tensor.rank === 0) throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
        else outs.push(tensor);
    }
    return outs;
}
function disposeNewTensors(tensors, refTensors) {
    if (tensors == null) return;
    const oldTensorIds = [];
    if (refTensors instanceof (0, _tfjsCore.Tensor)) oldTensorIds.push(refTensors.id);
    else if (Array.isArray(refTensors)) refTensors.forEach((t)=>oldTensorIds.push(t.id));
    else if (refTensors != null) // `oldTensors` is a map from string name to Tensor.
    for(const name in refTensors){
        const oldTensor = refTensors[name];
        oldTensorIds.push(oldTensor.id);
    }
    const tensorsToDispose = [];
    if (tensors instanceof (0, _tfjsCore.Tensor)) {
        if (oldTensorIds.indexOf(tensors.id) === -1) tensorsToDispose.push(tensors);
    } else if (Array.isArray(tensors)) tensors.forEach((t)=>{
        if (oldTensorIds.indexOf(t.id) === -1) tensorsToDispose.push(t);
    });
    else if (tensors != null) // `oldTensors` is a map from string name to Tensor.
    for(const name1 in tensors){
        const tensor = tensors[name1];
        if (oldTensorIds.indexOf(tensor.id) === -1) tensorsToDispose.push(tensor);
    }
    tensorsToDispose.forEach((t)=>{
        if (!t.isDisposed) t.dispose();
    });
}

},{"@tensorflow/tfjs-core":"2votT","../backend/tfjs_backend":"iABet","../base_callbacks":"aV9CX","../errors":"kA7ff","../logs":"f24Yn","../utils/math_utils":"865Nd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dis3W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Parses a JSON model configuration file and returns a model instance.
 *
 * ```js
 * // This example shows how to serialize a model using `toJSON()` and
 * // deserialize it as another model using `tf.models.modelFromJSON()`.
 * // Note: this example serializes and deserializes only the topology
 * // of the model; the weights of the loaded model will be different
 * // from those of the the original model, due to random weight
 * // initialization.
 * // To load the topology and weights of a model, use `tf.loadLayersModel()`.
 * const model1 = tf.sequential();
 * model1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));
 * // Serialize `model1` as a JSON object.
 * const model1JSON = model1.toJSON(null, false);
 * model1.summary();
 *
 * const model2 = await tf.models.modelFromJSON(model1JSON);
 * model2.summary();
 * ```
 *
 *  @param modelAndWeightsConfig JSON object or string encoding a model and
 *       weights configuration. It can also be only the topology JSON of the
 *       model, in which case the weights will not be loaded.
 *  @param custom_objects Optional dictionary mapping names
 *       (strings) to custom classes or functions to be
 *       considered during deserialization.
 * @returns A TensorFlow.js Layers `tf.LayersModel` instance (uncompiled).
 */ parcelHelpers.export(exports, "modelFromJSON", ()=>modelFromJSON);
/**
 * Load a model, including its topology and optionally weights.  See the
 * Tutorial named "How to import a Keras Model" for usage examples.
 *
 * Example 1: Save `model`'s topology and weights to browser [local
 * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('localstorage://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 2. Saving `model`'s topology and weights to browser
 * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('indexeddb://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 3. Load a model from user-selected files from HTML
 * [file input
 * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).
 *
 * ```js
 * // Note: this code snippet will not work without the HTML elements in the
 * //   page
 * const jsonUpload = document.getElementById('json-upload');
 * const weightsUpload = document.getElementById('weights-upload');
 *
 * const model = await tf.loadLayersModel(
 *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));
 * ```
 *
 * Example 4. Load a model from an HTTP server.
 *
 * ```js
 * const model = await
 *     tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');
 * model.summary();
 * ```
 *
 * @param pathOrIOHandler Can be either of the two formats
 *   1. A string path to the `ModelAndWeightsConfig` JSON describing
 *      the model in the canonical TensorFlow.js format. This path will be
 *      interpreted as a relative HTTP path, to which `fetch` will be used to
 *      request the model topology and weight manifest JSON.
 *      The content of the JSON file is assumed to be a JSON object with the
 *      following fields and values:
 *      - 'modelTopology': A JSON object that can be either of:
 *        1. a model architecture JSON consistent with the format of the return
 *            value of `keras.Model.to_json()`
 *        2. a full model JSON in the format of `keras.models.save_model()`.
 *      - 'weightsManifest': A TensorFlow.js weights manifest.
 *      See the Python converter function `save_model()` for more details.
 *      It is also assumed that model weights can be accessed from relative
 *      paths described by the `paths` fields in weights manifest.
 *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`
 *      method.
 * @param options Optional configuration arguments for the model loading,
 *   including:
 *   - `strict`: Require that the provided weights exactly match those required
 *     by the layers.  Default true.  Passing false means that both extra
 *     weights and missing weights will be silently ignored.
 *   - `onProgress`: A progress callback of the form:
 *     `(fraction: number) => void`. This callback can be used to monitor the
 *     model-loading process.
 * @returns A `Promise` of `tf.LayersModel`, with the topology and weights
 *     loaded.
 */ parcelHelpers.export(exports, "loadLayersModelInternal", ()=>loadLayersModelInternal);
/**
 * Load a model and optionally its weights, using an IOHandler object.
 *
 * @param handler The instance of `IOHandler` to be used during the model
 *   loading.
 * @param customObjects Any optional custom objects to be used during model
 *   loading.
 * @param strict Whether the weight loading will be done in strict mode.
 *   Default: `true`.
 */ parcelHelpers.export(exports, "loadLayersModelFromIOHandler", ()=>loadLayersModelFromIOHandler);
/**
 * A model with a stack of layers, feeding linearly from one to the next.
 *
 * `tf.sequential` is a factory function that creates an instance of
 * `tf.Sequential`.
 *
 * ```js
 *  // Define a model for linear regression.
 *  const model = tf.sequential();
 *  model.add(tf.layers.dense({units: 1, inputShape: [1]}));
 *
 *  // Prepare the model for training: Specify the loss and the optimizer.
 *  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
 *
 *  // Generate some synthetic data for training.
 *  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);
 *  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);
 *
 *  // Train the model using the data then do inference on a data point the
 *  // model hasn't seen:
 *  await model.fit(xs, ys);
 *  model.predict(tf.tensor2d([5], [1, 1])).print();
 * ```
 */ /** @doc {heading: 'Models', subheading: 'Classes'} */ parcelHelpers.export(exports, "Sequential", ()=>Sequential);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original source keras/models.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _state = require("./backend/state");
var _inputLayer = require("./engine/input_layer");
var _topology = require("./engine/topology");
var _training = require("./engine/training");
var _errors = require("./errors");
var _serialization = require("./layers/serialization");
var _genericUtils = require("./utils/generic_utils");
var _serializationUtils = require("./utils/serialization_utils");
var _typesUtils = require("./utils/types_utils");
async function modelFromJSON(modelAndWeightsConfig, customObjects) {
    if (!("modelTopology" in modelAndWeightsConfig)) modelAndWeightsConfig = {
        modelTopology: modelAndWeightsConfig
    };
    modelAndWeightsConfig;
    let modelTopology = modelAndWeightsConfig.modelTopology;
    if (modelTopology["model_config"] != null) // If the model-topology JSON contains a 'model_config' field, then it is
    // a full model JSON (e.g., from `keras.Model.save()`), which contains
    // not only the model's architecture in its 'model_config' field, but
    // additional information such as the model's optimizer. We use only the
    // 'model_config' field currently.
    modelTopology = modelTopology["model_config"];
    const tsConfig = (0, _serializationUtils.convertPythonicToTs)(modelTopology);
    const model = (0, _serialization.deserialize)(tsConfig, customObjects);
    if (modelAndWeightsConfig.weightsManifest != null) {
        // Load the weight values keyed by the original tensor names in the model
        // file that was loaded.  These should match the keys of the weight
        // manifest.
        const weightValues = await (0, _tfjsCore.io).loadWeights(modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix, model.weights.map((weight)=>weight.originalName));
        // Map the weights to the unique tensor names generated during model loading
        const uniqueWeightValues = {};
        for (const weight of model.weights)uniqueWeightValues[weight.originalName] = weightValues[weight.originalName];
        model.loadWeights(uniqueWeightValues);
        // Dispose temporary weight values.
        (0, _tfjsCore.dispose)(weightValues);
    }
    return model;
}
async function loadLayersModelInternal(pathOrIOHandler, options) {
    if (options == null) options = {};
    if (typeof pathOrIOHandler === "string") {
        const handlers = (0, _tfjsCore.io).getLoadHandlers(pathOrIOHandler, options);
        if (handlers.length === 0) // For backward compatibility: if no load handler can be found,
        // assume it is a relative http path.
        // TODO(cais): Reformat the args into a single `LoadOptions` once the core
        // is refactored.
        handlers.push((0, _tfjsCore.io).browserHTTPRequest(pathOrIOHandler, options));
        else if (handlers.length > 1) throw new (0, _errors.ValueError)(`Found more than one (${handlers.length}) load handlers for ` + `URL '${pathOrIOHandler}'`);
        pathOrIOHandler = handlers[0];
    }
    return loadLayersModelFromIOHandler(pathOrIOHandler, undefined, options);
}
async function loadLayersModelFromIOHandler(handler, customObjects, options) {
    if (options == null) options = {};
    if (handler.load == null) throw new (0, _errors.ValueError)("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    const artifacts = await handler.load();
    let modelTopology = artifacts.modelTopology;
    if (modelTopology["model_config"] != null) modelTopology = modelTopology["model_config"];
    const strict = options.strict == null ? true : options.strict;
    // If weights are provided and the weight-loading mode is strict, use
    // fast weight initialization. This skips costly initializers such as
    // 'orthogonal' and saves unnecessary computation in cases where
    // the initialized weight values will immediately be overwritten by
    // loaded weight values.
    const fastWeightInit = artifacts.weightData != null && artifacts.weightSpecs != null && strict;
    const model = (0, _serialization.deserialize)((0, _serializationUtils.convertPythonicToTs)(modelTopology), customObjects, fastWeightInit);
    const trainingConfig = artifacts.trainingConfig;
    if (trainingConfig != null) model.loadTrainingConfig(trainingConfig);
    if (artifacts.userDefinedMetadata != null) model.setUserDefinedMetadata(artifacts.userDefinedMetadata);
    // If weightData is present, load the weights into the model.
    if (artifacts.weightData != null) {
        // Loading weights requires weightSpecs.
        if (artifacts.weightSpecs == null) throw new (0, _errors.ValueError)("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
        const { modelWeights , optimizerWeights  } = decodeModelAndOptimizerWeights(artifacts.weightData, artifacts.weightSpecs);
        model.loadWeights(modelWeights, strict);
        if (model.optimizer != null && optimizerWeights.length > 0) await model.optimizer.setWeights(optimizerWeights);
        // Dispose temporary weight values.
        (0, _tfjsCore.dispose)(modelWeights);
        (0, _tfjsCore.dispose)(optimizerWeights.map((w)=>w.tensor));
    }
    return model;
}
function decodeModelAndOptimizerWeights(buffer, specs) {
    const name2Tensor = (0, _tfjsCore.io).decodeWeights(buffer, specs);
    const modelWeights = {};
    const optimizerWeights = [];
    specs.forEach((spec)=>{
        if (spec.group === "optimizer") optimizerWeights.push({
            name: spec.name,
            tensor: name2Tensor[spec.name]
        });
        else modelWeights[spec.name] = name2Tensor[spec.name];
    });
    return {
        modelWeights,
        optimizerWeights
    };
}
class Sequential extends (0, _training.LayersModel) {
    constructor(args){
        super({
            inputs: [],
            outputs: []
        });
        args = args || {};
        this.trainable = true;
        this.built = false;
        // Set model name.
        this.name = args.name != null ? args.name : (0, _state.getUid)("sequential_");
        // Add to the model any layers passed to the constructor.
        if (args.layers != null) for (const layer of args.layers)this.add(layer);
    }
    // Helper function to Sequential.add  Throws if the new output shape will be
    // invalid.
    checkShape(layer) {
        const shape = layer.inboundNodes[0].outputTensors[0].shape;
        if (shape.some((x)=>x < 0)) throw new (0, _errors.ValueError)("Negative dimension size caused by adding layer " + `${layer.name} with input shape [` + `${layer.inboundNodes[0].inputTensors[0].shape}]`);
    }
    /**
     * Adds a layer instance on top of the layer stack.
     *
     * ```js
     *  const model = tf.sequential();
     *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));
     *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));
     *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));
     *  // Note that the untrained model is random at this point.
     *  model.predict(tf.randomNormal([10, 1])).print();
     * ```
     * @param layer Layer instance.
     *
     * @exception ValueError In case the `layer` argument does not know its
     * input shape.
     * @exception ValueError In case the `layer` argument has multiple output
     *   tensors, or is already connected somewhere else (forbidden in
     *   `Sequential` models).
     */ /** @doc {heading: 'Models', subheading: 'Classes'} */ add(layer) {
        const isLayerModelInstance = layer instanceof Sequential || layer instanceof (0, _training.LayersModel);
        let modelLayer;
        if (isLayerModelInstance) {
            modelLayer = layer;
            if (modelLayer.outputs.length !== 1) throw new (0, _errors.ValueError)("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
            if (modelLayer.inputs.length !== 1) throw new (0, _errors.ValueError)("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
        }
        if (this.outputs.length === 0) {
            // first layer in model: check that it is an input layer
            if (layer.inboundNodes.length === 0) {
                // create an input layer
                if (layer.batchInputShape == null) throw new (0, _errors.ValueError)("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
                // Instantiate the input layer.
                const x = (0, _inputLayer.Input)({
                    batchShape: layer.batchInputShape,
                    dtype: layer.dtype,
                    name: layer.name + "_input"
                });
                // This will build the current layer and create the node connecting
                // the current layer to the input layer we just created.
                layer.apply(x);
            }
            if (isLayerModelInstance) {
                this.outputs = modelLayer.outputs;
                this.inputs = modelLayer.inputs;
            } else {
                if (layer.inboundNodes.length !== 1) throw new (0, _errors.ValueError)("A layer added to a Sequential model must not already be " + `connected somewhere else. LayersModel received layer ${layer.name} ` + `which has ${layer.inboundNodes.length} pre-existing inbound ` + "connections.");
                if (layer.inboundNodes[0].outputTensors.length !== 1) throw new (0, _errors.ValueError)("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
                this.checkShape(layer);
                this.outputs = [
                    layer.inboundNodes[0].outputTensors[0]
                ];
                this.inputs = (0, _topology.getSourceInputs)(this.outputs[0]);
            }
            this.inboundNodes = [];
            // We create an input node, which we will keep updated
            // as we add more layers.
            // (This call has side effects.)
            // tslint:disable-next-line:no-unused-expression
            new (0, _topology.Node)({
                outboundLayer: this,
                inboundLayers: [],
                nodeIndices: [],
                tensorIndices: [],
                inputTensors: this.inputs,
                outputTensors: this.outputs,
                // no model-level masking for now
                inputMasks: _genericUtils.pyListRepeat(null, this.inputs.length),
                outputMasks: [
                    null
                ],
                inputShapes: this.inputs.map((x)=>x.shape),
                outputShapes: this.outputs[0].shape
            });
        } else {
            const outputTensor = layer.apply(this.outputs[0]);
            if (Array.isArray(outputTensor)) throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
            this.checkShape(layer);
            this.outputs = [
                outputTensor
            ];
            // update self.inbound_nodes
            this.inboundNodes[0].outputTensors = this.outputs;
            this.inboundNodes[0].outputShapes = [
                this.outputs[0].shape
            ];
        }
        this.layers.push(layer);
        this.built = false;
    }
    /**
     * Removes the last layer in the model.
     *
     * @exception TypeError if there are no layers in the model.
     */ pop() {
        if (this.layers.length === 0) throw new TypeError("There are no layers in the model.");
        this.layers.pop();
        if (this.layers.length === 0) {
            this.outputs = [];
            this.inboundNodes = [];
            this.outboundNodes = [];
        } else {
            const lastLayerIndex = this.layers.length - 1;
            this.layers[lastLayerIndex].outboundNodes = [];
            this.outputs = [
                this.layers[lastLayerIndex].output
            ];
            // update self.inbound_nodes
            this.inboundNodes[0].outputTensors = this.outputs;
            this.inboundNodes[0].outputShapes = [
                this.outputs[0].shape
            ];
        }
    }
    call(inputs, kwargs) {
        if (this.model == null) this.build();
        return this.model.call(inputs, kwargs);
    }
    build(inputShape) {
        // Call `getExactlyOneShape` without using its return value,
        // to verify that exactly one input shape is provided.
        (0, _typesUtils.getExactlyOneShape)(inputShape);
        if (this.inputs.length === 0 || this.outputs.length === 0) throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
        // actually create the model
        this.model = new (0, _training.LayersModel)({
            inputs: this.inputs,
            outputs: this.outputs[0],
            name: this.name + "_model"
        });
        this.model.trainable = this.trainable;
        // mirror model attributes
        this.supportsMasking = this.model.supportsMasking;
        // TODO(michaelterry): Add caches
        this.inputLayers = this.model.inputLayers;
        this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;
        this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;
        this.outputLayers = this.model.outputLayers;
        this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;
        this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;
        this.nodesByDepth = this.model.nodesByDepth;
        this.containerNodes = this.model.containerNodes;
        this.outputNames = this.model.outputNames;
        this.inputNames = this.model.inputNames;
        // TODO(michaelterry): Add feedInputNames, feedInputs, if needed.
        // TODO(michaelterry): Add callbackModel if needed.
        this.built = true;
    }
    countParams() {
        if (!this.built) this.build();
        return super.countParams();
    }
    /**
     * Print a text summary of the Sequential model's layers.
     *
     * The summary includes
     * - Name and type of all layers that comprise the model.
     * - Output shape(s) of the layers
     * - Number of weight parameters of each layer
     * - The total number of trainable and non-trainable parameters of the
     * model.
     *
     * ```js
     * const model = tf.sequential();
     * model.add(
     *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));
     * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
     *
     * model.summary();
     * ```
     *
     * @param lineLength Custom line length, in number of characters.
     * @param positions Custom widths of each of the columns, as either
     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
     *   right-most (i.e., ending) position of a column.
     * @param printFn Custom print function. Can be used to replace the default
     *   `console.log`. For example, you can use `x => {}` to mute the printed
     *   messages in the console.
     */ /** @doc {heading: 'Models', subheading: 'Classes'} */ summary(lineLength, positions, printFn = console.log) {
        if (!this.built) this.build();
        super.summary(lineLength, positions, printFn);
    }
    /**
     * Sets the weights of the model.
     *
     * @param weights Should be a list of Tensors with shapes and types matching
     *   the output of `model.getWeights()`.
     */ setWeights(weights) {
        if (this.model == null) this.build();
        this.model.setWeights(weights);
    }
    /**
     * Returns the loss value & metrics values for the model in test mode.
     *
     * Loss and metrics are specified during `compile()`, which needs to happen
     * before calls to `evaluate()`.
     *
     * Computation is done in batches.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {
     *   batchSize: 4,
     * });
     * result.print();
     * ```
     *
     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
     * model has multiple inputs.
     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
     * model has multiple outputs.
     * @param args A `ModelEvaluateConfig`, containing optional fields.
     *
     * @return `Scalar` test loss (if the model has a single output and no
     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
     *   and/or metrics). The attribute `model.metricsNames`
     *   will give you the display labels for the scalar outputs.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ evaluate(x, y, args = {}) {
        if (!this.built) throw new (0, _errors.RuntimeError)("The model needs to be compiled before being used.");
        return this.model.evaluate(x, y, args);
    }
    // TODO(cais): Add code snippet below once real dataset objects are
    //   available.
    /**
     * Evaluate model using a dataset object.
     *
     * Note: Unlike `evaluate()`, this method is asynchronous (`async`);
     *
     * @param dataset A dataset object. Its `iterator()` method is expected
     *   to generate a dataset iterator object, the `next()` method of which
     *   is expected to produce data batches for evaluation. The return value
     *   of the `next()` call ought to contain a boolean `done` field and a
     *   `value` field. The `value` field is expected to be an array of two
     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
     *   case is for models with exactly one input and one output (e.g..
     *   a sequential model). The latter case is for models with multiple
     *   inputs and/or multiple outputs. Of the two items in the array, the
     *   first is the input feature(s) and the second is the output target(s).
     * @param args A configuration object for the dataset-based evaluation.
     * @returns Loss and metric values as an Array of `Scalar` objects.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ async evaluateDataset(dataset, args) {
        if (!this.built) throw new (0, _errors.RuntimeError)("The model needs to be compiled before being used.");
        return this.model.evaluateDataset(dataset, args);
    }
    /**
     * Generates output predictions for the input samples.
     *
     * Computation is done in batches.
     *
     * Note: the "step" mode of predict() is currently not supported.
     *   This is because the TensorFow.js core backend is imperative only.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.predict(tf.ones([2, 10])).print();
     * ```
     *
     * @param x The input data, as an Tensor, or an `Array` of `tf.Tensor`s if
     *   the model has multiple inputs.
     * @param conifg A `ModelPredictConfig` object containing optional fields.
     *
     * @return `tf.Tensor`(s) of predictions.
     *
     * @exception ValueError In case of mismatch between the provided input data
     *   and the model's expectations, or in case a stateful model receives a
     *   number of samples that is not a multiple of the batch size.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ predict(x, args = {}) {
        if (this.model == null) this.build();
        return this.model.predict(x, args);
    }
    /**
     * Returns predictions for a single batch of samples.
     *
     * @param x: Input samples, as an Tensor, or list of Tensors (if the model
     *   has multiple inputs).
     * @return Tensor(s) of predictions
     */ predictOnBatch(x) {
        if (this.model == null) this.build();
        return this.model.predictOnBatch(x);
    }
    /**
     * See `LayersModel.compile`.
     *
     * @param args
     */ compile(args) {
        this.build();
        this.model.compile(args);
        this.optimizer_ = this.model.optimizer;
        // tslint:disable-next-line:no-any
        this.isOptimizerOwned = this.model.isOptimizerOwned;
        this.loss = this.model.loss;
        this.metrics = this.model.metrics;
        // TODO(cais): Add this.lossWeights, this.sampleWeightMode,
        //   this.weightedMetrics, this.targets.
        this.metricsTensors = this.model.metricsTensors;
        this.metricsNames = this.model.metricsNames;
    // TODO(cais): Add sampleWeights.
    }
    get optimizer() {
        return this.model == null ? undefined : this.model.optimizer;
    }
    set optimizer(optimizer) {
        this.model.optimizer = optimizer;
    }
    /**
     * Trains the model for a fixed number of epochs (iterations on a dataset).
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
     *   batchSize: 4,
     *   epochs: 3
     * });
     * console.log(history.history.loss[0]);
     * ```
     *
     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
     * model has multiple inputs. If all inputs in the model are named, you can
     * also pass a dictionary mapping input names to `tf.Tensor`s.
     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
     * the model has multiple outputs. If all outputs in the model are named, you
     *  can also pass a dictionary mapping output names to `tf.Tensor`s.
     * @param args  A `ModelFitConfig`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @exception ValueError In case of mismatch between the provided input data
     *   and what the model expects.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ async fit(x, y, args = {}) {
        if (!this.built) throw new (0, _errors.RuntimeError)("The model needs to be compiled before being used.");
        return this.model.fit(x, y, args);
    }
    /**
     * Trains the model using a dataset object.
     *
     * ```js
     * const xArray = [
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     * ];
     * const yArray = [1, 1, 1, 1];
     * // Create a dataset from the JavaScript array.
     * const xDataset = tf.data.array(xArray);
     * const yDataset = tf.data.array(yArray);
     * // Zip combines the `x` and `y` Datasets into a single Dataset, the
     * // iterator of which will return an object containing of two tensors,
     * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle
     * // four such samples into a single object, with the same keys now pointing
     * // to tensors that hold 4 examples, organized along the batch dimension.
     * // The call to `shuffle(4)` causes each iteration through the dataset to
     * // happen in a different order.  The size of the shuffle window is 4.
     * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})
     *     .batch(4)
     *     .shuffle(4);
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const history = await model.fitDataset(xyDataset, {
     *   epochs: 4,
     *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}
     * });
     * ```
     *
     * @param dataset A dataset object. Its `iterator()` method is expected to
     *   generate a dataset iterator object, the `next()` method of which is
     *   expected to produce data batches for evaluation. The return value of the
     *   `next()` call ought to contain a boolean `done` field and a `value`
     *   field.
     *
     *   The `value` field is expected to be an object of with fields
     *   `xs` and `ys`, which point to the feature tensor and the target tensor,
     *   respectively. This case is for models with exactly one input and one
     *   output (e.g.. a sequential model). For example:
     *   ```js
     *   {value: {xs: xsTensor, ys: ysTensor}, done: false}
     *   ```
     *
     *   If the model has multiple inputs, the `xs` field of `value` should
     *   be an object mapping input names to their respective feature tensors.
     *   For example:
     *   ```js
     *   {
     *     value: {
     *       xs: {
     *         input_1: xsTensor1,
     *         input_2: xsTensor2
     *       },
     *       ys: ysTensor
     *     },
     *     done: false
     *   }
     *   ```
     *   If the model has multiple outputs, the `ys` field of `value` should
     *   be an object mapping output names to their respective target tensors.
     *   For example:
     *   ```js
     *   {
     *     value: {
     *       xs: xsTensor,
     *       ys: {
     *         output_1: ysTensor1,
     *         output_2: ysTensor2
     *       },
     *     },
     *     done: false
     *   }
     *   ```
     * @param args A `ModelFitDatasetArgs`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */ async fitDataset(dataset, args) {
        if (!this.built) throw new (0, _errors.RuntimeError)("The model needs to be compiled before being used.");
        return this.model.fitDataset(dataset, args);
    }
    /**
     * Runs a single gradient update on a single batch of data.
     *
     * This method differs from `fit()` and `fitDataset()` in the following
     * regards:
     *   - It operates on exactly one batch of data.
     *   - It returns only the loss and matric values, instead of
     *     returning the batch-by-batch loss and metric values.
     *   - It doesn't support fine-grained options such as verbosity and
     *     callbacks.
     *
     * @param x Input data. It could be one of the following:
     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
     *     multiple inputs).
     *   - An Object mapping input names to corresponding `tf.Tensor` (if the
     *     model has named inputs).
     * @param y Target darta. It could be either a `tf.Tensor` a multiple
     *   `tf.Tensor`s. It should be consistent with `x`.
     * @returns Training loss or losses (in case the model has
     *   multiple outputs), along with metrics (if any), as numbers.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes'}
     */ async trainOnBatch(x, y) {
        return this.model.trainOnBatch(x, y);
    }
    /* See parent class for JsDoc */ /** @nocollapse */ static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {
        let configArray;
        let extraModelConfig = {};
        if (config instanceof Array) {
            if (!(config[0].className != null) || config[0]["className"] === "Merge") throw new (0, _errors.ValueError)("Legacy serialization format not supported yet.");
            configArray = config;
        } else {
            (0, _tfjsCore.util).assert(config["layers"] != null, ()=>`When the config data for a Sequential model is not an Array, ` + `it must be an Object that contains the 'layers' field.`);
            configArray = config["layers"];
            delete config["layers"];
            extraModelConfig = config;
        }
        const model = new cls(extraModelConfig);
        if (!(model instanceof Sequential)) throw new (0, _errors.NotImplementedError)(`Sequential.fromConfig called on non-Sequential input: ${model}`);
        for (const conf of configArray){
            const customObjects1 = undefined;
            const layer = (0, _serialization.deserialize)(conf, customObjects1, fastWeightInit);
            if (fastWeightInit) layer.setFastWeightInitDuringBuild(true);
            model.add(layer);
        }
        return model;
    }
    /**
     * Setter used for force stopping of LayersModel.fit() (i.e., training).
     *
     * Example:
     *
     * ```js
     * const model = tf.sequential();
     * model.add(tf.layers.dense({units: 1, inputShape: [10]}));
     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
     * const xs = tf.ones([8, 10]);
     * const ys = tf.zeros([8, 1]);
     *
     * const history = await model.fit(xs, ys, {
     *   epochs: 10,
     *   callbacks: {
     *     onEpochEnd: async (epoch, logs) => {
     *       if (epoch === 2) {
     *         model.stopTraining = true;
     *       }
     *     }
     *   }
     * });
     *
     * // There should be only 3 values in the loss array, instead of 10 values,
     * // due to the stopping after 3 epochs.
     * console.log(history.history.loss);
     * ```
     */ set stopTraining(stop) {
        // TODO(cais): When refactoring to remove the composition pattern happens,
        // remove this method overriding.
        if (this.model == null) throw new (0, _errors.ValueError)("Cannot set the stopTraining property of a sequential model before it is compiled.");
        this.model.stopTraining = stop;
    }
    get stopTraining() {
        if (this.model == null) throw new (0, _errors.ValueError)("Cannot get the stopTraining property of a sequential model before it is compiled.");
        return this.model.stopTraining;
    }
    // TODO(cais): Override get trainableWeights() here
    // tslint:disable-next-line:no-any
    getConfig() {
        // NOTE(cais): We override the return type of getConfig() to `any` here,
        //   because the `Sequential` class is a special case among `Container`
        //   subtypes in that its getConfig() method returns an Array (not a
        //   dict).
        const layers = [];
        for (const layer of this.layers){
            const dict = {};
            dict["className"] = layer.getClassName();
            dict["config"] = layer.getConfig();
            layers.push(dict);
        }
        return {
            name: this.name,
            layers
        };
    }
}
/** @nocollapse */ Sequential.className = "Sequential";
(0, _tfjsCore.serialization).registerClass(Sequential);

},{"@tensorflow/tfjs-core":"2votT","./backend/state":"6G8m0","./engine/input_layer":"dMLUr","./engine/topology":"2OPnm","./engine/training":"akRzZ","./errors":"kA7ff","./layers/serialization":"9miVs","./utils/generic_utils":"2cErd","./utils/serialization_utils":"lKIeB","./utils/types_utils":"70VAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCj9B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ReLU", ()=>ReLU);
parcelHelpers.export(exports, "LeakyReLU", ()=>LeakyReLU);
parcelHelpers.export(exports, "PReLU", ()=>PReLU);
parcelHelpers.export(exports, "ELU", ()=>ELU);
parcelHelpers.export(exports, "ThresholdedReLU", ()=>ThresholdedReLU);
parcelHelpers.export(exports, "Softmax", ()=>Softmax);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 *  Advanced activation layers.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _activations = require("../activations");
var _tfjsBackend = require("../backend/tfjs_backend");
var _constraints = require("../constraints");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _initializers = require("../initializers");
var _regularizers = require("../regularizers");
var _typesUtils = require("../utils/types_utils");
class ReLU extends (0, _topology.Layer) {
    constructor(args){
        super(args == null ? {} : args);
        this.supportsMasking = true;
        if (args != null) this.maxValue = args.maxValue;
    }
    call(inputs, kwargs) {
        inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
        let output = (0, _tfjsCore.relu)(inputs);
        if (this.maxValue != null) output = (0, _tfjsCore.clipByValue)(output, 0, this.maxValue);
        return output;
    }
    computeOutputShape(inputShape) {
        return inputShape;
    }
    getConfig() {
        const config = {
            maxValue: this.maxValue
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ ReLU.className = "ReLU";
(0, _tfjsCore.serialization).registerClass(ReLU);
class LeakyReLU extends (0, _topology.Layer) {
    constructor(args){
        super(args == null ? {} : args);
        this.DEFAULT_ALPHA = 0.3;
        if (args == null) args = {};
        this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;
    }
    call(inputs, kwargs) {
        const x = (0, _typesUtils.getExactlyOneTensor)(inputs);
        return (0, _tfjsCore.leakyRelu)(x, this.alpha);
    }
    computeOutputShape(inputShape) {
        return inputShape;
    }
    getConfig() {
        const config = {
            alpha: this.alpha
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ LeakyReLU.className = "LeakyReLU";
(0, _tfjsCore.serialization).registerClass(LeakyReLU);
class PReLU extends (0, _topology.Layer) {
    constructor(args){
        super(args == null ? {} : args);
        this.DEFAULT_ALPHA_INITIALIZER = "zeros";
        if (args == null) args = {};
        this.supportsMasking = true;
        this.alphaInitializer = (0, _initializers.getInitializer)(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);
        this.alphaRegularizer = (0, _regularizers.getRegularizer)(args.alphaRegularizer);
        this.alphaConstraint = (0, _constraints.getConstraint)(args.alphaConstraint);
        if (args.sharedAxes == null) this.sharedAxes = null;
        else if (Array.isArray(args.sharedAxes)) this.sharedAxes = args.sharedAxes;
        else if (typeof args.sharedAxes === "number") this.sharedAxes = [
            args.sharedAxes
        ];
        else throw new (0, _errors.ValueError)(`Expected sharedAxes to be a number or an array of numbers, ` + `but got ${args.sharedAxes}`);
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const paramShape = inputShape.slice(1);
        if (this.sharedAxes != null) for (const i of this.sharedAxes)paramShape[i - 1] = 1;
        this.alpha = this.addWeight("alpha", paramShape, "float32", this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);
        // Set input spec.
        const axes = {};
        if (this.sharedAxes != null) for(let i1 = 1; i1 < inputShape.length; ++i1)axes[i1] = inputShape[i1];
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: inputShape.length,
                axes
            })
        ];
        this.built = true;
    }
    call(inputs, kwargs) {
        inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
        return (0, _tfjsCore.prelu)(inputs, this.alpha.read());
    }
    getConfig() {
        const config = {
            alphaInitializer: (0, _initializers.serializeInitializer)(this.alphaInitializer),
            alphaRegularizer: (0, _regularizers.serializeRegularizer)(this.alphaRegularizer),
            alphaConstraint: (0, _constraints.serializeConstraint)(this.alphaConstraint),
            sharedAxes: this.sharedAxes
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ PReLU.className = "PReLU";
(0, _tfjsCore.serialization).registerClass(PReLU);
class ELU extends (0, _topology.Layer) {
    constructor(args){
        super(args == null ? {} : args);
        this.DEFAULT_ALPHA = 1.0;
        if (args == null) args = {};
        if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) throw new (0, _errors.NotImplementedError)(`Non-default alpha value (${args.alpha}) is not supported by the ` + `ELU layer yet.`);
        this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;
    }
    call(inputs, kwargs) {
        const x = (0, _typesUtils.getExactlyOneTensor)(inputs);
        return (0, _tfjsCore.elu)(x);
    }
    computeOutputShape(inputShape) {
        return inputShape;
    }
    getConfig() {
        const config = {
            alpha: this.alpha
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ ELU.className = "ELU";
(0, _tfjsCore.serialization).registerClass(ELU);
class ThresholdedReLU extends (0, _topology.Layer) {
    constructor(args){
        super(args == null ? {} : args);
        this.DEFAULT_THETA = 1.0;
        if (args == null) args = {};
        this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;
    }
    call(inputs, kwargs) {
        const x = (0, _typesUtils.getExactlyOneTensor)(inputs);
        return x.mul((0, _tfjsBackend.cast)(x.greater(this.theta), "float32"));
    }
    computeOutputShape(inputShape) {
        return inputShape;
    }
    getConfig() {
        const config = {
            theta: this.theta
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ ThresholdedReLU.className = "ThresholdedReLU";
(0, _tfjsCore.serialization).registerClass(ThresholdedReLU);
class Softmax extends (0, _topology.Layer) {
    constructor(args){
        super(args == null ? {} : args);
        this.DEFAULT_AXIS = 1.0;
        if (args == null) args = {};
        this.softmax = new (0, _activations.Softmax)().apply;
        this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;
    }
    call(inputs, kwargs) {
        const x = (0, _typesUtils.getExactlyOneTensor)(inputs);
        return this.softmax(x, this.axis);
    }
    computeOutputShape(inputShape) {
        return inputShape;
    }
    getConfig() {
        const config = {
            axis: this.axis
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Softmax.className = "Softmax";
(0, _tfjsCore.serialization).registerClass(Softmax);

},{"@tensorflow/tfjs-core":"2votT","../activations":"9UgTm","../backend/tfjs_backend":"iABet","../constraints":"kRkSV","../engine/topology":"2OPnm","../errors":"kA7ff","../initializers":"4FrEp","../regularizers":"447e0","../utils/types_utils":"70VAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9UgTm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Base class for Activations.
 *
 * Special note: due to cross-language compatibility reasons, the
 * static readonly className field in this family of classes must be set to
 * the initialLowerCamelCase name of the activation.
 */ parcelHelpers.export(exports, "Activation", ()=>Activation);
/**
 * Exponential linear unit (ELU).
 * Reference: https://arxiv.org/abs/1511.07289
 */ parcelHelpers.export(exports, "Elu", ()=>Elu);
/**
 * Scaled Exponential Linear Unit. (Klambauer et al., 2017).
 * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515
 * Notes:
 *   - To be used together with the initialization "lecunNormal".
 *   - To be used together with the dropout variant "AlphaDropout".
 */ parcelHelpers.export(exports, "Selu", ()=>Selu);
/**
 *  Rectified linear unit
 */ parcelHelpers.export(exports, "Relu", ()=>Relu);
/**
 * Rectified linear unit activation maxing out at 6.0.
 */ parcelHelpers.export(exports, "Relu6", ()=>Relu6);
//* Linear activation (no-op) */
parcelHelpers.export(exports, "Linear", ()=>Linear);
/**
 * Sigmoid activation function.
 */ parcelHelpers.export(exports, "Sigmoid", ()=>Sigmoid);
/**
 * Segment-wise linear approximation of sigmoid.
 */ parcelHelpers.export(exports, "HardSigmoid", ()=>HardSigmoid);
/**
 * Softplus activation function.
 */ parcelHelpers.export(exports, "Softplus", ()=>Softplus);
/**
 * Softsign activation function.
 */ parcelHelpers.export(exports, "Softsign", ()=>Softsign);
/**
 * Hyperbolic tangent function.
 */ parcelHelpers.export(exports, "Tanh", ()=>Tanh);
/**
 * Softmax activation function
 */ parcelHelpers.export(exports, "Softmax", ()=>Softmax);
/**
 * Log softmax activation function
 */ parcelHelpers.export(exports, "LogSoftmax", ()=>LogSoftmax);
parcelHelpers.export(exports, "serializeActivation", ()=>serializeActivation);
parcelHelpers.export(exports, "deserializeActivation", ()=>deserializeActivation);
parcelHelpers.export(exports, "getActivation", ()=>getActivation);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ // Layer activation functions
var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("./backend/tfjs_backend");
var _genericUtils = require("./utils/generic_utils");
class Activation extends (0, _tfjsCore.serialization).Serializable {
    getConfig() {
        return {};
    }
}
class Elu extends Activation {
    /**
     * Calculate the activation function.
     *
     * @param x: Input.
     * @param alpha: Scaling factor the negative section.
     * @return Output of the ELU activation.
     */ apply(x, alpha = 1) {
        return _tfjsBackend.elu(x, alpha);
    }
}
/** @nocollapse */ Elu.className = "elu";
(0, _tfjsCore.serialization).registerClass(Elu);
class Selu extends Activation {
    apply(x) {
        return _tfjsCore.selu(x);
    }
}
/** @nocollapse */ Selu.className = "selu";
(0, _tfjsCore.serialization).registerClass(Selu);
class Relu extends Activation {
    apply(x) {
        return _tfjsCore.relu(x);
    }
}
/** @nocollapse */ Relu.className = "relu";
(0, _tfjsCore.serialization).registerClass(Relu);
class Relu6 extends Activation {
    apply(x) {
        return (0, _tfjsCore.tidy)(()=>_tfjsCore.minimum(6.0, _tfjsCore.relu(x)));
    }
}
/** @nocollapse */ Relu6.className = "relu6";
(0, _tfjsCore.serialization).registerClass(Relu6);
class Linear extends Activation {
    apply(x) {
        return x;
    }
}
/** @nocollapse */ Linear.className = "linear";
(0, _tfjsCore.serialization).registerClass(Linear);
class Sigmoid extends Activation {
    apply(x) {
        return _tfjsCore.sigmoid(x);
    }
}
/** @nocollapse */ Sigmoid.className = "sigmoid";
(0, _tfjsCore.serialization).registerClass(Sigmoid);
class HardSigmoid extends Activation {
    apply(x) {
        return _tfjsBackend.hardSigmoid(x);
    }
}
/** @nocollapse */ HardSigmoid.className = "hardSigmoid";
(0, _tfjsCore.serialization).registerClass(HardSigmoid);
class Softplus extends Activation {
    apply(x) {
        return _tfjsCore.softplus(x);
    }
}
/** @nocollapse */ Softplus.className = "softplus";
(0, _tfjsCore.serialization).registerClass(Softplus);
class Softsign extends Activation {
    apply(x) {
        return _tfjsBackend.softsign(x);
    }
}
/** @nocollapse */ Softsign.className = "softsign";
(0, _tfjsCore.serialization).registerClass(Softsign);
class Tanh extends Activation {
    apply(x) {
        return _tfjsCore.tanh(x);
    }
}
/** @nocollapse */ Tanh.className = "tanh";
(0, _tfjsCore.serialization).registerClass(Tanh);
class Softmax extends Activation {
    /**
     * Calculate the activation function.
     *
     * @param x Tensor.
     * @param axis Integer, axis along which the softmax normalization is applied.
     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
     * an error.
     *
     * @returns a Tensor of the same shape as x
     *
     * @throws ValueError: In case `dim(x) < 2`.
     */ apply(x, axis = -1) {
        return _tfjsCore.softmax(x, axis);
    }
}
/** @nocollapse */ Softmax.className = "softmax";
(0, _tfjsCore.serialization).registerClass(Softmax);
class LogSoftmax extends Activation {
    /**
     * Calculate the activation function of log softmax:
     * log( exp(x_i) / sum(exp(x)) )
     *
     * @param x Tensor.
     * @param axis Integer, axis along which the softmax normalization is applied.
     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
     * an error.
     *
     * @returns a Tensor of the same shape as x
     *
     * @throws ValueError: In case `dim(x) < 2`.
     */ apply(x, axis = -1) {
        return _tfjsCore.logSoftmax(x, axis);
    }
}
/** @nocollapse */ LogSoftmax.className = "logSoftmax";
(0, _tfjsCore.serialization).registerClass(LogSoftmax);
function serializeActivation(activation) {
    return activation.getClassName();
}
function deserializeActivation(config, customObjects = {}) {
    return (0, _genericUtils.deserializeKerasObject)(config, (0, _tfjsCore.serialization).SerializationMap.getMap().classNameMap, customObjects, "activation");
}
function getActivation(identifier) {
    if (identifier == null) {
        const config = {};
        config["className"] = "linear";
        config["config"] = {};
        return deserializeActivation(config);
    }
    if (typeof identifier === "string") {
        const config1 = {};
        config1["className"] = identifier;
        config1["config"] = {};
        return deserializeActivation(config1);
    } else if (identifier instanceof Activation) return identifier;
    else return deserializeActivation(identifier);
}

},{"@tensorflow/tfjs-core":"2votT","./backend/tfjs_backend":"iABet","./utils/generic_utils":"2cErd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"447e0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Regularizer base class.
 */ parcelHelpers.export(exports, "Regularizer", ()=>Regularizer);
parcelHelpers.export(exports, "L1L2", ()=>L1L2);
parcelHelpers.export(exports, "l1", ()=>l1);
parcelHelpers.export(exports, "l2", ()=>l2);
parcelHelpers.export(exports, "REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP", ()=>REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP);
parcelHelpers.export(exports, "serializeRegularizer", ()=>serializeRegularizer);
parcelHelpers.export(exports, "deserializeRegularizer", ()=>deserializeRegularizer);
parcelHelpers.export(exports, "getRegularizer", ()=>getRegularizer);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* original source: keras/regularizers.py */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("./backend/tfjs_backend");
var _genericUtils = require("./utils/generic_utils");
function assertObjectArgs(args) {
    if (args != null && typeof args !== "object") throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` + `object, but received: ${args}`);
}
class Regularizer extends (0, _tfjsCore.serialization).Serializable {
}
class L1L2 extends Regularizer {
    constructor(args){
        super();
        assertObjectArgs(args);
        this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;
        this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;
        this.hasL1 = this.l1 !== 0;
        this.hasL2 = this.l2 !== 0;
    }
    /**
     * Porting note: Renamed from __call__.
     * @param x Variable of which to calculate the regularization score.
     */ apply(x) {
        return (0, _tfjsCore.tidy)(()=>{
            let regularization = (0, _tfjsCore.zeros)([
                1
            ]);
            if (this.hasL1) regularization = (0, _tfjsCore.add)(regularization, (0, _tfjsCore.sum)(_tfjsCore.mul(this.l1, (0, _tfjsCore.abs)(x))));
            if (this.hasL2) regularization = (0, _tfjsCore.add)(regularization, (0, _tfjsCore.sum)(_tfjsCore.mul(this.l2, _tfjsBackend.square(x))));
            return regularization.asScalar();
        });
    }
    getConfig() {
        return {
            "l1": this.l1,
            "l2": this.l2
        };
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls({
            l1: config["l1"],
            l2: config["l2"]
        });
    }
}
/** @nocollapse */ L1L2.className = "L1L2";
(0, _tfjsCore.serialization).registerClass(L1L2);
function l1(args) {
    assertObjectArgs(args);
    return new L1L2({
        l1: args != null ? args.l1 : null,
        l2: 0
    });
}
function l2(args) {
    assertObjectArgs(args);
    return new L1L2({
        l2: args != null ? args.l2 : null,
        l1: 0
    });
}
const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    "l1l2": "L1L2"
};
function serializeRegularizer(constraint) {
    return (0, _genericUtils.serializeKerasObject)(constraint);
}
function deserializeRegularizer(config, customObjects = {}) {
    return (0, _genericUtils.deserializeKerasObject)(config, (0, _tfjsCore.serialization).SerializationMap.getMap().classNameMap, customObjects, "regularizer");
}
function getRegularizer(identifier) {
    if (identifier == null) return null;
    if (typeof identifier === "string") {
        const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;
        const config = {
            className,
            config: {}
        };
        return deserializeRegularizer(config);
    } else if (identifier instanceof Regularizer) return identifier;
    else return deserializeRegularizer(identifier);
}

},{"@tensorflow/tfjs-core":"2votT","./backend/tfjs_backend":"iABet","./utils/generic_utils":"2cErd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yA90":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Transpose and cast the input before the conv2d.
 * @param x Input image tensor.
 * @param dataFormat
 */ parcelHelpers.export(exports, "preprocessConv2DInput", ()=>preprocessConv2DInput);
/**
 * Transpose and cast the input before the conv3d.
 * @param x Input image tensor.
 * @param dataFormat
 */ parcelHelpers.export(exports, "preprocessConv3DInput", ()=>preprocessConv3DInput);
/**
 * 1D-convolution with bias added.
 *
 * Porting Note: This function does not exist in the Python Keras backend.
 *   It is exactly the same as `conv2d`, except the added `bias`.
 *
 * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.
 * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.
 * @param bias Bias, rank-3, of shape `[outDepth]`.
 * @param strides
 * @param padding Padding mode.
 * @param dataFormat Data format.
 * @param dilationRate
 * @returns The result of the 1D convolution.
 * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.
 */ parcelHelpers.export(exports, "conv1dWithBias", ()=>conv1dWithBias);
/**
 * 1D-convolution.
 *
 * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.
 * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s
 * @param strides
 * @param padding Padding mode.
 * @param dataFormat Data format.
 * @param dilationRate
 * @returns The result of the 1D convolution.
 * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.
 */ parcelHelpers.export(exports, "conv1d", ()=>conv1d);
/**
 * 2D Convolution
 * @param x
 * @param kernel kernel of the convolution.
 * @param strides strides array.
 * @param padding padding mode. Default to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param dilationRate dilation rate array.
 * @returns Result of the 2D pooling.
 */ parcelHelpers.export(exports, "conv2d", ()=>conv2d);
/**
 * 2D Convolution with an added bias and optional activation.
 * Note: This function does not exist in the Python Keras Backend. This function
 * is exactly the same as `conv2d`, except the added `bias`.
 */ parcelHelpers.export(exports, "conv2dWithBiasActivation", ()=>conv2dWithBiasActivation);
/**
 * 3D Convolution.
 * @param x
 * @param kernel kernel of the convolution.
 * @param strides strides array.
 * @param padding padding mode. Default to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param dilationRate dilation rate array.
 * @returns Result of the 3D convolution.
 */ parcelHelpers.export(exports, "conv3d", ()=>conv3d);
/**
 * 3D Convolution with an added bias.
 * Note: This function does not exist in the Python Keras Backend. This function
 * is exactly the same as `conv3d`, except the added `bias`.
 */ parcelHelpers.export(exports, "conv3dWithBias", ()=>conv3dWithBias);
/**
 * Abstract convolution layer.
 */ parcelHelpers.export(exports, "BaseConv", ()=>BaseConv);
/**
 * Abstract nD convolution layer.  Ancestor of convolution layers which reduce
 * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.
 */ parcelHelpers.export(exports, "Conv", ()=>Conv);
parcelHelpers.export(exports, "Conv2D", ()=>Conv2D);
parcelHelpers.export(exports, "Conv3D", ()=>Conv3D);
parcelHelpers.export(exports, "Conv2DTranspose", ()=>Conv2DTranspose);
parcelHelpers.export(exports, "SeparableConv", ()=>SeparableConv);
parcelHelpers.export(exports, "SeparableConv2D", ()=>SeparableConv2D);
parcelHelpers.export(exports, "Conv1D", ()=>Conv1D);
parcelHelpers.export(exports, "Cropping2D", ()=>Cropping2D);
parcelHelpers.export(exports, "UpSampling2D", ()=>UpSampling2D);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * TensorFlow.js Layers: Convolutional Layers
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _activations = require("../activations");
var _common = require("../backend/common");
var _tfjsBackend = require("../backend/tfjs_backend");
var _common1 = require("../common");
var _constraints = require("../constraints");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _initializers = require("../initializers");
var _regularizers = require("../regularizers");
var _convUtils = require("../utils/conv_utils");
var _genericUtils = require("../utils/generic_utils");
var _typesUtils = require("../utils/types_utils");
function preprocessConv2DInput(x, dataFormat) {
    // TODO(cais): Cast type to float32 if not.
    return (0, _tfjsCore.tidy)(()=>{
        (0, _common1.checkDataFormat)(dataFormat);
        if (dataFormat === "channelsFirst") return _tfjsCore.transpose(x, [
            0,
            2,
            3,
            1
        ]); // NCHW -> NHWC.
        else return x;
    });
}
function preprocessConv3DInput(x, dataFormat) {
    return (0, _tfjsCore.tidy)(()=>{
        (0, _common1.checkDataFormat)(dataFormat);
        if (dataFormat === "channelsFirst") return _tfjsCore.transpose(x, [
            0,
            2,
            3,
            4,
            1
        ]); // NCDHW -> NDHWC.
        else return x;
    });
}
function conv1dWithBias(x, kernel, bias, strides = 1, padding = "valid", dataFormat, dilationRate = 1) {
    return (0, _tfjsCore.tidy)(()=>{
        if (dataFormat == null) dataFormat = (0, _common.imageDataFormat)();
        (0, _common1.checkDataFormat)(dataFormat);
        // Check the ranks of x, kernel and bias.
        if (x.shape.length !== 3) throw new (0, _errors.ValueError)(`The input of a conv1dWithBias operation should be 3, but is ` + `${x.shape.length} instead.`);
        if (kernel.shape.length !== 3) throw new (0, _errors.ValueError)(`The kernel for a conv1dWithBias operation should be 3, but is ` + `${kernel.shape.length} instead`);
        if (bias != null && bias.shape.length !== 1) throw new (0, _errors.ValueError)(`The bias for a conv1dWithBias operation should be 1, but is ` + `${kernel.shape.length} instead`);
        // TODO(cais): Support CAUSAL padding mode.
        if (dataFormat === "channelsFirst") x = _tfjsCore.transpose(x, [
            0,
            2,
            1
        ]); // NCW -> NWC.
        if (padding === "causal") throw new (0, _errors.NotImplementedError)("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
        let y = _tfjsCore.conv1d(x, kernel, strides, padding === "same" ? "same" : "valid", "NWC", dilationRate);
        if (bias != null) y = _tfjsBackend.biasAdd(y, bias);
        return y;
    });
}
function conv1d(x, kernel, strides = 1, padding = "valid", dataFormat, dilationRate = 1) {
    return (0, _tfjsCore.tidy)(()=>{
        (0, _common1.checkDataFormat)(dataFormat);
        return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);
    });
}
function conv2d(x, kernel, strides = [
    1,
    1
], padding = "valid", dataFormat, dilationRate) {
    return (0, _tfjsCore.tidy)(()=>{
        (0, _common1.checkDataFormat)(dataFormat);
        return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);
    });
}
function conv2dWithBiasActivation(x, kernel, bias, strides = [
    1,
    1
], padding = "valid", dataFormat, dilationRate, activation = null) {
    return (0, _tfjsCore.tidy)(()=>{
        if (dataFormat == null) dataFormat = (0, _common.imageDataFormat)();
        (0, _common1.checkDataFormat)(dataFormat);
        if (x.rank !== 3 && x.rank !== 4) throw new (0, _errors.ValueError)(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` + `but received ${x.rank}.`);
        if (kernel.rank !== 3 && kernel.rank !== 4) throw new (0, _errors.ValueError)(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` + `but received ${x.rank}.`);
        let y = preprocessConv2DInput(x, dataFormat);
        if (padding === "causal") throw new (0, _errors.NotImplementedError)("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
        y = _tfjsCore.fused.conv2d({
            x: y,
            filter: kernel,
            strides: strides,
            pad: padding === "same" ? "same" : "valid",
            dilations: dilationRate,
            dataFormat: "NHWC",
            bias,
            activation
        });
        if (dataFormat === "channelsFirst") y = _tfjsCore.transpose(y, [
            0,
            3,
            1,
            2
        ]);
        return y;
    });
}
function conv3d(x, kernel, strides = [
    1,
    1,
    1
], padding = "valid", dataFormat, dilationRate) {
    return (0, _tfjsCore.tidy)(()=>{
        (0, _common1.checkDataFormat)(dataFormat);
        return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);
    });
}
function conv3dWithBias(x, kernel, bias, strides = [
    1,
    1,
    1
], padding = "valid", dataFormat, dilationRate) {
    return (0, _tfjsCore.tidy)(()=>{
        if (dataFormat == null) dataFormat = (0, _common.imageDataFormat)();
        (0, _common1.checkDataFormat)(dataFormat);
        if (x.rank !== 4 && x.rank !== 5) throw new (0, _errors.ValueError)(`conv3dWithBias expects input to be of rank 4 or 5, but received ` + `${x.rank}.`);
        if (kernel.rank !== 4 && kernel.rank !== 5) throw new (0, _errors.ValueError)(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` + `${x.rank}.`);
        let y = preprocessConv3DInput(x, dataFormat);
        if (padding === "causal") throw new (0, _errors.NotImplementedError)("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
        y = _tfjsCore.conv3d(y, kernel, strides, padding === "same" ? "same" : "valid", "NDHWC", dilationRate);
        if (bias != null) y = _tfjsBackend.biasAdd(y, bias);
        if (dataFormat === "channelsFirst") y = _tfjsCore.transpose(y, [
            0,
            4,
            1,
            2,
            3
        ]);
        return y;
    });
}
class BaseConv extends (0, _topology.Layer) {
    constructor(rank, args){
        super(args);
        this.bias = null;
        this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal";
        this.DEFAULT_BIAS_INITIALIZER = "zeros";
        BaseConv.verifyArgs(args);
        this.rank = rank;
        _genericUtils.assertPositiveInteger(this.rank, "rank");
        if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) throw new (0, _errors.NotImplementedError)(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` + `not implemented yet.`);
        this.kernelSize = (0, _convUtils.normalizeArray)(args.kernelSize, rank, "kernelSize");
        this.strides = (0, _convUtils.normalizeArray)(args.strides == null ? 1 : args.strides, rank, "strides");
        this.padding = args.padding == null ? "valid" : args.padding;
        (0, _common1.checkPaddingMode)(this.padding);
        this.dataFormat = args.dataFormat == null ? "channelsLast" : args.dataFormat;
        (0, _common1.checkDataFormat)(this.dataFormat);
        this.activation = (0, _activations.getActivation)(args.activation);
        this.useBias = args.useBias == null ? true : args.useBias;
        this.biasInitializer = (0, _initializers.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
        this.biasConstraint = (0, _constraints.getConstraint)(args.biasConstraint);
        this.biasRegularizer = (0, _regularizers.getRegularizer)(args.biasRegularizer);
        this.activityRegularizer = (0, _regularizers.getRegularizer)(args.activityRegularizer);
        this.dilationRate = (0, _convUtils.normalizeArray)(args.dilationRate == null ? 1 : args.dilationRate, rank, "dilationRate");
        if (this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) throw new (0, _errors.ValueError)(`dilationRate must be a number or an array of a single number ` + `for 1D convolution, but received ` + `${JSON.stringify(this.dilationRate)}`);
        else if (this.rank === 2) {
            if (typeof this.dilationRate === "number") this.dilationRate = [
                this.dilationRate,
                this.dilationRate
            ];
            else if (this.dilationRate.length !== 2) throw new (0, _errors.ValueError)(`dilationRate must be a number or array of two numbers for 2D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);
        } else if (this.rank === 3) {
            if (typeof this.dilationRate === "number") this.dilationRate = [
                this.dilationRate,
                this.dilationRate,
                this.dilationRate
            ];
            else if (this.dilationRate.length !== 3) throw new (0, _errors.ValueError)(`dilationRate must be a number or array of three numbers for 3D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);
        }
    }
    static verifyArgs(args) {
        // Check config.kernelSize type and shape.
        _genericUtils.assert("kernelSize" in args, `required key 'kernelSize' not in config`);
        if (typeof args.kernelSize !== "number" && !_genericUtils.checkArrayTypeAndLength(args.kernelSize, "number", 1, 3)) throw new (0, _errors.ValueError)(`BaseConv expects config.kernelSize to be number or number[] with ` + `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);
    }
    getConfig() {
        const config = {
            kernelSize: this.kernelSize,
            strides: this.strides,
            padding: this.padding,
            dataFormat: this.dataFormat,
            dilationRate: this.dilationRate,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint)
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
class Conv extends BaseConv {
    constructor(rank, args){
        super(rank, args);
        this.kernel = null;
        Conv.verifyArgs(args);
        this.filters = args.filters;
        _genericUtils.assertPositiveInteger(this.filters, "filters");
        this.kernelInitializer = (0, _initializers.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
        this.kernelConstraint = (0, _constraints.getConstraint)(args.kernelConstraint);
        this.kernelRegularizer = (0, _regularizers.getRegularizer)(args.kernelRegularizer);
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const channelAxis = this.dataFormat === "channelsFirst" ? 1 : inputShape.length - 1;
        if (inputShape[channelAxis] == null) throw new (0, _errors.ValueError)(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);
        const inputDim = inputShape[channelAxis];
        const kernelShape = this.kernelSize.concat([
            inputDim,
            this.filters
        ]);
        this.kernel = this.addWeight("kernel", kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        if (this.useBias) this.bias = this.addWeight("bias", [
            this.filters
        ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        this.inputSpec = [
            {
                ndim: this.rank + 2,
                axes: {
                    [channelAxis]: inputDim
                }
            }
        ];
        this.built = true;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
            let outputs;
            const biasValue = this.bias == null ? null : this.bias.read();
            const fusedActivationName = _genericUtils.mapActivationToFusedKernel(this.activation.getClassName());
            if (fusedActivationName != null && this.rank === 2) outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);
            else {
                if (this.rank === 1) outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
                else if (this.rank === 2) // TODO(cais): Move up to constructor.
                outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);
                else if (this.rank === 3) outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);
                else throw new (0, _errors.NotImplementedError)("convolutions greater than 3D are not implemented yet.");
                if (this.activation != null) outputs = this.activation.apply(outputs);
            }
            return outputs;
        });
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const newSpace = [];
        const space = this.dataFormat === "channelsLast" ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);
        for(let i = 0; i < space.length; ++i){
            const newDim = (0, _convUtils.convOutputLength)(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === "number" ? this.dilationRate : this.dilationRate[i]);
            newSpace.push(newDim);
        }
        let outputShape = [
            inputShape[0]
        ];
        if (this.dataFormat === "channelsLast") {
            outputShape = outputShape.concat(newSpace);
            outputShape.push(this.filters);
        } else {
            outputShape.push(this.filters);
            outputShape = outputShape.concat(newSpace);
        }
        return outputShape;
    }
    getConfig() {
        const config = {
            filters: this.filters,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint)
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
    static verifyArgs(args) {
        // Check config.filters type, shape, and value.
        if (!("filters" in args) || typeof args.filters !== "number" || args.filters < 1) throw new (0, _errors.ValueError)(`Convolution layer expected config.filters to be a 'number' > 0 ` + `but got ${JSON.stringify(args.filters)}`);
    }
}
class Conv2D extends Conv {
    constructor(args){
        super(2, args);
        Conv2D.verifyArgs(args);
    }
    getConfig() {
        const config = super.getConfig();
        delete config["rank"];
        return config;
    }
    static verifyArgs(args) {
        // config.kernelSize must be a number or array of numbers.
        if (typeof args.kernelSize !== "number" && !_genericUtils.checkArrayTypeAndLength(args.kernelSize, "number", 1, 2)) throw new (0, _errors.ValueError)(`Conv2D expects config.kernelSize to be number or number[] with ` + `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);
    }
}
/** @nocollapse */ Conv2D.className = "Conv2D";
(0, _tfjsCore.serialization).registerClass(Conv2D);
class Conv3D extends Conv {
    constructor(args){
        super(3, args);
        Conv3D.verifyArgs(args);
    }
    getConfig() {
        const config = super.getConfig();
        delete config["rank"];
        return config;
    }
    static verifyArgs(args) {
        // config.kernelSize must be a number or array of numbers.
        if (typeof args.kernelSize !== "number") {
            if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) throw new (0, _errors.ValueError)(`Conv3D expects config.kernelSize to be number or` + ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);
        }
    }
}
/** @nocollapse */ Conv3D.className = "Conv3D";
(0, _tfjsCore.serialization).registerClass(Conv3D);
class Conv2DTranspose extends Conv2D {
    constructor(args){
        super(args);
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: 4
            })
        ];
        if (this.padding !== "same" && this.padding !== "valid") throw new (0, _errors.ValueError)(`Conv2DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        if (inputShape.length !== 4) throw new (0, _errors.ValueError)("Input should have rank 4; Received input shape: " + JSON.stringify(inputShape));
        const channelAxis = this.dataFormat === "channelsFirst" ? 1 : inputShape.length - 1;
        if (inputShape[channelAxis] == null) throw new (0, _errors.ValueError)("The channel dimension of the inputs should be defined. Found `None`.");
        const inputDim = inputShape[channelAxis];
        const kernelShape = this.kernelSize.concat([
            this.filters,
            inputDim
        ]);
        this.kernel = this.addWeight("kernel", kernelShape, "float32", this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        if (this.useBias) this.bias = this.addWeight("bias", [
            this.filters
        ], "float32", this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        // Set input spec.
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: 4,
                axes: {
                    [channelAxis]: inputDim
                }
            })
        ];
        this.built = true;
    }
    call(inputs, kwargs) {
        return _tfjsCore.tidy(()=>{
            let input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            if (input.shape.length !== 4) throw new (0, _errors.ValueError)(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);
            const inputShape = input.shape;
            const batchSize = inputShape[0];
            let hAxis;
            let wAxis;
            if (this.dataFormat === "channelsFirst") {
                hAxis = 2;
                wAxis = 3;
            } else {
                hAxis = 1;
                wAxis = 2;
            }
            const height = inputShape[hAxis];
            const width = inputShape[wAxis];
            const kernelH = this.kernelSize[0];
            const kernelW = this.kernelSize[1];
            const strideH = this.strides[0];
            const strideW = this.strides[1];
            // Infer the dynamic output shape.
            const outHeight = (0, _convUtils.deconvLength)(height, strideH, kernelH, this.padding);
            const outWidth = (0, _convUtils.deconvLength)(width, strideW, kernelW, this.padding);
            // Porting Note: We don't branch based on `this.dataFormat` here,
            // because
            //   the tjfs-core function `conv2dTranspose` called below always
            //   assumes channelsLast.
            const outputShape = [
                batchSize,
                outHeight,
                outWidth,
                this.filters
            ];
            if (this.dataFormat !== "channelsLast") input = _tfjsCore.transpose(input, [
                0,
                2,
                3,
                1
            ]);
            let outputs = _tfjsCore.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);
            if (this.dataFormat !== "channelsLast") outputs = _tfjsCore.transpose(outputs, [
                0,
                3,
                1,
                2
            ]);
            if (this.bias != null) outputs = _tfjsBackend.biasAdd(outputs, this.bias.read(), this.dataFormat);
            if (this.activation != null) outputs = this.activation.apply(outputs);
            return outputs;
        });
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const outputShape = inputShape.slice();
        let channelAxis;
        let heightAxis;
        let widthAxis;
        if (this.dataFormat === "channelsFirst") {
            channelAxis = 1;
            heightAxis = 2;
            widthAxis = 3;
        } else {
            channelAxis = 3;
            heightAxis = 1;
            widthAxis = 2;
        }
        const kernelH = this.kernelSize[0];
        const kernelW = this.kernelSize[1];
        const strideH = this.strides[0];
        const strideW = this.strides[1];
        outputShape[channelAxis] = this.filters;
        outputShape[heightAxis] = (0, _convUtils.deconvLength)(outputShape[heightAxis], strideH, kernelH, this.padding);
        outputShape[widthAxis] = (0, _convUtils.deconvLength)(outputShape[widthAxis], strideW, kernelW, this.padding);
        return outputShape;
    }
    getConfig() {
        const config = super.getConfig();
        delete config["dilationRate"];
        return config;
    }
}
/** @nocollapse */ Conv2DTranspose.className = "Conv2DTranspose";
(0, _tfjsCore.serialization).registerClass(Conv2DTranspose);
class SeparableConv extends Conv {
    constructor(rank, config){
        super(rank, config);
        this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform";
        this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform";
        this.depthwiseKernel = null;
        this.pointwiseKernel = null;
        if (config.filters == null) throw new (0, _errors.ValueError)("The `filters` configuration field is required by SeparableConv, but is unspecified.");
        if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) throw new (0, _errors.ValueError)("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
        if (config.padding != null && config.padding !== "same" && config.padding !== "valid") throw new (0, _errors.ValueError)(`SeparableConv${this.rank}D supports only padding modes: ` + `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);
        this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;
        this.depthwiseInitializer = (0, _initializers.getInitializer)(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);
        this.depthwiseRegularizer = (0, _regularizers.getRegularizer)(config.depthwiseRegularizer);
        this.depthwiseConstraint = (0, _constraints.getConstraint)(config.depthwiseConstraint);
        this.pointwiseInitializer = (0, _initializers.getInitializer)(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);
        this.pointwiseRegularizer = (0, _regularizers.getRegularizer)(config.pointwiseRegularizer);
        this.pointwiseConstraint = (0, _constraints.getConstraint)(config.pointwiseConstraint);
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        if (inputShape.length < this.rank + 2) throw new (0, _errors.ValueError)(`Inputs to SeparableConv${this.rank}D should have rank ` + `${this.rank + 2}, but received input shape: ` + `${JSON.stringify(inputShape)}`);
        const channelAxis = this.dataFormat === "channelsFirst" ? 1 : inputShape.length - 1;
        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) throw new (0, _errors.ValueError)(`The channel dimension of the inputs should be defined, ` + `but found ${JSON.stringify(inputShape[channelAxis])}`);
        const inputDim = inputShape[channelAxis];
        const depthwiseKernelShape = this.kernelSize.concat([
            inputDim,
            this.depthMultiplier
        ]);
        const pointwiseKernelShape = [];
        for(let i = 0; i < this.rank; ++i)pointwiseKernelShape.push(1);
        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);
        const trainable = true;
        this.depthwiseKernel = this.addWeight("depthwise_kernel", depthwiseKernelShape, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);
        this.pointwiseKernel = this.addWeight("pointwise_kernel", pointwiseKernelShape, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);
        if (this.useBias) this.bias = this.addWeight("bias", [
            this.filters
        ], "float32", this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);
        else this.bias = null;
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: this.rank + 2,
                axes: {
                    [channelAxis]: inputDim
                }
            })
        ];
        this.built = true;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
            let output;
            if (this.rank === 1) throw new (0, _errors.NotImplementedError)("1D separable convolution is not implemented yet.");
            else if (this.rank === 2) {
                if (this.dataFormat === "channelsFirst") inputs = _tfjsCore.transpose(inputs, [
                    0,
                    2,
                    3,
                    1
                ]); // NCHW -> NHWC.
                output = _tfjsCore.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC");
            }
            if (this.useBias) output = _tfjsBackend.biasAdd(output, this.bias.read(), this.dataFormat);
            if (this.activation != null) output = this.activation.apply(output);
            if (this.dataFormat === "channelsFirst") output = _tfjsCore.transpose(output, [
                0,
                3,
                1,
                2
            ]); // NHWC -> NCHW.
            return output;
        });
    }
    getConfig() {
        const config = super.getConfig();
        delete config["rank"];
        delete config["kernelInitializer"];
        delete config["kernelRegularizer"];
        delete config["kernelConstraint"];
        config["depthwiseInitializer"] = (0, _initializers.serializeInitializer)(this.depthwiseInitializer);
        config["pointwiseInitializer"] = (0, _initializers.serializeInitializer)(this.pointwiseInitializer);
        config["depthwiseRegularizer"] = (0, _regularizers.serializeRegularizer)(this.depthwiseRegularizer);
        config["pointwiseRegularizer"] = (0, _regularizers.serializeRegularizer)(this.pointwiseRegularizer);
        config["depthwiseConstraint"] = (0, _constraints.serializeConstraint)(this.depthwiseConstraint);
        config["pointwiseConstraint"] = (0, _constraints.serializeConstraint)(this.pointwiseConstraint);
        return config;
    }
}
/** @nocollapse */ SeparableConv.className = "SeparableConv";
class SeparableConv2D extends SeparableConv {
    constructor(args){
        super(2, args);
    }
}
/** @nocollapse */ SeparableConv2D.className = "SeparableConv2D";
(0, _tfjsCore.serialization).registerClass(SeparableConv2D);
class Conv1D extends Conv {
    constructor(args){
        super(1, args);
        Conv1D.verifyArgs(args);
        this.inputSpec = [
            {
                ndim: 3
            }
        ];
    }
    getConfig() {
        const config = super.getConfig();
        delete config["rank"];
        delete config["dataFormat"];
        return config;
    }
    static verifyArgs(args) {
        // config.kernelSize must be a number or array of numbers.
        if (typeof args.kernelSize !== "number" && !_genericUtils.checkArrayTypeAndLength(args.kernelSize, "number", 1, 1)) throw new (0, _errors.ValueError)(`Conv1D expects config.kernelSize to be number or number[] with ` + `length 1, but received ${JSON.stringify(args.kernelSize)}.`);
    }
}
/** @nocollapse */ Conv1D.className = "Conv1D";
(0, _tfjsCore.serialization).registerClass(Conv1D);
class Cropping2D extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        if (typeof args.cropping === "number") this.cropping = [
            [
                args.cropping,
                args.cropping
            ],
            [
                args.cropping,
                args.cropping
            ]
        ];
        else if (typeof args.cropping[0] === "number") this.cropping = [
            [
                args.cropping[0],
                args.cropping[0]
            ],
            [
                args.cropping[1],
                args.cropping[1]
            ]
        ];
        else this.cropping = args.cropping;
        this.dataFormat = args.dataFormat === undefined ? "channelsLast" : args.dataFormat;
        this.inputSpec = [
            {
                ndim: 4
            }
        ];
    }
    computeOutputShape(inputShape) {
        if (this.dataFormat === "channelsFirst") return [
            inputShape[0],
            inputShape[1],
            inputShape[2] - this.cropping[0][0] - this.cropping[0][1],
            inputShape[3] - this.cropping[1][0] - this.cropping[1][1]
        ];
        else return [
            inputShape[0],
            inputShape[1] - this.cropping[0][0] - this.cropping[0][1],
            inputShape[2] - this.cropping[1][0] - this.cropping[1][1],
            inputShape[3]
        ];
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
            if (this.dataFormat === "channelsLast") {
                const hSliced = _tfjsBackend.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
                return _tfjsBackend.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
            } else {
                const hSliced1 = _tfjsBackend.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
                return _tfjsBackend.sliceAlongAxis(hSliced1, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
            }
        });
    }
    getConfig() {
        const config = {
            cropping: this.cropping,
            dataFormat: this.dataFormat
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Cropping2D.className = "Cropping2D";
(0, _tfjsCore.serialization).registerClass(Cropping2D);
class UpSampling2D extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.DEFAULT_SIZE = [
            2,
            2
        ];
        this.inputSpec = [
            {
                ndim: 4
            }
        ];
        this.size = args.size == null ? this.DEFAULT_SIZE : args.size;
        this.dataFormat = args.dataFormat == null ? "channelsLast" : args.dataFormat;
    }
    computeOutputShape(inputShape) {
        if (this.dataFormat === "channelsFirst") {
            const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];
            const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];
            return [
                inputShape[0],
                inputShape[1],
                height,
                width
            ];
        } else {
            const height1 = inputShape[1] == null ? null : this.size[0] * inputShape[1];
            const width1 = inputShape[2] == null ? null : this.size[1] * inputShape[2];
            return [
                inputShape[0],
                height1,
                width1,
                inputShape[3]
            ];
        }
    }
    call(inputs, kwargs) {
        return _tfjsCore.tidy(()=>{
            let input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            const inputShape = input.shape;
            if (this.dataFormat === "channelsFirst") {
                input = _tfjsCore.transpose(input, [
                    0,
                    2,
                    3,
                    1
                ]);
                const height = this.size[0] * inputShape[2];
                const width = this.size[1] * inputShape[3];
                const resized = input.resizeNearestNeighbor([
                    height,
                    width
                ]);
                return _tfjsCore.transpose(resized, [
                    0,
                    3,
                    1,
                    2
                ]);
            } else {
                const height1 = this.size[0] * inputShape[1];
                const width1 = this.size[1] * inputShape[2];
                return input.resizeNearestNeighbor([
                    height1,
                    width1
                ]);
            }
        });
    }
    getConfig() {
        const config = {
            size: this.size,
            dataFormat: this.dataFormat
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ UpSampling2D.className = "UpSampling2D";
(0, _tfjsCore.serialization).registerClass(UpSampling2D);

},{"@tensorflow/tfjs-core":"2votT","../activations":"9UgTm","../backend/common":"3qfoZ","../backend/tfjs_backend":"iABet","../common":"fOhOh","../constraints":"kRkSV","../engine/topology":"2OPnm","../errors":"kA7ff","../initializers":"4FrEp","../regularizers":"447e0","../utils/conv_utils":"umxIO","../utils/generic_utils":"2cErd","../utils/types_utils":"70VAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"umxIO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Transforms a single number of array of numbers into an array of numbers.
 * @param value
 * @param n: The size of the tuple to be returned.
 * @param name: Name of the parameter, used for generating error messages.
 * @returns An array of numbers.
 */ parcelHelpers.export(exports, "normalizeArray", ()=>normalizeArray);
/**
 * Determines output length of a convolution given input length.
 * @param inputLength
 * @param filterSize
 * @param padding
 * @param stride
 * @param dilation: dilation rate.
 */ parcelHelpers.export(exports, "convOutputLength", ()=>convOutputLength);
parcelHelpers.export(exports, "deconvLength", ()=>deconvLength);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _errors = require("../errors");
var _genericUtils = require("./generic_utils");
var _mathUtils = require("./math_utils");
function normalizeArray(value, n, name) {
    if (typeof value === "number") return (0, _genericUtils.pyListRepeat)(value, n);
    else {
        if (value.length !== n) throw new (0, _errors.ValueError)(`The ${name} argument must be an integer or tuple of ${n} integers.` + ` Received: ${value.length} elements.`);
        for(let i = 0; i < n; ++i){
            const singleValue = value[i];
            if (!(0, _mathUtils.isInteger)(singleValue)) throw new (0, _errors.ValueError)(`The ${name} argument must be an integer or tuple of ${n}` + ` integers. Received: ${JSON.stringify(value)} including a` + ` non-integer number ${singleValue}`);
        }
        return value;
    }
}
function convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {
    if (inputLength == null) return inputLength;
    const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);
    let outputLength;
    if (padding === "same") outputLength = inputLength;
    else outputLength = inputLength - dilatedFilterSize + 1;
    return Math.floor((outputLength + stride - 1) / stride);
}
function deconvLength(dimSize, strideSize, kernelSize, padding) {
    if (dimSize == null) return null;
    if (padding === "valid") dimSize = dimSize * strideSize + (0, _mathUtils.max)([
        kernelSize - strideSize,
        0
    ]);
    else if (padding === "same") dimSize = dimSize * strideSize;
    else throw new (0, _errors.ValueError)(`Unsupport padding mode: ${padding}.`);
    return dimSize;
}

},{"../errors":"kA7ff","./generic_utils":"2cErd","./math_utils":"865Nd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4H2CZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 2D convolution with separable filters.
 * @param x Input tensor.
 * @param depthwiseKernel Convolution kernel for depthwise convolution.
 * @param strides Strides (Array of two integers).
 * @param padding Padding model.
 * @param dataFormat Data format.
 * @param dilationRate Array of two integers, dilation rates for the separable
 *   convolution.
 * @returns Output tensor.
 * @throws ValueError If depthwiseKernel is not a 4D array.
 */ parcelHelpers.export(exports, "depthwiseConv2d", ()=>depthwiseConv2d);
parcelHelpers.export(exports, "DepthwiseConv2D", ()=>DepthwiseConv2D);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * TensorFlow.js Layers: Depthwise Convolutional Layers
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _common = require("../backend/common");
var _tfjsBackend = require("../backend/tfjs_backend");
var _common1 = require("../common");
var _constraints = require("../constraints");
var _errors = require("../errors");
var _initializers = require("../initializers");
var _regularizers = require("../regularizers");
var _convUtils = require("../utils/conv_utils");
var _typesUtils = require("../utils/types_utils");
var _convolutional = require("./convolutional");
function depthwiseConv2d(x, depthwiseKernel, strides = [
    1,
    1
], padding = "valid", dataFormat, dilationRate) {
    return (0, _tfjsCore.tidy)(()=>{
        if (dataFormat == null) dataFormat = (0, _common.imageDataFormat)();
        (0, _common1.checkDataFormat)(dataFormat);
        let y = (0, _convolutional.preprocessConv2DInput)(x, dataFormat);
        if (x.rank !== 4) throw new (0, _errors.ValueError)(`Input for depthwiseConv2d is required to be 4-D, but is instead ` + `${x.rank}-D`);
        if (depthwiseKernel.rank !== 4) throw new (0, _errors.ValueError)(`depthwiseKernel is required to be 4-D, but is instead ` + `${depthwiseKernel.rank}-D`);
        y = _tfjsCore.depthwiseConv2d(y, depthwiseKernel, strides, padding === "same" ? "same" : "valid", "NHWC", dilationRate);
        if (dataFormat === "channelsFirst") y = _tfjsCore.transpose(y, [
            0,
            3,
            1,
            2
        ]);
        return y;
    });
}
class DepthwiseConv2D extends (0, _convolutional.BaseConv) {
    constructor(args){
        super(2, args);
        this.depthwiseKernel = null;
        this.depthMultiplier = args.depthMultiplier == null ? 1 : args.depthMultiplier;
        this.depthwiseInitializer = (0, _initializers.getInitializer)(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);
        this.depthwiseConstraint = (0, _constraints.getConstraint)(args.depthwiseConstraint);
        this.depthwiseRegularizer = (0, _regularizers.getRegularizer)(args.depthwiseRegularizer);
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        if (inputShape.length < 4) throw new (0, _errors.ValueError)(`Inputs to DepthwiseConv2D should have rank 4. ` + `Received input shape: ${JSON.stringify(inputShape)}.`);
        const channelAxis = this.dataFormat === "channelsFirst" ? 1 : 3;
        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) throw new (0, _errors.ValueError)("The channel dimension of the inputs to DepthwiseConv2D should " + `be defined, but is not (${inputShape[channelAxis]}).`);
        const inputDim = inputShape[channelAxis];
        const depthwiseKernelShape = [
            this.kernelSize[0],
            this.kernelSize[1],
            inputDim,
            this.depthMultiplier
        ];
        this.depthwiseKernel = this.addWeight("depthwise_kernel", depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);
        if (this.useBias) this.bias = this.addWeight("bias", [
            inputDim * this.depthMultiplier
        ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        else this.bias = null;
        this.built = true;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
            let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
            // TODO(cais): Add support for dilation.
            if (this.useBias) outputs = _tfjsBackend.biasAdd(outputs, this.bias.read(), this.dataFormat);
            if (this.activation != null) outputs = this.activation.apply(outputs);
            return outputs;
        });
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const rows = this.dataFormat === "channelsFirst" ? inputShape[2] : inputShape[1];
        const cols = this.dataFormat === "channelsFirst" ? inputShape[3] : inputShape[2];
        const outFilters = this.dataFormat === "channelsFirst" ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;
        const outRows = (0, _convUtils.convOutputLength)(rows, this.kernelSize[0], this.padding, this.strides[0]);
        const outCols = (0, _convUtils.convOutputLength)(cols, this.kernelSize[1], this.padding, this.strides[1]);
        if (this.dataFormat === "channelsFirst") return [
            inputShape[0],
            outFilters,
            outRows,
            outCols
        ];
        else // In this case, assume 'channelsLast'.
        return [
            inputShape[0],
            outRows,
            outCols,
            outFilters
        ];
    }
    getConfig() {
        const config = super.getConfig();
        config["depthMultiplier"] = this.depthMultiplier;
        config["depthwiseInitializer"] = (0, _initializers.serializeInitializer)(this.depthwiseInitializer);
        config["depthwiseRegularizer"] = (0, _regularizers.serializeRegularizer)(this.depthwiseRegularizer);
        config["depthwiseConstraint"] = (0, _constraints.serializeConstraint)(this.depthwiseRegularizer);
        return config;
    }
}
/** @nocollapse */ DepthwiseConv2D.className = "DepthwiseConv2D";
(0, _tfjsCore.serialization).registerClass(DepthwiseConv2D);

},{"@tensorflow/tfjs-core":"2votT","../backend/common":"3qfoZ","../backend/tfjs_backend":"iABet","../common":"fOhOh","../constraints":"kRkSV","../errors":"kA7ff","../initializers":"4FrEp","../regularizers":"447e0","../utils/conv_utils":"umxIO","../utils/types_utils":"70VAF","./convolutional":"7yA90","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"huFIs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Dropout", ()=>Dropout);
parcelHelpers.export(exports, "SpatialDropout1D", ()=>SpatialDropout1D);
parcelHelpers.export(exports, "Dense", ()=>Dense);
parcelHelpers.export(exports, "Flatten", ()=>Flatten);
parcelHelpers.export(exports, "Activation", ()=>Activation);
parcelHelpers.export(exports, "RepeatVector", ()=>RepeatVector);
parcelHelpers.export(exports, "Reshape", ()=>Reshape);
parcelHelpers.export(exports, "Permute", ()=>Permute);
parcelHelpers.export(exports, "Masking", ()=>Masking);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * TensorFlow.js Layers: Basic Layers.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _activations = require("../activations");
var _tfjsBackend = require("../backend/tfjs_backend");
var _constraints = require("../constraints");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _initializers = require("../initializers");
var _regularizers = require("../regularizers");
var _genericUtils = require("../utils/generic_utils");
var _mathUtils = require("../utils/math_utils");
var _typesUtils = require("../utils/types_utils");
class Dropout extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.rate = Math.max(Math.min(args.rate, 1), 0);
        // So that the scalar doesn't get tidied up between executions.
        this.noiseShape = args.noiseShape;
        this.seed = args.seed;
        this.supportsMasking = true;
    }
    getNoiseShape(input) {
        if (this.noiseShape == null) return this.noiseShape;
        const inputShape = input.shape;
        const noiseShape = [];
        for(let i = 0; i < this.noiseShape.length; ++i)noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);
        return noiseShape;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            if (0 < this.rate && this.rate < 1) {
                const training = kwargs["training"] == null ? false : kwargs["training"];
                const noiseShape = this.getNoiseShape(input);
                const output = _tfjsBackend.inTrainPhase(()=>_tfjsBackend.dropout(input, this.rate, noiseShape, this.seed), ()=>input, training);
                return output;
            }
            return inputs;
        });
    }
    getConfig() {
        const config = {
            rate: this.rate,
            noiseShape: this.noiseShape,
            seed: this.seed
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
    dispose() {
        return super.dispose();
    }
}
/** @nocollapse */ Dropout.className = "Dropout";
(0, _tfjsCore.serialization).registerClass(Dropout);
class SpatialDropout1D extends Dropout {
    constructor(args){
        super(args);
        this.inputSpec = [
            {
                ndim: 3
            }
        ];
    }
    getNoiseShape(input) {
        const inputShape = input.shape;
        return [
            inputShape[0],
            1,
            inputShape[2]
        ];
    }
}
/** @nocollapse */ SpatialDropout1D.className = "SpatialDropout1D";
(0, _tfjsCore.serialization).registerClass(SpatialDropout1D);
class Dense extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        // Default activation: Linear (none).
        this.activation = null;
        this.useBias = true;
        this.kernel = null;
        this.bias = null;
        this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal";
        this.DEFAULT_BIAS_INITIALIZER = "zeros";
        if (args.batchInputShape == null && args.inputShape == null && args.inputDim != null) {
            // This logic is copied from Layer's constructor, since we can't
            // do exactly what the Python constructor does for Dense().
            let batchSize = null;
            if (args.batchSize != null) batchSize = args.batchSize;
            this.batchInputShape = [
                batchSize,
                args.inputDim
            ];
        }
        this.units = args.units;
        (0, _genericUtils.assertPositiveInteger)(this.units, "units");
        this.activation = (0, _activations.getActivation)(args.activation);
        if (args.useBias != null) this.useBias = args.useBias;
        this.kernelInitializer = (0, _initializers.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
        this.biasInitializer = (0, _initializers.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
        this.kernelConstraint = (0, _constraints.getConstraint)(args.kernelConstraint);
        this.biasConstraint = (0, _constraints.getConstraint)(args.biasConstraint);
        this.kernelRegularizer = (0, _regularizers.getRegularizer)(args.kernelRegularizer);
        this.biasRegularizer = (0, _regularizers.getRegularizer)(args.biasRegularizer);
        this.activityRegularizer = (0, _regularizers.getRegularizer)(args.activityRegularizer);
        this.supportsMasking = true;
        this.inputSpec = [
            {
                minNDim: 2
            }
        ];
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const inputLastDim = inputShape[inputShape.length - 1];
        if (this.kernel == null) {
            this.kernel = this.addWeight("kernel", [
                inputLastDim,
                this.units
            ], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
            if (this.useBias) this.bias = this.addWeight("bias", [
                this.units
            ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        }
        this.inputSpec = [
            {
                minNDim: 2,
                axes: {
                    [-1]: inputLastDim
                }
            }
        ];
        this.built = true;
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const outputShape = inputShape.slice();
        outputShape[outputShape.length - 1] = this.units;
        return outputShape;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            // Dense layer accepts only a single input.
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            const fusedActivationName = (0, _genericUtils.mapActivationToFusedKernel)(this.activation.getClassName());
            let output;
            if (fusedActivationName != null) output = _tfjsBackend.dot(input, this.kernel.read(), fusedActivationName, this.bias ? this.bias.read() : null);
            else {
                output = _tfjsBackend.dot(input, this.kernel.read());
                if (this.bias != null) output = _tfjsBackend.biasAdd(output, this.bias.read());
                if (this.activation != null) output = this.activation.apply(output);
            }
            return output;
        });
    }
    getConfig() {
        const config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint)
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Dense.className = "Dense";
(0, _tfjsCore.serialization).registerClass(Dense);
class Flatten extends (0, _topology.Layer) {
    constructor(args){
        args = args || {};
        super(args);
        this.inputSpec = [
            {
                minNDim: 3
            }
        ];
        this.dataFormat = args.dataFormat;
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        for (const dim of inputShape.slice(1)){
            if (dim == null) throw new (0, _errors.ValueError)(`The shape of the input to "Flatten" is not fully defined ` + `(got ${inputShape.slice(1)}). Make sure to pass a complete ` + `"input_shape" or "batch_input_shape" argument to the first ` + `layer in your model.`);
        }
        return [
            inputShape[0],
            (0, _mathUtils.arrayProd)(inputShape, 1)
        ];
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            let input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            if (this.dataFormat === "channelsFirst" && input.rank > 1) {
                const permutation = [
                    0
                ];
                for(let i = 2; i < input.rank; ++i)permutation.push(i);
                permutation.push(1);
                input = input.transpose(permutation);
            }
            return _tfjsBackend.batchFlatten(input);
        });
    }
    getConfig() {
        const config = {};
        if (this.dataFormat != null) config["dataFormat"] = this.dataFormat;
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Flatten.className = "Flatten";
(0, _tfjsCore.serialization).registerClass(Flatten);
class Activation extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.supportsMasking = true;
        this.activation = (0, _activations.getActivation)(args.activation);
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            return this.activation.apply(input);
        });
    }
    getConfig() {
        const config = {
            activation: (0, _activations.serializeActivation)(this.activation)
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Activation.className = "Activation";
(0, _tfjsCore.serialization).registerClass(Activation);
class RepeatVector extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.n = args.n;
        this.inputSpec = [
            {
                ndim: 2
            }
        ];
    }
    computeOutputShape(inputShape) {
        return [
            inputShape[0],
            this.n,
            inputShape[1]
        ];
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
            return _tfjsBackend.repeat(inputs, this.n);
        });
    }
    getConfig() {
        const config = {
            n: this.n
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ RepeatVector.className = "RepeatVector";
(0, _tfjsCore.serialization).registerClass(RepeatVector);
class Reshape extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.targetShape = args.targetShape;
        // Make sure that all unknown dimensions are represented as `null`.
        for(let i = 0; i < this.targetShape.length; ++i)if (this.isUnknown(this.targetShape[i])) this.targetShape[i] = null;
    }
    isUnknown(dim) {
        return dim < 0 || dim == null;
    }
    /**
     * Finds and replaces a missing dimension in output shape.
     *
     * This is a near direct port of the internal Numpy function
     * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.
     *
     * @param inputShape: Original shape of array begin reshape.
     * @param outputShape: Target shape of the array, with at most a single
     * `null` or negative number, which indicates an underdetermined dimension
     * that should be derived from `inputShape` and the known dimensions of
     *   `outputShape`.
     * @returns: The output shape with `null` replaced with its computed value.
     * @throws: ValueError: If `inputShape` and `outputShape` do not match.
     */ fixUnknownDimension(inputShape, outputShape) {
        const errorMsg = "Total size of new array must be unchanged.";
        const finalShape = outputShape.slice();
        let known = 1;
        let unknown = null;
        for(let i = 0; i < finalShape.length; ++i){
            const dim = finalShape[i];
            if (this.isUnknown(dim)) {
                if (unknown === null) unknown = i;
                else throw new (0, _errors.ValueError)("Can only specifiy one unknown dimension.");
            } else known *= dim;
        }
        const originalSize = (0, _mathUtils.arrayProd)(inputShape);
        if (unknown !== null) {
            if (known === 0 || originalSize % known !== 0) throw new (0, _errors.ValueError)(errorMsg);
            finalShape[unknown] = originalSize / known;
        } else if (originalSize !== known) throw new (0, _errors.ValueError)(errorMsg);
        return finalShape;
    }
    computeOutputShape(inputShape) {
        let anyUnknownDims = false;
        for(let i = 0; i < inputShape.length; ++i)if (this.isUnknown(inputShape[i])) {
            anyUnknownDims = true;
            break;
        }
        if (anyUnknownDims) return inputShape.slice(0, 1).concat(this.targetShape);
        else return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            const inputShape = input.shape;
            const outputShape = inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));
            return input.reshape(outputShape);
        });
    }
    getConfig() {
        const config = {
            targetShape: this.targetShape
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Reshape.className = "Reshape";
(0, _tfjsCore.serialization).registerClass(Reshape);
class Permute extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        if (args.dims == null) throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
        if (!Array.isArray(args.dims)) throw new Error("Permute constructor requires `dims` to be an Array, but received " + `${args.dims} instead.`);
        // Check the validity of the permutation indices.
        const expectedSortedIndices = (0, _mathUtils.range)(1, args.dims.length + 1);
        if (!(0, _tfjsCore.util).arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) throw new Error("Invalid permutation `dims`: " + JSON.stringify(args.dims) + " `dims` must contain consecutive integers starting from 1.");
        this.dims = args.dims;
        this.dimsIncludingBatch = [
            0
        ].concat(this.dims);
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: this.dims.length + 1
            })
        ];
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const outputShape = inputShape.slice();
        this.dims.forEach((dim, i)=>{
            outputShape[i + 1] = inputShape[dim];
        });
        return outputShape;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.transpose)((0, _typesUtils.getExactlyOneTensor)(inputs), this.dimsIncludingBatch);
    }
    getConfig() {
        const config = {
            dims: this.dims
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Permute.className = "Permute";
(0, _tfjsCore.serialization).registerClass(Permute);
class Masking extends (0, _topology.Layer) {
    constructor(args){
        super(args == null ? {} : args);
        this.supportsMasking = true;
        if (args != null) this.maskValue = args.maskValue == null ? 0 : args.maskValue;
        else this.maskValue = 0;
    }
    computeOutputShape(inputShape) {
        return inputShape;
    }
    getConfig() {
        const baseConfig = super.getConfig();
        const config = {
            maskValue: this.maskValue
        };
        Object.assign(config, baseConfig);
        return config;
    }
    computeMask(inputs, mask) {
        const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
        const axis = -1;
        return (0, _tfjsCore.any)((0, _tfjsCore.notEqual)(input, this.maskValue), axis);
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            const axis = -1;
            const keepDims = true;
            const booleanMask = (0, _tfjsCore.any)((0, _tfjsCore.notEqual)(input, this.maskValue), axis, keepDims);
            const output = input.mul(booleanMask.asType(input.dtype));
            return output;
        });
    }
}
/** @nocollapse */ Masking.className = "Masking";
(0, _tfjsCore.serialization).registerClass(Masking);

},{"@tensorflow/tfjs-core":"2votT","../activations":"9UgTm","../backend/tfjs_backend":"iABet","../constraints":"kRkSV","../engine/topology":"2OPnm","../errors":"kA7ff","../initializers":"4FrEp","../regularizers":"447e0","../utils/generic_utils":"2cErd","../utils/math_utils":"865Nd","../utils/types_utils":"70VAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bleLR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Embedding", ()=>Embedding);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * TensorFlow.js Layers: Embedding Layer.
 *
 * Original source: keras/constraints.py
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("../backend/tfjs_backend");
var _constraints = require("../constraints");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _initializers = require("../initializers");
var _regularizers = require("../regularizers");
var _genericUtils = require("../utils/generic_utils");
var _typesUtils = require("../utils/types_utils");
class Embedding extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.embeddings = null;
        this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform";
        if (args.batchInputShape == null && args.inputShape == null) {
            // Porting Note: This logic is copied from Layer's constructor, since we
            // can't do exactly what the Python constructor does for Embedding().
            // Specifically, the super constructor can not be called after the
            // mutation of the `config` argument.
            let batchSize = null;
            if (args.batchSize != null) batchSize = args.batchSize;
            if (args.inputLength == null) // Fix super-constructor to what it would have done if
            // 'config.inputShape' were (None, )
            this.batchInputShape = [
                batchSize,
                null
            ];
            else // Fix super-constructor to what it would have done if
            // 'config.inputShape' were (config.inputLength, )
            this.batchInputShape = [
                batchSize
            ].concat(_genericUtils.toList(args.inputLength));
        }
        this.inputDim = args.inputDim;
        _genericUtils.assertPositiveInteger(this.inputDim, "inputDim");
        this.outputDim = args.outputDim;
        _genericUtils.assertPositiveInteger(this.outputDim, "outputDim");
        this.embeddingsInitializer = (0, _initializers.getInitializer)(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);
        this.embeddingsRegularizer = (0, _regularizers.getRegularizer)(args.embeddingsRegularizer);
        this.activityRegularizer = (0, _regularizers.getRegularizer)(args.activityRegularizer);
        this.embeddingsConstraint = (0, _constraints.getConstraint)(args.embeddingsConstraint);
        this.maskZero = args.maskZero;
        this.supportsMasking = args.maskZero;
        this.inputLength = args.inputLength;
    }
    build(inputShape) {
        this.embeddings = this.addWeight("embeddings", [
            this.inputDim,
            this.outputDim
        ], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);
        this.built = true;
    }
    // Override warnOnIncompatibleInputShape because an embedding layer allows
    // the input to have varying ranks.
    warnOnIncompatibleInputShape(inputShape) {}
    computeMask(inputs, mask) {
        return (0, _tfjsCore.tidy)(()=>{
            if (!this.maskZero) return null;
            else {
                inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
                return (0, _tfjsCore.notEqual)(inputs, (0, _tfjsCore.zerosLike)(inputs));
            }
        });
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        if (this.inputLength == null) return [
            ...inputShape,
            this.outputDim
        ];
        // inputLength can be an array if input is 3D or higher.
        const inLens = _genericUtils.toList(this.inputLength);
        if (inLens.length !== inputShape.length - 1) throw new (0, _errors.ValueError)(`"inputLength" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);
        else {
            let i = 0;
            for(let k = 0; k < inLens.length; ++k){
                const s1 = inLens[k];
                const s2 = inputShape[k + 1];
                if (s1 != null && s2 != null && s1 !== s2) throw new (0, _errors.ValueError)(`"inputLength" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);
                else if (s1 == null) inLens[i] = s2;
                i++;
            }
        }
        return [
            inputShape[0],
            ...inLens,
            this.outputDim
        ];
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            // Embedding layer accepts only a single input.
            let input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            if (input.dtype !== "int32") input = _tfjsBackend.cast(input, "int32");
            const output = _tfjsBackend.gather(this.embeddings.read(), input.as1D());
            return output.reshape((0, _typesUtils.getExactlyOneShape)(this.computeOutputShape(input.shape)));
        });
    }
    getConfig() {
        const config = {
            inputDim: this.inputDim,
            outputDim: this.outputDim,
            embeddingsInitializer: (0, _initializers.serializeInitializer)(this.embeddingsInitializer),
            embeddingsRegularizer: (0, _regularizers.serializeRegularizer)(this.embeddingsRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            embeddingsConstraint: (0, _constraints.serializeConstraint)(this.embeddingsConstraint),
            maskZero: this.maskZero,
            inputLength: this.inputLength
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Embedding.className = "Embedding";
(0, _tfjsCore.serialization).registerClass(Embedding);

},{"@tensorflow/tfjs-core":"2votT","../backend/tfjs_backend":"iABet","../constraints":"kRkSV","../engine/topology":"2OPnm","../errors":"kA7ff","../initializers":"4FrEp","../regularizers":"447e0","../utils/generic_utils":"2cErd","../utils/types_utils":"70VAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eLfYG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Generic Merge layer for element-wise merge functions.
 *
 * Used to implement `Sum`, `Average`, `Concatenate`, etc.
 */ parcelHelpers.export(exports, "Merge", ()=>Merge);
parcelHelpers.export(exports, "Add", ()=>Add);
/**
 * Calculate the element-wise sum of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Add` layer, by using no input argument
 *    or a single configuration argument. The resultant `Add` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const addLayer = tf.layers.add();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = addLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.add([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);
 * tf.layers.add([input1, input2]).print();
 * // Gives [[11, 22], [33, 44]].
 *
 */ parcelHelpers.export(exports, "add", ()=>add);
parcelHelpers.export(exports, "Multiply", ()=>Multiply);
/**
 * Calculate the element-wise product of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Multiply` layer, by using no input argument
 *    or a single configuration argument. The resultant `Multiply` layer can
 *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const multiplyLayer = tf.layers.multiply();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = multiplyLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.multiply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);
 * tf.layers.multiply([input1, input2]).print();
 * // Gives [[10, 40], [90, 160]].
 *
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
parcelHelpers.export(exports, "Average", ()=>Average);
/**
 * Calculate the element-wise arithmetic mean of inputs, which all have the same
 * shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Average` layer, by using no input argument
 *    or a single configuration argument. The resultant `Average` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const averageLayer = tf.layers.average();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = averageLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.average([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);
 * tf.layers.average([input1, input2]).print();
 * // Gives [[5.5, 11], [16.5, 22]].
 *
 */ parcelHelpers.export(exports, "average", ()=>average);
parcelHelpers.export(exports, "Maximum", ()=>Maximum);
/**
 * Calculate the element-wise maximum of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Maximum` layer, by using no input argument
 *    or a single configuration argument. The resultant `Maximum` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const maximumLayer = tf.layers.maximum();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = maximumLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.maximum([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);
 * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);
 * tf.layers.maximum([input1, input2]).print();
 * // Gives [[10, 20], [30, 40]].
 *
 */ parcelHelpers.export(exports, "maximum", ()=>maximum);
parcelHelpers.export(exports, "Minimum", ()=>Minimum);
/**
 * Calculate the element-wise minimum of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Minimum` layer, by using no input argument
 *    or a single configuration argument. The resultant `Minimum` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const minimumLayer = tf.layers.minimum();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = minimumLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.minimum([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);
 * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);
 * tf.layers.minimum([input1, input2]).print();
 * // Gives [[1, 2], [3, 4]].
 *
 */ parcelHelpers.export(exports, "minimum", ()=>minimum);
parcelHelpers.export(exports, "Concatenate", ()=>Concatenate);
/**
 * Concatenate an `Array` of inputs.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Concatenate` layer, by using no input argument
 *    or a single configuration argument. The resultant `Concatenate` layer can
 *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const concatLayer = tf.layers.concatenate();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 3]});
 * const input2 = tf.input({shape: [2, 4]});
 * const output = concatLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 7], with the first dimension as the undetermined batch
 * // dimension and the last dimension as the result of concatenating the
 * // last dimensions of the two inputs.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 3]});
 * const input2 = tf.input({shape: [2, 4]});
 * const output = tf.layers.concatenate([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension and the last dimension as the result of concatenating the
 * // last dimensions of the two inputs.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);
 * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);
 * tf.layers.concatenate([input1, input2]).print();
 * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].
 *
 */ parcelHelpers.export(exports, "concatenate", ()=>concatenate);
parcelHelpers.export(exports, "Dot", ()=>Dot);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * TensorFlow.js Layers: Merge Layers.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("../backend/tfjs_backend");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _losses = require("../losses");
var _genericUtils = require("../utils/generic_utils");
var _mathUtils = require("../utils/math_utils");
var _typesUtils = require("../utils/types_utils");
class Merge extends (0, _topology.Layer) {
    constructor(args){
        super(args || {});
        this.supportsMasking = true;
    }
    /**
     * Logic for merging multiple tensors, to be overridden by subclasses.
     * @param inputs
     */ mergeFunction(inputs) {
        throw new (0, _errors.NotImplementedError)();
    }
    /**
     * Computes the shape of the result of an elementwise operation.
     *
     * @param shape1: Shape of the first tensor.
     * @param shape2: Shape of the second tensor.
     * @returns Expected output shape when an elementwise operation is carried
     *   out on 2 tensors with shapes `shape1` and `shape2`.
     * @throws ValueError: If `shape1` and `shape2` are not compatible for
     *   element-wise operations.
     */ computeElementwiseOpOutputShape(shape1, shape2) {
        if (shape1 == null || shape2 == null) return null;
        else if (shape1.length < shape2.length) return this.computeElementwiseOpOutputShape(shape2, shape1);
        else if (shape2.length === 0) return shape1;
        const outputShape = shape1.slice(0, shape1.length - shape2.length);
        for(let k = 0; k < shape2.length; ++k){
            const i = shape1[shape1.length - shape2.length + k];
            const j = shape2[k];
            if (i == null || j == null || i < 0 || j < 0) outputShape.push(null);
            else if (i === 1) outputShape.push(j);
            else if (j === 1) outputShape.push(i);
            else {
                if (i !== j) throw new (0, _errors.ValueError)("Operands could not be broadcast together with shapes " + JSON.stringify(shape1) + " " + JSON.stringify(shape2));
                outputShape.push(i);
            }
        }
        return outputShape;
    }
    build(inputShape) {
        // Used purely for shape validation.
        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) // Make sure that inputShape is an Array of shape.
        inputShape = [
            (0, _typesUtils.getExactlyOneShape)(inputShape)
        ];
        inputShape;
        if (inputShape.length < 2) throw new (0, _errors.ValueError)("A merge layer should be called on an Array of at least 2 inputs." + ` Got ${inputShape.length} input(s).`);
        // Make sure that there is at most one unique batch size among the input
        // shapes.
        let batchSizes = [];
        for (const shape of inputShape)if (shape != null && shape[0] !== null) batchSizes.push(shape[0]);
        batchSizes = _genericUtils.unique(batchSizes);
        if (batchSizes.length > 1) throw new (0, _errors.ValueError)(`Can not merge tensors with different batch sizes. ` + `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);
        let outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);
        for(let i = 1; i < inputShape.length; ++i){
            const shape1 = inputShape[i] == null ? null : inputShape[i].slice(1);
            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape1);
        }
        // If the inputs have different ranks, we have to reshape them to make them
        // broadcastable.
        const allRanks = inputShape.map((shape)=>shape.length);
        if (inputShape.indexOf(null) === -1 && _genericUtils.unique(allRanks).length === 1) this.reshapeRequired = false;
        else this.reshapeRequired = true;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs;
            if (this.reshapeRequired) {
                const reshapedInputs = [];
                const inputDims = inputs.map((input)=>input.rank);
                if (inputDims.indexOf(null) === -1) {
                    // If ranks of all inputs are available, we simply expand each of them
                    // at axis=1 until all of them have the same rank.
                    const maxNDim = _mathUtils.max(inputDims);
                    for (let x of inputs){
                        const xNDim = x.rank;
                        for(let k = 0; k < maxNDim - xNDim; ++k)x = _tfjsBackend.expandDims(x, 1);
                        reshapedInputs.push(x);
                    }
                    return this.mergeFunction(reshapedInputs);
                } else {
                    // Transpose all inputs so that batch size is the last dimension.
                    // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]
                    let transposed = false;
                    for (const x1 of inputs){
                        const xNDim1 = x1.rank;
                        if (xNDim1 == null) {
                            const xShape = x1.shape;
                            const batchSize = xShape[0];
                            const newShape = xShape.slice(1).concat([
                                batchSize
                            ]);
                            let xTransposed = x1.reshape([
                                batchSize
                            ].concat(_mathUtils.arrayProd(xShape.slice(1))));
                            xTransposed = _tfjsCore.transpose(xTransposed, [
                                1,
                                0
                            ]);
                            xTransposed = xTransposed.reshape(newShape);
                            reshapedInputs.push(xTransposed);
                            transposed = true;
                        } else if (xNDim1 > 1) {
                            const dims = _mathUtils.range(1, xNDim1).concat([
                                0
                            ]);
                            reshapedInputs.push(_tfjsCore.transpose(x1, dims));
                            transposed = true;
                        } else // We don't transpose inputs if they are 1D vectors or scalars.
                        reshapedInputs.push(x1);
                    }
                    let y = this.mergeFunction(reshapedInputs);
                    const yNDim = y.rank;
                    if (transposed) {
                        // If inputs have been transposed, we have to transpose the output
                        // too.
                        if (yNDim == null) {
                            const yShape = y.shape;
                            const yNDim1 = yShape.length;
                            const batchSize1 = yShape[yNDim1 - 1];
                            const newShape1 = [
                                batchSize1
                            ].concat(yShape.slice(0, yShape.length - 1));
                            y = _tfjsCore.transpose(y.reshape([
                                -1,
                                batchSize1
                            ]), [
                                1,
                                0
                            ]).reshape(newShape1);
                        } else if (yNDim > 1) {
                            const dims1 = [
                                yNDim - 1
                            ].concat(_mathUtils.range(0, yNDim - 1));
                            y = _tfjsCore.transpose(y, dims1);
                        }
                    }
                    return y;
                }
            } else return this.mergeFunction(inputs);
        });
    }
    computeOutputShape(inputShape) {
        inputShape;
        let outputShape;
        if (inputShape[0] == null) outputShape = null;
        else outputShape = inputShape[0].slice(1);
        for(let i = 1; i < inputShape.length; ++i){
            const shape = inputShape[i] == null ? null : inputShape[i].slice(1);
            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);
        }
        let batchSizes = [];
        for (const shape1 of inputShape)if (shape1 != null && shape1[0] !== null) batchSizes.push(shape1[0]);
        batchSizes = _genericUtils.unique(batchSizes);
        if (batchSizes.length === 1) outputShape = batchSizes.concat(outputShape);
        else outputShape = [
            null
        ].concat(outputShape);
        return outputShape;
    }
    computeMask(inputs, mask) {
        return _tfjsCore.tidy(()=>{
            if (mask == null) return null;
            if (!Array.isArray(mask)) throw new (0, _errors.ValueError)("`mask` should be an Array");
            if (!Array.isArray(inputs)) throw new (0, _errors.ValueError)("`inputs` should be an Array");
            if (mask.length !== inputs.length) throw new (0, _errors.ValueError)(`The Array 'inputs' and 'mask' are expected to have the same ` + `length, but have different lengths ` + `(${inputs.length} vs ${mask.length})`);
            if (mask.every((m)=>m == null)) return null;
            mask = mask.map((m)=>m == null ? m : _tfjsCore.expandDims(m, 0));
            let output = mask[0];
            for(let i = 1; i < mask.length - 1; ++i)output = _tfjsCore.logicalAnd(output, mask[i]);
            return output;
        });
    }
}
class Add extends Merge {
    constructor(args){
        super(args);
    }
    mergeFunction(inputs) {
        return (0, _tfjsCore.tidy)(()=>{
            let output = inputs[0].clone();
            for(let i = 1; i < inputs.length; ++i)output = _tfjsCore.add(output, inputs[i]);
            return output;
        });
    }
}
/** @nocollapse */ Add.className = "Add";
(0, _tfjsCore.serialization).registerClass(Add);
function add(config) {
    if (Array.isArray(config)) {
        const layer = new Add({});
        return layer.apply(config);
    } else return new Add(config);
}
class Multiply extends Merge {
    constructor(args){
        super(args);
    }
    mergeFunction(inputs) {
        return (0, _tfjsCore.tidy)(()=>{
            let output = inputs[0].clone();
            for(let i = 1; i < inputs.length; ++i)output = _tfjsCore.mul(output, inputs[i]);
            return output;
        });
    }
}
/** @nocollapse */ Multiply.className = "Multiply";
(0, _tfjsCore.serialization).registerClass(Multiply);
function multiply(config) {
    if (Array.isArray(config)) {
        const layer = new Multiply({});
        return layer.apply(config);
    } else return new Multiply(config);
}
class Average extends Merge {
    constructor(args){
        super(args);
    }
    mergeFunction(inputs) {
        return (0, _tfjsCore.tidy)(()=>{
            let output = inputs[0].clone();
            for(let i = 1; i < inputs.length; ++i)output = _tfjsCore.add(output, inputs[i]);
            return _tfjsCore.mul(1 / inputs.length, output);
        });
    }
}
/** @nocollapse */ Average.className = "Average";
(0, _tfjsCore.serialization).registerClass(Average);
function average(config) {
    if (Array.isArray(config)) {
        const layer = new Average({});
        return layer.apply(config);
    } else return new Average(config);
}
class Maximum extends Merge {
    constructor(args){
        super(args);
    }
    mergeFunction(inputs) {
        return (0, _tfjsCore.tidy)(()=>{
            let output = inputs[0];
            for(let i = 1; i < inputs.length; ++i)output = _tfjsCore.maximum(output, inputs[i]);
            return output;
        });
    }
}
/** @nocollapse */ Maximum.className = "Maximum";
(0, _tfjsCore.serialization).registerClass(Maximum);
function maximum(config) {
    if (Array.isArray(config)) {
        const layer = new Maximum({});
        return layer.apply(config);
    } else return new Maximum(config);
}
class Minimum extends Merge {
    constructor(args){
        super(args);
    }
    mergeFunction(inputs) {
        return (0, _tfjsCore.tidy)(()=>{
            let output = inputs[0];
            for(let i = 1; i < inputs.length; ++i)output = _tfjsCore.minimum(output, inputs[i]);
            return output;
        });
    }
}
/** @nocollapse */ Minimum.className = "Minimum";
(0, _tfjsCore.serialization).registerClass(Minimum);
function minimum(config) {
    if (Array.isArray(config)) {
        const layer = new Minimum({});
        return layer.apply(config);
    } else return new Minimum(config);
}
class Concatenate extends Merge {
    constructor(args){
        super(args);
        this.DEFAULT_AXIS = -1;
        if (args == null) args = {};
        this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;
        this.supportsMasking = true;
        this.reshapeRequired = false;
    }
    build(inputShape) {
        // Used purely for shape validation.]
        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) || inputShape.length === 1) throw new (0, _errors.ValueError)("A `Concatenate` layer should be called on a list of at least 2 inputs");
        inputShape;
        let allNoneShape = true;
        for (const shape of inputShape)if (shape != null) {
            allNoneShape = false;
            break;
        }
        if (allNoneShape) return;
        const shapeSet = [];
        for(let i = 0; i < inputShape.length; ++i){
            const shapeWithoutConcatAxis = inputShape[i].slice();
            shapeWithoutConcatAxis.splice(this.axis, 1);
            let exists = false;
            for (const shape1 of shapeSet)if ((0, _tfjsCore.util).arraysEqual(shape1, shapeWithoutConcatAxis)) {
                exists = true;
                break;
            }
            if (!exists) shapeSet.push(shapeWithoutConcatAxis);
        }
        if (shapeSet.length > 1) throw new (0, _errors.ValueError)("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(inputShape));
    }
    mergeFunction(inputs) {
        return (0, _tfjsCore.tidy)(()=>{
            return _tfjsBackend.concatenate(inputs, this.axis);
        });
    }
    computeOutputShape(inputShape) {
        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) throw new (0, _errors.ValueError)("A `Concatenate` layer should be called on a list of inputs.");
        const inputShapes = inputShape;
        const outputShape = inputShapes[0].slice();
        const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;
        // Porting Note: the line above is because TypeScript doesn't support
        //   negative indices.
        for (const shape of inputShapes.slice(1)){
            if (outputShape[axis] == null || shape[axis] == null) {
                outputShape[axis] = null;
                break;
            }
            outputShape[axis] += shape[axis];
        }
        return outputShape;
    }
    computeMask(inputs, mask) {
        if (mask == null) return null;
        if (!Array.isArray(mask)) throw new (0, _errors.ValueError)("`mask` should be an array for Concatenate");
        if (!Array.isArray(inputs)) throw new (0, _errors.ValueError)("`inputs` should be an array for Concatenate");
        if (mask.length !== inputs.length) throw new (0, _errors.ValueError)(`Mismatch in the length of mask (${mask.length}) ` + `and the legnth of inputs (${inputs.length})`);
        return _tfjsCore.tidy(()=>{
            let allNullMasks = true;
            mask.forEach((m)=>{
                if (m != null) {
                    allNullMasks = false;
                    return;
                }
            });
            if (allNullMasks) return null;
            const outputMasks = [];
            for(let i = 0; i < inputs.length; ++i){
                if (mask[i] == null) // Input is unmasked. Append all 1's to masks.
                outputMasks.push(_tfjsCore.onesLike(inputs[i]).asType("bool"));
                else if (mask[i].rank < inputs[i].rank) // Mask is smaller than the input, expand it.
                outputMasks.push(_tfjsCore.expandDims(mask[i], -1));
                else outputMasks.push(mask[i]);
            }
            const concatenatedMasks = _tfjsCore.concat(outputMasks, this.axis);
            return _tfjsCore.all(concatenatedMasks, -1, false);
        });
    }
    getConfig() {
        const config = {
            "axis": this.axis
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Concatenate.className = "Concatenate";
(0, _tfjsCore.serialization).registerClass(Concatenate);
function concatenate(config) {
    if (Array.isArray(config)) {
        const layer = new Concatenate({});
        return layer.apply(config);
    } else return new Concatenate(config);
}
/**
 * Interpretable potentially negative axis index.
 *
 * For example, given axis = -1, and dim = 3, this function will return 2.
 *
 * @param axis The axis index, may be a positive, zero or negative integer.
 * @param dim Total number of dimensions, a positive integer.
 * @returns A non-negative axis index equivalent to the input `axis`.
 */ function interpretAxis(axis, dim) {
    while(axis < 0)axis += dim;
    return axis;
}
function batchDot(x, y, axes) {
    if (x.shape.length > 3 || y.shape.length > 3) throw new (0, _errors.NotImplementedError)("batchDot is not implemented for tensors of 4D or higher rank yet");
    _tfjsCore.util.assert(x.shape.length >= 2, ()=>`batchDot requires the rank of x to be >= 2, ` + `but got ${x.shape.length}`);
    _tfjsCore.util.assert(x.shape.length >= 2, ()=>`batchDot requires the rank of y to be >= 2, ` + `but got ${y.shape.length}`);
    if (typeof axes === "number") axes = [
        axes,
        axes
    ];
    if (x.dtype === "complex64" || y.dtype === "complex64") throw new (0, _errors.NotImplementedError)("batchDot is not implemented for complex64-type Tensors yet.");
    const xNDim = x.shape.length;
    const yNDim = y.shape.length;
    if (axes == null) // Behave like batchMatmul by default.
    axes = [
        xNDim - 1,
        yNDim - 2
    ];
    const axesArray = axes;
    return _tfjsCore.tidy(()=>{
        let diff;
        if (xNDim > yNDim) {
            diff = xNDim - yNDim;
            const diffShape = [];
            for(let i = 0; i < diff; ++i)diffShape.push(1);
            y = y.reshape(y.shape.concat(diffShape));
        } else if (yNDim > xNDim) {
            diff = yNDim - xNDim;
            const diffShape1 = [];
            for(let i1 = 0; i1 < diff; ++i1)diffShape1.push(1);
            x = x.reshape(x.shape.concat(diffShape1));
        } else diff = 0;
        let out;
        if (x.shape.length === 2 && y.shape.length === 2) {
            if (axesArray[0] === axesArray[1]) out = x.mul(y).sum(axesArray[0]);
            else out = x.transpose([
                1,
                0
            ]).mul(y).sum(axesArray[1]);
        } else {
            const adjX = axesArray[0] !== x.shape.length - 1;
            const adjY = axesArray[1] === y.shape.length - 1;
            out = x.matMul(y, adjX, adjY);
        }
        if (diff > 0) {
            let idx;
            if (xNDim > yNDim) idx = xNDim + yNDim - 3;
            else idx = xNDim - 1;
            const squeezeAxes = [];
            for(let i2 = idx; i2 < idx + diff; ++i2)squeezeAxes.push(i2);
            out = out.squeeze(squeezeAxes);
        }
        if (out.shape.length === 1) out = out.expandDims(1);
        return out;
    });
}
class Dot extends Merge {
    constructor(args){
        super(args);
        this.axes = args.axes;
        this.normalize = args.normalize == null ? false : args.normalize;
        this.supportsMasking = true;
        this.reshapeRequired = false;
    }
    build(inputShape) {
        _tfjsCore.util.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), ()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");
        const shape1 = inputShape[0];
        const shape2 = inputShape[1];
        if (shape1.length > 3 || shape2.length > 3) throw new (0, _errors.NotImplementedError)("Dot layer does not support tensors of 4D or higher rank yet.");
        const axes = this.interpretAxes(shape1, shape2);
        if (shape1[axes[0]] !== shape2[axes[1]]) throw new (0, _errors.ValueError)(`Dimension incompatibility: ` + `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);
    }
    mergeFunction(inputs) {
        if (inputs.length !== 2) throw new (0, _errors.ValueError)("A `Dot` layer must be called on exactly 2 inputs, " + `but received ${inputs.length} input(s).`);
        let x1 = inputs[0];
        let x2 = inputs[1];
        let axes;
        if (!Array.isArray(this.axes)) axes = [
            interpretAxis(this.axes, x1.shape.length),
            interpretAxis(this.axes, x2.shape.length)
        ];
        else axes = this.axes.map((axis, i)=>interpretAxis(axis, inputs[i].shape.length));
        if (this.normalize) {
            x1 = (0, _losses.l2Normalize)(x1, axes[0]);
            x2 = (0, _losses.l2Normalize)(x2, axes[1]);
        }
        return batchDot(x1, x2, axes);
    }
    interpretAxes(shape1, shape2) {
        let axes;
        if (!Array.isArray(this.axes)) // `this.axes` is a single integer.
        axes = [
            interpretAxis(this.axes, shape1.length),
            interpretAxis(this.axes, shape2.length)
        ];
        else // `this.axes` is an Array of integers.
        axes = this.axes;
        return axes;
    }
    computeOutputShape(inputShape) {
        _tfjsCore.util.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), ()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");
        const shape1 = inputShape[0].slice();
        const shape2 = inputShape[1].slice();
        if (shape1.length > 3 || shape2.length > 3) throw new (0, _errors.NotImplementedError)("Dot layer does not support tensors of 4D or higher rank yet.");
        const axes = this.interpretAxes(shape1, shape2);
        shape1.splice(axes[0], 1);
        shape2.splice(axes[1], 1);
        shape2.splice(0, 1);
        const outputShape = shape1.concat(shape2);
        if (outputShape.length === 1) outputShape.push(1);
        return outputShape;
    }
    computeMask(inputs, mask) {
        return null;
    }
    getConfig() {
        const config = {
            "axes": this.axes,
            "normalize": this.normalize
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ Dot.className = "Dot";
(0, _tfjsCore.serialization).registerClass(Dot); // TODO(cais): Add functional interfaces for the merge layers.

},{"@tensorflow/tfjs-core":"2votT","../backend/tfjs_backend":"iABet","../engine/topology":"2OPnm","../errors":"kA7ff","../losses":"fAGPb","../utils/generic_utils":"2cErd","../utils/math_utils":"865Nd","../utils/types_utils":"70VAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"52dbb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GaussianNoise", ()=>GaussianNoise);
parcelHelpers.export(exports, "GaussianDropout", ()=>GaussianDropout);
/**
 * Applies Alpha Dropout to the input.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs
 * to their original values, in order to ensure the self-normalizing property
 * even after this dropout.
 * Alpha Dropout fits well to Scaled Exponential Linear Units
 * by randomly setting activations to the negative saturation value.
 *
 * Arguments:
 *   - `rate`: float, drop probability (as with `Dropout`).
 *     The multiplicative noise will have
 *     standard deviation `sqrt(rate / (1 - rate))`.
 *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the
 *     shape for randomly generated keep/drop flags.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
 */ parcelHelpers.export(exports, "AlphaDropout", ()=>AlphaDropout);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * TensorFlow.js Layers: Noise Layers.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("../backend/tfjs_backend");
var _topology = require("../engine/topology");
var _typesUtils = require("../utils/types_utils");
class GaussianNoise extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.supportsMasking = true;
        this.stddev = args.stddev;
    }
    computeOutputShape(inputShape) {
        return inputShape;
    }
    getConfig() {
        const baseConfig = super.getConfig();
        const config = {
            stddev: this.stddev
        };
        Object.assign(config, baseConfig);
        return config;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            const noised = ()=>_tfjsBackend.randomNormal(input.shape, 0, this.stddev).add(input);
            const output = _tfjsBackend.inTrainPhase(noised, ()=>input, kwargs["training"] || false);
            return output;
        });
    }
}
/** @nocollapse */ GaussianNoise.className = "GaussianNoise";
(0, _tfjsCore.serialization).registerClass(GaussianNoise);
class GaussianDropout extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.supportsMasking = true;
        this.rate = args.rate;
    }
    computeOutputShape(inputShape) {
        return inputShape;
    }
    getConfig() {
        const baseConfig = super.getConfig();
        const config = {
            rate: this.rate
        };
        Object.assign(config, baseConfig);
        return config;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            if (this.rate > 0 && this.rate < 1) {
                const noised = ()=>{
                    const stddev = Math.sqrt(this.rate / (1 - this.rate));
                    return input.mul(_tfjsBackend.randomNormal(input.shape, 1, stddev));
                };
                return _tfjsBackend.inTrainPhase(noised, ()=>input, kwargs["training"] || false);
            }
            return input;
        });
    }
}
/** @nocollapse */ GaussianDropout.className = "GaussianDropout";
(0, _tfjsCore.serialization).registerClass(GaussianDropout);
class AlphaDropout extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.supportsMasking = true;
        this.rate = args.rate;
        this.noiseShape = args.noiseShape;
    }
    _getNoiseShape(inputs) {
        return this.noiseShape || (0, _typesUtils.getExactlyOneTensor)(inputs).shape;
    }
    computeOutputShape(inputShape) {
        return inputShape;
    }
    getConfig() {
        const baseConfig = super.getConfig();
        const config = {
            rate: this.rate
        };
        Object.assign(config, baseConfig);
        return config;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            if (this.rate < 1 && this.rate > 0) {
                const noiseShape = this._getNoiseShape(inputs);
                const droppedInputs = ()=>{
                    const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
                    const alpha = 1.6732632423543772848170429916717;
                    const scale = 1.0507009873554804934193349852946;
                    const alphaP = -alpha * scale;
                    let keptIdx = (0, _tfjsCore.greaterEqual)((0, _tfjsCore.randomUniform)(noiseShape), this.rate);
                    keptIdx = _tfjsBackend.cast(keptIdx, "float32"); // get default dtype.
                    // Get affine transformation params.
                    const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;
                    const b = -a * alphaP * this.rate;
                    // Apply mask.
                    const x = input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));
                    return x.mul(a).add(b);
                };
                return _tfjsBackend.inTrainPhase(droppedInputs, ()=>(0, _typesUtils.getExactlyOneTensor)(inputs), kwargs["training"] || false);
            }
            return inputs;
        });
    }
}
/** @nocollapse */ AlphaDropout.className = "AlphaDropout";
(0, _tfjsCore.serialization).registerClass(AlphaDropout);

},{"@tensorflow/tfjs-core":"2votT","../backend/tfjs_backend":"iABet","../engine/topology":"2OPnm","../utils/types_utils":"70VAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iEuUl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Applies batch normalization on x given mean, var, beta and gamma.
 *
 * I.e. returns:
 *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`
 *
 * @param x Input tensor.
 * @param mean Mean of batch.
 * @param variance Variance of batch.
 * @param beta Tensor with which to center the input.
 * @param gamma Tensor by which to scale the input.
 * @param epsilon Fuzz factor.
 * @returns The result of the batch normalization.
 */ parcelHelpers.export(exports, "batchNormalization", ()=>batchNormalization);
/**
 * Batch normalization for use in training (not inference).
 *
 * @param x Input tensor to be normalized.
 * @param gamma Tensor by which to scale the input.
 * @param beta Tensor by which to center the input.
 * @param reductionAxes Axes over which to normalize.
 * @param epsilon Fuzz factor.
 * @returns An `Array` of three `Tensors`:
 *   [normalized tensor, mean of input, variance of input].
 */ parcelHelpers.export(exports, "normalizeBatchInTraining", ()=>normalizeBatchInTraining);
parcelHelpers.export(exports, "BatchNormalization", ()=>BatchNormalization);
parcelHelpers.export(exports, "LayerNormalization", ()=>LayerNormalization);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Normalization layers.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _constraints = require("../constraints");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _initializers = require("../initializers");
var _regularizers = require("../regularizers");
var _genericUtils = require("../utils/generic_utils");
var _mathUtils = require("../utils/math_utils");
var _typesUtils = require("../utils/types_utils");
function batchNormalization(x, mean, variance, beta, gamma, epsilon = 1e-3) {
    let out;
    if (x.rank === 2) out = _tfjsCore.batchNorm2d(x, mean, variance, beta, gamma, epsilon);
    else if (x.rank === 3) // TODO(cais): Check rank; give proper error message.
    out = _tfjsCore.batchNorm3d(x, mean, variance, beta, gamma, epsilon);
    else if (x.rank === 4) out = _tfjsCore.batchNorm4d(x, mean, variance, beta, gamma, epsilon);
    else throw new (0, _errors.NotImplementedError)(`batchNormalization is not implemented for array of rank ${x.rank} ` + `yet`);
    return out;
}
/**
 * Non-broadcasting batch normalization for use in training (not inference).
 *
 * The input is normalized to zero mean and unit variance along the
 * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.
 * The result of that is returned as the first element
 * of the returned `Array`. The other two elements are the mean and variance,
 * respectively.
 *
 * @param x Input tensor to be normalized.
 * @param gamma Tensor by which to scale the input.
 * @param beta Tensor by which to center the input.
 * @param reductionAxes Axes over which to normalize.
 * @param epsilon Fuzz factor.
 * @returns An `Array` of three `Tensors`:
 *   [normalized tensor, mean of input, variance of input].
 */ function regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {
    return (0, _tfjsCore.tidy)(()=>{
        const meanAndVariance = _tfjsCore.moments(x, reductionAxes);
        const mean = meanAndVariance.mean;
        const variance = meanAndVariance.variance;
        const normed = batchNormalization(x, mean, variance, beta, gamma, epsilon);
        return [
            normed,
            mean,
            variance
        ];
    });
}
/**
 * Broadcasting batch normalization for use in training (not inference).
 *
 * The input is normalized to zero mean and unit variance along the
 * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.
 * The result of that is returned as the first element
 * of the returned `Array`. The other two elements are the mean and variance,
 * respectively.
 *
 * @param x Input tensor to be normalized.
 * @param gamma Tensor by which to scale the input.
 * @param beta Tensor by which to center the input.
 * @param reductionAxes Axes over which to normalize.
 * @param epsilon Fuzz factor.
 * @returns An `Array` of three `Tensors`:
 *   [normalized tensor, mean of input, variance of input].
 */ function broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {
    return (0, _tfjsCore.tidy)(()=>{
        const meanAndVariance = _tfjsCore.moments(x, reductionAxes);
        const mean = meanAndVariance.mean;
        const variance = meanAndVariance.variance;
        const targetShape = [];
        for (const axis of _mathUtils.range(0, x.rank))if (reductionAxes.indexOf(axis) !== -1) targetShape.push(1);
        else targetShape.push(x.shape[axis]);
        const broadcastMean = mean.reshape(targetShape);
        const broadcastVariance = variance.reshape(targetShape);
        const broadcastGamma = gamma == null ? null : gamma.reshape(targetShape);
        const broadcastBeta = beta == null ? null : beta.reshape(targetShape);
        const normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon);
        return [
            normed,
            mean,
            variance
        ];
    });
}
function normalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {
    if ((0, _tfjsCore.util).arraysEqual(reductionAxes.slice().sort(), _mathUtils.range(0, x.rank - 1))) return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);
    else return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);
}
class BatchNormalization extends (0, _topology.Layer) {
    constructor(args){
        if (args == null) args = {};
        super(args);
        this.supportsMasking = true;
        this.axis = args.axis == null ? -1 : args.axis;
        this.momentum = args.momentum == null ? 0.99 : args.momentum;
        this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;
        this.center = args.center == null ? true : args.center;
        this.scale = args.scale == null ? true : args.scale;
        this.betaInitializer = (0, _initializers.getInitializer)(args.betaInitializer || "zeros");
        this.gammaInitializer = (0, _initializers.getInitializer)(args.gammaInitializer || "ones");
        this.movingMeanInitializer = (0, _initializers.getInitializer)(args.movingMeanInitializer || "zeros");
        this.movingVarianceInitializer = (0, _initializers.getInitializer)(args.movingVarianceInitializer || "ones");
        this.betaConstraint = (0, _constraints.getConstraint)(args.betaConstraint);
        this.gammaConstraint = (0, _constraints.getConstraint)(args.gammaConstraint);
        this.betaRegularizer = (0, _regularizers.getRegularizer)(args.betaRegularizer);
        this.gammaRegularizer = (0, _regularizers.getRegularizer)(args.gammaRegularizer);
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const axis = this.axis >= 0 ? this.axis : this.axis + inputShape.length;
        const dim = inputShape[axis];
        if (dim == null) throw new (0, _errors.ValueError)(`Axis ${axis} of input tensor should have a defined dimension but ` + `the layer received an input with shape ` + `${JSON.stringify(inputShape)}.`);
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: inputShape.length,
                axes: {
                    [axis]: dim
                }
            })
        ];
        const shape = [
            dim
        ];
        if (this.scale) this.gamma = this.addWeight("gamma", shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);
        if (this.center) this.beta = this.addWeight("beta", shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);
        this.movingMean = this.addWeight("moving_mean", shape, null, this.movingMeanInitializer, null, false);
        this.movingVariance = this.addWeight("moving_variance", shape, null, this.movingVarianceInitializer, null, false);
        this.built = true;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            const training = kwargs["training"] == null ? false : kwargs["training"];
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            const inputShape = input.shape;
            const ndim = inputShape.length;
            const reductionAxes = _mathUtils.range(0, ndim);
            const axis = this.axis >= 0 ? this.axis : this.axis + ndim;
            reductionAxes.splice(axis, 1);
            const broadcastShape = _genericUtils.pyListRepeat(1, ndim);
            broadcastShape[axis] = inputShape[axis];
            const sortedReductionAxes = reductionAxes.slice();
            sortedReductionAxes.sort();
            const needsBroadcasting = !(0, _tfjsCore.util).arraysEqual(sortedReductionAxes, _mathUtils.range(0, ndim).slice(0, ndim - 1));
            const normalizeInference = ()=>{
                if (needsBroadcasting) {
                    const broadcastMovingMean = this.movingMean.read().reshape(broadcastShape);
                    const broadcastMovingVariance = this.movingVariance.read().reshape(broadcastShape);
                    const broadcastBeta = this.center ? this.beta.read().reshape(broadcastShape) : null;
                    const broadcastGamma = this.scale ? this.gamma.read().reshape(broadcastShape) : null;
                    return batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, this.epsilon);
                } else return batchNormalization(input, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
            };
            if (!training) return normalizeInference();
            const [normedTraining, mean, variance] = normalizeBatchInTraining(input, this.gamma.read(), this.beta.read(), reductionAxes, this.epsilon);
            const doMovingAverage = (variable, value, momentum)=>{
                _tfjsCore.tidy(()=>{
                    const decay = 1 - momentum;
                    const origValue = variable.read();
                    const updateDelta = origValue.sub(value).mul(decay);
                    variable.write(origValue.sub(updateDelta));
                });
            };
            // Perform updates to moving mean and moving variance for training.
            // Porting Note: In PyKeras, these updates to `movingMean` and
            //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s
            //   `update`s using the `add_update()` method. Here we do it imperatively
            //   and encapsulate the updates in a function that is invoked
            //   immediately.
            const updateMovingMeanAndVariance = ()=>{
                doMovingAverage(this.movingMean, mean, this.momentum);
                doMovingAverage(this.movingVariance, variance, this.momentum);
            };
            updateMovingMeanAndVariance();
            return normedTraining;
        });
    }
    getConfig() {
        const config = {
            axis: this.axis,
            momentum: this.momentum,
            epsilon: this.epsilon,
            center: this.center,
            scale: this.scale,
            betaInitializer: (0, _initializers.serializeInitializer)(this.betaInitializer),
            gammaInitializer: (0, _initializers.serializeInitializer)(this.gammaInitializer),
            movingMeanInitializer: (0, _initializers.serializeInitializer)(this.movingMeanInitializer),
            movingVarianceInitializer: (0, _initializers.serializeInitializer)(this.movingVarianceInitializer),
            betaRegularizer: (0, _regularizers.serializeRegularizer)(this.betaRegularizer),
            gammaRegularizer: (0, _regularizers.serializeRegularizer)(this.gammaRegularizer),
            betaConstraint: (0, _constraints.serializeConstraint)(this.betaConstraint),
            gammaConstraint: (0, _constraints.serializeConstraint)(this.gammaConstraint)
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ BatchNormalization.className = "BatchNormalization";
(0, _tfjsCore.serialization).registerClass(BatchNormalization);
class LayerNormalization extends (0, _topology.Layer) {
    constructor(args){
        if (args == null) args = {};
        super(args);
        this.axis = args.axis == null ? -1 : args.axis;
        if (typeof this.axis === "number") {
            if (!Number.isInteger(this.axis)) throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
        } else if (Array.isArray(this.axis)) for (const axis of this.axis){
            if (!Number.isInteger(axis)) throw new Error(`Expected axis to be an array of integers, ` + `but received ${JSON.stringify(this.axis)}`);
        }
        else throw new Error(`Expected axis to be an integer or an array of integers, ` + `but received ${JSON.stringify(this.axis)}`);
        this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;
        this.center = args.center == null ? true : args.center;
        this.scale = args.scale == null ? true : args.scale;
        this.betaInitializer = (0, _initializers.getInitializer)(args.betaInitializer || "zeros");
        this.gammaInitializer = (0, _initializers.getInitializer)(args.gammaInitializer || "ones");
        this.betaRegularizer = (0, _regularizers.getRegularizer)(args.betaRegularizer);
        this.gammaRegularizer = (0, _regularizers.getRegularizer)(args.gammaRegularizer);
        this.supportsMasking = true;
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const nDims = inputShape.length;
        // Convert axis to array and resolve negatives.
        if (typeof this.axis === "number") this.axis = [
            this.axis
        ];
        for(let i = 0; i < this.axis.length; ++i)if (this.axis[i] < 0) this.axis[i] += nDims;
        // Further validate axes.
        for (const axis of this.axis){
            if (axis < 0 || axis >= nDims) throw new Error(`Invalid axis: ${axis}`);
        }
        if (this.axis.length !== _genericUtils.unique(this.axis).length) throw new Error(`Found duplicate axes in: ${this.axis}`);
        const paramShape = this.axis.map((axis)=>inputShape[axis]);
        const trainable = true;
        if (this.scale) this.gamma = this.addWeight("gamma", paramShape, "float32", this.gammaInitializer, this.gammaRegularizer, trainable);
        else this.gamma = null;
        if (this.center) this.beta = this.addWeight("beta", paramShape, "float32", this.betaInitializer, this.betaRegularizer, trainable);
        else this.beta = null;
        this.built = true;
    }
    call(inputs, kwargs) {
        const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
        const inputShape = input.shape;
        const nDims = inputShape.length;
        return (0, _tfjsCore.tidy)(()=>{
            const keepDims = true;
            let { mean , variance  } = (0, _tfjsCore.moments)(input, this.axis, keepDims);
            const broadcastShape = _genericUtils.pyListRepeat(1, nDims);
            for (const dim of this.axis)broadcastShape[dim] = inputShape[dim];
            const broadcast = (v)=>{
                if (v != null && v.shape.length !== nDims && this.axis !== [
                    nDims - 1
                ]) return v.reshape(broadcastShape);
                else return v;
            };
            let scale = broadcast(this.gamma.read());
            let offset = broadcast(this.beta.read());
            // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below
            // is a workaround for the limitation of core's batchNormalization?d don't
            // support broadcasting in their gradients. In addition, the tiling is
            // necessary to ensure correctness on the browser CPU backend regardless
            // of forward or backward computation. Remove this workaround once the
            // limitation is addressed. See .
            const momentsTiling = [];
            const scaleOffsetTiling = [];
            for(let i = 0; i < nDims; ++i)if (this.axis.indexOf(i) !== -1) {
                momentsTiling.push(inputShape[i]);
                scaleOffsetTiling.push(1);
            } else {
                momentsTiling.push(1);
                scaleOffsetTiling.push(inputShape[i]);
            }
            mean = mean.tile(momentsTiling);
            variance = variance.tile(momentsTiling);
            scale = scale.tile(scaleOffsetTiling);
            offset = offset.tile(scaleOffsetTiling);
            return batchNormalization(input, mean, variance, offset, scale, this.epsilon);
        });
    }
    getConfig() {
        const config = {
            axis: this.axis,
            epsilon: this.epsilon,
            center: this.center,
            scale: this.scale,
            betaInitializer: (0, _initializers.serializeInitializer)(this.betaInitializer),
            gammaInitializer: (0, _initializers.serializeInitializer)(this.gammaInitializer),
            betaRegularizer: (0, _regularizers.serializeRegularizer)(this.betaRegularizer),
            gammaRegularizer: (0, _regularizers.serializeRegularizer)(this.gammaRegularizer)
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ LayerNormalization.className = "LayerNormalization";
(0, _tfjsCore.serialization).registerClass(LayerNormalization);

},{"@tensorflow/tfjs-core":"2votT","../constraints":"kRkSV","../engine/topology":"2OPnm","../errors":"kA7ff","../initializers":"4FrEp","../regularizers":"447e0","../utils/generic_utils":"2cErd","../utils/math_utils":"865Nd","../utils/types_utils":"70VAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hiyXr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Pads the middle dimension of a 3D tensor.
 *
 * @param x Input `tf.Tensor` to be padded.
 * @param padding `Array` of 2 integers, how many zeros to add at the start and
 *   end of the middle dimension (i.e., dimension 1).
 * @return A padded 3D `tf.Tensor`.
 */ parcelHelpers.export(exports, "temporalPadding", ()=>temporalPadding);
/**
 * Pads the 2nd and 3rd dimensions of a 4D tensor.
 *
 * @param x Input `tf.Tensor` to be padded.
 * @param padding `Array` of two `Array`s, each of which is an `Array` of two
 *   integers. The amount of padding at the beginning and end of the 2nd and 3rd
 *   dimensions, respectively.
 * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.
 * @return Padded 4D `tf.Tensor`.
 */ parcelHelpers.export(exports, "spatial2dPadding", ()=>spatial2dPadding);
parcelHelpers.export(exports, "ZeroPadding2D", ()=>ZeroPadding2D);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Padding Layers.
 */ // Porting Note: In Python Keras, the padding layers are in convolutional.py,
//   but we decided to put them in a separate file (padding.ts) for clarity.
var _tfjsCore = require("@tensorflow/tfjs-core");
var _common = require("../backend/common");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _typesUtils = require("../utils/types_utils");
function temporalPadding(x, padding) {
    return (0, _tfjsCore.tidy)(()=>{
        if (x.rank !== 3) throw new (0, _errors.ValueError)(`temporalPadding expects input tensor to be 3-D, but received a ` + `${x.rank}-D tensor.`);
        if (padding == null) padding = [
            1,
            1
        ];
        if (padding.length !== 2) throw new (0, _errors.ValueError)(`temporalPadding expects input padding pattern to be a length-2 ` + `array, but received a length-${padding.length} array.`);
        const pattern = [
            [
                0,
                0
            ],
            padding,
            [
                0,
                0
            ]
        ];
        return _tfjsCore.pad(x, pattern);
    });
}
function spatial2dPadding(x, padding, dataFormat) {
    return (0, _tfjsCore.tidy)(()=>{
        if (x.rank !== 4) throw new (0, _errors.ValueError)(`temporalPadding expects input tensor to be 4-D, but received a ` + `${x.rank}-D tensor.`);
        if (padding == null) padding = [
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ];
        if (padding.length !== 2 || padding[0].length !== 2 || padding[1].length !== 2) throw new (0, _errors.ValueError)("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
        if (dataFormat == null) dataFormat = (0, _common.imageDataFormat)();
        if (dataFormat !== "channelsLast" && dataFormat !== "channelsFirst") throw new (0, _errors.ValueError)(`Unknown data format: ${dataFormat}. ` + `Supported data formats are 'channelsLast' and 'channelsFirst.`);
        let pattern;
        if (dataFormat === "channelsFirst") pattern = [
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            padding[0],
            padding[1]
        ];
        else pattern = [
            [
                0,
                0
            ],
            padding[0],
            padding[1],
            [
                0,
                0
            ]
        ];
        return _tfjsCore.pad(x, pattern);
    });
}
class ZeroPadding2D extends (0, _topology.Layer) {
    constructor(args){
        if (args == null) args = {};
        super(args);
        this.dataFormat = args.dataFormat == null ? (0, _common.imageDataFormat)() : args.dataFormat;
        // TODO(cais): Maybe refactor the following logic surrounding `padding`
        //   into a helper method.
        if (args.padding == null) this.padding = [
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ];
        else if (typeof args.padding === "number") this.padding = [
            [
                args.padding,
                args.padding
            ],
            [
                args.padding,
                args.padding
            ]
        ];
        else {
            args.padding = args.padding;
            if (args.padding.length !== 2) throw new (0, _errors.ValueError)(`ZeroPadding2D expects padding to be a length-2 array, but ` + `received a length-${args.padding.length} array.`);
            let heightPadding;
            let widthPadding;
            if (typeof args.padding[0] === "number") {
                heightPadding = [
                    args.padding[0],
                    args.padding[0]
                ];
                widthPadding = [
                    args.padding[1],
                    args.padding[1]
                ];
            } else {
                args.padding = args.padding;
                if (args.padding[0].length !== 2) throw new (0, _errors.ValueError)(`ZeroPadding2D expects height padding to be a length-2 array, ` + `but received a length-${args.padding[0].length} array.`);
                heightPadding = args.padding[0];
                if (args.padding[1].length !== 2) throw new (0, _errors.ValueError)(`ZeroPadding2D expects width padding to be a length-2 array, ` + `but received a length-${args.padding[1].length} array.`);
                widthPadding = args.padding[1];
            }
            this.padding = [
                heightPadding,
                widthPadding
            ];
        }
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: 4
            })
        ];
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        let rows;
        let cols;
        if (this.dataFormat === "channelsFirst") {
            if (inputShape[2] != null && inputShape[2] >= 0) rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];
            else rows = null;
            if (inputShape[3] != null && inputShape[3] >= 0) cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];
            else cols = null;
            return [
                inputShape[0],
                inputShape[1],
                rows,
                cols
            ];
        } else {
            if (inputShape[1] != null && inputShape[1] >= 0) rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];
            else rows = null;
            if (inputShape[2] != null && inputShape[2] >= 0) cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];
            else cols = null;
            return [
                inputShape[0],
                rows,
                cols,
                inputShape[3]
            ];
        }
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>spatial2dPadding((0, _typesUtils.getExactlyOneTensor)(inputs), this.padding, this.dataFormat));
    }
    getConfig() {
        const config = {
            padding: this.padding,
            dataFormat: this.dataFormat
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ ZeroPadding2D.className = "ZeroPadding2D";
(0, _tfjsCore.serialization).registerClass(ZeroPadding2D);

},{"@tensorflow/tfjs-core":"2votT","../backend/common":"3qfoZ","../engine/topology":"2OPnm","../errors":"kA7ff","../utils/types_utils":"70VAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d296C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * 2D pooling.
 * @param x
 * @param poolSize
 * @param stridesdes strides. Defaults to [1, 1].
 * @param padding padding. Defaults to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param poolMode Mode of pooling. Defaults to 'max'.
 * @returns Result of the 2D pooling.
 */ parcelHelpers.export(exports, "pool2d", ()=>pool2d);
/**
 * 3D pooling.
 * @param x
 * @param poolSize. Default to [1, 1, 1].
 * @param strides strides. Defaults to [1, 1, 1].
 * @param padding padding. Defaults to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param poolMode Mode of pooling. Defaults to 'max'.
 * @returns Result of the 3D pooling.
 */ parcelHelpers.export(exports, "pool3d", ()=>pool3d);
/**
 * Abstract class for different pooling 1D layers.
 */ parcelHelpers.export(exports, "Pooling1D", ()=>Pooling1D);
parcelHelpers.export(exports, "MaxPooling1D", ()=>MaxPooling1D);
parcelHelpers.export(exports, "AveragePooling1D", ()=>AveragePooling1D);
/**
 * Abstract class for different pooling 2D layers.
 */ parcelHelpers.export(exports, "Pooling2D", ()=>Pooling2D);
parcelHelpers.export(exports, "MaxPooling2D", ()=>MaxPooling2D);
parcelHelpers.export(exports, "AveragePooling2D", ()=>AveragePooling2D);
/**
 * Abstract class for different pooling 3D layers.
 */ parcelHelpers.export(exports, "Pooling3D", ()=>Pooling3D);
parcelHelpers.export(exports, "MaxPooling3D", ()=>MaxPooling3D);
parcelHelpers.export(exports, "AveragePooling3D", ()=>AveragePooling3D);
/**
 * Abstract class for different global pooling 1D layers.
 */ parcelHelpers.export(exports, "GlobalPooling1D", ()=>GlobalPooling1D);
parcelHelpers.export(exports, "GlobalAveragePooling1D", ()=>GlobalAveragePooling1D);
parcelHelpers.export(exports, "GlobalMaxPooling1D", ()=>GlobalMaxPooling1D);
/**
 * Abstract class for different global pooling 2D layers.
 */ parcelHelpers.export(exports, "GlobalPooling2D", ()=>GlobalPooling2D);
parcelHelpers.export(exports, "GlobalAveragePooling2D", ()=>GlobalAveragePooling2D);
parcelHelpers.export(exports, "GlobalMaxPooling2D", ()=>GlobalMaxPooling2D);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * TensorFlow.js Layers: Pooling Layers.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _common = require("../backend/common");
var _tfjsBackend = require("../backend/tfjs_backend");
var _common1 = require("../common");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _convUtils = require("../utils/conv_utils");
var _genericUtils = require("../utils/generic_utils");
var _typesUtils = require("../utils/types_utils");
var _convolutional = require("./convolutional");
function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {
    return (0, _tfjsCore.tidy)(()=>{
        (0, _common1.checkDataFormat)(dataFormat);
        (0, _common1.checkPoolMode)(poolMode);
        (0, _common1.checkPaddingMode)(padding);
        if (strides == null) strides = [
            1,
            1
        ];
        if (padding == null) padding = "valid";
        if (dataFormat == null) dataFormat = (0, _common.imageDataFormat)();
        if (poolMode == null) poolMode = "max";
        // TODO(cais): Remove the preprocessing step once deeplearn.js supports
        // dataFormat as an input argument.
        x = (0, _convolutional.preprocessConv2DInput)(x, dataFormat); // x is NHWC after preprocessing.
        let y;
        const paddingString = padding === "same" ? "same" : "valid";
        if (poolMode === "max") // TODO(cais): Rank check?
        y = _tfjsCore.maxPool(x, poolSize, strides, paddingString);
        else // TODO(cais): Check the dtype and rank of x and give clear error message
        //   if those are incorrect.
        y = _tfjsCore.avgPool(// TODO(cais): Rank check?
        x, poolSize, strides, paddingString);
        if (dataFormat === "channelsFirst") y = _tfjsCore.transpose(y, [
            0,
            3,
            1,
            2
        ]); // NHWC -> NCHW.
        return y;
    });
}
function pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {
    return (0, _tfjsCore.tidy)(()=>{
        (0, _common1.checkDataFormat)(dataFormat);
        (0, _common1.checkPoolMode)(poolMode);
        (0, _common1.checkPaddingMode)(padding);
        if (strides == null) strides = [
            1,
            1,
            1
        ];
        if (padding == null) padding = "valid";
        if (dataFormat == null) dataFormat = (0, _common.imageDataFormat)();
        if (poolMode == null) poolMode = "max";
        // x is NDHWC after preprocessing.
        x = (0, _convolutional.preprocessConv3DInput)(x, dataFormat);
        let y;
        const paddingString = padding === "same" ? "same" : "valid";
        if (poolMode === "max") y = _tfjsCore.maxPool3d(x, poolSize, strides, paddingString);
        else y = _tfjsCore.avgPool3d(x, poolSize, strides, paddingString);
        if (dataFormat === "channelsFirst") y = _tfjsCore.transpose(y, [
            0,
            4,
            1,
            2,
            3
        ]); // NDHWC -> NCDHW.
        return y;
    });
}
class Pooling1D extends (0, _topology.Layer) {
    /**
     *
     * @param args Parameters for the Pooling layer.
     *
     * config.poolSize defaults to 2.
     */ constructor(args){
        if (args.poolSize == null) args.poolSize = 2;
        super(args);
        if (typeof args.poolSize === "number") this.poolSize = [
            args.poolSize
        ];
        else if (Array.isArray(args.poolSize) && args.poolSize.length === 1 && typeof args.poolSize[0] === "number") this.poolSize = args.poolSize;
        else throw new (0, _errors.ValueError)(`poolSize for 1D convolutional layer must be a number or an ` + `Array of a single number, but received ` + `${JSON.stringify(args.poolSize)}`);
        (0, _genericUtils.assertPositiveInteger)(this.poolSize, "poolSize");
        if (args.strides == null) this.strides = this.poolSize;
        else {
            if (typeof args.strides === "number") this.strides = [
                args.strides
            ];
            else if (Array.isArray(args.strides) && args.strides.length === 1 && typeof args.strides[0] === "number") this.strides = args.strides;
            else throw new (0, _errors.ValueError)(`strides for 1D convolutional layer must be a number or an ` + `Array of a single number, but received ` + `${JSON.stringify(args.strides)}`);
        }
        (0, _genericUtils.assertPositiveInteger)(this.strides, "strides");
        this.padding = args.padding == null ? "valid" : args.padding;
        (0, _common1.checkPaddingMode)(this.padding);
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: 3
            })
        ];
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const length = (0, _convUtils.convOutputLength)(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);
        return [
            inputShape[0],
            length,
            inputShape[2]
        ];
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            // Add dummy last dimension.
            inputs = _tfjsBackend.expandDims((0, _typesUtils.getExactlyOneTensor)(inputs), 2);
            const output = this.poolingFunction((0, _typesUtils.getExactlyOneTensor)(inputs), [
                this.poolSize[0],
                1
            ], [
                this.strides[0],
                1
            ], this.padding, "channelsLast");
            // Remove dummy last dimension.
            return _tfjsCore.squeeze(output, [
                2
            ]);
        });
    }
    getConfig() {
        const config = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
class MaxPooling1D extends Pooling1D {
    constructor(args){
        super(args);
    }
    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
        (0, _common1.checkDataFormat)(dataFormat);
        (0, _common1.checkPaddingMode)(padding);
        return pool2d(inputs, poolSize, strides, padding, dataFormat, "max");
    }
}
/** @nocollapse */ MaxPooling1D.className = "MaxPooling1D";
(0, _tfjsCore.serialization).registerClass(MaxPooling1D);
class AveragePooling1D extends Pooling1D {
    constructor(args){
        super(args);
    }
    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
        (0, _common1.checkDataFormat)(dataFormat);
        (0, _common1.checkPaddingMode)(padding);
        return pool2d(inputs, poolSize, strides, padding, dataFormat, "avg");
    }
}
/** @nocollapse */ AveragePooling1D.className = "AveragePooling1D";
(0, _tfjsCore.serialization).registerClass(AveragePooling1D);
class Pooling2D extends (0, _topology.Layer) {
    constructor(args){
        if (args.poolSize == null) args.poolSize = [
            2,
            2
        ];
        super(args);
        this.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [
            args.poolSize,
            args.poolSize
        ];
        if (args.strides == null) this.strides = this.poolSize;
        else if (Array.isArray(args.strides)) {
            if (args.strides.length !== 2) throw new (0, _errors.ValueError)(`If the strides property of a 2D pooling layer is an Array, ` + `it is expected to have a length of 2, but received length ` + `${args.strides.length}.`);
            this.strides = args.strides;
        } else // `config.strides` is a number.
        this.strides = [
            args.strides,
            args.strides
        ];
        (0, _genericUtils.assertPositiveInteger)(this.poolSize, "poolSize");
        (0, _genericUtils.assertPositiveInteger)(this.strides, "strides");
        this.padding = args.padding == null ? "valid" : args.padding;
        this.dataFormat = args.dataFormat == null ? "channelsLast" : args.dataFormat;
        (0, _common1.checkDataFormat)(this.dataFormat);
        (0, _common1.checkPaddingMode)(this.padding);
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: 4
            })
        ];
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        let rows = this.dataFormat === "channelsFirst" ? inputShape[2] : inputShape[1];
        let cols = this.dataFormat === "channelsFirst" ? inputShape[3] : inputShape[2];
        rows = (0, _convUtils.convOutputLength)(rows, this.poolSize[0], this.padding, this.strides[0]);
        cols = (0, _convUtils.convOutputLength)(cols, this.poolSize[1], this.padding, this.strides[1]);
        if (this.dataFormat === "channelsFirst") return [
            inputShape[0],
            inputShape[1],
            rows,
            cols
        ];
        else return [
            inputShape[0],
            rows,
            cols,
            inputShape[3]
        ];
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            return this.poolingFunction((0, _typesUtils.getExactlyOneTensor)(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);
        });
    }
    getConfig() {
        const config = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
            dataFormat: this.dataFormat
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
class MaxPooling2D extends Pooling2D {
    constructor(args){
        super(args);
    }
    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
        (0, _common1.checkDataFormat)(dataFormat);
        (0, _common1.checkPaddingMode)(padding);
        return pool2d(inputs, poolSize, strides, padding, dataFormat, "max");
    }
}
/** @nocollapse */ MaxPooling2D.className = "MaxPooling2D";
(0, _tfjsCore.serialization).registerClass(MaxPooling2D);
class AveragePooling2D extends Pooling2D {
    constructor(args){
        super(args);
    }
    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
        (0, _common1.checkDataFormat)(dataFormat);
        (0, _common1.checkPaddingMode)(padding);
        return pool2d(inputs, poolSize, strides, padding, dataFormat, "avg");
    }
}
/** @nocollapse */ AveragePooling2D.className = "AveragePooling2D";
(0, _tfjsCore.serialization).registerClass(AveragePooling2D);
class Pooling3D extends (0, _topology.Layer) {
    constructor(args){
        if (args.poolSize == null) args.poolSize = [
            2,
            2,
            2
        ];
        super(args);
        this.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [
            args.poolSize,
            args.poolSize,
            args.poolSize
        ];
        if (args.strides == null) this.strides = this.poolSize;
        else if (Array.isArray(args.strides)) {
            if (args.strides.length !== 3) throw new (0, _errors.ValueError)(`If the strides property of a 3D pooling layer is an Array, ` + `it is expected to have a length of 3, but received length ` + `${args.strides.length}.`);
            this.strides = args.strides;
        } else // `config.strides` is a number.
        this.strides = [
            args.strides,
            args.strides,
            args.strides
        ];
        (0, _genericUtils.assertPositiveInteger)(this.poolSize, "poolSize");
        (0, _genericUtils.assertPositiveInteger)(this.strides, "strides");
        this.padding = args.padding == null ? "valid" : args.padding;
        this.dataFormat = args.dataFormat == null ? "channelsLast" : args.dataFormat;
        (0, _common1.checkDataFormat)(this.dataFormat);
        (0, _common1.checkPaddingMode)(this.padding);
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: 5
            })
        ];
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        let depths = this.dataFormat === "channelsFirst" ? inputShape[2] : inputShape[1];
        let rows = this.dataFormat === "channelsFirst" ? inputShape[3] : inputShape[2];
        let cols = this.dataFormat === "channelsFirst" ? inputShape[4] : inputShape[3];
        depths = (0, _convUtils.convOutputLength)(depths, this.poolSize[0], this.padding, this.strides[0]);
        rows = (0, _convUtils.convOutputLength)(rows, this.poolSize[1], this.padding, this.strides[1]);
        cols = (0, _convUtils.convOutputLength)(cols, this.poolSize[2], this.padding, this.strides[2]);
        if (this.dataFormat === "channelsFirst") return [
            inputShape[0],
            inputShape[1],
            depths,
            rows,
            cols
        ];
        else return [
            inputShape[0],
            depths,
            rows,
            cols,
            inputShape[4]
        ];
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            this.invokeCallHook(inputs, kwargs);
            return this.poolingFunction((0, _typesUtils.getExactlyOneTensor)(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);
        });
    }
    getConfig() {
        const config = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
            dataFormat: this.dataFormat
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
class MaxPooling3D extends Pooling3D {
    constructor(args){
        super(args);
    }
    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
        (0, _common1.checkDataFormat)(dataFormat);
        (0, _common1.checkPaddingMode)(padding);
        return pool3d(inputs, poolSize, strides, padding, dataFormat, "max");
    }
}
/** @nocollapse */ MaxPooling3D.className = "MaxPooling3D";
(0, _tfjsCore.serialization).registerClass(MaxPooling3D);
class AveragePooling3D extends Pooling3D {
    constructor(args){
        super(args);
    }
    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
        (0, _common1.checkDataFormat)(dataFormat);
        (0, _common1.checkPaddingMode)(padding);
        return pool3d(inputs, poolSize, strides, padding, dataFormat, "avg");
    }
}
/** @nocollapse */ AveragePooling3D.className = "AveragePooling3D";
(0, _tfjsCore.serialization).registerClass(AveragePooling3D);
class GlobalPooling1D extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: 3
            })
        ];
    }
    computeOutputShape(inputShape) {
        return [
            inputShape[0],
            inputShape[2]
        ];
    }
    call(inputs, kwargs) {
        throw new (0, _errors.NotImplementedError)();
    }
}
class GlobalAveragePooling1D extends GlobalPooling1D {
    constructor(args){
        super(args || {});
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            return _tfjsCore.mean(input, 1);
        });
    }
}
/** @nocollapse */ GlobalAveragePooling1D.className = "GlobalAveragePooling1D";
(0, _tfjsCore.serialization).registerClass(GlobalAveragePooling1D);
class GlobalMaxPooling1D extends GlobalPooling1D {
    constructor(args){
        super(args || {});
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            return _tfjsCore.max(input, 1);
        });
    }
}
/** @nocollapse */ GlobalMaxPooling1D.className = "GlobalMaxPooling1D";
(0, _tfjsCore.serialization).registerClass(GlobalMaxPooling1D);
class GlobalPooling2D extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        this.dataFormat = args.dataFormat == null ? "channelsLast" : args.dataFormat;
        (0, _common1.checkDataFormat)(this.dataFormat);
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: 4
            })
        ];
    }
    computeOutputShape(inputShape) {
        inputShape;
        if (this.dataFormat === "channelsLast") return [
            inputShape[0],
            inputShape[3]
        ];
        else return [
            inputShape[0],
            inputShape[1]
        ];
    }
    call(inputs, kwargs) {
        throw new (0, _errors.NotImplementedError)();
    }
    getConfig() {
        const config = {
            dataFormat: this.dataFormat
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
class GlobalAveragePooling2D extends GlobalPooling2D {
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            if (this.dataFormat === "channelsLast") return _tfjsCore.mean(input, [
                1,
                2
            ]);
            else return _tfjsCore.mean(input, [
                2,
                3
            ]);
        });
    }
}
/** @nocollapse */ GlobalAveragePooling2D.className = "GlobalAveragePooling2D";
(0, _tfjsCore.serialization).registerClass(GlobalAveragePooling2D);
class GlobalMaxPooling2D extends GlobalPooling2D {
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            const input = (0, _typesUtils.getExactlyOneTensor)(inputs);
            if (this.dataFormat === "channelsLast") return _tfjsCore.max(input, [
                1,
                2
            ]);
            else return _tfjsCore.max(input, [
                2,
                3
            ]);
        });
    }
}
/** @nocollapse */ GlobalMaxPooling2D.className = "GlobalMaxPooling2D";
(0, _tfjsCore.serialization).registerClass(GlobalMaxPooling2D);

},{"@tensorflow/tfjs-core":"2votT","../backend/common":"3qfoZ","../backend/tfjs_backend":"iABet","../common":"fOhOh","../engine/topology":"2OPnm","../errors":"kA7ff","../utils/conv_utils":"umxIO","../utils/generic_utils":"2cErd","../utils/types_utils":"70VAF","./convolutional":"7yA90","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1N3a1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Standardize `apply()` args to a single list of tensor inputs.
 *
 * When running a model loaded from file, the input tensors `initialState` and
 * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the
 * dedicated kwargs fields. `inputs` consists of
 * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this
 * case.
 * This method makes sure that arguments are
 * separated and that `initialState` and `constants` are `Array`s of tensors
 * (or None).
 *
 * @param inputs Tensor or `Array` of  tensors.
 * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.
 * @param constants Tensor or `Array` of tensors or `null`/`undefined`.
 * @returns An object consisting of
 *   inputs: A tensor.
 *   initialState: `Array` of tensors or `null`.
 *   constants: `Array` of tensors or `null`.
 * @throws ValueError, if `inputs` is an `Array` but either `initialState` or
 *   `constants` is provided.
 */ parcelHelpers.export(exports, "standardizeArgs", ()=>standardizeArgs);
/**
 * Iterates over the time dimension of a tensor.
 *
 * @param stepFunction RNN step function.
 *   Parameters:
 *     inputs: tensor with shape `[samples, ...]` (no time dimension),
 *       representing input for the batch of samples at a certain time step.
 *     states: an Array of tensors.
 *   Returns:
 *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).
 *     newStates: list of tensors, same length and shapes as `states`. The first
 *       state in the list must be the output tensor at the previous timestep.
 * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at
 *   least 3D).
 * @param initialStates Tensor with shape `[samples, outputDim]` (no time
 *   dimension), containing the initial values of the states used in the step
 *   function.
 * @param goBackwards If `true`, do the iteration over the time dimension in
 *   reverse order and return the reversed sequence.
 * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for
 *   every element that is masked.
 * @param constants An Array of constant values passed at each step.
 * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*
 *   applicable to this imperative deeplearn.js backend. Its value is ignored.
 * @param needPerStepOutputs Whether the per-step outputs are to be
 *   concatenated into a single tensor and returned (as the second return
 *   value). Default: `false`. This arg is included so that the relatively
 *   expensive concatenation of the stepwise outputs can be omitted unless
 *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which
 *   `returnSequence` is `true`.)
 * @returns An Array: `[lastOutput, outputs, newStates]`.
 *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.
 *   outputs: tensor with shape `[samples, time, ...]` where each entry
 *     `output[s, t]` is the output of the step function at time `t` for sample
 *     `s`. This return value is provided if and only if the
 *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this
 *     return value will be `undefined`.
 *   newStates: Array of tensors, latest states returned by the step function,
 *      of shape `(samples, ...)`.
 * @throws ValueError If input dimension is less than 3.
 *
 * TODO(nielsene): This needs to be tidy-ed.
 */ parcelHelpers.export(exports, "rnn", ()=>rnn);
parcelHelpers.export(exports, "RNN", ()=>RNN);
/**
 * An RNNCell layer.
 */ // Porting Note: This is a common parent class for RNN cells. There is no
// equivalent of this in PyKeras. Having a common parent class forgoes the
//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.
/** @doc {heading: 'Layers', subheading: 'Classes'} */ parcelHelpers.export(exports, "RNNCell", ()=>RNNCell);
parcelHelpers.export(exports, "SimpleRNNCell", ()=>SimpleRNNCell);
parcelHelpers.export(exports, "SimpleRNN", ()=>SimpleRNN);
parcelHelpers.export(exports, "GRUCell", ()=>GRUCell);
parcelHelpers.export(exports, "GRU", ()=>GRU);
parcelHelpers.export(exports, "LSTMCell", ()=>LSTMCell);
parcelHelpers.export(exports, "LSTM", ()=>LSTM);
parcelHelpers.export(exports, "StackedRNNCells", ()=>StackedRNNCells);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * TensorFlow.js Layers: Recurrent Neural Network Layers.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _activations = require("../activations");
var _tfjsBackend = require("../backend/tfjs_backend");
var _common = require("../common");
var _constraints = require("../constraints");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _initializers = require("../initializers");
var _regularizers = require("../regularizers");
var _genericUtils = require("../utils/generic_utils");
var _mathUtils = require("../utils/math_utils");
var _typesUtils = require("../utils/types_utils");
var _variables = require("../variables");
var _serialization = require("./serialization");
function standardizeArgs(inputs, initialState, constants, numConstants) {
    if (Array.isArray(inputs)) {
        if (initialState != null || constants != null) throw new (0, _errors.ValueError)("When inputs is an array, neither initialState or constants should be provided");
        if (numConstants != null) {
            constants = inputs.slice(inputs.length - numConstants, inputs.length);
            inputs = inputs.slice(0, inputs.length - numConstants);
        }
        if (inputs.length > 1) initialState = inputs.slice(1, inputs.length);
        inputs = inputs[0];
    }
    function toListOrNull(x) {
        if (x == null || Array.isArray(x)) return x;
        else return [
            x
        ];
    }
    initialState = toListOrNull(initialState);
    constants = toListOrNull(constants);
    return {
        inputs,
        initialState,
        constants
    };
}
function rnn(stepFunction, inputs, initialStates, goBackwards = false, mask, constants, unroll = false, needPerStepOutputs = false) {
    return _tfjsCore.tidy(()=>{
        const ndim = inputs.shape.length;
        if (ndim < 3) throw new (0, _errors.ValueError)(`Input should be at least 3D, but is ${ndim}D.`);
        // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,
        // ...].
        const axes = [
            1,
            0
        ].concat(_mathUtils.range(2, ndim));
        inputs = _tfjsCore.transpose(inputs, axes);
        if (constants != null) throw new (0, _errors.NotImplementedError)("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
        // Porting Note: the unroll option is ignored by the imperative backend.
        if (unroll) console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend.");
        if (mask != null) {
            mask = mask.asType("bool").asType("float32");
            if (mask.rank === ndim - 1) mask = _tfjsCore.expandDims(mask, -1);
            mask = _tfjsCore.transpose(mask, axes);
        }
        if (goBackwards) {
            inputs = _tfjsCore.reverse(inputs, 0);
            if (mask != null) mask = _tfjsCore.reverse(mask, 0);
        }
        // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop
        //   (tf.while_loop). But for the imperative deeplearn.js backend, we just
        //   use the usual TypeScript control flow to iterate over the time steps in
        //   the inputs.
        // Porting Note: PyKeras patches a "_use_learning_phase" attribute to
        // outputs.
        //   This is not idiomatic in TypeScript. The info regarding whether we are
        //   in a learning (i.e., training) phase for RNN is passed in a different
        //   way.
        const perStepOutputs = [];
        let lastOutput;
        let states = initialStates;
        const timeSteps = inputs.shape[0];
        const perStepInputs = _tfjsCore.unstack(inputs);
        let perStepMasks;
        if (mask != null) perStepMasks = _tfjsCore.unstack(mask);
        for(let t = 0; t < timeSteps; ++t){
            const currentInput = perStepInputs[t];
            const stepOutputs = _tfjsCore.tidy(()=>stepFunction(currentInput, states));
            if (mask == null) {
                lastOutput = stepOutputs[0];
                states = stepOutputs[1];
            } else {
                const maskedOutputs = _tfjsCore.tidy(()=>{
                    const stepMask = perStepMasks[t];
                    const negStepMask = _tfjsCore.onesLike(stepMask).sub(stepMask);
                    // TODO(cais): Would tfc.where() be better for performance?
                    const output = stepOutputs[0].mul(stepMask).add(states[0].mul(negStepMask));
                    const newStates = states.map((state, i)=>{
                        return stepOutputs[1][i].mul(stepMask).add(state.mul(negStepMask));
                    });
                    return {
                        output,
                        newStates
                    };
                });
                lastOutput = maskedOutputs.output;
                states = maskedOutputs.newStates;
            }
            if (needPerStepOutputs) perStepOutputs.push(lastOutput);
        }
        let outputs;
        if (needPerStepOutputs) {
            const axis = 1;
            outputs = _tfjsCore.stack(perStepOutputs, axis);
        }
        return [
            lastOutput,
            outputs,
            states
        ];
    });
}
class RNN extends (0, _topology.Layer) {
    constructor(args){
        super(args);
        let cell;
        if (args.cell == null) throw new (0, _errors.ValueError)("cell property is missing for the constructor of RNN.");
        else if (Array.isArray(args.cell)) cell = new StackedRNNCells({
            cells: args.cell
        });
        else cell = args.cell;
        if (cell.stateSize == null) throw new (0, _errors.ValueError)("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
        this.cell = cell;
        this.returnSequences = args.returnSequences == null ? false : args.returnSequences;
        this.returnState = args.returnState == null ? false : args.returnState;
        this.goBackwards = args.goBackwards == null ? false : args.goBackwards;
        this._stateful = args.stateful == null ? false : args.stateful;
        this.unroll = args.unroll == null ? false : args.unroll;
        this.supportsMasking = true;
        this.inputSpec = [
            new (0, _topology.InputSpec)({
                ndim: 3
            })
        ];
        this.stateSpec = null;
        this.states_ = null;
        // TODO(cais): Add constantsSpec and numConstants.
        this.numConstants = null;
        // TODO(cais): Look into the use of initial_state in the kwargs of the
        //   constructor.
        this.keptStates = [];
    }
    // Porting Note: This is the equivalent of `RNN.states` property getter in
    //   PyKeras.
    getStates() {
        if (this.states_ == null) {
            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
            return _mathUtils.range(0, numStates).map((x)=>null);
        } else return this.states_;
    }
    // Porting Note: This is the equivalent of the `RNN.states` property setter in
    //   PyKeras.
    setStates(states) {
        this.states_ = states;
    }
    computeOutputShape(inputShape) {
        if ((0, _typesUtils.isArrayOfShapes)(inputShape)) inputShape = inputShape[0];
        inputShape;
        // TODO(cais): Remove the casting once stacked RNN cells become supported.
        let stateSize = this.cell.stateSize;
        if (!Array.isArray(stateSize)) stateSize = [
            stateSize
        ];
        const outputDim = stateSize[0];
        let outputShape;
        if (this.returnSequences) outputShape = [
            inputShape[0],
            inputShape[1],
            outputDim
        ];
        else outputShape = [
            inputShape[0],
            outputDim
        ];
        if (this.returnState) {
            const stateShape = [];
            for (const dim of stateSize)stateShape.push([
                inputShape[0],
                dim
            ]);
            return [
                outputShape
            ].concat(stateShape);
        } else return outputShape;
    }
    computeMask(inputs, mask) {
        return _tfjsCore.tidy(()=>{
            if (Array.isArray(mask)) mask = mask[0];
            const outputMask = this.returnSequences ? mask : null;
            if (this.returnState) {
                const stateMask = this.states.map((s)=>null);
                return [
                    outputMask
                ].concat(stateMask);
            } else return outputMask;
        });
    }
    /**
     * Get the current state tensors of the RNN.
     *
     * If the state hasn't been set, return an array of `null`s of the correct
     * length.
     */ get states() {
        if (this.states_ == null) {
            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
            const output = [];
            for(let i = 0; i < numStates; ++i)output.push(null);
            return output;
        } else return this.states_;
    }
    set states(s) {
        this.states_ = s;
    }
    build(inputShape) {
        // Note inputShape will be an Array of Shapes of initial states and
        // constants if these are passed in apply().
        const constantShape = null;
        if (this.numConstants != null) throw new (0, _errors.NotImplementedError)("Constants support is not implemented in RNN yet.");
        if ((0, _typesUtils.isArrayOfShapes)(inputShape)) inputShape = inputShape[0];
        inputShape;
        const batchSize = this.stateful ? inputShape[0] : null;
        const inputDim = inputShape[inputShape.length - 1];
        this.inputSpec[0] = new (0, _topology.InputSpec)({
            shape: [
                batchSize,
                null,
                inputDim
            ]
        });
        // Allow cell (if RNNCell Layer) to build before we set or validate
        // stateSpec.
        const stepInputShape = [
            inputShape[0]
        ].concat(inputShape.slice(2));
        if (constantShape != null) throw new (0, _errors.NotImplementedError)("Constants support is not implemented in RNN yet.");
        else this.cell.build(stepInputShape);
        // Set or validate stateSpec.
        let stateSize;
        if (Array.isArray(this.cell.stateSize)) stateSize = this.cell.stateSize;
        else stateSize = [
            this.cell.stateSize
        ];
        if (this.stateSpec != null) {
            if (!(0, _tfjsCore.util).arraysEqual(this.stateSpec.map((spec)=>spec.shape[spec.shape.length - 1]), stateSize)) throw new (0, _errors.ValueError)(`An initialState was passed that is not compatible with ` + `cell.stateSize. Received stateSpec=${this.stateSpec}; ` + `However cell.stateSize is ${this.cell.stateSize}`);
        } else this.stateSpec = stateSize.map((dim)=>new (0, _topology.InputSpec)({
                shape: [
                    null,
                    dim
                ]
            }));
        if (this.stateful) this.resetStates();
    }
    /**
     * Reset the state tensors of the RNN.
     *
     * If the `states` argument is `undefined` or `null`, will set the
     * state tensor(s) of the RNN to all-zero tensors of the appropriate
     * shape(s).
     *
     * If `states` is provided, will set the state tensors of the RNN to its
     * value.
     *
     * @param states Optional externally-provided initial states.
     * @param training Whether this call is done during training. For stateful
     *   RNNs, this affects whether the old states are kept or discarded. In
     *   particular, if `training` is `true`, the old states will be kept so
     *   that subsequent backpropgataion through time (BPTT) may work properly.
     *   Else, the old states will be discarded.
     */ resetStates(states, training = false) {
        (0, _tfjsCore.tidy)(()=>{
            if (!this.stateful) throw new (0, _errors.AttributeError)("Cannot call resetStates() on an RNN Layer that is not stateful.");
            const batchSize = this.inputSpec[0].shape[0];
            if (batchSize == null) throw new (0, _errors.ValueError)("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
            // Initialize state if null.
            if (this.states_ == null) {
                if (Array.isArray(this.cell.stateSize)) this.states_ = this.cell.stateSize.map((dim)=>_tfjsCore.zeros([
                        batchSize,
                        dim
                    ]));
                else this.states_ = [
                    _tfjsCore.zeros([
                        batchSize,
                        this.cell.stateSize
                    ])
                ];
            } else if (states == null) {
                // Dispose old state tensors.
                _tfjsCore.dispose(this.states_);
                // For stateful RNNs, fully dispose kept old states.
                if (this.keptStates != null) {
                    _tfjsCore.dispose(this.keptStates);
                    this.keptStates = [];
                }
                if (Array.isArray(this.cell.stateSize)) this.states_ = this.cell.stateSize.map((dim)=>_tfjsCore.zeros([
                        batchSize,
                        dim
                    ]));
                else this.states_[0] = _tfjsCore.zeros([
                    batchSize,
                    this.cell.stateSize
                ]);
            } else {
                if (!Array.isArray(states)) states = [
                    states
                ];
                if (states.length !== this.states_.length) throw new (0, _errors.ValueError)(`Layer ${this.name} expects ${this.states_.length} state(s), ` + `but it received ${states.length} state value(s). Input ` + `received: ${states}`);
                if (training === true) // Store old state tensors for complete disposal later, i.e., during
                // the next no-arg call to this method. We do not dispose the old
                // states immediately because that BPTT (among other things) require
                // them.
                this.keptStates.push(this.states_.slice());
                else _tfjsCore.dispose(this.states_);
                for(let index = 0; index < this.states_.length; ++index){
                    const value = states[index];
                    const dim = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[index] : this.cell.stateSize;
                    const expectedShape = [
                        batchSize,
                        dim
                    ];
                    if (!(0, _tfjsCore.util).arraysEqual(value.shape, expectedShape)) throw new (0, _errors.ValueError)(`State ${index} is incompatible with layer ${this.name}: ` + `expected shape=${expectedShape}, received shape=${value.shape}`);
                    this.states_[index] = value;
                }
            }
            this.states_ = this.states_.map((state)=>_tfjsCore.keep(state.clone()));
        });
    }
    apply(inputs, kwargs) {
        // TODO(cais): Figure out whether initialState is in kwargs or inputs.
        let initialState = kwargs == null ? null : kwargs["initialState"];
        let constants = kwargs == null ? null : kwargs["constants"];
        if (kwargs == null) kwargs = {};
        const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);
        inputs = standardized.inputs;
        initialState = standardized.initialState;
        constants = standardized.constants;
        // If any of `initial_state` or `constants` are specified and are
        // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify
        // the input_spec to include them.
        let additionalInputs = [];
        let additionalSpecs = [];
        if (initialState != null) {
            kwargs["initialState"] = initialState;
            additionalInputs = additionalInputs.concat(initialState);
            this.stateSpec = [];
            for (const state of initialState)this.stateSpec.push(new (0, _topology.InputSpec)({
                shape: state.shape
            }));
            // TODO(cais): Use the following instead.
            // this.stateSpec = initialState.map(state => new InputSpec({shape:
            // state.shape}));
            additionalSpecs = additionalSpecs.concat(this.stateSpec);
        }
        if (constants != null) {
            kwargs["constants"] = constants;
            additionalInputs = additionalInputs.concat(constants);
            // TODO(cais): Add this.constantsSpec.
            this.numConstants = constants.length;
        }
        const isTensor = additionalInputs[0] instanceof (0, _topology.SymbolicTensor);
        if (isTensor) {
            // Compute full input spec, including state and constants.
            const fullInput = [
                inputs
            ].concat(additionalInputs);
            const fullInputSpec = this.inputSpec.concat(additionalSpecs);
            // Perform the call with temporarily replaced inputSpec.
            const originalInputSpec = this.inputSpec;
            this.inputSpec = fullInputSpec;
            const output = super.apply(fullInput, kwargs);
            this.inputSpec = originalInputSpec;
            return output;
        } else return super.apply(inputs, kwargs);
    }
    // tslint:disable-next-line:no-any
    call(inputs, kwargs) {
        // Input shape: `[samples, time (padded with zeros), input_dim]`.
        // Note that the .build() method of subclasses **must** define
        // this.inputSpec and this.stateSpec owith complete input shapes.
        return (0, _tfjsCore.tidy)(()=>{
            const mask = kwargs == null ? null : kwargs["mask"];
            const training = kwargs == null ? null : kwargs["training"];
            let initialState = kwargs == null ? null : kwargs["initialState"];
            inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
            if (initialState == null) {
                if (this.stateful) initialState = this.states_;
                else initialState = this.getInitialState(inputs);
            }
            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
            if (initialState.length !== numStates) throw new (0, _errors.ValueError)(`RNN Layer has ${numStates} state(s) but was passed ` + `${initialState.length} initial state(s).`);
            if (this.unroll) console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
            const cellCallKwargs = {
                training
            };
            // TODO(cais): Add support for constants.
            const step = (inputs, states)=>{
                // `inputs` and `states` are concatenated to form a single `Array` of
                // `tf.Tensor`s as the input to `cell.call()`.
                const outputs = this.cell.call([
                    inputs
                ].concat(states), cellCallKwargs);
                // Marshall the return value into output and new states.
                return [
                    outputs[0],
                    outputs.slice(1)
                ];
            };
            // TODO(cais): Add support for constants.
            const rnnOutputs = rnn(step, inputs, initialState, this.goBackwards, mask, null, this.unroll, this.returnSequences);
            const lastOutput = rnnOutputs[0];
            const outputs = rnnOutputs[1];
            const states = rnnOutputs[2];
            if (this.stateful) this.resetStates(states, training);
            const output = this.returnSequences ? outputs : lastOutput;
            // TODO(cais): Porperty set learning phase flag.
            if (this.returnState) return [
                output
            ].concat(states);
            else return output;
        });
    }
    getInitialState(inputs) {
        return (0, _tfjsCore.tidy)(()=>{
            // Build an all-zero tensor of shape [samples, outputDim].
            // [Samples, timeSteps, inputDim].
            let initialState = _tfjsCore.zeros(inputs.shape);
            // [Samples].
            initialState = _tfjsCore.sum(initialState, [
                1,
                2
            ]);
            initialState = _tfjsBackend.expandDims(initialState); // [Samples, 1].
            if (Array.isArray(this.cell.stateSize)) return this.cell.stateSize.map((dim)=>dim > 1 ? _tfjsBackend.tile(initialState, [
                    1,
                    dim
                ]) : initialState);
            else return this.cell.stateSize > 1 ? [
                _tfjsBackend.tile(initialState, [
                    1,
                    this.cell.stateSize
                ])
            ] : [
                initialState
            ];
        });
    }
    get trainableWeights() {
        if (!this.trainable) return [];
        // Porting Note: In TypeScript, `this` is always an instance of `Layer`.
        return this.cell.trainableWeights;
    }
    get nonTrainableWeights() {
        // Porting Note: In TypeScript, `this` is always an instance of `Layer`.
        if (!this.trainable) return this.cell.weights;
        return this.cell.nonTrainableWeights;
    }
    setFastWeightInitDuringBuild(value) {
        super.setFastWeightInitDuringBuild(value);
        if (this.cell != null) this.cell.setFastWeightInitDuringBuild(value);
    }
    getConfig() {
        const config = {
            returnSequences: this.returnSequences,
            returnState: this.returnState,
            goBackwards: this.goBackwards,
            stateful: this.stateful,
            unroll: this.unroll
        };
        if (this.numConstants != null) config["numConstants"] = this.numConstants;
        const cellConfig = this.cell.getConfig();
        config["cell"] = {
            "className": this.cell.getClassName(),
            "config": cellConfig
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
    /** @nocollapse */ static fromConfig(cls, config, customObjects = {}) {
        const cellConfig = config["cell"];
        const cell = (0, _serialization.deserialize)(cellConfig, customObjects);
        return new cls(Object.assign(config, {
            cell
        }));
    }
}
/** @nocollapse */ RNN.className = "RNN";
(0, _tfjsCore.serialization).registerClass(RNN);
class RNNCell extends (0, _topology.Layer) {
}
class SimpleRNNCell extends RNNCell {
    constructor(args){
        super(args);
        this.DEFAULT_ACTIVATION = "tanh";
        this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal";
        this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal";
        this.DEFAULT_BIAS_INITIALIZER = "zeros";
        this.units = args.units;
        (0, _genericUtils.assertPositiveInteger)(this.units, `units`);
        this.activation = (0, _activations.getActivation)(args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);
        this.useBias = args.useBias == null ? true : args.useBias;
        this.kernelInitializer = (0, _initializers.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
        this.recurrentInitializer = (0, _initializers.getInitializer)(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);
        this.biasInitializer = (0, _initializers.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
        this.kernelRegularizer = (0, _regularizers.getRegularizer)(args.kernelRegularizer);
        this.recurrentRegularizer = (0, _regularizers.getRegularizer)(args.recurrentRegularizer);
        this.biasRegularizer = (0, _regularizers.getRegularizer)(args.biasRegularizer);
        this.kernelConstraint = (0, _constraints.getConstraint)(args.kernelConstraint);
        this.recurrentConstraint = (0, _constraints.getConstraint)(args.recurrentConstraint);
        this.biasConstraint = (0, _constraints.getConstraint)(args.biasConstraint);
        this.dropout = _mathUtils.min([
            1,
            _mathUtils.max([
                0,
                args.dropout == null ? 0 : args.dropout
            ])
        ]);
        this.recurrentDropout = _mathUtils.min([
            1,
            _mathUtils.max([
                0,
                args.recurrentDropout == null ? 0 : args.recurrentDropout
            ])
        ]);
        this.stateSize = this.units;
        this.dropoutMask = null;
        this.recurrentDropoutMask = null;
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        // TODO(cais): Use regularizer.
        this.kernel = this.addWeight("kernel", [
            inputShape[inputShape.length - 1],
            this.units
        ], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        this.recurrentKernel = this.addWeight("recurrent_kernel", [
            this.units,
            this.units
        ], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
        if (this.useBias) this.bias = this.addWeight("bias", [
            this.units
        ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        else this.bias = null;
        this.built = true;
    }
    // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:
    //   `inputs` and `states`. Here, the two tensors are combined into an
    //   `Tensor[]` Array as the first input argument.
    //   Similarly, PyKeras' equivalent of this method returns two values:
    //    `output` and `[output]`. Here the two are combined into one length-2
    //    `Tensor[]`, consisting of `output` repeated.
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs;
            if (inputs.length !== 2) throw new (0, _errors.ValueError)(`SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);
            let prevOutput = inputs[1];
            inputs = inputs[0];
            const training = kwargs["training"] == null ? false : kwargs["training"];
            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) this.dropoutMask = generateDropoutMask(()=>_tfjsCore.onesLike(inputs), this.dropout, training);
            if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) this.recurrentDropoutMask = generateDropoutMask(()=>_tfjsCore.onesLike(prevOutput), this.recurrentDropout, training);
            let h;
            const dpMask = this.dropoutMask;
            const recDpMask = this.recurrentDropoutMask;
            if (dpMask != null) h = _tfjsBackend.dot(_tfjsCore.mul(inputs, dpMask), this.kernel.read());
            else h = _tfjsBackend.dot(inputs, this.kernel.read());
            if (this.bias != null) h = _tfjsBackend.biasAdd(h, this.bias.read());
            if (recDpMask != null) prevOutput = _tfjsCore.mul(prevOutput, recDpMask);
            let output = _tfjsCore.add(h, _tfjsBackend.dot(prevOutput, this.recurrentKernel.read()));
            if (this.activation != null) output = this.activation.apply(output);
            // TODO(cais): Properly set learning phase on output tensor?
            return [
                output,
                output
            ];
        });
    }
    getConfig() {
        const config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ SimpleRNNCell.className = "SimpleRNNCell";
(0, _tfjsCore.serialization).registerClass(SimpleRNNCell);
class SimpleRNN extends RNN {
    constructor(args){
        args.cell = new SimpleRNNCell(args);
        super(args);
    // TODO(cais): Add activityRegularizer.
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            if (this.cell.dropoutMask != null) {
                _tfjsCore.dispose(this.cell.dropoutMask);
                this.cell.dropoutMask = null;
            }
            if (this.cell.recurrentDropoutMask != null) {
                _tfjsCore.dispose(this.cell.recurrentDropoutMask);
                this.cell.recurrentDropoutMask = null;
            }
            const mask = kwargs == null ? null : kwargs["mask"];
            const training = kwargs == null ? null : kwargs["training"];
            const initialState = kwargs == null ? null : kwargs["initialState"];
            return super.call(inputs, {
                mask,
                training,
                initialState
            });
        });
    }
    // TODO(cais): Research possibility of refactoring out the tedious all
    //   the getters that delegate to `this.cell` below.
    get units() {
        return this.cell.units;
    }
    get activation() {
        return this.cell.activation;
    }
    get useBias() {
        return this.cell.useBias;
    }
    get kernelInitializer() {
        return this.cell.kernelInitializer;
    }
    get recurrentInitializer() {
        return this.cell.recurrentInitializer;
    }
    get biasInitializer() {
        return this.cell.biasInitializer;
    }
    get kernelRegularizer() {
        return this.cell.kernelRegularizer;
    }
    get recurrentRegularizer() {
        return this.cell.recurrentRegularizer;
    }
    get biasRegularizer() {
        return this.cell.biasRegularizer;
    }
    get kernelConstraint() {
        return this.cell.kernelConstraint;
    }
    get recurrentConstraint() {
        return this.cell.recurrentConstraint;
    }
    get biasConstraint() {
        return this.cell.biasConstraint;
    }
    get dropout() {
        return this.cell.dropout;
    }
    get recurrentDropout() {
        return this.cell.recurrentDropout;
    }
    getConfig() {
        const config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout
        };
        const baseConfig = super.getConfig();
        delete baseConfig["cell"];
        Object.assign(config, baseConfig);
        return config;
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        return new cls(config);
    }
}
/** @nocollapse */ SimpleRNN.className = "SimpleRNN";
(0, _tfjsCore.serialization).registerClass(SimpleRNN);
class GRUCell extends RNNCell {
    constructor(args){
        super(args);
        this.DEFAULT_ACTIVATION = "tanh";
        this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid";
        this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal";
        this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal";
        this.DEFAULT_BIAS_INITIALIZER = "zeros";
        this.units = args.units;
        (0, _genericUtils.assertPositiveInteger)(this.units, "units");
        this.activation = (0, _activations.getActivation)(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);
        this.recurrentActivation = (0, _activations.getActivation)(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);
        this.useBias = args.useBias == null ? true : args.useBias;
        this.kernelInitializer = (0, _initializers.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
        this.recurrentInitializer = (0, _initializers.getInitializer)(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);
        this.biasInitializer = (0, _initializers.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
        this.kernelRegularizer = (0, _regularizers.getRegularizer)(args.kernelRegularizer);
        this.recurrentRegularizer = (0, _regularizers.getRegularizer)(args.recurrentRegularizer);
        this.biasRegularizer = (0, _regularizers.getRegularizer)(args.biasRegularizer);
        this.kernelConstraint = (0, _constraints.getConstraint)(args.kernelConstraint);
        this.recurrentConstraint = (0, _constraints.getConstraint)(args.recurrentConstraint);
        this.biasConstraint = (0, _constraints.getConstraint)(args.biasConstraint);
        this.dropout = _mathUtils.min([
            1,
            _mathUtils.max([
                0,
                args.dropout == null ? 0 : args.dropout
            ])
        ]);
        this.recurrentDropout = _mathUtils.min([
            1,
            _mathUtils.max([
                0,
                args.recurrentDropout == null ? 0 : args.recurrentDropout
            ])
        ]);
        this.implementation = args.implementation;
        this.stateSize = this.units;
        this.dropoutMask = null;
        this.recurrentDropoutMask = null;
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const inputDim = inputShape[inputShape.length - 1];
        this.kernel = this.addWeight("kernel", [
            inputDim,
            this.units * 3
        ], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        this.recurrentKernel = this.addWeight("recurrent_kernel", [
            this.units,
            this.units * 3
        ], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
        if (this.useBias) this.bias = this.addWeight("bias", [
            this.units * 3
        ], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        else this.bias = null;
        // Porting Notes: Unlike the PyKeras implementation, we perform slicing
        //   of the weights and bias in the call() method, at execution time.
        this.built = true;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs;
            if (inputs.length !== 2) throw new (0, _errors.ValueError)(`GRUCell expects 2 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);
            const training = kwargs["training"] == null ? false : kwargs["training"];
            let hTMinus1 = inputs[1]; // Previous memory state.
            inputs = inputs[0];
            // Note: For superior performance, TensorFlow.js always uses
            // implementation 2, regardless of the actual value of
            // config.implementation.
            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) this.dropoutMask = generateDropoutMask(()=>_tfjsCore.onesLike(inputs), this.dropout, training, 3);
            if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) this.recurrentDropoutMask = generateDropoutMask(()=>_tfjsCore.onesLike(hTMinus1), this.recurrentDropout, training, 3);
            const dpMask = this.dropoutMask;
            const recDpMask = this.recurrentDropoutMask;
            let z;
            let r;
            let hh;
            if (0 < this.dropout && this.dropout < 1) inputs = _tfjsCore.mul(inputs, dpMask[0]);
            let matrixX = _tfjsBackend.dot(inputs, this.kernel.read());
            if (this.useBias) matrixX = _tfjsBackend.biasAdd(matrixX, this.bias.read());
            if (0 < this.recurrentDropout && this.recurrentDropout < 1) hTMinus1 = _tfjsCore.mul(hTMinus1, recDpMask[0]);
            const recurrentKernelValue = this.recurrentKernel.read();
            const [rk1, rk2] = _tfjsCore.split(recurrentKernelValue, [
                2 * this.units,
                this.units
            ], recurrentKernelValue.rank - 1);
            const matrixInner = _tfjsBackend.dot(hTMinus1, rk1);
            const [xZ, xR, xH] = _tfjsCore.split(matrixX, 3, matrixX.rank - 1);
            const [recurrentZ, recurrentR] = _tfjsCore.split(matrixInner, 2, matrixInner.rank - 1);
            z = this.recurrentActivation.apply(_tfjsCore.add(xZ, recurrentZ));
            r = this.recurrentActivation.apply(_tfjsCore.add(xR, recurrentR));
            const recurrentH = _tfjsBackend.dot(_tfjsCore.mul(r, hTMinus1), rk2);
            hh = this.activation.apply(_tfjsCore.add(xH, recurrentH));
            const h = _tfjsCore.add(_tfjsCore.mul(z, hTMinus1), _tfjsCore.mul(_tfjsCore.add(1, _tfjsCore.neg(z)), hh));
            // TODO(cais): Add use_learning_phase flag properly.
            return [
                h,
                h
            ];
        });
    }
    getConfig() {
        const config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            recurrentActivation: (0, _activations.serializeActivation)(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ GRUCell.className = "GRUCell";
(0, _tfjsCore.serialization).registerClass(GRUCell);
class GRU extends RNN {
    constructor(args){
        if (args.implementation === 0) console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.");
        args.cell = new GRUCell(args);
        super(args);
    // TODO(cais): Add activityRegularizer.
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            if (this.cell.dropoutMask != null) {
                _tfjsCore.dispose(this.cell.dropoutMask);
                this.cell.dropoutMask = null;
            }
            if (this.cell.recurrentDropoutMask != null) {
                _tfjsCore.dispose(this.cell.recurrentDropoutMask);
                this.cell.recurrentDropoutMask = null;
            }
            const mask = kwargs == null ? null : kwargs["mask"];
            const training = kwargs == null ? null : kwargs["training"];
            const initialState = kwargs == null ? null : kwargs["initialState"];
            return super.call(inputs, {
                mask,
                training,
                initialState
            });
        });
    }
    get units() {
        return this.cell.units;
    }
    get activation() {
        return this.cell.activation;
    }
    get recurrentActivation() {
        return this.cell.recurrentActivation;
    }
    get useBias() {
        return this.cell.useBias;
    }
    get kernelInitializer() {
        return this.cell.kernelInitializer;
    }
    get recurrentInitializer() {
        return this.cell.recurrentInitializer;
    }
    get biasInitializer() {
        return this.cell.biasInitializer;
    }
    get kernelRegularizer() {
        return this.cell.kernelRegularizer;
    }
    get recurrentRegularizer() {
        return this.cell.recurrentRegularizer;
    }
    get biasRegularizer() {
        return this.cell.biasRegularizer;
    }
    get kernelConstraint() {
        return this.cell.kernelConstraint;
    }
    get recurrentConstraint() {
        return this.cell.recurrentConstraint;
    }
    get biasConstraint() {
        return this.cell.biasConstraint;
    }
    get dropout() {
        return this.cell.dropout;
    }
    get recurrentDropout() {
        return this.cell.recurrentDropout;
    }
    get implementation() {
        return this.cell.implementation;
    }
    getConfig() {
        const config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            recurrentActivation: (0, _activations.serializeActivation)(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        };
        const baseConfig = super.getConfig();
        delete baseConfig["cell"];
        Object.assign(config, baseConfig);
        return config;
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        if (config["implmentation"] === 0) config["implementation"] = 1;
        return new cls(config);
    }
}
/** @nocollapse */ GRU.className = "GRU";
(0, _tfjsCore.serialization).registerClass(GRU);
class LSTMCell extends RNNCell {
    constructor(args){
        super(args);
        this.DEFAULT_ACTIVATION = "tanh";
        this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid";
        this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal";
        this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal";
        this.DEFAULT_BIAS_INITIALIZER = "zeros";
        this.units = args.units;
        (0, _genericUtils.assertPositiveInteger)(this.units, "units");
        this.activation = (0, _activations.getActivation)(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);
        this.recurrentActivation = (0, _activations.getActivation)(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);
        this.useBias = args.useBias == null ? true : args.useBias;
        this.kernelInitializer = (0, _initializers.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
        this.recurrentInitializer = (0, _initializers.getInitializer)(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);
        this.biasInitializer = (0, _initializers.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
        this.unitForgetBias = args.unitForgetBias;
        this.kernelRegularizer = (0, _regularizers.getRegularizer)(args.kernelRegularizer);
        this.recurrentRegularizer = (0, _regularizers.getRegularizer)(args.recurrentRegularizer);
        this.biasRegularizer = (0, _regularizers.getRegularizer)(args.biasRegularizer);
        this.kernelConstraint = (0, _constraints.getConstraint)(args.kernelConstraint);
        this.recurrentConstraint = (0, _constraints.getConstraint)(args.recurrentConstraint);
        this.biasConstraint = (0, _constraints.getConstraint)(args.biasConstraint);
        this.dropout = _mathUtils.min([
            1,
            _mathUtils.max([
                0,
                args.dropout == null ? 0 : args.dropout
            ])
        ]);
        this.recurrentDropout = _mathUtils.min([
            1,
            _mathUtils.max([
                0,
                args.recurrentDropout == null ? 0 : args.recurrentDropout
            ])
        ]);
        this.implementation = args.implementation;
        this.stateSize = [
            this.units,
            this.units
        ];
        this.dropoutMask = null;
        this.recurrentDropoutMask = null;
    }
    build(inputShape) {
        var _a;
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const inputDim = inputShape[inputShape.length - 1];
        this.kernel = this.addWeight("kernel", [
            inputDim,
            this.units * 4
        ], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        this.recurrentKernel = this.addWeight("recurrent_kernel", [
            this.units,
            this.units * 4
        ], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
        let biasInitializer;
        if (this.useBias) {
            if (this.unitForgetBias) {
                const capturedBiasInit = this.biasInitializer;
                const capturedUnits = this.units;
                biasInitializer = new (_a = class CustomInit extends (0, _initializers.Initializer) {
                    apply(shape, dtype) {
                        // TODO(cais): More informative variable names?
                        const bI = capturedBiasInit.apply([
                            capturedUnits
                        ]);
                        const bF = new (0, _initializers.Ones)().apply([
                            capturedUnits
                        ]);
                        const bCAndH = capturedBiasInit.apply([
                            capturedUnits * 2
                        ]);
                        return _tfjsBackend.concatAlongFirstAxis(_tfjsBackend.concatAlongFirstAxis(bI, bF), bCAndH);
                    }
                }, /** @nocollapse */ _a.className = "CustomInit", _a)();
            } else biasInitializer = this.biasInitializer;
            this.bias = this.addWeight("bias", [
                this.units * 4
            ], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        } else this.bias = null;
        // Porting Notes: Unlike the PyKeras implementation, we perform slicing
        //   of the weights and bias in the call() method, at execution time.
        this.built = true;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            const training = kwargs["training"] == null ? false : kwargs["training"];
            inputs;
            if (inputs.length !== 3) throw new (0, _errors.ValueError)(`LSTMCell expects 3 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);
            let hTMinus1 = inputs[1]; // Previous memory state.
            const cTMinus1 = inputs[2]; // Previous carry state.
            inputs = inputs[0];
            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) this.dropoutMask = generateDropoutMask(()=>_tfjsCore.onesLike(inputs), this.dropout, training, 4);
            if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) this.recurrentDropoutMask = generateDropoutMask(()=>_tfjsCore.onesLike(hTMinus1), this.recurrentDropout, training, 4);
            const dpMask = this.dropoutMask;
            const recDpMask = this.recurrentDropoutMask;
            // Note: For superior performance, TensorFlow.js always uses
            // implementation 2 regardless of the actual value of
            // config.implementation.
            let i;
            let f;
            let c;
            let o;
            if (0 < this.dropout && this.dropout < 1) inputs = _tfjsCore.mul(inputs, dpMask[0]);
            let z = _tfjsBackend.dot(inputs, this.kernel.read());
            if (0 < this.recurrentDropout && this.recurrentDropout < 1) hTMinus1 = _tfjsCore.mul(hTMinus1, recDpMask[0]);
            z = _tfjsCore.add(z, _tfjsBackend.dot(hTMinus1, this.recurrentKernel.read()));
            if (this.useBias) z = _tfjsBackend.biasAdd(z, this.bias.read());
            const [z0, z1, z2, z3] = _tfjsCore.split(z, 4, z.rank - 1);
            i = this.recurrentActivation.apply(z0);
            f = this.recurrentActivation.apply(z1);
            c = _tfjsCore.add(_tfjsCore.mul(f, cTMinus1), _tfjsCore.mul(i, this.activation.apply(z2)));
            o = this.recurrentActivation.apply(z3);
            const h = _tfjsCore.mul(o, this.activation.apply(c));
            // TODO(cais): Add use_learning_phase flag properly.
            return [
                h,
                h,
                c
            ];
        });
    }
    getConfig() {
        const config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            recurrentActivation: (0, _activations.serializeActivation)(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
}
/** @nocollapse */ LSTMCell.className = "LSTMCell";
(0, _tfjsCore.serialization).registerClass(LSTMCell);
class LSTM extends RNN {
    constructor(args){
        if (args.implementation === 0) console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.");
        args.cell = new LSTMCell(args);
        super(args);
    // TODO(cais): Add activityRegularizer.
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            if (this.cell.dropoutMask != null) {
                _tfjsCore.dispose(this.cell.dropoutMask);
                this.cell.dropoutMask = null;
            }
            if (this.cell.recurrentDropoutMask != null) {
                _tfjsCore.dispose(this.cell.recurrentDropoutMask);
                this.cell.recurrentDropoutMask = null;
            }
            const mask = kwargs == null ? null : kwargs["mask"];
            const training = kwargs == null ? null : kwargs["training"];
            const initialState = kwargs == null ? null : kwargs["initialState"];
            return super.call(inputs, {
                mask,
                training,
                initialState
            });
        });
    }
    get units() {
        return this.cell.units;
    }
    get activation() {
        return this.cell.activation;
    }
    get recurrentActivation() {
        return this.cell.recurrentActivation;
    }
    get useBias() {
        return this.cell.useBias;
    }
    get kernelInitializer() {
        return this.cell.kernelInitializer;
    }
    get recurrentInitializer() {
        return this.cell.recurrentInitializer;
    }
    get biasInitializer() {
        return this.cell.biasInitializer;
    }
    get unitForgetBias() {
        return this.cell.unitForgetBias;
    }
    get kernelRegularizer() {
        return this.cell.kernelRegularizer;
    }
    get recurrentRegularizer() {
        return this.cell.recurrentRegularizer;
    }
    get biasRegularizer() {
        return this.cell.biasRegularizer;
    }
    get kernelConstraint() {
        return this.cell.kernelConstraint;
    }
    get recurrentConstraint() {
        return this.cell.recurrentConstraint;
    }
    get biasConstraint() {
        return this.cell.biasConstraint;
    }
    get dropout() {
        return this.cell.dropout;
    }
    get recurrentDropout() {
        return this.cell.recurrentDropout;
    }
    get implementation() {
        return this.cell.implementation;
    }
    getConfig() {
        const config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            recurrentActivation: (0, _activations.serializeActivation)(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        };
        const baseConfig = super.getConfig();
        delete baseConfig["cell"];
        Object.assign(config, baseConfig);
        return config;
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        if (config["implmentation"] === 0) config["implementation"] = 1;
        return new cls(config);
    }
}
/** @nocollapse */ LSTM.className = "LSTM";
(0, _tfjsCore.serialization).registerClass(LSTM);
class StackedRNNCells extends RNNCell {
    constructor(args){
        super(args);
        this.cells = args.cells;
    }
    get stateSize() {
        // States are a flat list in reverse order of the cell stack.
        // This allows perserving the requirement `stack.statesize[0] ===
        // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,
        // assuming one LSTM has states `[h, c]`.
        const stateSize = [];
        for (const cell of this.cells.slice().reverse())if (Array.isArray(cell.stateSize)) stateSize.push(...cell.stateSize);
        else stateSize.push(cell.stateSize);
        return stateSize;
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            inputs;
            let states = inputs.slice(1);
            // Recover per-cell states.
            const nestedStates = [];
            for (const cell of this.cells.slice().reverse())if (Array.isArray(cell.stateSize)) nestedStates.push(states.splice(0, cell.stateSize.length));
            else nestedStates.push(states.splice(0, 1));
            nestedStates.reverse();
            // Call the cells in order and store the returned states.
            const newNestedStates = [];
            let callInputs;
            for(let i = 0; i < this.cells.length; ++i){
                const cell1 = this.cells[i];
                states = nestedStates[i];
                // TODO(cais): Take care of constants.
                if (i === 0) callInputs = [
                    inputs[0]
                ].concat(states);
                else callInputs = [
                    callInputs[0]
                ].concat(states);
                callInputs = cell1.call(callInputs, kwargs);
                newNestedStates.push(callInputs.slice(1));
            }
            // Format the new states as a flat list in reverse cell order.
            states = [];
            for (const cellStates of newNestedStates.slice().reverse())states.push(...cellStates);
            return [
                callInputs[0]
            ].concat(states);
        });
    }
    build(inputShape) {
        if ((0, _typesUtils.isArrayOfShapes)(inputShape)) // TODO(cais): Take care of input constants.
        // const constantShape = inputShape.slice(1);
        inputShape = inputShape[0];
        inputShape;
        let outputDim;
        this.cells.forEach((cell, i)=>{
            (0, _common.nameScope)(`RNNCell_${i}`, ()=>{
                // TODO(cais): Take care of input constants.
                cell.build(inputShape);
                if (Array.isArray(cell.stateSize)) outputDim = cell.stateSize[0];
                else outputDim = cell.stateSize;
                inputShape = [
                    inputShape[0],
                    outputDim
                ];
            });
        });
        this.built = true;
    }
    getConfig() {
        const cellConfigs = [];
        for (const cell of this.cells)cellConfigs.push({
            "className": cell.getClassName(),
            "config": cell.getConfig()
        });
        const config = {
            "cells": cellConfigs
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
    /** @nocollapse */ static fromConfig(cls, config, customObjects = {}) {
        const cells = [];
        for (const cellConfig of config["cells"])cells.push((0, _serialization.deserialize)(cellConfig, customObjects));
        return new cls({
            cells
        });
    }
    get trainableWeights() {
        if (!this.trainable) return [];
        const weights = [];
        for (const cell of this.cells)weights.push(...cell.trainableWeights);
        return weights;
    }
    get nonTrainableWeights() {
        const weights = [];
        for (const cell of this.cells)weights.push(...cell.nonTrainableWeights);
        if (!this.trainable) {
            const trainableWeights = [];
            for (const cell1 of this.cells)trainableWeights.push(...cell1.trainableWeights);
            return trainableWeights.concat(weights);
        }
        return weights;
    }
    /**
     * Retrieve the weights of a the model.
     *
     * @returns A flat `Array` of `tf.Tensor`s.
     */ getWeights() {
        const weights = [];
        for (const cell of this.cells)weights.push(...cell.weights);
        return (0, _variables.batchGetValue)(weights);
    }
    /**
     * Set the weights of the model.
     *
     * @param weights An `Array` of `tf.Tensor`s with shapes and types matching
     *     the output of `getWeights()`.
     */ setWeights(weights) {
        const tuples = [];
        for (const cell of this.cells){
            const numParams = cell.weights.length;
            const inputWeights = weights.splice(numParams);
            for(let i = 0; i < cell.weights.length; ++i)tuples.push([
                cell.weights[i],
                inputWeights[i]
            ]);
        }
        (0, _variables.batchSetValue)(tuples);
    }
}
/** @nocollapse */ StackedRNNCells.className = "StackedRNNCells";
(0, _tfjsCore.serialization).registerClass(StackedRNNCells);
function generateDropoutMask(ones, rate, training = null, count = 1) {
    function droppedInputs() {
        return _tfjsBackend.dropout(ones(), rate);
    }
    if (count > 1) {
        const mask = [];
        for(let i = 0; i < count; i++)mask.push(_tfjsBackend.inTrainPhase(droppedInputs, ones, training));
        return mask.map((m)=>_tfjsCore.keep(m.clone()));
    } else return _tfjsCore.keep(_tfjsBackend.inTrainPhase(droppedInputs, ones, training).clone());
}

},{"@tensorflow/tfjs-core":"2votT","../activations":"9UgTm","../backend/tfjs_backend":"iABet","../common":"fOhOh","../constraints":"kRkSV","../engine/topology":"2OPnm","../errors":"kA7ff","../initializers":"4FrEp","../regularizers":"447e0","../utils/generic_utils":"2cErd","../utils/math_utils":"865Nd","../utils/types_utils":"70VAF","../variables":"aWvBF","./serialization":"9miVs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b9fF5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Abstract wrapper base class.
 *
 * Wrappers take another layer and augment it in various ways.
 * Do not use this class as a layer, it is only an abstract base class.
 * Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.
 */ parcelHelpers.export(exports, "Wrapper", ()=>Wrapper);
parcelHelpers.export(exports, "TimeDistributed", ()=>TimeDistributed);
parcelHelpers.export(exports, "checkBidirectionalMergeMode", ()=>checkBidirectionalMergeMode);
parcelHelpers.export(exports, "Bidirectional", ()=>Bidirectional);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /**
 * Layers that augment the functionality of a base layer.
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackend = require("../backend/tfjs_backend");
var _common = require("../common");
var _topology = require("../engine/topology");
var _errors = require("../errors");
var _common1 = require("../keras_format/common");
var _genericUtils = require("../utils/generic_utils");
var _typesUtils = require("../utils/types_utils");
var _recurrent = require("./recurrent");
var _serialization = require("./serialization");
class Wrapper extends (0, _topology.Layer) {
    constructor(args){
        // Porting Note: In PyKeras, `self.layer` is set prior to the calling
        //   `super()`. But we can't do that here due to TypeScript's restriction.
        //   See: https://github.com/Microsoft/TypeScript/issues/8277
        //   As a result, we have to add checks in `get trainable()` and
        //   `set trainable()` below in order to prevent using `this.layer` when
        //   its value is `undefined`. The super constructor does use the getter
        //   and the setter of `this.layer`.
        super(args);
        this.layer = args.layer;
    }
    build(inputShape) {
        this.built = true;
    }
    // TODO(cais): Implement activityRegularizer getter.
    get trainable() {
        // Porting Note: the check of `this.layer` here is necessary due to the
        //   way the `constructor` of this class is written (see Porting Note
        //   above).
        if (this.layer != null) return this.layer.trainable;
        else return false;
    }
    set trainable(value) {
        // Porting Note: the check of `this.layer` here is necessary due to the
        //   way the `constructor` of this class is written (see Porting Note
        //   above).
        if (this.layer != null) this.layer.trainable = value;
    }
    get trainableWeights() {
        return this.layer.trainableWeights;
    }
    // TODO(cais): Implement setter for trainableWeights.
    get nonTrainableWeights() {
        return this.layer.nonTrainableWeights;
    }
    // TODO(cais): Implement setter for nonTrainableWeights.
    get updates() {
        // tslint:disable-next-line:no-any
        return this.layer._updates;
    }
    // TODO(cais): Implement getUpdatesFor().
    get losses() {
        return this.layer.losses;
    }
    // TODO(cais): Implement getLossesFor().
    getWeights() {
        return this.layer.getWeights();
    }
    setWeights(weights) {
        this.layer.setWeights(weights);
    }
    getConfig() {
        const config = {
            "layer": {
                "className": this.layer.getClassName(),
                "config": this.layer.getConfig()
            }
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
    setFastWeightInitDuringBuild(value) {
        super.setFastWeightInitDuringBuild(value);
        if (this.layer != null) this.layer.setFastWeightInitDuringBuild(value);
    }
    /** @nocollapse */ static fromConfig(cls, config, customObjects = {}) {
        const layerConfig = config["layer"];
        const layer = (0, _serialization.deserialize)(layerConfig, customObjects);
        delete config["layer"];
        const newConfig = {
            layer
        };
        Object.assign(newConfig, config);
        return new cls(newConfig);
    }
}
class TimeDistributed extends Wrapper {
    constructor(args){
        super(args);
        this.supportsMasking = true;
    }
    build(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        if (inputShape.length < 3) throw new (0, _errors.ValueError)(`TimeDistributed layer expects an input shape >= 3D, but received ` + `input shape ${JSON.stringify(inputShape)}`);
        this.inputSpec = [
            {
                shape: inputShape
            }
        ];
        const childInputShape = [
            inputShape[0]
        ].concat(inputShape.slice(2));
        if (!this.layer.built) {
            this.layer.build(childInputShape);
            this.layer.built = true;
        }
        super.build(inputShape);
    }
    computeOutputShape(inputShape) {
        inputShape = (0, _typesUtils.getExactlyOneShape)(inputShape);
        const childInputShape = [
            inputShape[0]
        ].concat(inputShape.slice(2));
        const childOutputShape = this.layer.computeOutputShape(childInputShape);
        const timesteps = inputShape[1];
        return [
            childOutputShape[0],
            timesteps
        ].concat(childOutputShape.slice(1));
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            // TODO(cais): Add 'training' and 'useLearningPhase' to kwargs.
            inputs = (0, _typesUtils.getExactlyOneTensor)(inputs);
            // Porting Note: In tfjs-layers, `inputs` are always concrete tensor
            // values. Hence the inputs can't have an undetermined first (batch)
            // dimension, which is why we always use the K.rnn approach here.
            const step = (inputs, states)=>{
                // TODO(cais): Add useLearningPhase.
                // NOTE(cais): `layer.call` may return a length-1 array of Tensor in
                //   some cases (e.g., `layer` is a `Sequential` instance), which is
                //   why `getExactlyOneTensor` is used below.
                const output = (0, _typesUtils.getExactlyOneTensor)(this.layer.call(inputs, kwargs));
                return [
                    output,
                    []
                ];
            };
            const rnnOutputs = (0, _recurrent.rnn)(step, inputs, [], false, null, null, false, true);
            const y = rnnOutputs[1];
            // TODO(cais): Add activity regularization.
            // TODO(cais): Add useLearningPhase.
            return y;
        });
    }
}
/** @nocollapse */ TimeDistributed.className = "TimeDistributed";
(0, _tfjsCore.serialization).registerClass(TimeDistributed);
function checkBidirectionalMergeMode(value) {
    _genericUtils.checkStringTypeUnionValue((0, _common1.VALID_BIDIRECTIONAL_MERGE_MODES), "BidirectionalMergeMode", value);
}
const DEFAULT_BIDIRECTIONAL_MERGE_MODE = "concat";
class Bidirectional extends Wrapper {
    constructor(args){
        super(args);
        // Note: When creating `this.forwardLayer`, the original Layer object
        //   (`config.layer`) ought to be cloned. This is why we call
        //   `getConfig()` followed by `deserialize()`. Without this cloning,
        //   the layer names saved during serialization will incorrectly contain
        //   the 'forward_' prefix. In Python Keras, this is done using
        //   `copy.copy` (shallow copy), which does not have a simple equivalent
        //   in JavaScript. JavaScript's `Object.assign()` does not copy
        //   methods.
        const layerConfig = args.layer.getConfig();
        const forwDict = {};
        forwDict["className"] = args.layer.getClassName();
        forwDict["config"] = layerConfig;
        this.forwardLayer = (0, _serialization.deserialize)(forwDict);
        layerConfig["goBackwards"] = layerConfig["goBackwards"] === true ? false : true;
        const backDict = {};
        backDict["className"] = args.layer.getClassName();
        backDict["config"] = layerConfig;
        this.backwardLayer = (0, _serialization.deserialize)(backDict);
        this.forwardLayer.name = "forward_" + this.forwardLayer.name;
        this.backwardLayer.name = "backward_" + this.backwardLayer.name;
        this.mergeMode = args.mergeMode === undefined ? DEFAULT_BIDIRECTIONAL_MERGE_MODE : args.mergeMode;
        checkBidirectionalMergeMode(this.mergeMode);
        if (args.weights) throw new (0, _errors.NotImplementedError)("weights support is not implemented for Bidirectional layer yet.");
        this._stateful = args.layer.stateful;
        this.returnSequences = args.layer.returnSequences;
        this.returnState = args.layer.returnState;
        this.supportsMasking = true;
        this._trainable = true;
        this.inputSpec = args.layer.inputSpec;
        this.numConstants = null;
    }
    get trainable() {
        return this._trainable;
    }
    set trainable(value) {
        // Porting Note: the check of `this.layer` here is necessary due to the
        //   way the `constructor` of this class is written (see Porting Note
        //   above).
        this._trainable = value;
        if (this.forwardLayer != null) this.forwardLayer.trainable = value;
        if (this.backwardLayer != null) this.backwardLayer.trainable = value;
    }
    getWeights() {
        return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
    }
    setWeights(weights) {
        const numWeights = weights.length;
        const numeightsOver2 = Math.floor(numWeights / 2);
        this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));
        this.backwardLayer.setWeights(weights.slice(numeightsOver2));
    }
    computeOutputShape(inputShape) {
        let layerShapes = this.forwardLayer.computeOutputShape(inputShape);
        if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) layerShapes = [
            layerShapes
        ];
        layerShapes;
        let outputShape;
        let outputShapes;
        let stateShape;
        if (this.returnState) {
            stateShape = layerShapes.slice(1);
            outputShape = layerShapes[0];
        } else outputShape = layerShapes[0];
        outputShape;
        if (this.mergeMode === "concat") {
            outputShape[outputShape.length - 1] *= 2;
            outputShapes = [
                outputShape
            ];
        } else if (this.mergeMode == null) outputShapes = [
            outputShape,
            outputShape.slice()
        ];
        else outputShapes = [
            outputShape
        ];
        if (this.returnState) {
            if (this.mergeMode == null) return outputShapes.concat(stateShape).concat(stateShape.slice());
            return [
                outputShape
            ].concat(stateShape).concat(stateShape.slice());
        }
        return _genericUtils.singletonOrArray(outputShapes);
    }
    apply(inputs, kwargs) {
        let initialState = kwargs == null ? null : kwargs["initialState"];
        let constants = kwargs == null ? null : kwargs["constants"];
        if (kwargs == null) kwargs = {};
        const standardized = (0, _recurrent.standardizeArgs)(inputs, initialState, constants, this.numConstants);
        inputs = standardized.inputs;
        initialState = standardized.initialState;
        constants = standardized.constants;
        if (Array.isArray(inputs)) {
            initialState = inputs.slice(1);
            inputs = inputs[0];
        }
        if ((initialState == null || initialState.length === 0) && constants == null) return super.apply(inputs, kwargs);
        const additionalInputs = [];
        const additionalSpecs = [];
        if (initialState != null) {
            const numStates = initialState.length;
            if (numStates % 2 > 0) throw new (0, _errors.ValueError)("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
            kwargs["initialState"] = initialState;
            additionalInputs.push(...initialState);
            const stateSpecs = initialState.map((state)=>new (0, _topology.InputSpec)({
                    shape: state.shape
                }));
            this.forwardLayer.stateSpec = stateSpecs.slice(0, numStates / 2);
            this.backwardLayer.stateSpec = stateSpecs.slice(numStates / 2);
            additionalSpecs.push(...stateSpecs);
        }
        if (constants != null) throw new (0, _errors.NotImplementedError)("Support for constants in Bidirectional layers is not implemented yet.");
        const isSymbolicTensor = additionalInputs[0] instanceof (0, _topology.SymbolicTensor);
        for (const tensor of additionalInputs){
            if (tensor instanceof (0, _topology.SymbolicTensor) !== isSymbolicTensor) throw new (0, _errors.ValueError)("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
        }
        if (isSymbolicTensor) {
            // Compute the full input and specs, including the states.
            const fullInput = [
                inputs
            ].concat(additionalInputs);
            const fullInputSpec = this.inputSpec.concat(additionalSpecs);
            // Perform the call temporarily and replace inputSpec.
            // Note: with initial states symbolic calls and non-symbolic calls to
            // this method differ in how the initial states are passed. For
            // symbolic calls, the initial states are passed in the first arg, as
            // an Array of SymbolicTensors; for non-symbolic calls, they are
            // passed in the second arg as a part of the kwargs. Hence the need to
            // temporarily modify inputSpec here.
            // TODO(cais): Make refactoring so that this hacky code below is no
            // longer needed.
            const originalInputSpec = this.inputSpec;
            this.inputSpec = fullInputSpec;
            const output = super.apply(fullInput, kwargs);
            this.inputSpec = originalInputSpec;
            return output;
        } else return super.apply(inputs, kwargs);
    }
    call(inputs, kwargs) {
        return (0, _tfjsCore.tidy)(()=>{
            const initialState = kwargs["initialState"];
            let y;
            let yRev;
            if (initialState == null) {
                y = this.forwardLayer.call(inputs, kwargs);
                yRev = this.backwardLayer.call(inputs, kwargs);
            } else {
                const forwardState = initialState.slice(0, initialState.length / 2);
                const backwardState = initialState.slice(initialState.length / 2);
                y = this.forwardLayer.call(inputs, Object.assign(kwargs, {
                    initialState: forwardState
                }));
                yRev = this.backwardLayer.call(inputs, Object.assign(kwargs, {
                    initialState: backwardState
                }));
            }
            let states;
            if (this.returnState) {
                if (Array.isArray(y)) states = y.slice(1).concat(yRev.slice(1));
                y = y[0];
                yRev = yRev[0];
            }
            if (this.returnSequences) yRev = _tfjsCore.reverse(yRev, 1);
            let output;
            if (this.mergeMode === "concat") output = _tfjsBackend.concatenate([
                y,
                yRev
            ]);
            else if (this.mergeMode === "sum") output = _tfjsCore.add(y, yRev);
            else if (this.mergeMode === "ave") output = _tfjsCore.mul(.5, _tfjsCore.add(y, yRev));
            else if (this.mergeMode === "mul") output = _tfjsCore.mul(y, yRev);
            else if (this.mergeMode == null) output = [
                y,
                yRev
            ];
            // TODO(cais): Properly set learning phase.
            if (this.returnState) {
                if (this.mergeMode == null) return output.concat(states);
                return [
                    output
                ].concat(states);
            }
            return output;
        });
    }
    resetStates(states) {
        this.forwardLayer.resetStates();
        this.backwardLayer.resetStates();
    }
    build(inputShape) {
        (0, _common.nameScope)(this.forwardLayer.name, ()=>{
            this.forwardLayer.build(inputShape);
        });
        (0, _common.nameScope)(this.backwardLayer.name, ()=>{
            this.backwardLayer.build(inputShape);
        });
        this.built = true;
    }
    computeMask(inputs, mask) {
        if (Array.isArray(mask)) mask = mask[0];
        let outputMask;
        if (this.returnSequences) {
            if (this.mergeMode == null) outputMask = [
                mask,
                mask
            ];
            else outputMask = mask;
        } else if (this.mergeMode == null) outputMask = [
            null,
            null
        ];
        else outputMask = null;
        if (this.returnState) {
            const states = this.forwardLayer.states;
            const stateMask = states.map((state)=>null);
            if (Array.isArray(outputMask)) return outputMask.concat(stateMask).concat(stateMask);
            else return [
                outputMask
            ].concat(stateMask).concat(stateMask);
        } else return outputMask;
    }
    get trainableWeights() {
        return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
    }
    get nonTrainableWeights() {
        return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
    }
    // TODO(cais): Implement constraints().
    setFastWeightInitDuringBuild(value) {
        super.setFastWeightInitDuringBuild(value);
        if (this.forwardLayer != null) this.forwardLayer.setFastWeightInitDuringBuild(value);
        if (this.backwardLayer != null) this.backwardLayer.setFastWeightInitDuringBuild(value);
    }
    getConfig() {
        const config = {
            "mergeMode": this.mergeMode
        };
        // TODO(cais): Add logic for `numConstants` once the property is added.
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
    /** @nocollapse */ static fromConfig(cls, config) {
        const rnnLayer = (0, _serialization.deserialize)(config["layer"]);
        delete config["layer"];
        // TODO(cais): Add logic for `numConstants` once the property is added.
        if (config["numConstants"] != null) throw new (0, _errors.NotImplementedError)(`Deserialization of a Bidirectional layer with numConstants ` + `present is not supported yet.`);
        // tslint:disable-next-line:no-any
        const newConfig = config;
        newConfig["layer"] = rnnLayer;
        return new cls(newConfig);
    }
}
/** @nocollapse */ Bidirectional.className = "Bidirectional";
(0, _tfjsCore.serialization).registerClass(Bidirectional);

},{"@tensorflow/tfjs-core":"2votT","../backend/tfjs_backend":"iABet","../common":"fOhOh","../engine/topology":"2OPnm","../errors":"kA7ff","../keras_format/common":"40Wbd","../utils/generic_utils":"2cErd","../utils/types_utils":"70VAF","./recurrent":"1N3a1","./serialization":"9miVs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"acOjA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Binary accuracy metric function.
 *
 * `yTrue` and `yPred` can have 0-1 values. Example:
 * ```js
 * const x = tf.tensor2d([[1, 1, 1, 1], [0, 0, 0, 0]], [2, 4]);
 * const y = tf.tensor2d([[1, 0, 1, 0], [0, 0, 0, 1]], [2, 4]);
 * const accuracy = tf.metrics.binaryAccuracy(x, y);
 * accuracy.print();
 * ```
 *
 * `yTrue` and `yPred` can also have floating-number values between 0 and 1, in
 * which case the values will be thresholded at 0.5 to yield 0-1 values (i.e.,
 * a value >= 0.5 and <= 1.0 is interpreted as 1.
 * )
 * Example:
 * ```js
 * const x = tf.tensor1d([1, 1, 1, 1, 0, 0, 0, 0]);
 * const y = tf.tensor1d([0.2, 0.4, 0.6, 0.8, 0.2, 0.3, 0.4, 0.7]);
 * const accuracy = tf.metrics.binaryAccuracy(x, y);
 * accuracy.print();
 * ```
 *
 * @param yTrue Binary Tensor of truth.
 * @param yPred Binary Tensor of prediction.
 * @return Accuracy Tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "binaryAccuracy", ()=>binaryAccuracy);
/**
 * Binary crossentropy metric function.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d([[0], [1], [1], [1]]);
 * const y = tf.tensor2d([[0], [0], [0.5], [1]]);
 * const crossentropy = tf.metrics.binaryCrossentropy(x, y);
 * crossentropy.print();
 * ```
 *
 * @param yTrue Binary Tensor of truth.
 * @param yPred Binary Tensor of prediction, probabilities for the `1` case.
 * @return Accuracy Tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "binaryCrossentropy", ()=>binaryCrossentropy);
/**
 * Sparse categorical accuracy metric function.
 *
 * Example:
 * ```js
 *
 * const yTrue = tf.tensor1d([1, 1, 2, 2, 0]);
 * const yPred = tf.tensor2d(
 *      [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);
 * const crossentropy = tf.metrics.sparseCategoricalAccuracy(yTrue, yPred);
 * crossentropy.print();
 * ```
 *
 * @param yTrue True labels: indices.
 * @param yPred Predicted probabilities or logits.
 * @returns Accuracy tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "sparseCategoricalAccuracy", ()=>sparseCategoricalAccuracy);
/**
 * Categorical accuracy metric function.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d([[0, 0, 0, 1], [0, 0, 0, 1]]);
 * const y = tf.tensor2d([[0.1, 0.8, 0.05, 0.05], [0.1, 0.05, 0.05, 0.8]]);
 * const accuracy = tf.metrics.categoricalAccuracy(x, y);
 * accuracy.print();
 * ```
 *
 * @param yTrue Binary Tensor of truth: one-hot encoding of categories.
 * @param yPred Binary Tensor of prediction: probabilities or logits for the
 *   same categories as in `yTrue`.
 * @return Accuracy Tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "categoricalAccuracy", ()=>categoricalAccuracy);
/**
 * Categorical crossentropy between an output tensor and a target tensor.
 *
 * @param target A tensor of the same shape as `output`.
 * @param output A tensor resulting from a softmax (unless `fromLogits` is
 *  `true`, in which case `output` is expected to be the logits).
 * @param fromLogits Boolean, whether `output` is the result of a softmax, or is
 *   a tensor of logits.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "categoricalCrossentropy", ()=>categoricalCrossentropy);
/**
 * Computes the precision of the predictions with respect to the labels.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d(
 *    [
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [1, 0, 0, 0],
 *      [0, 0, 1, 0]
 *    ]
 * );
 *
 * const y = tf.tensor2d(
 *    [
 *      [0, 0, 1, 0],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 1, 0, 0]
 *    ]
 * );
 *
 * const precision = tf.metrics.precision(x, y);
 * precision.print();
 * ```
 *
 * @param yTrue The ground truth values. Expected to be contain only 0-1 values.
 * @param yPred The predicted values. Expected to be contain only 0-1 values.
 * @return Precision Tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "precision", ()=>precision);
/**
 * Computes the recall of the predictions with respect to the labels.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d(
 *    [
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [1, 0, 0, 0],
 *      [0, 0, 1, 0]
 *    ]
 * );
 *
 * const y = tf.tensor2d(
 *    [
 *      [0, 0, 1, 0],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 1, 0, 0]
 *    ]
 * );
 *
 * const recall = tf.metrics.recall(x, y);
 * recall.print();
 * ```
 *
 * @param yTrue The ground truth values. Expected to be contain only 0-1 values.
 * @param yPred The predicted values. Expected to be contain only 0-1 values.
 * @return Recall Tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "recall", ()=>recall);
/**
 * Loss or metric function: Cosine proximity.
 *
 * Mathematically, cosine proximity is defined as:
 *   `-sum(l2Normalize(yTrue) * l2Normalize(yPred))`,
 * wherein `l2Normalize()` normalizes the L2 norm of the input to 1 and `*`
 * represents element-wise multiplication.
 *
 * ```js
 * const yTrue = tf.tensor2d([[1, 0], [1, 0]]);
 * const yPred = tf.tensor2d([[1 / Math.sqrt(2), 1 / Math.sqrt(2)], [0, 1]]);
 * const proximity = tf.metrics.cosineProximity(yTrue, yPred);
 * proximity.print();
 * ```
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Cosine proximity Tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "cosineProximity", ()=>cosineProximity);
/**
 * Loss or metric function: Mean absolute error.
 *
 * Mathematically, mean absolute error is defined as:
 *   `mean(abs(yPred - yTrue))`,
 * wherein the `mean` is applied over feature dimensions.
 *
 * ```js
 * const yTrue = tf.tensor2d([[0, 1], [0, 0], [2, 3]]);
 * const yPred = tf.tensor2d([[0, 1], [0, 1], [-2, -3]]);
 * const mse = tf.metrics.meanAbsoluteError(yTrue, yPred);
 * mse.print();
 * ```
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Mean absolute error Tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "meanAbsoluteError", ()=>meanAbsoluteError);
/**
 * Loss or metric function: Mean absolute percentage error.
 *
 * ```js
 * const yTrue = tf.tensor2d([[0, 1], [10, 20]]);
 * const yPred = tf.tensor2d([[0, 1], [11, 24]]);
 * const mse = tf.metrics.meanAbsolutePercentageError(yTrue, yPred);
 * mse.print();
 * ```
 *
 * Aliases: `tf.metrics.MAPE`, `tf.metrics.mape`.
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Mean absolute percentage error Tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "meanAbsolutePercentageError", ()=>meanAbsolutePercentageError);
parcelHelpers.export(exports, "MAPE", ()=>MAPE);
parcelHelpers.export(exports, "mape", ()=>mape);
/**
 * Loss or metric function: Mean squared error.
 *
 * ```js
 * const yTrue = tf.tensor2d([[0, 1], [3, 4]]);
 * const yPred = tf.tensor2d([[0, 1], [-3, -4]]);
 * const mse = tf.metrics.meanSquaredError(yTrue, yPred);
 * mse.print();
 * ```
 *
 * Aliases: `tf.metrics.MSE`, `tf.metrics.mse`.
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Mean squared error Tensor.
 */ /** @doc {heading: 'Metrics', namespace: 'metrics'} */ parcelHelpers.export(exports, "meanSquaredError", ()=>meanSquaredError);
parcelHelpers.export(exports, "MSE", ()=>MSE);
parcelHelpers.export(exports, "mse", ()=>mse);
var _losses = require("./losses");
var _metrics = require("./metrics");
function binaryAccuracy(yTrue, yPred) {
    return _metrics.binaryAccuracy(yTrue, yPred);
}
function binaryCrossentropy(yTrue, yPred) {
    return _metrics.binaryCrossentropy(yTrue, yPred);
}
function sparseCategoricalAccuracy(yTrue, yPred) {
    return _metrics.sparseCategoricalAccuracy(yTrue, yPred);
}
function categoricalAccuracy(yTrue, yPred) {
    return _metrics.categoricalAccuracy(yTrue, yPred);
}
function categoricalCrossentropy(yTrue, yPred) {
    return _metrics.categoricalCrossentropy(yTrue, yPred);
}
function precision(yTrue, yPred) {
    return _metrics.precision(yTrue, yPred);
}
function recall(yTrue, yPred) {
    return _metrics.recall(yTrue, yPred);
}
function cosineProximity(yTrue, yPred) {
    return _losses.cosineProximity(yTrue, yPred);
}
function meanAbsoluteError(yTrue, yPred) {
    return _losses.meanAbsoluteError(yTrue, yPred);
}
function meanAbsolutePercentageError(yTrue, yPred) {
    return _losses.meanAbsolutePercentageError(yTrue, yPred);
}
function MAPE(yTrue, yPred) {
    return _losses.meanAbsolutePercentageError(yTrue, yPred);
}
function mape(yTrue, yPred) {
    return _losses.meanAbsolutePercentageError(yTrue, yPred);
}
function meanSquaredError(yTrue, yPred) {
    return _losses.meanSquaredError(yTrue, yPred);
}
function MSE(yTrue, yPred) {
    return _losses.meanSquaredError(yTrue, yPred);
}
function mse(yTrue, yPred) {
    return _losses.meanSquaredError(yTrue, yPred);
}

},{"./losses":"fAGPb","./metrics":"2pHnM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gFv4M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ parcelHelpers.export(exports, "modelFromJSON", ()=>(0, _models.modelFromJSON));
var _models = require("./models");

},{"./models":"dis3W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dHNS5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Regularizer for L1 and L2 regularization.
 *
 * Adds a term to the loss to penalize large weights:
 * loss += sum(l1 * abs(x)) + sum(l2 * x^2)
 */ /** @doc {heading: 'Regularizers', namespace: 'regularizers'} */ parcelHelpers.export(exports, "l1l2", ()=>l1l2);
/**
 * Regularizer for L1 regularization.
 *
 * Adds a term to the loss to penalize large weights:
 * loss += sum(l1 * abs(x))
 * @param args l1 config.
 */ /** @doc {heading: 'Regularizers', namespace: 'regularizers'} */ parcelHelpers.export(exports, "l1", ()=>l1);
/**
 * Regularizer for L2 regularization.
 *
 * Adds a term to the loss to penalize large weights:
 * loss += sum(l2 * x^2)
 * @param args l2 config.
 */ /** @doc {heading: 'Regularizers', namespace: 'regularizers'} */ parcelHelpers.export(exports, "l2", ()=>l2);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var _regularizers = require("./regularizers");
function l1l2(config) {
    return new (0, _regularizers.L1L2)(config);
}
function l1(config) {
    return _regularizers.l1(config);
}
function l2(config) {
    return _regularizers.l2(config);
}

},{"./regularizers":"447e0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9OlfS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Callback", ()=>Callback);
/**
 * A Callback that stops training when a monitored quantity has stopped
 * improving.
 */ parcelHelpers.export(exports, "EarlyStopping", ()=>EarlyStopping);
/**
 * Factory function for a Callback that stops training when a monitored
 * quantity has stopped improving.
 *
 * Early stopping is a type of regularization, and protects model against
 * overfitting.
 *
 * The following example based on fake data illustrates how this callback
 * can be used during `tf.LayersModel.fit()`:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense({
 *   units: 3,
 *   activation: 'softmax',
 *   kernelInitializer: 'ones',
 *   inputShape: [2]
 * }));
 * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);
 * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);
 * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);
 * model.compile(
 *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});
 *
 * // Without the EarlyStopping callback, the val_acc value would be:
 * //   0.5, 0.5, 0.5, 0.5, ...
 * // With val_acc being monitored, training should stop after the 2nd epoch.
 * const history = await model.fit(xs, ys, {
 *   epochs: 10,
 *   validationData: [xsVal, ysVal],
 *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})
 * });
 *
 * // Expect to see a length-2 array.
 * console.log(history.history.val_acc);
 * ```
 */ /**
 * @doc {
 *   heading: 'Callbacks',
 *   namespace: 'callbacks'
 * }
 */ parcelHelpers.export(exports, "earlyStopping", ()=>earlyStopping);
parcelHelpers.export(exports, "callbacks", ()=>callbacks);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ /* Original source: keras/callbacks.py */ var _baseCallbacks = require("./base_callbacks");
var _training = require("./engine/training");
var _errors = require("./errors");
var _logs = require("./logs");
class Callback extends (0, _baseCallbacks.BaseCallback) {
    constructor(){
        super(...arguments);
        /** Instance of `keras.models.Model`. Reference of the model being trained. */ this.model = null;
    }
    setModel(model) {
        if (!(model instanceof (0, _training.LayersModel))) throw new Error("model must be a LayersModel, not some other Container");
        this.model = model;
    }
}
function less(currVal, prevVal) {
    return currVal < prevVal;
}
function greater(currVal, prevVal) {
    return currVal > prevVal;
}
class EarlyStopping extends Callback {
    constructor(args){
        super();
        if (args == null) args = {};
        if (args.restoreBestWeights) throw new (0, _errors.NotImplementedError)("restoreBestWeights = True is not implemented in EarlyStopping yet.");
        this.monitor = args.monitor || "val_loss";
        this.minDelta = Math.abs(args.minDelta || 0);
        this.patience = args.patience || 0;
        this.verbose = args.verbose || 0;
        this.mode = args.mode || "auto";
        this.baseline = args.baseline;
        if ([
            "auto",
            "min",
            "max"
        ].indexOf(this.mode) === -1) {
            console.warn(`EarlyStopping mode '${this.mode}' is invalid. ` + `Falling back to mode 'auto'.`);
            this.mode = "auto";
        }
        if (this.mode === "min") this.monitorFunc = less;
        else if (this.mode === "max") this.monitorFunc = greater;
        else // For mode === 'auto'.
        if (this.monitor.indexOf("acc") !== -1) this.monitorFunc = greater;
        else this.monitorFunc = less;
        if (this.monitorFunc === less) this.minDelta *= -1;
    }
    async onTrainBegin(logs) {
        this.wait = 0;
        this.stoppedEpoch = 0;
        if (this.baseline != null) this.best = this.baseline;
        else this.best = this.monitorFunc === less ? Infinity : -Infinity;
    }
    async onEpochEnd(epoch, logs) {
        await (0, _logs.resolveScalarsInLogs)(logs);
        const current = this.getMonitorValue(logs);
        if (current == null) return;
        if (this.monitorFunc(current - this.minDelta, this.best)) {
            this.best = current;
            this.wait = 0;
        // TODO(cais): Logic for restoreBestWeights.
        } else {
            this.wait++;
            if (this.wait >= this.patience) {
                this.stoppedEpoch = epoch;
                this.model.stopTraining = true;
            }
        // TODO(cais): Logic for restoreBestWeights.
        }
    }
    async onTrainEnd(logs) {
        if (this.stoppedEpoch > 0 && this.verbose) console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);
    }
    getMonitorValue(logs) {
        if (logs == null) logs = {};
        const monitorValue = logs[this.monitor];
        if (monitorValue == null) console.warn(`Metric for EarlyStopping ${this.monitor} is not available. ` + `Available metrics are: ${Object.keys(logs)}`);
        return monitorValue;
    }
}
function earlyStopping(args) {
    return new EarlyStopping(args);
}
const callbacks = {
    earlyStopping
};

},{"./base_callbacks":"aV9CX","./engine/training":"akRzZ","./errors":"kA7ff","./logs":"f24Yn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f24HS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "GraphModel", ()=>(0, _graphModel.GraphModel));
parcelHelpers.export(exports, "loadGraphModel", ()=>(0, _graphModel.loadGraphModel));
parcelHelpers.export(exports, "deregisterOp", ()=>(0, _register.deregisterOp));
parcelHelpers.export(exports, "registerOp", ()=>(0, _register.registerOp));
parcelHelpers.export(exports, "version_converter", ()=>(0, _version.version));
var _graphModel = require("./executor/graph_model");
var _register = require("./operations/custom_op/register");
var _version = require("./version");

},{"./executor/graph_model":"a4Jqe","./operations/custom_op/register":"9R9I0","./version":"3keZk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a4Jqe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TFHUB_SEARCH_PARAM", ()=>TFHUB_SEARCH_PARAM);
parcelHelpers.export(exports, "DEFAULT_MODEL_NAME", ()=>DEFAULT_MODEL_NAME);
/**
 * A `tf.GraphModel` is a directed, acyclic graph of built from
 * SavedModel GraphDef and allows inference exeuction.
 *
 * A `tf.GraphModel` can only be created by loading from a model converted from
 * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using
 * the command line converter tool and loaded via `tf.loadGraphModel`.
 */ /** @doc {heading: 'Models', subheading: 'Classes'} */ parcelHelpers.export(exports, "GraphModel", ()=>GraphModel);
/**
 * Load a graph model given a URL to the model definition.
 *
 * Example of loading MobileNetV2 from a URL and making a prediction with a
 * zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
 * const model = await tf.loadGraphModel(modelUrl);
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 *
 * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with
 * a zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';
 * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 * @param modelUrl The url or an `io.IOHandler` that loads the model.
 * @param options Options for the HTTP request, which allows to send credentials
 *    and custom headers.
 */ /** @doc {heading: 'Models', subheading: 'Loading'} */ parcelHelpers.export(exports, "loadGraphModel", ()=>loadGraphModel);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _operationMapper = require("../operations/operation_mapper");
var _graphExecutor = require("./graph_executor");
const TFHUB_SEARCH_PARAM = "?tfjs-format=file";
const DEFAULT_MODEL_NAME = "model.json";
class GraphModel {
    /**
     * @param modelUrl url for the model, or an `io.IOHandler`.
     * @param weightManifestUrl url for the weight file generated by
     * scripts/convert.py script.
     * @param requestOption options for Request, which allows to send credentials
     * and custom headers.
     * @param onProgress Optional, progress callback function, fired periodically
     * before the load is completed.
     */ constructor(modelUrl, loadOptions = {}){
        this.modelUrl = modelUrl;
        this.loadOptions = loadOptions;
        this.version = "n/a";
        if (loadOptions == null) this.loadOptions = {};
    }
    // Returns the version information for the tensorflow model GraphDef.
    get modelVersion() {
        return this.version;
    }
    get inputNodes() {
        return this.executor.inputNodes;
    }
    get outputNodes() {
        return this.executor.outputNodes;
    }
    get inputs() {
        return this.executor.inputs;
    }
    get outputs() {
        return this.executor.outputs;
    }
    get weights() {
        return this.executor.weightMap;
    }
    findIOHandler() {
        const path = this.modelUrl;
        if (path.load != null) // Path is an IO Handler.
        this.handler = path;
        else if (this.loadOptions.requestInit != null) this.handler = (0, _tfjsCore.io).browserHTTPRequest(path, this.loadOptions);
        else {
            const handlers = (0, _tfjsCore.io).getLoadHandlers(path, this.loadOptions);
            if (handlers.length === 0) // For backward compatibility: if no load handler can be found,
            // assume it is a relative http path.
            handlers.push((0, _tfjsCore.io).browserHTTPRequest(path, this.loadOptions));
            else if (handlers.length > 1) throw new Error(`Found more than one (${handlers.length}) load handlers for ` + `URL '${[
                path
            ]}'`);
            this.handler = handlers[0];
        }
    }
    /**
     * Loads the model and weight files, construct the in memory weight map and
     * compile the inference graph.
     */ async load() {
        this.findIOHandler();
        if (this.handler.load == null) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
        this.artifacts = await this.handler.load();
        const graph = this.artifacts.modelTopology;
        let signature = {};
        if (this.artifacts.userDefinedMetadata != null) signature = this.artifacts.userDefinedMetadata.signature;
        this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;
        const weightMap = (0, _tfjsCore.io).decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
        this.executor = new (0, _graphExecutor.GraphExecutor)((0, _operationMapper.OperationMapper).Instance.transformGraph(graph, signature));
        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);
        return true;
    }
    /**
     * Save the configuration and/or weights of the GraphModel.
     *
     * An `IOHandler` is an object that has a `save` method of the proper
     * signature defined. The `save` method manages the storing or
     * transmission of serialized data ("artifacts") that represent the
     * model's topology and weights onto or via a specific medium, such as
     * file downloads, local storage, IndexedDB in the web browser and HTTP
     * requests to a server. TensorFlow.js provides `IOHandler`
     * implementations for a number of frequently used saving mediums, such as
     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
     * for more details.
     *
     * This method also allows you to refer to certain types of `IOHandler`s
     * as URL-like string shortcuts, such as 'localstorage://' and
     * 'indexeddb://'.
     *
     * Example 1: Save `model`'s topology and weights to browser [local
     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
     * then load it back.
     *
     * ```js
     * const modelUrl =
     *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
     * const model = await tf.loadGraphModel(modelUrl);
     * const zeros = tf.zeros([1, 224, 224, 3]);
     * model.predict(zeros).print();
     *
     * const saveResults = await model.save('localstorage://my-model-1');
     *
     * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');
     * console.log('Prediction from loaded model:');
     * model.predict(zeros).print();
     * ```
     *
     * @param handlerOrURL An instance of `IOHandler` or a URL-like,
     * scheme-based string shortcut for `IOHandler`.
     * @param config Options for saving the model.
     * @returns A `Promise` of `SaveResult`, which summarizes the result of
     * the saving, such as byte sizes of the saved artifacts for the model's
     *   topology and weight values.
     */ /**
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */ async save(handlerOrURL, config) {
        if (typeof handlerOrURL === "string") {
            const handlers = (0, _tfjsCore.io).getSaveHandlers(handlerOrURL);
            if (handlers.length === 0) throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);
            else if (handlers.length > 1) throw new Error(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);
            handlerOrURL = handlers[0];
        }
        if (handlerOrURL.save == null) throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
        return handlerOrURL.save(this.artifacts);
    }
    /**
     * Execute the inference for the input tensors.
     *
     * @param input The input tensors, when there is single input for the model,
     * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
     * inputs params should be in either `tf.Tensor`[] if the input order is
     * fixed, or otherwise NamedTensorMap format.
     *
     * For model with multiple inputs, we recommend you use NamedTensorMap as the
     * input type, if you use `tf.Tensor`[], the order of the array needs to
     * follow the
     * order of inputNodes array. @see {@link GraphModel.inputNodes}
     *
     * You can also feed any intermediate nodes using the NamedTensorMap as the
     * input type. For example, given the graph
     *    InputNode => Intermediate => OutputNode,
     * you can execute the subgraph Intermediate => OutputNode by calling
     *    model.execute('IntermediateNode' : tf.tensor(...));
     *
     * This is useful for models that uses tf.dynamic_rnn, where the intermediate
     * state needs to be fed manually.
     *
     * For batch inference execution, the tensors for each input need to be
     * concatenated together. For example with mobilenet, the required input shape
     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
     * If we are provide a batched data of 100 images, the input tensor should be
     * in the shape of [100, 244, 244, 3].
     *
     * @param config Prediction configuration for specifying the batch size and
     * output node names. Currently the batch size option is ignored for graph
     * model.
     *
     * @returns Inference result tensors. The output would be single `tf.Tensor`
     * if model has single output node, otherwise Tensor[] or NamedTensorMap[]
     * will be returned for model with multiple outputs.
     */ /** @doc {heading: 'Models', subheading: 'Classes'} */ predict(inputs, config) {
        return this.execute(inputs, this.outputNodes);
    }
    normalizeInputs(inputs) {
        if (!(inputs instanceof (0, _tfjsCore.Tensor)) && !Array.isArray(inputs)) // The input is already a NamedTensorMap.
        return inputs;
        inputs = Array.isArray(inputs) ? inputs : [
            inputs
        ];
        if (inputs.length !== this.inputNodes.length) throw new Error("Input tensor count mismatch," + `the graph model has ${this.inputNodes.length} placeholders, ` + `while there are ${inputs.length} input tensors.`);
        return this.inputNodes.reduce((map, inputName, i)=>{
            map[inputName] = inputs[i];
            return map;
        }, {});
    }
    normalizeOutputs(outputs) {
        outputs = outputs || this.outputNodes;
        return !Array.isArray(outputs) ? [
            outputs
        ] : outputs;
    }
    /**
     * Executes inference for the model for given input tensors.
     * @param inputs tensor, tensor array or tensor map of the inputs for the
     * model, keyed by the input node names.
     * @param outputs output node name from the Tensorflow model, if no
     * outputs are specified, the default outputs of the model would be used.
     * You can inspect intermediate nodes of the model by adding them to the
     * outputs array.
     *
     * @returns A single tensor if provided with a single output or no outputs
     * are provided and there is only one default output, otherwise return a
     * tensor array. The order of the tensor array is the same as the outputs
     * if provided, otherwise the order of outputNodes attribute of the model.
     */ /** @doc {heading: 'Models', subheading: 'Classes'} */ execute(inputs, outputs) {
        inputs = this.normalizeInputs(inputs);
        outputs = this.normalizeOutputs(outputs);
        const result = this.executor.execute(inputs, outputs);
        return result.length > 1 ? result : result[0];
    }
    /**
     * Executes inference for the model for given input tensors in async
     * fashion, use this method when your model contains control flow ops.
     * @param inputs tensor, tensor array or tensor map of the inputs for the
     * model, keyed by the input node names.
     * @param outputs output node name from the Tensorflow model, if no outputs
     * are specified, the default outputs of the model would be used. You can
     * inspect intermediate nodes of the model by adding them to the outputs
     * array.
     *
     * @returns A Promise of single tensor if provided with a single output or
     * no outputs are provided and there is only one default output, otherwise
     * return a tensor map.
     */ /** @doc {heading: 'Models', subheading: 'Classes'} */ async executeAsync(inputs, outputs) {
        inputs = this.normalizeInputs(inputs);
        outputs = this.normalizeOutputs(outputs);
        const result = await this.executor.executeAsync(inputs, outputs);
        return result.length > 1 ? result : result[0];
    }
    convertTensorMapToTensorsMap(map) {
        return Object.keys(map).reduce((newMap, key)=>{
            newMap[key] = [
                map[key]
            ];
            return newMap;
        }, {});
    }
    /**
     * Releases the memory used by the weight tensors.
     */ /** @doc {heading: 'Models', subheading: 'Classes'} */ dispose() {
        this.executor.dispose();
    }
}
async function loadGraphModel(modelUrl, options = {}) {
    if (modelUrl == null) throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
    if (options == null) options = {};
    if (options.fromTFHub) {
        if (modelUrl.load == null) {
            if (!modelUrl.endsWith("/")) modelUrl = modelUrl + "/";
            modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;
        }
    }
    const model = new GraphModel(modelUrl, options);
    await model.load();
    return model;
}

},{"@tensorflow/tfjs-core":"2votT","../operations/operation_mapper":"9lhbi","./graph_executor":"7Jwcj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9lhbi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OperationMapper", ()=>OperationMapper);
parcelHelpers.export(exports, "decodeBase64", ()=>decodeBase64);
parcelHelpers.export(exports, "parseStringParam", ()=>parseStringParam);
parcelHelpers.export(exports, "getStringParam", ()=>getStringParam);
parcelHelpers.export(exports, "getBoolParam", ()=>getBoolParam);
parcelHelpers.export(exports, "getNumberParam", ()=>getNumberParam);
parcelHelpers.export(exports, "parseDtypeParam", ()=>parseDtypeParam);
parcelHelpers.export(exports, "getDtypeParam", ()=>getDtypeParam);
parcelHelpers.export(exports, "getDtypeArrayParam", ()=>getDtypeArrayParam);
parcelHelpers.export(exports, "parseTensorShapeParam", ()=>parseTensorShapeParam);
parcelHelpers.export(exports, "getTensorShapeParam", ()=>getTensorShapeParam);
parcelHelpers.export(exports, "getNumericArrayParam", ()=>getNumericArrayParam);
parcelHelpers.export(exports, "getStringArrayParam", ()=>getStringArrayParam);
parcelHelpers.export(exports, "getTensorShapeArrayParam", ()=>getTensorShapeArrayParam);
parcelHelpers.export(exports, "getBoolArrayParam", ()=>getBoolArrayParam);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _compiledApi = require("../data/compiled_api");
var _register = require("./custom_op/register");
var _utils = require("./executors/utils");
var _arithmetic = require("./op_list/arithmetic");
var _basicMath = require("./op_list/basic_math");
var _control = require("./op_list/control");
var _convolution = require("./op_list/convolution");
var _creation = require("./op_list/creation");
var _dynamic = require("./op_list/dynamic");
var _evaluation = require("./op_list/evaluation");
var _graph = require("./op_list/graph");
var _image = require("./op_list/image");
var _logical = require("./op_list/logical");
var _matrices = require("./op_list/matrices");
var _normalization = require("./op_list/normalization");
var _reduction = require("./op_list/reduction");
var _sliceJoin = require("./op_list/slice_join");
var _spectral = require("./op_list/spectral");
var _transformation = require("./op_list/transformation");
var Buffer = require("buffer").Buffer;
class OperationMapper {
    // Singleton instance for the mapper
    static get Instance() {
        return this._instance || (this._instance = new this());
    }
    // Loads the op mapping from the JSON file.
    constructor(){
        const ops = [
            _arithmetic,
            _basicMath,
            _control,
            _convolution,
            _creation,
            _dynamic,
            _evaluation,
            _logical,
            _image,
            _graph,
            _matrices,
            _normalization,
            _reduction,
            _sliceJoin,
            _spectral,
            _transformation
        ];
        const mappersJson = [].concat(...ops.map((op)=>op.json));
        this.opMappers = mappersJson.reduce((map, mapper)=>{
            map[mapper.tfOpName] = mapper;
            return map;
        }, {});
    }
    // Converts the model from Tensorflow GraphDef to local representation for
    // TensorFlow.js API
    transformGraph(graph, signature = {}) {
        const tfNodes = graph.node;
        const placeholders = [];
        const weights = [];
        const nodes = tfNodes.reduce((map, node)=>{
            map[node.name] = this.mapNode(node);
            if (node.op.startsWith("Placeholder")) placeholders.push(map[node.name]);
            if (node.op === "Const") weights.push(map[node.name]);
            return map;
        }, {});
        let inputs = [];
        const outputs = [];
        let inputNodeNameToKey = {};
        let outputNodeNameToKey = {};
        if (signature != null) {
            inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);
            outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);
        }
        const allNodes = Object.keys(nodes);
        allNodes.forEach((key)=>{
            const node = nodes[key];
            node.inputNames.forEach((name)=>{
                const [nodeName, ] = (0, _utils.getNodeNameAndIndex)(name);
                node.inputs.push(nodes[nodeName]);
                nodes[nodeName].children.push(node);
            });
        });
        // if signature has not outputs set, add any node that does not have
        // outputs.
        if (Object.keys(outputNodeNameToKey).length === 0) allNodes.forEach((key)=>{
            const node = nodes[key];
            if (node.children.length === 0) outputs.push(node);
        });
        else Object.keys(outputNodeNameToKey).forEach((name)=>{
            const [nodeName, ] = (0, _utils.getNodeNameAndIndex)(name);
            const node = nodes[nodeName];
            if (node != null) {
                node.signatureKey = outputNodeNameToKey[name];
                outputs.push(node);
            }
        });
        if (Object.keys(inputNodeNameToKey).length > 0) Object.keys(inputNodeNameToKey).forEach((name)=>{
            const [nodeName, ] = (0, _utils.getNodeNameAndIndex)(name);
            const node = nodes[nodeName];
            if (node) {
                node.signatureKey = inputNodeNameToKey[name];
                inputs.push(node);
            }
        });
        else inputs = placeholders;
        return {
            nodes,
            inputs,
            outputs,
            weights,
            placeholders,
            signature
        };
    }
    mapSignatureEntries(entries) {
        return Object.keys(entries || {}).reduce((prev, curr)=>{
            prev[entries[curr].name] = curr;
            return prev;
        }, {});
    }
    mapNode(node) {
        // Unsupported ops will cause an error at run-time (not parse time), since
        // they may not be used by the actual execution subgraph.
        const mapper = (0, _register.getRegisteredOp)(node.op) || this.opMappers[node.op] || {};
        if (node.attr == null) node.attr = {};
        const newNode = {
            name: node.name,
            op: node.op,
            category: mapper.category,
            inputNames: (node.input || []).map((input)=>input.startsWith("^") ? input.substr(1) : input),
            inputs: [],
            children: [],
            inputParams: {},
            attrParams: {},
            rawAttrs: node.attr
        };
        if (mapper.inputs != null) newNode.inputParams = mapper.inputs.reduce((map, param)=>{
            map[param.name] = {
                type: param.type,
                inputIndexStart: param.start,
                inputIndexEnd: param.end
            };
            return map;
        }, {});
        if (mapper.attrs != null) newNode.attrParams = mapper.attrs.reduce((map, param)=>{
            const type = param.type;
            let value = undefined;
            switch(param.type){
                case "string":
                    value = getStringParam(node.attr, param.tfName, param.defaultValue);
                    if (value === undefined && !!param.tfDeprecatedName) value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "string[]":
                    value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);
                    if (value === undefined && !!param.tfDeprecatedName) value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "number":
                    value = getNumberParam(node.attr, param.tfName, param.defaultValue || 0);
                    if (value === undefined && !!param.tfDeprecatedName) value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "number[]":
                    value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);
                    if (value === undefined && !!param.tfDeprecatedName) value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "bool":
                    value = getBoolParam(node.attr, param.tfName, param.defaultValue);
                    if (value === undefined && !!param.tfDeprecatedName) value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "bool[]":
                    value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);
                    if (value === undefined && !!param.tfDeprecatedName) value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "shape":
                    value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);
                    if (value === undefined && !!param.tfDeprecatedName) value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "shape[]":
                    value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);
                    if (value === undefined && !!param.tfDeprecatedName) value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "dtype":
                    value = getDtypeParam(node.attr, param.tfName, param.defaultValue);
                    if (value === undefined && !!param.tfDeprecatedName) value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "dtype[]":
                    value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);
                    if (value === undefined && !!param.tfDeprecatedName) value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                    break;
                case "tensor":
                case "tensors":
                    break;
                default:
                    throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);
            }
            map[param.name] = {
                value,
                type
            };
            return map;
        }, {});
        return newNode;
    }
}
function decodeBase64(text) {
    const global = (0, _tfjsCore.env)().global;
    if (typeof global.atob !== "undefined") return global.atob(text);
    else if (typeof Buffer !== "undefined") return new Buffer(text, "base64").toString();
    else throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function parseStringParam(s, keepCase) {
    const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);
    return keepCase ? value : value.toLowerCase();
}
function getStringParam(attrs, name, def, keepCase = false) {
    const param = attrs[name];
    if (param != null) return parseStringParam(param.s, keepCase);
    return def;
}
function getBoolParam(attrs, name, def) {
    const param = attrs[name];
    return param ? param.b : def;
}
function getNumberParam(attrs, name, def) {
    const param = attrs[name] || {};
    const value = param["i"] != null ? param["i"] : param["f"] != null ? param["f"] : def;
    return typeof value === "number" ? value : parseInt(value, 10);
}
function parseDtypeParam(value) {
    if (typeof value === "string") // tslint:disable-next-line:no-any
    value = _compiledApi.DataType[value];
    switch(value){
        case _compiledApi.DataType.DT_FLOAT:
            return "float32";
        case _compiledApi.DataType.DT_INT32:
        case _compiledApi.DataType.DT_INT64:
        case _compiledApi.DataType.DT_INT8:
        case _compiledApi.DataType.DT_UINT8:
            return "int32";
        case _compiledApi.DataType.DT_BOOL:
            return "bool";
        case _compiledApi.DataType.DT_DOUBLE:
            return "float32";
        case _compiledApi.DataType.DT_STRING:
            return "string";
        default:
            // Unknown dtype error will happen at runtime (instead of parse time),
            // since these nodes might not be used by the actual subgraph execution.
            return null;
    }
}
function getDtypeParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.type) return parseDtypeParam(param.type);
    return def;
}
function getDtypeArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.list && param.list.type) return param.list.type.map((v)=>parseDtypeParam(v));
    return def;
}
function parseTensorShapeParam(shape) {
    if (shape.unknownRank) return undefined;
    if (shape.dim != null) return shape.dim.map((dim)=>typeof dim.size === "number" ? dim.size : parseInt(dim.size, 10));
    return [];
}
function getTensorShapeParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.shape) return parseTensorShapeParam(param.shape);
    return def;
}
function getNumericArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param) return ((param.list.f && param.list.f.length ? param.list.f : param.list.i) || []).map((v)=>typeof v === "number" ? v : parseInt(v, 10));
    return def;
}
function getStringArrayParam(attrs, name, def, keepCase = false) {
    const param = attrs[name];
    if (param && param.list && param.list.s) return param.list.s.map((v)=>{
        return parseStringParam(v, keepCase);
    });
    return def;
}
function getTensorShapeArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.list && param.list.shape) return param.list.shape.map((v)=>{
        return parseTensorShapeParam(v);
    });
    return def;
}
function getBoolArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.list && param.list.b) return param.list.b;
    return def;
}

},{"@tensorflow/tfjs-core":"2votT","../data/compiled_api":"kAAYB","./custom_op/register":"9R9I0","./executors/utils":"e4F2f","./op_list/arithmetic":"3ZNMu","./op_list/basic_math":"6CCnX","./op_list/control":"1I1Ky","./op_list/convolution":"ielC4","./op_list/creation":"4n3g5","./op_list/dynamic":"cnt0X","./op_list/evaluation":"b6zuK","./op_list/graph":"9hfRv","./op_list/image":"ir9nP","./op_list/logical":"1GFcN","./op_list/matrices":"c10Kx","./op_list/normalization":"KxrY8","./op_list/reduction":"dQtYM","./op_list/slice_join":"8UC5s","./op_list/spectral":"NcPDN","./op_list/transformation":"9HPD2","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kAAYB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DataType", ()=>DataType);
parcelHelpers.export(exports, "SaverDef", ()=>SaverDef);
var DataType;
(function(DataType) {
    DataType[DataType["DT_INVALID"] = 0] = "DT_INVALID";
    DataType[DataType["DT_FLOAT"] = 1] = "DT_FLOAT";
    DataType[DataType["DT_DOUBLE"] = 2] = "DT_DOUBLE";
    DataType[DataType["DT_INT32"] = 3] = "DT_INT32";
    DataType[DataType["DT_UINT8"] = 4] = "DT_UINT8";
    DataType[DataType["DT_INT16"] = 5] = "DT_INT16";
    DataType[DataType["DT_INT8"] = 6] = "DT_INT8";
    DataType[DataType["DT_STRING"] = 7] = "DT_STRING";
    DataType[DataType["DT_COMPLEX64"] = 8] = "DT_COMPLEX64";
    DataType[DataType["DT_INT64"] = 9] = "DT_INT64";
    DataType[DataType["DT_BOOL"] = 10] = "DT_BOOL";
    DataType[DataType["DT_QINT8"] = 11] = "DT_QINT8";
    DataType[DataType["DT_QUINT8"] = 12] = "DT_QUINT8";
    DataType[DataType["DT_QINT32"] = 13] = "DT_QINT32";
    DataType[DataType["DT_BFLOAT16"] = 14] = "DT_BFLOAT16";
    DataType[DataType["DT_FLOAT_REF"] = 101] = "DT_FLOAT_REF";
    DataType[DataType["DT_DOUBLE_REF"] = 102] = "DT_DOUBLE_REF";
    DataType[DataType["DT_INT32_REF"] = 103] = "DT_INT32_REF";
    DataType[DataType["DT_UINT8_REF"] = 104] = "DT_UINT8_REF";
    DataType[DataType["DT_INT16_REF"] = 105] = "DT_INT16_REF";
    DataType[DataType["DT_INT8_REF"] = 106] = "DT_INT8_REF";
    DataType[DataType["DT_STRING_REF"] = 107] = "DT_STRING_REF";
    DataType[DataType["DT_COMPLEX64_REF"] = 108] = "DT_COMPLEX64_REF";
    DataType[DataType["DT_INT64_REF"] = 109] = "DT_INT64_REF";
    DataType[DataType["DT_BOOL_REF"] = 110] = "DT_BOOL_REF";
    DataType[DataType["DT_QINT8_REF"] = 111] = "DT_QINT8_REF";
    DataType[DataType["DT_QUINT8_REF"] = 112] = "DT_QUINT8_REF";
    DataType[DataType["DT_QINT32_REF"] = 113] = "DT_QINT32_REF";
    DataType[DataType["DT_BFLOAT16_REF"] = 114] = "DT_BFLOAT16_REF";
})(DataType || (DataType = {}));
var SaverDef;
(function(SaverDef) {
    /** CheckpointFormatVersion enum. */ let CheckpointFormatVersion;
    (function(CheckpointFormatVersion) {
        CheckpointFormatVersion[CheckpointFormatVersion["LEGACY"] = 0] = "LEGACY";
        CheckpointFormatVersion[CheckpointFormatVersion["V1"] = 1] = "V1";
        CheckpointFormatVersion[CheckpointFormatVersion["V2"] = 2] = "V2";
    })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));
})(SaverDef || (SaverDef = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9R9I0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Register an Op for graph model executor. This allow you to register
 * TensorFlow custom op or override existing op.
 *
 * Here is an example of registering a new MatMul Op.
 * ```js
 * const customMatmul = (node) =>
 *    tf.matMul(
 *        node.inputs[0], node.inputs[1],
 *        node.attrs['transpose_a'], node.attrs['transpose_b']);
 *
 * tf.registerOp('MatMul', customMatmul);
 * ```
 * The inputs and attrs of the node object is based on the TensorFlow op
 * registry.
 *
 * @param name The Tensorflow Op name.
 * @param opFunc An op function which is called with the current graph node
 * during execution and needs to return a tensor or a list of tensors. The node
 * has the following attributes:
 *    - attr: A map from attribute name to its value
 *    - inputs: A list of input tensors
 */ /** @doc {heading: 'Models', subheading: 'Op Registry'} */ parcelHelpers.export(exports, "registerOp", ()=>registerOp);
/**
 * Retrieve the OpMapper object for the registered op.
 *
 * @param name The Tensorflow Op name.
 */ /** @doc {heading: 'Models', subheading: 'Op Registry'} */ parcelHelpers.export(exports, "getRegisteredOp", ()=>getRegisteredOp);
/**
 * Deregister the Op for graph model executor.
 *
 * @param name The Tensorflow Op name.
 */ /** @doc {heading: 'Models', subheading: 'Op Registry'} */ parcelHelpers.export(exports, "deregisterOp", ()=>deregisterOp);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const CUSTOM_OPS = {};
function registerOp(name, opFunc) {
    const opMapper = {
        tfOpName: name,
        category: "custom",
        inputs: [],
        attrs: [],
        customExecutor: opFunc
    };
    CUSTOM_OPS[name] = opMapper;
}
function getRegisteredOp(name) {
    return CUSTOM_OPS[name];
}
function deregisterOp(name) {
    delete CUSTOM_OPS[name];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e4F2f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ parcelHelpers.export(exports, "getParamValue", ()=>getParamValue);
/**
 * Retrieve the tensor based on input name by extracting the node name and
 * output index information.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 */ parcelHelpers.export(exports, "getTensor", ()=>getTensor);
/**
 * Retrieve the tensors based on input name for current context.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 */ parcelHelpers.export(exports, "getTensorsForCurrentContenxt", ()=>getTensorsForCurrentContenxt);
/**
 * Returns the node name and index from the Node input name.
 * @param inputName The input name of the node, in format of
 * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is
 * default to 0.
 */ parcelHelpers.export(exports, "getNodeNameAndIndex", ()=>getNodeNameAndIndex);
parcelHelpers.export(exports, "parseNodeName", ()=>parseNodeName);
parcelHelpers.export(exports, "split", ()=>split);
function getParamValue(paramName, node, tensorMap, context) {
    const inputParam = node.inputParams[paramName];
    if (inputParam && inputParam.inputIndexStart !== undefined) {
        const start = inputParam.inputIndexStart;
        const end = inputParam.inputIndexEnd === 0 ? undefined : inputParam.inputIndexEnd === undefined ? start + 1 : inputParam.inputIndexEnd;
        if (inputParam.type === "tensor") return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context);
        if (inputParam.type === "tensors") {
            const inputs = node.inputNames.slice(start, end);
            return inputs.map((name)=>getTensor(name, tensorMap, context));
        }
        const data = Array.prototype.slice.call(getTensor(node.inputNames.slice(start)[0], tensorMap, context).dataSync());
        return inputParam.type === "number" ? data[0] : data;
    }
    const attrParam = node.attrParams[paramName];
    return attrParam && attrParam.value;
}
function getTensor(name, tensorsMap, context) {
    const [nodeName, index] = parseNodeName(name);
    const contextId = context.currentContextIds.find((contextId)=>{
        return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];
    });
    return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;
}
function getTensorsForCurrentContenxt(name, tensorsMap, context) {
    return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];
}
function getNodeNameAndIndex(inputName, context) {
    const [nodeName, index] = parseNodeName(inputName);
    return [
        getNodeNameWithContextId(nodeName, context && context.currentContextId),
        index
    ];
}
function getNodeNameWithContextId(name, contextId) {
    return !!contextId ? `${name}-${contextId}` : name;
}
function parseNodeName(name) {
    const index = name.lastIndexOf(":");
    if (index === -1) return [
        name,
        0
    ];
    const nodeName = name.substring(0, index);
    return [
        nodeName,
        Number(name.substring(index + 1))
    ];
}
function split(arr, size) {
    const res = [];
    for(let i = 0; i < arr.length; i += size)res.push(arr.slice(i, i + size));
    return res;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ZNMu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "Add",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "AddV2",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "AddN",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "end": 0,
                "name": "tensors",
                "type": "tensors"
            }
        ]
    },
    {
        "tfOpName": "BiasAdd",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Sub",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "RealDiv",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Div",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "DivNoNan",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "FloorDiv",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Mul",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Maximum",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "Minimum",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "Pow",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "SquaredDifference",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Mod",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "FloorMod",
        "category": "arithmetic",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6CCnX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "Abs",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Acos",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Asin",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Atan",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Atan2",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "y",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Ceil",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "ClipByValue",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "clip_value_min",
                "name": "clipValueMin",
                "type": "number"
            },
            {
                "tfName": "clip_value_max",
                "name": "clipValueMax",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "Complex",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "real",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "imag",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "ComplexAbs",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Cos",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Cosh",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Elu",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Exp",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Floor",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Log",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Imag",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "Tout",
                "name": "outputType",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Neg",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Real",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "Tout",
                "name": "outputType",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Prelu",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "alpha",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Relu",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Relu6",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "clipValueMin",
                "name": "clipValueMin",
                "type": "number",
                "defaultValue": 0
            },
            {
                "tfName": "clipValueMax",
                "name": "clipValueMax",
                "type": "number",
                "defaultValue": 6
            }
        ]
    },
    {
        "tfOpName": "Selu",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Sigmoid",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Sin",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Sinh",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Sqrt",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Rsqrt",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Square",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Tan",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Tanh",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Sign",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Round",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Expm1",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Log1p",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Reciprocal",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Softplus",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Asinh",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Acosh",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Atanh",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Erf",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Prod",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axes",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool",
                "notSupported": true
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LeakyRelu",
        "category": "basic_math",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "alpha",
                "name": "alpha",
                "type": "number",
                "defaultValue": 0.2
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1I1Ky":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "LoopCond",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "pred",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "Switch",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "data",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "pred",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "Merge",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "end": 0,
                "name": "tensors",
                "type": "tensors"
            }
        ]
    },
    {
        "tfOpName": "Enter",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensor",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "frame_name",
                "name": "frameName",
                "type": "string"
            },
            {
                "tfName": "is_constant",
                "name": "isConstant",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Exit",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensor",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "NextIteration",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensor",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "TensorArrayV3",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "size",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "dtype",
                "name": "dtype",
                "type": "dtype"
            },
            {
                "tfName": "element_shape",
                "name": "elementShape",
                "type": "shape"
            },
            {
                "tfName": "dynamic_size",
                "name": "dynamicSize",
                "type": "bool"
            },
            {
                "tfName": "clear_after_read",
                "name": "clearAfterRead",
                "type": "bool"
            },
            {
                "tfName": "identical_element_shapes",
                "name": "identicalElementShapes",
                "type": "bool"
            },
            {
                "tfName": "tensor_array_name",
                "name": "name",
                "type": "string"
            }
        ]
    },
    {
        "tfOpName": "TensorArrayWriteV3",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensorArrayId",
                "type": "number"
            },
            {
                "start": 1,
                "name": "index",
                "type": "number"
            },
            {
                "start": 2,
                "name": "tensor",
                "type": "tensor"
            },
            {
                "start": 3,
                "name": "flowIn",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "TensorArrayReadV3",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensorArrayId",
                "type": "number"
            },
            {
                "start": 1,
                "name": "index",
                "type": "number"
            },
            {
                "start": 2,
                "name": "flowIn",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "dtype",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "TensorArrayGatherV3",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensorArrayId",
                "type": "number"
            },
            {
                "start": 1,
                "name": "indices",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "flowIn",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "dtype",
                "name": "dtype",
                "type": "dtype"
            },
            {
                "tfName": "element_shape",
                "name": "elementShape",
                "type": "shape"
            }
        ]
    },
    {
        "tfOpName": "TensorArrayScatterV3",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensorArrayId",
                "type": "number"
            },
            {
                "start": 1,
                "name": "indices",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "tensor",
                "type": "tensor"
            },
            {
                "start": 3,
                "name": "flowIn",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "TensorArrayConcatV3",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensorArrayId",
                "type": "number"
            },
            {
                "start": 1,
                "name": "flowIn",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "dtype",
                "name": "dtype",
                "type": "dtype"
            },
            {
                "tfName": "element_shape_except0",
                "name": "elementShapeExcept0",
                "type": "shape",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "TensorArraySplitV3",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensorArrayId",
                "type": "number"
            },
            {
                "start": 1,
                "name": "tensor",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "lengths",
                "type": "number[]"
            },
            {
                "start": 3,
                "name": "flowIn",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "TensorArraySizeV3",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensorArrayId",
                "type": "number"
            },
            {
                "start": 1,
                "name": "flowIn",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "TensorArrayCloseV3",
        "category": "control",
        "inputs": [
            {
                "start": 0,
                "name": "tensorArrayId",
                "type": "number"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ielC4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "AvgPool",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "notSupported": true
            },
            {
                "tfName": "ksize",
                "name": "kernelSize",
                "type": "number[]"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "MaxPool",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "notSupported": true
            },
            {
                "tfName": "ksize",
                "name": "kernelSize",
                "type": "number[]"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "MaxPoolWithArgmax",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "ksize",
                "name": "kernelSize",
                "type": "number[]"
            },
            {
                "tfName": "include_batch_in_index",
                "name": "includeBatchInIndex",
                "type": "bool"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "AvgPool3D",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "notSupported": true
            },
            {
                "tfName": "ksize",
                "name": "kernelSize",
                "type": "number[]"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "MaxPool3D",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "notSupported": true
            },
            {
                "tfName": "ksize",
                "name": "kernelSize",
                "type": "number[]"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Conv1D",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "filter",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "stride",
                "name": "stride",
                "type": "number"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "defaultValue": "NWC"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "dilation",
                "name": "dilation",
                "type": "number",
                "defaultValue": 1
            }
        ]
    },
    {
        "tfOpName": "Conv2D",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "filter",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "useCudnnOnGpu",
                "name": "useCudnnOnGpu",
                "type": "bool"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "defaultValue": "NHWC"
            },
            {
                "tfName": "dilations",
                "name": "dilations",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "_FusedConv2D",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "filter",
                "type": "tensor"
            },
            {
                "start": 2,
                end: 0,
                "name": "args",
                "type": "tensors"
            }, 
        ],
        "attrs": [
            {
                "tfName": "num_args",
                "name": "numArgs",
                "type": "number"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "explicit_paddings",
                "name": "explicitPaddings",
                "type": "number[]",
                "defaultValue": []
            },
            {
                "tfName": "use_cudnn_on_gpu",
                "name": "useCudnnOnGpu",
                "type": "bool",
                "defaultValue": true
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "defaultValue": "NHWC"
            },
            {
                "tfName": "dilations",
                "name": "dilations",
                "type": "number[]",
                "defaultValue": [
                    1,
                    1,
                    1,
                    1
                ]
            },
            {
                "tfName": "fused_ops",
                "name": "fusedOps",
                "type": "string[]",
                "defaultValue": []
            },
            {
                "tfName": "epsilon",
                "name": "epsilon",
                "type": "number",
                "defaultValue": 0.0001
            }, 
        ]
    },
    {
        "tfOpName": "Conv2DBackpropInput",
        "category": "convolution",
        "inputs": [
            {
                "start": 2,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "filter",
                "type": "tensor"
            },
            {
                "start": 0,
                "name": "outputShape",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "DepthwiseConv2d",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "input",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "filter",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "defaultValue": "NHWC"
            },
            {
                "tfName": "dilations",
                "name": "dilations",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "DepthwiseConv2dNative",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "input",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "filter",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "defaultValue": "NHWC"
            },
            {
                "tfName": "dilations",
                "name": "dilations",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "FusedDepthwiseConv2dNative",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "filter",
                "type": "tensor"
            },
            {
                "start": 2,
                end: 0,
                "name": "args",
                "type": "tensors"
            }, 
        ],
        "attrs": [
            {
                "tfName": "num_args",
                "name": "numArgs",
                "type": "number"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "defaultValue": "NHWC"
            },
            {
                "tfName": "dilations",
                "name": "dilations",
                "type": "number[]",
                "defaultValue": [
                    1,
                    1,
                    1,
                    1
                ]
            },
            {
                "tfName": "fused_ops",
                "name": "fusedOps",
                "type": "string[]",
                "defaultValue": []
            }
        ]
    },
    {
        "tfOpName": "Conv3D",
        "category": "convolution",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "filter",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "strides",
                "name": "strides",
                "type": "number[]"
            },
            {
                "tfName": "padding",
                "name": "pad",
                "type": "string"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "defaultValue": "NHWC"
            },
            {
                "tfName": "dilations",
                "name": "dilations",
                "type": "number[]"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4n3g5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "Fill",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "shape",
                "type": "number[]"
            },
            {
                "start": 1,
                "name": "value",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "LinSpace",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "start",
                "type": "number"
            },
            {
                "start": 1,
                "name": "stop",
                "type": "number"
            },
            {
                "start": 2,
                "name": "num",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "OneHot",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "indices",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "depth",
                "type": "number"
            },
            {
                "start": 2,
                "name": "onValue",
                "type": "number",
                "defaultValue": 1
            },
            {
                "start": 3,
                "name": "offValue",
                "type": "number",
                "defaultValue": 0
            }, 
        ],
        "attrs": [
            {
                "tfName": "axis",
                "name": "axis",
                "type": "number",
                "notSupported": true
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Ones",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "shape",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "OnesLike",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "dtype",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "RandomUniform",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "shape",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "minval",
                "name": "minval",
                "type": "number",
                "defaultValue": 0
            },
            {
                "tfName": "maxval",
                "name": "maxval",
                "type": "number",
                "defaultValue": 1
            },
            {
                "tfName": "dtype",
                "name": "dtype",
                "type": "dtype"
            },
            {
                "tfName": "seed",
                "name": "seed",
                "type": "number",
                "defaultValue": 0
            },
            {
                "tfName": "seed2",
                "name": "seed2",
                "type": "number",
                "defaultValue": 0,
                "notSupported": true
            },
            {
                "tfName": "T",
                "name": "T",
                "type": "number",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Range",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "start",
                "type": "number"
            },
            {
                "start": 1,
                "name": "stop",
                "type": "number"
            },
            {
                "start": 2,
                "name": "step",
                "type": "number",
                "defaultValue": 0
            }, 
        ],
        "attrs": [
            {
                "tfName": "Tidx",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "TruncatedNormal",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "shape",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "means",
                "name": "mean",
                "type": "number",
                "defaultValue": 0.0
            },
            {
                "tfName": "stddev",
                "name": "stdDev",
                "type": "number",
                "defaultValue": 1.0
            },
            {
                "tfName": "seed",
                "name": "seed",
                "type": "number"
            },
            {
                "tfName": "seed2",
                "name": "seed2",
                "type": "number",
                "defaultValue": 0,
                "notSupported": true
            },
            {
                "tfName": "dtype",
                "name": "dtype",
                "type": "dtype"
            },
            {
                "tfName": "T",
                "name": "T",
                "type": "number",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Zeros",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "shape",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "ZerosLike",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "Multinomial",
        "category": "creation",
        "inputs": [
            {
                "start": 0,
                "name": "logits",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "numSamples",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "seed",
                "name": "seed",
                "type": "number"
            },
            {
                "tfName": "seed2",
                "name": "seed2",
                "type": "number"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype"
            },
            {
                "tfName": "output_dtype",
                "name": "output_dtype",
                "type": "dtype"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cnt0X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "NonMaxSuppressionV2",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "boxes",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scores",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "maxOutputSize",
                "type": "number"
            },
            {
                "start": 3,
                "name": "iouThreshold",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "NonMaxSuppressionV3",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "boxes",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scores",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "maxOutputSize",
                "type": "number"
            },
            {
                "start": 3,
                "name": "iouThreshold",
                "type": "number"
            },
            {
                "start": 4,
                "name": "scoreThreshold",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "NonMaxSuppressionV5",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "boxes",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scores",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "maxOutputSize",
                "type": "number"
            },
            {
                "start": 3,
                "name": "iouThreshold",
                "type": "number"
            },
            {
                "start": 4,
                "name": "scoreThreshold",
                "type": "number"
            },
            {
                "start": 5,
                "name": "softNmsSigma",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "Where",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "condition",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "ListDiff",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "y",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b6zuK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "TopKV2",
        "category": "evaluation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "k",
                "type": "number"
            }, 
        ],
        "attrs": [
            {
                "tfName": "sorted",
                "name": "sorted",
                "type": "bool"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9hfRv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "PlaceholderWithDefault",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "name": "default",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "shape",
                "name": "shape",
                "type": "shape"
            },
            {
                "tfName": "dtype",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "Placeholder",
        "category": "graph",
        "attrs": [
            {
                "tfName": "shape",
                "name": "shape",
                "type": "shape"
            },
            {
                "tfName": "dtype",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "Const",
        "category": "graph"
    },
    {
        "tfOpName": "Identity",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "IdentityN",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "end": 0,
                "name": "x",
                "type": "tensors"
            }
        ]
    },
    {
        "tfOpName": "Snapshot",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "Rank",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "Size",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "Shape",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "ShapeN",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "end": 0,
                "name": "x",
                "type": "tensors"
            }
        ]
    },
    {
        "tfOpName": "Print",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "data",
                "type": "tensors"
            }, 
        ],
        "attrs": [
            {
                "tfName": "message",
                "name": "message",
                "type": "string"
            },
            {
                "tfName": "first_n",
                "name": "firstN",
                "type": "number",
                "notSupported": true
            },
            {
                "tfName": "summarize",
                "name": "summarize",
                "type": "number",
                "defaultValue": 3
            }
        ]
    },
    {
        "tfOpName": "NoOp",
        "category": "graph",
        "inputs": []
    },
    {
        "tfOpName": "StopGradient",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "FakeQuantWithMinMaxVars",
        "category": "graph",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "min",
                "name": "min",
                "type": "number"
            },
            {
                "tfName": "max",
                "name": "max",
                "type": "number"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ir9nP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "ResizeBilinear",
        "category": "image",
        "inputs": [
            {
                "start": 0,
                "name": "images",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "size",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "align_corners",
                "name": "alignCorners",
                "type": "bool"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "ResizeNearestNeighbor",
        "category": "image",
        "inputs": [
            {
                "start": 0,
                "name": "images",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "size",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "align_corners",
                "name": "alignCorners",
                "type": "bool"
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "CropAndResize",
        "category": "image",
        "inputs": [
            {
                "start": 0,
                "name": "image",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "boxes",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "boxInd",
                "type": "tensor"
            },
            {
                "start": 3,
                "name": "cropSize",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "method",
                "name": "method",
                "type": "string"
            },
            {
                "tfName": "extrapolation_value",
                "name": "extrapolationValue",
                "type": "number"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GFcN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "Equal",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "NotEqual",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Greater",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "GreaterEqual",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Less",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LessEqual",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LogicalAnd",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LogicalNot",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LogicalOr",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Select",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "condition",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "SelectV2",
        "category": "logical",
        "inputs": [
            {
                "start": 0,
                "name": "condition",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c10Kx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "_FusedMatMul",
        "category": "matrices",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            },
            {
                "start": 2,
                end: 0,
                "name": "args",
                "type": "tensors"
            }, 
        ],
        "attrs": [
            {
                "tfName": "num_args",
                "name": "numArgs",
                "type": "number"
            },
            {
                "tfName": "fused_ops",
                "name": "fusedOps",
                "type": "string[]",
                "defaultValue": []
            },
            {
                "tfName": "epsilon",
                "name": "epsilon",
                "type": "number",
                "defaultValue": 0.0001
            },
            {
                "tfName": "transpose_a",
                "name": "transposeA",
                "type": "bool",
                "defaultValue": false
            },
            {
                "tfName": "transpose_b",
                "name": "transposeB",
                "type": "bool",
                "defaultValue": false
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "MatMul",
        "category": "matrices",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "transpose_a",
                "name": "transposeA",
                "type": "bool",
                "defaultValue": false
            },
            {
                "tfName": "transpose_b",
                "name": "transposeB",
                "type": "bool",
                "defaultValue": false
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "BatchMatMul",
        "category": "matrices",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "adj_x",
                "name": "transposeA",
                "type": "bool",
                "defaultValue": false
            },
            {
                "tfName": "adj_y",
                "name": "transposeB",
                "type": "bool",
                "defaultValue": false
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "BatchMatMulV2",
        "category": "matrices",
        "inputs": [
            {
                "start": 0,
                "name": "a",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "b",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "adj_x",
                "name": "transposeA",
                "type": "bool",
                "defaultValue": false
            },
            {
                "tfName": "adj_y",
                "name": "transposeB",
                "type": "bool",
                "defaultValue": false
            },
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Transpose",
        "category": "matrices",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "perm",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"KxrY8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "FusedBatchNorm",
        "category": "normalization",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scale",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "offset",
                "type": "tensor"
            },
            {
                "start": 3,
                "name": "mean",
                "type": "tensor"
            },
            {
                "start": 4,
                "name": "variance",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "epsilon",
                "name": "epsilon",
                "type": "number",
                "defaultValue": 0.001
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "FusedBatchNormV2",
        "category": "normalization",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scale",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "offset",
                "type": "tensor"
            },
            {
                "start": 3,
                "name": "mean",
                "type": "tensor"
            },
            {
                "start": 4,
                "name": "variance",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "epsilon",
                "name": "epsilon",
                "type": "number",
                "defaultValue": 0.001
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "FusedBatchNormV3",
        "category": "normalization",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scale",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "offset",
                "type": "tensor"
            },
            {
                "start": 3,
                "name": "mean",
                "type": "tensor"
            },
            {
                "start": 4,
                "name": "variance",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "epsilon",
                "name": "epsilon",
                "type": "number",
                "defaultValue": 0.001
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LRN",
        "category": "normalization",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "depth_radius",
                "name": "radius",
                "type": "number",
                "defaultValue": 5
            },
            {
                "tfName": "bias",
                "name": "bias",
                "type": "number",
                "defaultValue": 1.0
            },
            {
                "tfName": "alpha",
                "name": "alpha",
                "type": "number",
                "defaultValue": 1.0
            },
            {
                "tfName": "beta",
                "name": "beta",
                "type": "number",
                "defaultValue": 0.5
            }
        ]
    },
    {
        "tfOpName": "Softmax",
        "category": "normalization",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "LogSoftmax",
        "category": "normalization",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "SparseToDense",
        "category": "normalization",
        "inputs": [
            {
                "start": 0,
                "name": "sparseIndices",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "outputShape",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "sparseValues",
                "type": "tensor"
            },
            {
                "start": 3,
                "name": "defaultValue",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "validate_indices",
                "name": "validateIndices",
                "type": "bool",
                "defaultValue": true,
                "notSupported": true
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dQtYM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "Max",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Mean",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Min",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Sum",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "All",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Any",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "ArgMax",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "ArgMin",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "Prod",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8UC5s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "ConcatV2",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "end": -1,
                "name": "tensors",
                "type": "tensors"
            },
            {
                "start": -1,
                "name": "axis",
                "type": "number"
            }
        ],
        "attrs": [
            {
                "tfName": "N",
                "name": "n",
                "type": "number",
                "defaultValue": 2
            }
        ]
    },
    {
        "tfOpName": "Concat",
        "category": "slice_join",
        "inputs": [
            {
                "start": 1,
                "end": 0,
                "name": "tensors",
                "type": "tensors"
            },
            {
                "start": 0,
                "name": "axis",
                "type": "number"
            }
        ],
        "attrs": [
            {
                "tfName": "N",
                "name": "n",
                "type": "number",
                "defaultValue": 2
            }
        ]
    },
    {
        "tfOpName": "GatherV2",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "indices",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "axis",
                "type": "number",
                "defaultValue": 0
            }
        ]
    },
    {
        "tfOpName": "Gather",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "indices",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "axis",
                "name": "axis",
                "type": "number",
                "defaultValue": 0
            },
            {
                "tfName": "validate_indices",
                "name": "validateIndices",
                "type": "bool",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Reverse",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "dims",
                "type": "bool",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "ReverseV2",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "Slice",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "begin",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "size",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "StridedSlice",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "begin",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "end",
                "type": "number[]"
            },
            {
                "start": 3,
                "name": "strides",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "begin_mask",
                "name": "beginMask",
                "type": "number",
                "defaultValue": 0
            },
            {
                "tfName": "end_mask",
                "name": "endMask",
                "type": "number",
                "defaultValue": 0
            },
            {
                "tfName": "new_axis_mask",
                "name": "newAxisMask",
                "type": "number",
                "defaultValue": 0
            },
            {
                "tfName": "ellipsis_mask",
                "name": "ellipsisMask",
                "type": "number",
                "defaultValue": 0
            },
            {
                "tfName": "shrink_axis_mask",
                "name": "shrinkAxisMask",
                "type": "number",
                "defaultValue": 0
            }
        ]
    },
    {
        "tfOpName": "Pack",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "end": 0,
                "name": "tensors",
                "type": "tensors"
            }, 
        ],
        "attrs": [
            {
                "tfName": "axis",
                "name": "axis",
                "type": "number",
                "defaultValue": 0
            }
        ]
    },
    {
        "tfOpName": "Unpack",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "tensor",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "axis",
                "name": "axis",
                "type": "number",
                "defaultValue": 0
            },
            {
                "tfName": "num",
                "name": "num",
                "type": "number",
                "defaultValue": 0,
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "Tile",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "reps",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "Split",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "axis",
                "type": "number",
                "defaultValue": 0
            },
            {
                "start": 1,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "num_split",
                "name": "numOrSizeSplits",
                "type": "number",
                "defaultValue": 1
            }
        ]
    },
    {
        "tfOpName": "SplitV",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "numOrSizeSplits",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "axis",
                "type": "number",
                "defaultValue": 0
            }
        ]
    },
    {
        "tfOpName": "ScatterNd",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "indices",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "values",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "shape",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "GatherNd",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "indices",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "SparseToDense",
        "category": "slice_join",
        "inputs": [
            {
                "start": 0,
                "name": "sparseIndices",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "outputShape",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "sparseValues",
                "type": "tensor"
            },
            {
                "start": 3,
                "name": "defaultValue",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "validate_indices",
                "name": "validateIndices",
                "type": "bool",
                "defaultValue": false,
                "notSupported": true
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"NcPDN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "FFT",
        "category": "spectral",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "IFFT",
        "category": "spectral",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "RFFT",
        "category": "spectral",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "fft_length",
                "type": "number",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "IRFFT",
        "category": "spectral",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "fft_length",
                "type": "number",
                "notSupported": true
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9HPD2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "json", ()=>json);
const json = [
    {
        "tfOpName": "Cast",
        "category": "transformation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "SrcT",
                "name": "sdtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "DstT",
                "name": "dtype",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "ExpandDims",
        "category": "transformation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "Pad",
        "category": "transformation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "padding",
                "type": "number[]"
            }, 
        ],
        "attrs": [
            {
                "tfName": "constant_value",
                "name": "constantValue",
                "type": "number",
                "defaultValue": 0
            }
        ]
    },
    {
        "tfOpName": "PadV2",
        "category": "transformation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "padding",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "constantValue",
                "type": "number",
                "defaultValue": 0
            }
        ]
    },
    {
        "tfOpName": "Reshape",
        "category": "transformation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "shape",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "Squeeze",
        "category": "transformation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "axis",
                "tfDeprecatedName": "squeeze_dims",
                "name": "axis",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "SpaceToBatchND",
        "category": "transformation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "blockShape",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "paddings",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "BatchToSpaceND",
        "category": "transformation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "blockShape",
                "type": "number[]"
            },
            {
                "start": 2,
                "name": "crops",
                "type": "number[]"
            }
        ]
    },
    {
        "tfOpName": "DepthToSpace",
        "category": "transformation",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            }, 
        ],
        "attrs": [
            {
                "tfName": "block_size",
                "name": "blockSize",
                "type": "number"
            },
            {
                "tfName": "data_format",
                "name": "dataFormat",
                "type": "string"
            }
        ]
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Jwcj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GraphExecutor", ()=>GraphExecutor);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("../operations/executors/utils");
var _operationExecutor = require("../operations/operation_executor");
var _executionContext = require("./execution_context");
var _modelAnalysis = require("./model_analysis");
class GraphExecutor {
    constructor(graph){
        this.graph = graph;
        this.compiledMap = new Map();
        this._weightMap = {};
        this.SEPERATOR = ",";
        this._outputs = graph.outputs;
        this._inputs = graph.inputs;
        this._signature = graph.signature;
    }
    get weightMap() {
        return this._weightMap;
    }
    set weightMap(weightMap) {
        const weightIds = Object.keys(weightMap).map((key)=>weightMap[key].map((tensor)=>tensor.id));
        this.weightIds = [].concat(...weightIds);
        this._weightMap = weightMap;
    }
    get inputs() {
        return this._inputs.map((node)=>{
            return {
                name: node.name,
                shape: node.attrParams["shape"] ? node.attrParams["shape"].value : undefined,
                dtype: node.attrParams["dtype"] ? node.attrParams["dtype"].value : undefined
            };
        });
    }
    get outputs() {
        return this._outputs.map((node)=>{
            return {
                name: node.name,
                shape: node.attrParams["shape"] ? node.attrParams["shape"].value : undefined,
                dtype: node.attrParams["dtype"] ? node.attrParams["dtype"].value : undefined
            };
        });
    }
    get inputNodes() {
        return this._inputs.map((node)=>node.signatureKey || node.name);
    }
    get outputNodes() {
        return this._outputs.map((node)=>node.signatureKey || node.name);
    }
    getCompilationKey(inputs, outputs) {
        const sortedInputs = inputs.map((node)=>node.name).sort();
        const sortedOutputs = outputs.map((node)=>node.name).sort();
        return sortedInputs.join(this.SEPERATOR) + "--" + sortedOutputs.join(this.SEPERATOR);
    }
    /**
     * Compiles the inference graph and returns the minimal set of nodes that are
     * required for execution, in the correct execution order.
     */ compile(inputs, outputs) {
        const executionInfo = (0, _modelAnalysis.getExecutionSubgraph)(inputs, outputs, this.weightMap);
        const { missingInputs , dynamicNode , syncInputs  } = executionInfo;
        if (dynamicNode != null) throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` + `the dynamic op '${dynamicNode.op}'. Please use ` + `model.executeAsync() instead. Alternatively, to avoid the ` + `dynamic ops, specify the inputs [${syncInputs}]`);
        if (missingInputs.length > 0) {
            const outNames = outputs.map((n)=>n.name);
            const inNames = Object.keys(inputs);
            throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` + `[${inNames}]. Missing the following inputs: [${missingInputs}]`);
        }
        return (0, _modelAnalysis.getNodesInTopologicalOrder)(this.graph, this.weightMap, executionInfo);
    }
    /**
     * Executes the inference for given input tensors.
     * @param inputs Tensor map for the model inputs, keyed by the input node
     * names.
     * @param outputs output node name from the Tensorflow model, if no outputs
     * are specified, the default outputs of the model would be used. You can
     * inspect intermediate nodes of the model by adding them to the outputs
     * array.
     */ execute(inputs, outputs) {
        inputs = this.mapInputs(inputs);
        const names = Object.keys(inputs).sort();
        this.checkInputs(inputs);
        this.checkInputShapeAndType(inputs);
        outputs = this.mapOutputs(outputs);
        this.checkOutputs(outputs);
        const inputNodes = names.map((name)=>this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
        const outputNodes = outputs.map((name)=>this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
        const compilationKey = this.getCompilationKey(inputNodes, outputNodes);
        // Do nothing if the compiled graph cache contains the input.
        let orderedNodes = this.compiledMap.get(compilationKey);
        if (orderedNodes == null) {
            orderedNodes = this.compile(inputs, outputNodes);
            this.compiledMap.set(compilationKey, orderedNodes);
        }
        const tensorArrayMap = {};
        return (0, _tfjsCore.tidy)(()=>{
            const context = new (0, _executionContext.ExecutionContext)(this._weightMap, tensorArrayMap);
            const tensorsMap = Object.assign({}, this.weightMap);
            Object.keys(inputs).forEach((name)=>{
                const [nodeName, index] = (0, _utils.parseNodeName)(name);
                const tensors = [];
                tensors[index] = inputs[name];
                tensorsMap[nodeName] = tensors;
            });
            const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
            const intermediateTensorConsumerCount = {};
            for(let i = 0; i < orderedNodes.length; i++){
                const node = orderedNodes[i];
                if (!tensorsMap[node.name]) {
                    const tensors = (0, _operationExecutor.executeOp)(node, tensorsMap, context);
                    if (tensors instanceof Promise) throw new Error(`The execution of the op '${node.op}' returned a promise. ` + `Please use model.executeAsync() instead.`);
                    tensorsMap[node.name] = tensors;
                    this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputs, intermediateTensorConsumerCount);
                }
            }
            return outputs.map((name)=>(0, _utils.getTensor)(name, tensorsMap, context));
        });
    }
    getFrozenTensorIds(tensorMap) {
        const ids = [].concat.apply([], Object.keys(tensorMap).map((key)=>tensorMap[key]).map((tensors)=>tensors.map((tensor)=>tensor.id)));
        return new Set(ids);
    }
    checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {
        // Skip output nodes and any control flow nodes, since its dependency is
        // tricky to track correctly.
        if (node.category === "control" || outputNames.indexOf(nodeName) !== -1) return;
        tensorMap[nodeName].forEach((tensor)=>{
            if (tensor != null) intermediateTensorConsumerCount[tensor.id] = (intermediateTensorConsumerCount[tensor.id] || 0) + node.children.length;
        });
        node.inputs.forEach((input)=>{
            // Skip any control flow nodes, since its dependency is tricky to track
            // correctly.
            if (input.category !== "control") {
                const tensors = (0, _utils.getTensorsForCurrentContenxt)(input.name, tensorMap, context);
                if (tensors != null) tensors.forEach((tensor)=>{
                    if (tensor && !tensorsToKeep.has(tensor.id)) {
                        const count = intermediateTensorConsumerCount[tensor.id];
                        if (count === 1) {
                            tensor.dispose();
                            delete intermediateTensorConsumerCount[tensor.id];
                        } else if (count != null) // only intermediate nodes has count set, inputs and weights are
                        // not.
                        intermediateTensorConsumerCount[tensor.id]--;
                    }
                });
            }
        });
    }
    /**
     * Executes the inference for given input tensors in Async fashion.
     * @param inputs Tensor map for the model inputs, keyed by the input node
     * names.
     * @param outputs output node name from the Tensorflow model, if no outputs
     * are specified, the default outputs of the model would be used. You can
     * inspect intermediate nodes of the model by adding them to the outputs
     * array.
     */ async executeAsync(inputs, outputs) {
        inputs = this.mapInputs(inputs);
        this.checkInputs(inputs);
        this.checkInputShapeAndType(inputs);
        outputs = this.mapOutputs(outputs);
        this.checkOutputs(outputs);
        const tensorArrayMap = {};
        const context = new (0, _executionContext.ExecutionContext)(this._weightMap, tensorArrayMap);
        // Graph with control flow op requires runtime evaluation of the execution
        // order, while without control flow the execution order is pre-determined
        // in the compile method.
        const tensorMap = await this.executeWithControlFlow(inputs, context, outputs);
        const results = outputs.map((name)=>(0, _utils.getTensor)(name, tensorMap, context));
        // dispose all the intermediate tensors
        const outputIds = new Set(results.map((t)=>t.id));
        const inputIds = new Set(Object.keys(inputs).map((name)=>inputs[name].id));
        Object.keys(tensorMap).forEach((key)=>{
            const tensorArray = tensorMap[key];
            tensorArray.forEach((tensor)=>{
                if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) && !inputIds.has(tensor.id) && this.weightIds.indexOf(tensor.id) === -1) tensor.dispose();
            });
        });
        return results;
    }
    /**
     * When there are control flow nodes in the graph, the graph execution use
     * ExecutionContext to keep track of the frames and loop iterators.
     * @param inputs placeholder tensors for the graph.
     * @param context the execution context object for current execution.
     */ async executeWithControlFlow(inputs, context, outputNames) {
        const names = Object.keys(inputs);
        const inputNodes = names.map((name)=>this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
        const outputNodes = outputNames.map((name)=>this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
        const { usedNodes , missingInputs , dynamicNode , syncInputs  } = (0, _modelAnalysis.getExecutionSubgraph)(inputs, outputNodes, this.weightMap);
        const stack = [
            ...inputNodes,
            ...this.graph.weights
        ].map((node)=>{
            return {
                node,
                contexts: context.currentContext
            };
        });
        const tensorsMap = Object.assign({}, this.weightMap);
        Object.keys(inputs).forEach((name)=>{
            const [nodeName, index] = (0, _utils.parseNodeName)(name);
            const tensors = [];
            tensors[index] = inputs[name];
            tensorsMap[nodeName] = tensors;
        });
        const intermediateTensorConsumerCount = {};
        const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
        const added = {};
        while(stack.length > 0){
            const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes);
            await Promise.all(promises);
        }
        if (dynamicNode == null) console.warn(`This model execution did not contain any nodes with control flow ` + `or dynamic output shapes. You can use model.execute() instead.`);
        const missingOutputs = outputNodes.filter((node)=>!(0, _modelAnalysis.isControlFlow)(node) && !(0, _utils.getTensor)(node.name, tensorsMap, context)).map((node)=>node.name);
        if (missingOutputs.length > 0) {
            let alternativeMsg = "";
            if (dynamicNode != null) alternativeMsg = `Alternatively, to avoid the dynamic ops, use model.execute() ` + `and specify the inputs [${syncInputs}]`;
            throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` + `inputs [${names}]. Consider providing the following inputs: ` + `[${missingInputs}]. ${alternativeMsg}`);
        }
        return tensorsMap;
    }
    processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {
        const promises = [];
        while(stack.length > 0){
            const item = stack.pop();
            context.currentContext = item.contexts;
            let nodeName = "";
            // The tensor of the Enter op with isConstant set should be set
            // in the parent scope, so it will be available as constant for the
            // whole loop.
            if (item.node.op === "Enter" && (0, _utils.getParamValue)("isConstant", item.node, tensorMap, context)) [nodeName] = (0, _utils.getNodeNameAndIndex)(item.node.name, context);
            // only process nodes that are not provided as input nodes.
            if (inputNodes.indexOf(item.node) === -1) {
                const tensors = (0, _operationExecutor.executeOp)(item.node, tensorMap, context);
                if (!nodeName) [nodeName] = (0, _utils.getNodeNameAndIndex)(item.node.name, context);
                const currentContext = context.currentContext;
                if (tensors instanceof Promise) promises.push(tensors.then((t)=>{
                    tensorMap[nodeName] = t;
                    context.currentContext = currentContext;
                    this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
                    this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
                    return t;
                }));
                else {
                    tensorMap[nodeName] = tensors;
                    this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
                    this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
                }
            } else this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
        }
        return promises;
    }
    processChildNodes(node, stack, context, tensorMap, added, usedNodes) {
        node.children.forEach((childNode)=>{
            const [nodeName, ] = (0, _utils.getNodeNameAndIndex)(childNode.name, context);
            if (added[nodeName] || !usedNodes.has(childNode.name)) return;
            // Merge op can be pushed if any of its inputs has value.
            if (childNode.op === "Merge") {
                if (childNode.inputNames.some((name)=>{
                    return !!(0, _utils.getTensor)(name, tensorMap, context);
                })) {
                    added[nodeName] = true;
                    stack.push({
                        contexts: context.currentContext,
                        node: childNode
                    });
                }
            } else if (childNode.inputNames.every((name)=>{
                return !!(0, _utils.getTensor)(name, tensorMap, context);
            })) {
                added[nodeName] = true;
                stack.push({
                    contexts: context.currentContext,
                    node: childNode
                });
            }
        });
    }
    /**
     * Releases the memory used by the weight tensors.
     */ dispose() {
        Object.keys(this.weightMap).forEach((key)=>this.weightMap[key].forEach((tensor)=>tensor.dispose()));
    }
    checkInputShapeAndType(inputs) {
        Object.keys(inputs).forEach((name)=>{
            const input = inputs[name];
            const [nodeName, ] = (0, _utils.parseNodeName)(name);
            const node = this.graph.nodes[nodeName];
            if (node.attrParams["shape"] && node.attrParams["shape"].value) {
                const shape = node.attrParams["shape"].value;
                const match = shape.length === input.shape.length && input.shape.every((dim, index)=>shape[index] === -1 || shape[index] === dim);
                (0, _tfjsCore.util).assert(match, ()=>`The shape of dict['${node.name}'] provided in ` + `model.execute(dict) must be [${shape}], but was ` + `[${input.shape}]`);
            }
            if (node.attrParams["dtype"] && node.attrParams["dtype"].value) (0, _tfjsCore.util).assert(input.dtype === node.attrParams["dtype"].value, ()=>`The dtype of dict['${node.name}'] provided in ` + `model.execute(dict) must be ` + `${node.attrParams["dtype"].value}, but was ${input.dtype}`);
        });
    }
    mapInputs(inputs) {
        const result = {};
        for(const inputName in inputs)if (this._signature != null && this._signature.inputs != null && this._signature.inputs[inputName] != null) {
            const tensor = this._signature.inputs[inputName];
            result[tensor.name] = inputs[inputName];
        } else result[inputName] = inputs[inputName];
        return result;
    }
    checkInputs(inputs) {
        const notInGraph = Object.keys(inputs).filter((name)=>{
            const [nodeName] = (0, _utils.parseNodeName)(name);
            return this.graph.nodes[nodeName] == null;
        });
        if (notInGraph.length > 0) throw new Error(`The dict provided in model.execute(dict) has ` + `keys: [${notInGraph}] that are not part of graph`);
    }
    mapOutputs(outputs) {
        return outputs.map((name)=>{
            if (this._signature != null && this._signature.outputs != null && this._signature.outputs[name] != null) {
                const tensor = this._signature.outputs[name];
                return tensor.name;
            }
            return name;
        }, {});
    }
    checkOutputs(outputs) {
        outputs.forEach((name)=>{
            const [normalizedName] = (0, _utils.parseNodeName)(name);
            if (!this.graph.nodes[normalizedName]) throw new Error(`The output '${name}' is not found in the graph`);
        });
    }
}

},{"@tensorflow/tfjs-core":"2votT","../operations/executors/utils":"e4F2f","../operations/operation_executor":"clmmS","./execution_context":"jODI0","./model_analysis":"ex955","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"clmmS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Executes the op defined by the node object.
 * @param node
 * @param tensorMap contains tensors for executed nodes and weights
 */ parcelHelpers.export(exports, "executeOp", ()=>executeOp);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _nodeValueImpl = require("./custom_op/node_value_impl");
var _register = require("./custom_op/register");
var _arithmeticExecutor = require("./executors/arithmetic_executor");
var _basicMathExecutor = require("./executors/basic_math_executor");
var _controlExecutor = require("./executors/control_executor");
var _convolutionExecutor = require("./executors/convolution_executor");
var _creationExecutor = require("./executors/creation_executor");
var _dynamicExecutor = require("./executors/dynamic_executor");
var _evaluationExecutor = require("./executors/evaluation_executor");
var _graphExecutor = require("./executors/graph_executor");
var _imageExecutor = require("./executors/image_executor");
var _logicalExecutor = require("./executors/logical_executor");
var _matricesExecutor = require("./executors/matrices_executor");
var _normalizationExecutor = require("./executors/normalization_executor");
var _reductionExecutor = require("./executors/reduction_executor");
var _sliceJoinExecutor = require("./executors/slice_join_executor");
var _spectralExecutor = require("./executors/spectral_executor");
var _transformationExecutor = require("./executors/transformation_executor");
function executeOp(node, tensorMap, context) {
    const value = ((node, tensorMap, context)=>{
        switch(node.category){
            case "arithmetic":
                return _tfjsCore.tidy(()=>_arithmeticExecutor.executeOp(node, tensorMap, context));
            case "basic_math":
                return _tfjsCore.tidy(()=>_basicMathExecutor.executeOp(node, tensorMap, context));
            case "control":
                return _controlExecutor.executeOp(node, tensorMap, context);
            case "convolution":
                return _tfjsCore.tidy(()=>_convolutionExecutor.executeOp(node, tensorMap, context));
            case "creation":
                return _tfjsCore.tidy(()=>_creationExecutor.executeOp(node, tensorMap, context));
            case "dynamic":
                return _dynamicExecutor.executeOp(node, tensorMap, context);
            case "evaluation":
                return _tfjsCore.tidy(()=>_evaluationExecutor.executeOp(node, tensorMap, context));
            case "image":
                return _tfjsCore.tidy(()=>_imageExecutor.executeOp(node, tensorMap, context));
            case "graph":
                return _tfjsCore.tidy(()=>_graphExecutor.executeOp(node, tensorMap, context));
            case "logical":
                return _tfjsCore.tidy(()=>_logicalExecutor.executeOp(node, tensorMap, context));
            case "matrices":
                return _tfjsCore.tidy(()=>_matricesExecutor.executeOp(node, tensorMap, context));
            case "normalization":
                return _tfjsCore.tidy(()=>_normalizationExecutor.executeOp(node, tensorMap, context));
            case "reduction":
                return _tfjsCore.tidy(()=>_reductionExecutor.executeOp(node, tensorMap, context));
            case "slice_join":
                return _tfjsCore.tidy(()=>_sliceJoinExecutor.executeOp(node, tensorMap, context));
            case "spectral":
                return _tfjsCore.tidy(()=>_spectralExecutor.executeOp(node, tensorMap, context));
            case "transformation":
                return _tfjsCore.tidy(()=>_transformationExecutor.executeOp(node, tensorMap, context));
            case "custom":
                const opMapper = (0, _register.getRegisteredOp)(node.op);
                if (opMapper && opMapper.customExecutor) return opMapper.customExecutor(new (0, _nodeValueImpl.NodeValueImpl)(node, tensorMap, context));
                else throw TypeError(`Custom op ${node.op} is not registered.`);
            default:
                throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);
        }
    })(node, tensorMap, context);
    if (value instanceof Promise) return value.then((data)=>[].concat(data));
    return [].concat(value);
}

},{"@tensorflow/tfjs-core":"2votT","./custom_op/node_value_impl":"3cpQ1","./custom_op/register":"9R9I0","./executors/arithmetic_executor":"ctkc6","./executors/basic_math_executor":"9mv5p","./executors/control_executor":"dPDpf","./executors/convolution_executor":"ceB3N","./executors/creation_executor":"2DMKF","./executors/dynamic_executor":"8IeOt","./executors/evaluation_executor":"ekCfT","./executors/graph_executor":"jSP88","./executors/image_executor":"8qDUy","./executors/logical_executor":"fENri","./executors/matrices_executor":"14bX3","./executors/normalization_executor":"bGvG8","./executors/reduction_executor":"7sI7a","./executors/slice_join_executor":"4MDx1","./executors/spectral_executor":"hHu9e","./executors/transformation_executor":"gIW5l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3cpQ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Helper class for lookup inputs and params for nodes in the model graph.
 */ parcelHelpers.export(exports, "NodeValueImpl", ()=>NodeValueImpl);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _utils = require("../executors/utils");
var _operationMapper = require("../operation_mapper");
class NodeValueImpl {
    constructor(node, tensorMap, context){
        this.node = node;
        this.tensorMap = tensorMap;
        this.context = context;
        this.inputs = [];
        this.attrs = {};
        this.inputs = node.inputNames.map((name)=>this.getInput(name));
        if (node.rawAttrs != null) this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key)=>{
            attrs[key] = this.getAttr(key);
            return attrs;
        }, {});
    }
    /**
     * Return the value of the attribute or input param.
     * @param name String: name of attribute or input param.
     */ getInput(name) {
        return (0, _utils.getTensor)(name, this.tensorMap, this.context);
    }
    /**
     * Return the value of the attribute or input param.
     * @param name String: name of attribute or input param.
     */ getAttr(name, defaultValue) {
        const value = this.node.rawAttrs[name];
        if (value.tensor != null) return (0, _utils.getTensor)(name, this.tensorMap, this.context);
        if (value.i != null || value.f != null) return (0, _operationMapper.getNumberParam)(this.node.rawAttrs, name, defaultValue);
        if (value.s != null) return (0, _operationMapper.getStringParam)(this.node.rawAttrs, name, defaultValue);
        if (value.b != null) return (0, _operationMapper.getBoolParam)(this.node.rawAttrs, name, defaultValue);
        if (value.shape != null) return (0, _operationMapper.getTensorShapeParam)(this.node.rawAttrs, name, defaultValue);
        if (value.type != null) return (0, _operationMapper.getDtypeParam)(this.node.rawAttrs, name, defaultValue);
        if (value.list != null) {
            if (value.list.i != null || value.list.f != null) return (0, _operationMapper.getNumericArrayParam)(this.node.rawAttrs, name, defaultValue);
            if (value.list.s != null) return (0, _operationMapper.getStringArrayParam)(this.node.rawAttrs, name, defaultValue);
            if (value.list.shape != null) return (0, _operationMapper.getTensorShapeArrayParam)(this.node.rawAttrs, name, defaultValue);
            if (value.list.b != null) return (0, _operationMapper.getBoolArrayParam)(this.node.rawAttrs, name, defaultValue);
            if (value.list.type != null) return (0, _operationMapper.getDtypeArrayParam)(this.node.rawAttrs, name, defaultValue);
        }
        return defaultValue;
    }
}

},{"../executors/utils":"e4F2f","../operation_mapper":"9lhbi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ctkc6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "BiasAdd":
        case "AddV2":
        case "Add":
            return [
                _tfjsCore.add((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "AddN":
            return [
                _tfjsCore.addN((0, _utils.getParamValue)("tensors", node, tensorMap, context))
            ];
        case "FloorMod":
        case "Mod":
            return [
                _tfjsCore.mod((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "Mul":
            return [
                _tfjsCore.mul((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "RealDiv":
        case "Div":
            return [
                _tfjsCore.div((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "DivNoNan":
            return [
                _tfjsCore.divNoNan((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "FloorDiv":
            return [
                _tfjsCore.floorDiv((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "Sub":
            return [
                _tfjsCore.sub((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "Minimum":
            return [
                _tfjsCore.minimum((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "Maximum":
            return [
                _tfjsCore.maximum((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "Pow":
            return [
                _tfjsCore.pow((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "SquaredDifference":
            return [
                _tfjsCore.squaredDifference((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "arithmetic";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9mv5p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "Abs":
        case "ComplexAbs":
            return [
                _tfjsCore.abs((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Acos":
            return [
                _tfjsCore.acos((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Acosh":
            return [
                _tfjsCore.acosh((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Asin":
            return [
                _tfjsCore.asin((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Asinh":
            return [
                _tfjsCore.asinh((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Atan":
            return [
                _tfjsCore.atan((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Atan2":
            return [
                _tfjsCore.atan2((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("y", node, tensorMap, context))
            ];
        case "Atanh":
            return [
                _tfjsCore.atanh((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Ceil":
            return [
                _tfjsCore.ceil((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Complex":
            return [
                _tfjsCore.complex((0, _utils.getParamValue)("real", node, tensorMap, context), (0, _utils.getParamValue)("imag", node, tensorMap, context))
            ];
        case "Cos":
            return [
                _tfjsCore.cos((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Cosh":
            return [
                _tfjsCore.cosh((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Elu":
            return [
                _tfjsCore.elu((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Erf":
            return [
                _tfjsCore.erf((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Exp":
            return [
                _tfjsCore.exp((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Expm1":
            return [
                _tfjsCore.expm1((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Floor":
            return [
                _tfjsCore.floor((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Log":
            return [
                _tfjsCore.log((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Log1p":
            return [
                _tfjsCore.log1p((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Imag":
            return [
                _tfjsCore.imag((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Neg":
            return [
                _tfjsCore.neg((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Reciprocal":
            return [
                _tfjsCore.reciprocal((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Real":
            return [
                _tfjsCore.real((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Relu":
            return [
                _tfjsCore.relu((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Round":
            return [
                _tfjsCore.round((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Selu":
            return [
                _tfjsCore.selu((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Sigmoid":
            return [
                _tfjsCore.sigmoid((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Sin":
            return [
                _tfjsCore.sin((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Sign":
            return [
                _tfjsCore.sign((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Sinh":
            return [
                _tfjsCore.sinh((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Softplus":
            return [
                _tfjsCore.softplus((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Sqrt":
            return [
                _tfjsCore.sqrt((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Square":
            return [
                _tfjsCore.square((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Tanh":
            return [
                _tfjsCore.tanh((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Tan":
            return [
                _tfjsCore.tan((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "Relu6":
        case "ClipByValue":
            return [
                _tfjsCore.clipByValue((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("clipValueMin", node, tensorMap, context), (0, _utils.getParamValue)("clipValueMax", node, tensorMap, context))
            ];
        case "Rsqrt":
            return [
                _tfjsCore.rsqrt((0, _utils.getTensor)(node.inputNames[0], tensorMap, context))
            ];
        case "Prod":
            return [
                _tfjsCore.prod((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("axes", node, tensorMap, context))
            ];
        case "LeakyRelu":
            return [
                _tfjsCore.leakyRelu((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("alpha", node, tensorMap, context))
            ];
        case "Prelu":
            return [
                _tfjsCore.prelu((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("alpha", node, tensorMap, context))
            ];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "basic_math";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dPDpf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _tensorArray = require("../../executor/tensor_array");
var _utils = require("./utils");
const executeOp = async (node, tensorMap, context)=>{
    switch(node.op){
        case "LoopCond":
            return [
                (0, _utils.getParamValue)("pred", node, tensorMap, context).clone()
            ];
        case "Switch":
            {
                const pred = (0, _utils.getParamValue)("pred", node, tensorMap, context);
                const data = (0, _utils.getParamValue)("data", node, tensorMap, context);
                // Outputs nodes :0 => false, :1 => true
                return (await pred.data())[0] ? [
                    undefined,
                    data.clone()
                ] : [
                    data.clone(),
                    undefined
                ];
            }
        case "Merge":
            const inputName = node.inputNames.find((name)=>(0, _utils.getTensor)(name, tensorMap, context) !== undefined);
            return inputName ? [
                (0, _utils.getTensor)(inputName, tensorMap, context).clone()
            ] : undefined;
        case "Enter":
            const frameId = (0, _utils.getParamValue)("frameName", node, tensorMap, context);
            const data1 = (0, _utils.getParamValue)("tensor", node, tensorMap, context);
            context.enterFrame(frameId);
            return [
                data1.clone()
            ];
        case "Exit":
            const tensor = (0, _utils.getParamValue)("tensor", node, tensorMap, context);
            context.exitFrame();
            return [
                tensor.clone()
            ];
        case "NextIteration":
            const input = (0, _utils.getParamValue)("tensor", node, tensorMap, context);
            context.nextIteration();
            return [
                input.clone()
            ];
        case "TensorArrayV3":
            const size = (0, _utils.getParamValue)("size", node, tensorMap, context);
            const dtype = (0, _utils.getParamValue)("dtype", node, tensorMap, context);
            const elementShape = (0, _utils.getParamValue)("elementShape", node, tensorMap, context);
            const dynamicSize = (0, _utils.getParamValue)("dynamicSize", node, tensorMap, context);
            const clearAfterRead = (0, _utils.getParamValue)("clearAfterRead", node, tensorMap, context);
            const identicalElementShapes = (0, _utils.getParamValue)("identicalElementShapes", node, tensorMap, context);
            const name = (0, _utils.getParamValue)("name", node, tensorMap, context);
            const tensorArray = new (0, _tensorArray.TensorArray)(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);
            context.addTensorArray(tensorArray);
            return [
                (0, _tfjsCore.scalar)(tensorArray.id),
                (0, _tfjsCore.scalar)(1.0)
            ];
        case "TensorArrayWriteV3":
            const id = (0, _utils.getParamValue)("tensorArrayId", node, tensorMap, context);
            const index = (0, _utils.getParamValue)("index", node, tensorMap, context);
            const writeTensor = (0, _utils.getParamValue)("tensor", node, tensorMap, context);
            const writeTensorArray = context.getTensorArray(id);
            writeTensorArray.write(index, writeTensor);
            return [
                (0, _tfjsCore.scalar)(1.0)
            ];
        case "TensorArrayReadV3":
            const readId = (0, _utils.getParamValue)("tensorArrayId", node, tensorMap, context);
            const readIndex = (0, _utils.getParamValue)("index", node, tensorMap, context);
            const readTensorArray = context.getTensorArray(readId);
            return [
                readTensorArray.read(readIndex)
            ];
        case "TensorArrayGatherV3":
            const gatherId = (0, _utils.getParamValue)("tensorArrayId", node, tensorMap, context);
            const gatherIndices = (0, _utils.getParamValue)("indices", node, tensorMap, context);
            const gatherDtype = (0, _utils.getParamValue)("dtype", node, tensorMap, context);
            const gatherTensorArray = context.getTensorArray(gatherId);
            return [
                gatherTensorArray.gather(gatherIndices, gatherDtype)
            ];
        case "TensorArrayScatterV3":
            const scatterId = (0, _utils.getParamValue)("tensorArrayId", node, tensorMap, context);
            const scatterIndices = (0, _utils.getParamValue)("indices", node, tensorMap, context);
            const scatterTensor = (0, _utils.getParamValue)("tensor", node, tensorMap, context);
            const scatterTensorArray = context.getTensorArray(scatterId);
            scatterTensorArray.scatter(scatterIndices, scatterTensor);
            return [
                (0, _tfjsCore.scalar)(1.0)
            ];
        case "TensorArrayConcatV3":
            const concatId = (0, _utils.getParamValue)("tensorArrayId", node, tensorMap, context);
            const concatTensorArray = context.getTensorArray(concatId);
            const concatDtype = (0, _utils.getParamValue)("dtype", node, tensorMap, context);
            return [
                concatTensorArray.concat(concatDtype)
            ];
        case "TensorArraySplitV3":
            const splitId = (0, _utils.getParamValue)("tensorArrayId", node, tensorMap, context);
            const splitTensor = (0, _utils.getParamValue)("tensor", node, tensorMap, context);
            const lengths = (0, _utils.getParamValue)("lengths", node, tensorMap, context);
            const splitTensorArray = context.getTensorArray(splitId);
            splitTensorArray.split(lengths, splitTensor);
            return [
                (0, _tfjsCore.scalar)(1.0)
            ];
        case "TensorArraySizeV3":
            const sizeId = (0, _utils.getParamValue)("tensorArrayId", node, tensorMap, context);
            const sizeTensorArray = context.getTensorArray(sizeId);
            return [
                (0, _tfjsCore.scalar)(sizeTensorArray.size(), "int32")
            ];
        case "TensorArrayCloseV3":
            const closeId = (0, _utils.getParamValue)("tensorArrayId", node, tensorMap, context);
            const closeTensorArray = context.getTensorArray(closeId);
            closeTensorArray.clearAndClose();
            return [
                (0, _tfjsCore.scalar)(0)
            ];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "control";

},{"@tensorflow/tfjs-core":"2votT","../../executor/tensor_array":"5O4fL","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5O4fL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The TensorArray object keeps an array of Tensors.  It
 * allows reading from the array and writing to the array.
 */ parcelHelpers.export(exports, "TensorArray", ()=>TensorArray);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
class TensorArray {
    constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead){
        this.name = name;
        this.dtype = dtype;
        this.maxSize = maxSize;
        this.elementShape = elementShape;
        this.identicalElementShapes = identicalElementShapes;
        this.dynamicSize = dynamicSize;
        this.clearAfterRead = clearAfterRead;
        this.tensors = [];
        this.closed_ = false;
        this.id = TensorArray.nextId++;
    }
    get closed() {
        return this.closed_;
    }
    /**
     * Close the current TensorArray.
     */ clearAndClose() {
        this.tensors.forEach((tensor)=>tensor.tensor.dispose());
        this.tensors = [];
        this.closed_ = true;
    }
    size() {
        return this.tensors.length;
    }
    /**
     * Read the value at location index in the TensorArray.
     * @param index Number the index to read from.
     */ read(index) {
        if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
        if (index < 0 || index >= this.size()) throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);
        const tensorWithState = this.tensors[index];
        if (tensorWithState.cleared) throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` + `(perhaps try setting clear_after_read = false?).`);
        if (this.clearAfterRead) tensorWithState.cleared = true;
        tensorWithState.read = true;
        return tensorWithState.tensor;
    }
    /**
     * Helper method to read multiple tensors from the specified indices.
     */ readMany(indices) {
        return indices.map((index)=>this.read(index));
    }
    /**
     * Write value into the index of the TensorArray.
     * @param index number the index to write to.
     * @param tensor
     */ write(index, tensor) {
        if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
        if (index < 0 || !this.dynamicSize && index >= this.maxSize) throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);
        const t = this.tensors[index] || {};
        if (tensor.dtype !== this.dtype) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},
          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);
        // Set the shape for the first time write to unknow shape tensor array
        if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) this.elementShape = tensor.shape;
        this.assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);
        if (t && t.read) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);
        if (t && t.written) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);
        t.tensor = tensor;
        t.written = true;
        this.tensors[index] = t;
    }
    /**
     * Helper method to write multiple tensors to the specified indices.
     */ writeMany(indices, tensors) {
        if (indices.length !== tensors.length) throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` + `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);
        indices.forEach((i, index)=>this.write(i, tensors[index]));
    }
    /**
     * Return selected values in the TensorArray as a packed Tensor. All of
     * selected values must have been written and their shapes must all match.
     * @param [indices] number[] Optional. Taking values in [0, max_value). If the
     *    TensorArray is not dynamic, max_value=size(). If not specified returns
     *    all tensors in the original order.
     * @param [dtype]
     */ gather(indices, dtype) {
        if (!!dtype && dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);
        if (!indices) {
            indices = [];
            for(let i = 0; i < this.size(); i++)indices.push(i);
        } else indices = indices.slice(0, this.size());
        if (indices.length === 0) return (0, _tfjsCore.tensor)([], [
            0
        ].concat(this.elementShape));
        // Read all the PersistentTensors into a vector to keep track of
        // their memory.
        const tensors = this.readMany(indices);
        this.assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, "TensorArray shape mismatch: ");
        return (0, _tfjsCore.stack)(tensors, 0);
    }
    /**
     * Return the values in the TensorArray as a concatenated Tensor.
     */ concat(dtype) {
        if (!!dtype && dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);
        if (this.size() === 0) return (0, _tfjsCore.tensor)([], [
            0
        ].concat(this.elementShape));
        const indices = [];
        for(let i = 0; i < this.size(); i++)indices.push(i);
        // Collect all the tensors from the tensors array.
        const tensors = this.readMany(indices);
        this.assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);
        return (0, _tfjsCore.concat)(tensors, 0);
    }
    /**
     * Scatter the values of a Tensor in specific indices of a TensorArray.
     * @param indices nummber[] values in [0, max_value). If the
     *    TensorArray is not dynamic, max_value=size().
     * @param tensor Tensor input tensor.
     */ scatter(indices, tensor) {
        if (tensor.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
        if (indices.length !== tensor.shape[0]) throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
        const maxIndex = Math.max(...indices);
        if (!this.dynamicSize && maxIndex >= this.maxSize) throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);
        this.writeMany(indices, (0, _tfjsCore.unstack)(tensor, 0));
    }
    /**
     * Split the values of a Tensor into the TensorArray.
     * @param length number[] with the lengths to use when splitting value along
     *    its first dimension.
     * @param tensor Tensor, the tensor to split.
     */ split(length, tensor) {
        if (tensor.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
        let totalLength = 0;
        const cumulativeLengths = length.map((len)=>{
            totalLength += len;
            return totalLength;
        });
        if (totalLength !== tensor.shape[0]) throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
        if (!this.dynamicSize && length.length !== this.maxSize) throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` + "and the TensorArray is not marked as dynamically resizeable");
        const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
        const tensors = [];
        (0, _tfjsCore.tidy)(()=>{
            tensor = tensor.reshape([
                1,
                totalLength,
                elementPerRow
            ]);
            for(let i = 0; i < length.length; ++i){
                const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];
                const indices = [
                    0,
                    previousLength,
                    0
                ];
                const sizes = [
                    1,
                    length[i],
                    elementPerRow
                ];
                tensors[i] = (0, _tfjsCore.slice)(tensor, indices, sizes).reshape(this.elementShape);
            }
            return tensors;
        });
        const indices = [];
        for(let i = 0; i < length.length; i++)indices[i] = i;
        this.writeMany(indices, tensors);
    }
    /**
     * This differs from util.assertShapesMatch in that it allows values of
     * negative one, an undefined size of a dimensinon, in a shape to match
     * anything.
     */ assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = "") {
        (0, _tfjsCore.util).assert(this.shapesEqualAllowUndefinedSize(shapeA, shapeB), ()=>errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
    }
    shapesEqualAllowUndefinedSize(n1, n2) {
        if (n1.length !== n2.length) return false;
        for(let i = 0; i < n1.length; i++){
            if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) return false;
        }
        return true;
    }
}
TensorArray.nextId = 0;

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ceB3N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "Conv1D":
            {
                const stride = (0, _utils.getParamValue)("stride", node, tensorMap, context);
                const pad = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const dataFormat = (0, _utils.getParamValue)("dataFormat", node, tensorMap, context).toUpperCase();
                const dilation = (0, _utils.getParamValue)("dilation", node, tensorMap, context);
                return [
                    _tfjsCore.conv1d((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("filter", node, tensorMap, context), stride, pad, dataFormat, dilation)
                ];
            }
        case "Conv2D":
            {
                const stride1 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad1 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const dataFormat1 = (0, _utils.getParamValue)("dataFormat", node, tensorMap, context).toUpperCase();
                const dilations = (0, _utils.getParamValue)("dilations", node, tensorMap, context);
                return [
                    _tfjsCore.conv2d((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("filter", node, tensorMap, context), [
                        stride1[1],
                        stride1[2]
                    ], pad1, dataFormat1, [
                        dilations[1],
                        dilations[2]
                    ])
                ];
            }
        case "_FusedConv2D":
        case "FusedDepthwiseConv2dNative":
            {
                const [extraOp, activationFunc] = (0, _utils.getParamValue)("fusedOps", node, tensorMap, context);
                const isBiasAdd = extraOp === "biasadd";
                const isPrelu = activationFunc === "prelu";
                const isBatchNorm = extraOp === "fusedbatchnorm";
                const numArgs = (0, _utils.getParamValue)("numArgs", node, tensorMap, context);
                if (isBiasAdd) {
                    if (isPrelu && numArgs !== 2) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
                    if (!isPrelu && numArgs !== 1) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
                }
                if (isBatchNorm) throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");
                const stride2 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad2 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const dataFormat2 = (0, _utils.getParamValue)("dataFormat", node, tensorMap, context).toUpperCase();
                const dilations1 = (0, _utils.getParamValue)("dilations", node, tensorMap, context);
                const [biasArg, preluArg] = (0, _utils.getParamValue)("args", node, tensorMap, context);
                const kernelMethod = node.op === "_FusedConv2D" ? _tfjsCore.fused.conv2d : _tfjsCore.fused.depthwiseConv2d;
                return [
                    kernelMethod({
                        x: (0, _utils.getParamValue)("x", node, tensorMap, context),
                        filter: (0, _utils.getParamValue)("filter", node, tensorMap, context),
                        strides: [
                            stride2[1],
                            stride2[2]
                        ],
                        pad: pad2,
                        dataFormat: dataFormat2,
                        dilations: [
                            dilations1[1],
                            dilations1[2]
                        ],
                        bias: biasArg,
                        activation: activationFunc,
                        preluActivationWeights: preluArg
                    })
                ];
            }
        case "Conv2DBackpropInput":
        case "Conv2dTranspose":
            {
                const shape = (0, _utils.getParamValue)("outputShape", node, tensorMap, context);
                const stride3 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad3 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                return [
                    _tfjsCore.conv2dTranspose((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("filter", node, tensorMap, context), shape, [
                        stride3[1],
                        stride3[2]
                    ], pad3)
                ];
            }
        case "DepthwiseConv2dNative":
        case "DepthwiseConv2d":
            {
                const stride4 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad4 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const dilations2 = (0, _utils.getParamValue)("dilations", node, tensorMap, context);
                const dataFormat3 = (0, _utils.getParamValue)("dataFormat", node, tensorMap, context).toUpperCase();
                return [
                    _tfjsCore.depthwiseConv2d((0, _utils.getParamValue)("input", node, tensorMap, context), (0, _utils.getParamValue)("filter", node, tensorMap, context), [
                        stride4[1],
                        stride4[2]
                    ], pad4, dataFormat3, [
                        dilations2[1],
                        dilations2[2]
                    ])
                ];
            }
        case "Conv3D":
            {
                const stride5 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad5 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const dataFormat4 = (0, _utils.getParamValue)("dataFormat", node, tensorMap, context).toUpperCase();
                const dilations3 = (0, _utils.getParamValue)("dilations", node, tensorMap, context);
                return [
                    _tfjsCore.conv3d((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("filter", node, tensorMap, context), [
                        stride5[1],
                        stride5[2],
                        stride5[3]
                    ], pad5, dataFormat4, [
                        dilations3[1],
                        dilations3[2],
                        dilations3[3]
                    ])
                ];
            }
        case "AvgPool":
            {
                const stride6 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad6 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const kernelSize = (0, _utils.getParamValue)("kernelSize", node, tensorMap, context);
                return [
                    _tfjsCore.avgPool((0, _utils.getParamValue)("x", node, tensorMap, context), [
                        kernelSize[1],
                        kernelSize[2]
                    ], [
                        stride6[1],
                        stride6[2]
                    ], pad6)
                ];
            }
        case "MaxPool":
            {
                const stride7 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad7 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const kernelSize1 = (0, _utils.getParamValue)("kernelSize", node, tensorMap, context);
                return [
                    _tfjsCore.maxPool((0, _utils.getParamValue)("x", node, tensorMap, context), [
                        kernelSize1[1],
                        kernelSize1[2]
                    ], [
                        stride7[1],
                        stride7[2]
                    ], pad7)
                ];
            }
        case "MaxPoolWithArgmax":
            {
                const stride8 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad8 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const kernelSize2 = (0, _utils.getParamValue)("kernelSize", node, tensorMap, context);
                const includeBatchInIndex = (0, _utils.getParamValue)("includeBatchInIndex", node, tensorMap, context);
                const { result , indexes  } = _tfjsCore.maxPoolWithArgmax((0, _utils.getParamValue)("x", node, tensorMap, context), [
                    kernelSize2[1],
                    kernelSize2[2]
                ], [
                    stride8[1],
                    stride8[2]
                ], pad8, includeBatchInIndex);
                return [
                    result,
                    indexes
                ];
            }
        case "AvgPool3D":
            {
                const stride9 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad9 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const kernelSize3 = (0, _utils.getParamValue)("kernelSize", node, tensorMap, context);
                return [
                    _tfjsCore.avgPool3d((0, _utils.getParamValue)("x", node, tensorMap, context), [
                        kernelSize3[1],
                        kernelSize3[2],
                        kernelSize3[3]
                    ], [
                        stride9[1],
                        stride9[2],
                        stride9[3]
                    ], pad9)
                ];
            }
        case "MaxPool3D":
            {
                const stride10 = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const pad10 = (0, _utils.getParamValue)("pad", node, tensorMap, context);
                const kernelSize4 = (0, _utils.getParamValue)("kernelSize", node, tensorMap, context);
                return [
                    _tfjsCore.maxPool3d((0, _utils.getParamValue)("x", node, tensorMap, context), [
                        kernelSize4[1],
                        kernelSize4[2],
                        kernelSize4[3]
                    ], [
                        stride10[1],
                        stride10[2],
                        stride10[3]
                    ], pad10)
                ];
            }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "convolution";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2DMKF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "Fill":
            {
                const shape = (0, _utils.getParamValue)("shape", node, tensorMap, context);
                const dtype = (0, _utils.getParamValue)("dtype", node, tensorMap, context);
                const value = (0, _utils.getParamValue)("value", node, tensorMap, context);
                return [
                    _tfjsCore.fill(shape, value, dtype)
                ];
            }
        case "LinSpace":
            {
                const start = (0, _utils.getParamValue)("start", node, tensorMap, context);
                const stop = (0, _utils.getParamValue)("stop", node, tensorMap, context);
                const num = (0, _utils.getParamValue)("num", node, tensorMap, context);
                return [
                    _tfjsCore.linspace(start, stop, num)
                ];
            }
        case "Multinomial":
            {
                const logits = (0, _utils.getParamValue)("logits", node, tensorMap, context);
                const numSamples = (0, _utils.getParamValue)("numSamples", node, tensorMap, context);
                const seed = (0, _utils.getParamValue)("seed", node, tensorMap, context);
                return [
                    _tfjsCore.multinomial(logits, numSamples, seed)
                ];
            }
        case "OneHot":
            {
                const indices = (0, _utils.getParamValue)("indices", node, tensorMap, context);
                const depth = (0, _utils.getParamValue)("depth", node, tensorMap, context);
                const onValue = (0, _utils.getParamValue)("onValue", node, tensorMap, context);
                const offValue = (0, _utils.getParamValue)("offValue", node, tensorMap, context);
                return [
                    _tfjsCore.oneHot(indices, depth, onValue, offValue)
                ];
            }
        case "Ones":
            return [
                _tfjsCore.ones((0, _utils.getParamValue)("shape", node, tensorMap, context), (0, _utils.getParamValue)("dtype", node, tensorMap, context))
            ];
        case "OnesLike":
            return [
                _tfjsCore.onesLike((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "RandomUniform":
            return [
                _tfjsCore.randomUniform(// tslint:disable-next-line:no-any
                (0, _utils.getParamValue)("shape", node, tensorMap, context), (0, _utils.getParamValue)("minval", node, tensorMap, context), (0, _utils.getParamValue)("maxval", node, tensorMap, context), (0, _utils.getParamValue)("dtype", node, tensorMap, context))
            ];
        case "Range":
            {
                const start1 = (0, _utils.getParamValue)("start", node, tensorMap, context);
                const stop1 = (0, _utils.getParamValue)("stop", node, tensorMap, context);
                const step = (0, _utils.getParamValue)("step", node, tensorMap, context);
                return [
                    _tfjsCore.range(start1, stop1, step, (0, _utils.getParamValue)("dtype", node, tensorMap, context))
                ];
            }
        case "TruncatedNormal":
            {
                const shape1 = (0, _utils.getParamValue)("shape", node, tensorMap, context);
                const mean = (0, _utils.getParamValue)("mean", node, tensorMap, context);
                const stdDev = (0, _utils.getParamValue)("stdDev", node, tensorMap, context);
                const seed1 = (0, _utils.getParamValue)("seed", node, tensorMap, context);
                return [
                    _tfjsCore.truncatedNormal(shape1, mean, stdDev, (0, _utils.getParamValue)("dtype", node, tensorMap, context), seed1)
                ];
            }
        case "Zeros":
            return [
                _tfjsCore.zeros((0, _utils.getParamValue)("shape", node, tensorMap, context), (0, _utils.getParamValue)("dtype", node, tensorMap, context))
            ];
        case "ZerosLike":
            return [
                _tfjsCore.zerosLike((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "creation";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8IeOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = async (node, tensorMap, context)=>{
    switch(node.op){
        case "NonMaxSuppressionV5":
        case "NonMaxSuppressionV3":
        case "NonMaxSuppressionV2":
            {
                const boxes = (0, _utils.getParamValue)("boxes", node, tensorMap, context);
                const scores = (0, _utils.getParamValue)("scores", node, tensorMap, context);
                const maxOutputSize = (0, _utils.getParamValue)("maxOutputSize", node, tensorMap, context);
                const iouThreshold = (0, _utils.getParamValue)("iouThreshold", node, tensorMap, context);
                const scoreThreshold = (0, _utils.getParamValue)("scoreThreshold", node, tensorMap, context);
                if (node.op === "NonMaxSuppressionV5") {
                    const softNmsSigma = (0, _utils.getParamValue)("softNmsSigma", node, tensorMap, context);
                    const result = await _tfjsCore.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
                    return [
                        result.selectedIndices,
                        result.selectedScores
                    ];
                }
                return [
                    await _tfjsCore.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)
                ];
            }
        case "Where":
            {
                const condition = (0, _utils.getParamValue)("condition", node, tensorMap, context).asType("bool");
                const result1 = [
                    await _tfjsCore.whereAsync(condition)
                ];
                condition.dispose();
                return result1;
            }
        case "ListDiff":
            return _tfjsCore.setdiff1dAsync((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("y", node, tensorMap, context));
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "dynamic";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ekCfT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "TopKV2":
            {
                const x = (0, _utils.getParamValue)("x", node, tensorMap, context);
                const k = (0, _utils.getParamValue)("k", node, tensorMap, context);
                const sorted = (0, _utils.getParamValue)("sorted", node, tensorMap, context);
                const result = _tfjsCore.topk(x, k, sorted);
                return [
                    result.values,
                    result.indices
                ];
            }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "evaluation";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jSP88":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "Const":
            return tensorMap[node.name];
        case "PlaceholderWithDefault":
            const def = (0, _utils.getParamValue)("default", node, tensorMap, context);
            return [
                (0, _utils.getTensor)(node.name, tensorMap, context) || def
            ];
        case "Placeholder":
            return [
                (0, _utils.getTensor)(node.name, tensorMap, context)
            ];
        case "Identity":
        case "StopGradient":
        case "FakeQuantWithMinMaxVars":
            return [
                (0, _utils.getParamValue)("x", node, tensorMap, context).clone()
            ];
        case "IdentityN":
            return (0, _utils.getParamValue)("x", node, tensorMap, context).map((t)=>t.clone());
        case "Snapshot":
            const snapshot = (0, _utils.getParamValue)("x", node, tensorMap, context);
            return [
                snapshot.clone()
            ];
        case "Shape":
            return [
                _tfjsCore.tensor1d((0, _utils.getParamValue)("x", node, tensorMap, context).shape, "int32")
            ];
        case "ShapeN":
            return (0, _utils.getParamValue)("x", node, tensorMap, context).map((t)=>_tfjsCore.tensor1d(t.shape));
        case "Size":
            return [
                _tfjsCore.scalar((0, _utils.getParamValue)("x", node, tensorMap, context).size, "int32")
            ];
        case "Rank":
            return [
                _tfjsCore.scalar((0, _utils.getParamValue)("x", node, tensorMap, context).rank, "int32")
            ];
        case "NoOp":
            return [
                _tfjsCore.scalar(1)
            ];
        case "Print":
            const input = (0, _utils.getParamValue)("x", node, tensorMap, context);
            const data = (0, _utils.getParamValue)("data", node, tensorMap, context);
            const message = (0, _utils.getParamValue)("message", node, tensorMap, context);
            const summarize = (0, _utils.getParamValue)("summarize", node, tensorMap, context);
            console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance.");
            console.log(message);
            for(let i = 0; i < data.length; i++)console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));
            return [
                input
            ];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "graph";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8qDUy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "ResizeBilinear":
            {
                const images = (0, _utils.getParamValue)("images", node, tensorMap, context);
                const size = (0, _utils.getParamValue)("size", node, tensorMap, context);
                const alignCorners = (0, _utils.getParamValue)("alignCorners", node, tensorMap, context);
                return [
                    _tfjsCore.image.resizeBilinear(images, [
                        size[0],
                        size[1]
                    ], alignCorners)
                ];
            }
        case "ResizeNearestNeighbor":
            {
                const images1 = (0, _utils.getParamValue)("images", node, tensorMap, context);
                const size1 = (0, _utils.getParamValue)("size", node, tensorMap, context);
                const alignCorners1 = (0, _utils.getParamValue)("alignCorners", node, tensorMap, context);
                return [
                    _tfjsCore.image.resizeNearestNeighbor(images1, [
                        size1[0],
                        size1[1]
                    ], alignCorners1)
                ];
            }
        case "CropAndResize":
            {
                const image = (0, _utils.getParamValue)("image", node, tensorMap, context);
                const boxes = (0, _utils.getParamValue)("boxes", node, tensorMap, context);
                const boxInd = (0, _utils.getParamValue)("boxInd", node, tensorMap, context);
                const cropSize = (0, _utils.getParamValue)("cropSize", node, tensorMap, context);
                const method = (0, _utils.getParamValue)("method", node, tensorMap, context);
                const extrapolationValue = (0, _utils.getParamValue)("extrapolationValue", node, tensorMap, context);
                return [
                    _tfjsCore.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)
                ];
            }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "image";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fENri":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "Equal":
            return [
                _tfjsCore.equal((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "NotEqual":
            return [
                _tfjsCore.notEqual((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "Greater":
            return [
                _tfjsCore.greater((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "GreaterEqual":
            return [
                _tfjsCore.greaterEqual((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "Less":
            return [
                _tfjsCore.less((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "LessEqual":
            return [
                _tfjsCore.lessEqual((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "LogicalAnd":
            return [
                _tfjsCore.logicalAnd((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "LogicalNot":
            return [
                _tfjsCore.logicalNot((0, _utils.getParamValue)("a", node, tensorMap, context))
            ];
        case "LogicalOr":
            return [
                _tfjsCore.logicalOr((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        case "Select":
        case "SelectV2":
            return [
                _tfjsCore.where((0, _utils.getParamValue)("condition", node, tensorMap, context), (0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context))
            ];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "logical";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"14bX3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "BatchMatMul":
        case "BatchMatMulV2":
        case "MatMul":
            return [
                _tfjsCore.matMul((0, _utils.getParamValue)("a", node, tensorMap, context), (0, _utils.getParamValue)("b", node, tensorMap, context), (0, _utils.getParamValue)("transposeA", node, tensorMap, context), (0, _utils.getParamValue)("transposeB", node, tensorMap, context))
            ];
        case "Transpose":
            return [
                _tfjsCore.transpose((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("perm", node, tensorMap, context))
            ];
        case "_FusedMatMul":
            const [extraOp, activationFunc] = (0, _utils.getParamValue)("fusedOps", node, tensorMap, context);
            const isBiasAdd = extraOp === "biasadd";
            const isPrelu = activationFunc === "prelu";
            const numArgs = (0, _utils.getParamValue)("numArgs", node, tensorMap, context);
            if (isBiasAdd) {
                if (isPrelu && numArgs !== 2) throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
                if (!isPrelu && numArgs !== 1) throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
            }
            const [biasArg, preluArg] = (0, _utils.getParamValue)("args", node, tensorMap, context);
            return [
                _tfjsCore.fused.matMul({
                    a: (0, _utils.getParamValue)("a", node, tensorMap, context),
                    b: (0, _utils.getParamValue)("b", node, tensorMap, context),
                    transposeA: (0, _utils.getParamValue)("transposeA", node, tensorMap, context),
                    transposeB: (0, _utils.getParamValue)("transposeB", node, tensorMap, context),
                    bias: biasArg,
                    activation: activationFunc,
                    preluActivationWeights: preluArg
                })
            ];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "matrices";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGvG8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "FusedBatchNorm":
        case "FusedBatchNormV2":
            return [
                _tfjsCore.batchNorm((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("mean", node, tensorMap, context), (0, _utils.getParamValue)("variance", node, tensorMap, context), (0, _utils.getParamValue)("offset", node, tensorMap, context), (0, _utils.getParamValue)("scale", node, tensorMap, context), (0, _utils.getParamValue)("epsilon", node, tensorMap, context))
            ];
        case "FusedBatchNormV3":
            return [
                _tfjsCore.batchNorm((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("mean", node, tensorMap, context), (0, _utils.getParamValue)("variance", node, tensorMap, context), (0, _utils.getParamValue)("offset", node, tensorMap, context), (0, _utils.getParamValue)("scale", node, tensorMap, context), (0, _utils.getParamValue)("epsilon", node, tensorMap, context))
            ];
        case "LRN":
            return [
                _tfjsCore.localResponseNormalization((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("radius", node, tensorMap, context), (0, _utils.getParamValue)("bias", node, tensorMap, context), (0, _utils.getParamValue)("alpha", node, tensorMap, context), (0, _utils.getParamValue)("beta", node, tensorMap, context))
            ];
        case "Softmax":
            return [
                _tfjsCore.softmax((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "LogSoftmax":
            return [
                _tfjsCore.logSoftmax((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "SparseToDense":
            return [
                _tfjsCore.sparseToDense((0, _utils.getParamValue)("sparseIndices", node, tensorMap, context), (0, _utils.getParamValue)("outputShape", node, tensorMap, context), (0, _utils.getParamValue)("sparseValues", node, tensorMap, context), (0, _utils.getParamValue)("defaultValue", node, tensorMap, context))
            ];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "normalization";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7sI7a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "Max":
            {
                const axis = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const keepDims = (0, _utils.getParamValue)("keepDims", node, tensorMap, context);
                return [
                    _tfjsCore.max((0, _utils.getParamValue)("x", node, tensorMap, context), axis, keepDims)
                ];
            }
        case "Mean":
            {
                const axis1 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const keepDims1 = (0, _utils.getParamValue)("keepDims", node, tensorMap, context);
                return [
                    _tfjsCore.mean((0, _utils.getParamValue)("x", node, tensorMap, context), axis1, keepDims1)
                ];
            }
        case "Min":
            {
                const axis2 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const keepDims2 = (0, _utils.getParamValue)("keepDims", node, tensorMap, context);
                return [
                    _tfjsCore.min((0, _utils.getParamValue)("x", node, tensorMap, context), axis2, keepDims2)
                ];
            }
        case "Sum":
            {
                const axis3 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const keepDims3 = (0, _utils.getParamValue)("keepDims", node, tensorMap, context);
                return [
                    _tfjsCore.sum((0, _utils.getParamValue)("x", node, tensorMap, context), axis3, keepDims3)
                ];
            }
        case "All":
            {
                const axis4 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const keepDims4 = (0, _utils.getParamValue)("keepDims", node, tensorMap, context);
                return [
                    _tfjsCore.all((0, _utils.getParamValue)("x", node, tensorMap, context), axis4, keepDims4)
                ];
            }
        case "Any":
            {
                const axis5 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const keepDims5 = (0, _utils.getParamValue)("keepDims", node, tensorMap, context);
                return [
                    _tfjsCore.any((0, _utils.getParamValue)("x", node, tensorMap, context), axis5, keepDims5)
                ];
            }
        case "ArgMax":
            {
                const axis6 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                return [
                    _tfjsCore.argMax((0, _utils.getParamValue)("x", node, tensorMap, context), axis6)
                ];
            }
        case "ArgMin":
            {
                const axis7 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                return [
                    _tfjsCore.argMin((0, _utils.getParamValue)("x", node, tensorMap, context), axis7)
                ];
            }
        case "Prod":
            {
                const axis8 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const keepDims6 = (0, _utils.getParamValue)("keepDims", node, tensorMap, context);
                return [
                    _tfjsCore.prod((0, _utils.getParamValue)("x", node, tensorMap, context), axis8, keepDims6)
                ];
            }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "reduction";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4MDx1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "ConcatV2":
        case "Concat":
            {
                const n = (0, _utils.getParamValue)("n", node, tensorMap, context);
                const axis = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                let inputs = (0, _utils.getParamValue)("tensors", node, tensorMap, context);
                inputs = inputs.slice(0, n);
                return [
                    _tfjsCore.concat(inputs, axis)
                ];
            }
        case "GatherV2":
        case "Gather":
            {
                const axis1 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const input = (0, _utils.getParamValue)("x", node, tensorMap, context);
                const indices = (0, _utils.getParamValue)("indices", node, tensorMap, context);
                return [
                    _tfjsCore.gather(input, indices.asType("int32"), axis1)
                ];
            }
        case "ReverseV2":
        case "Reverse":
            {
                const axis2 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const input1 = (0, _utils.getParamValue)("x", node, tensorMap, context);
                return [
                    _tfjsCore.reverse(input1, axis2)
                ];
            }
        case "Slice":
            {
                // tslint:disable-next-line:no-any
                const begin = (0, _utils.getParamValue)("begin", node, tensorMap, context);
                // tslint:disable-next-line:no-any
                const size = (0, _utils.getParamValue)("size", node, tensorMap, context);
                return [
                    _tfjsCore.slice((0, _utils.getParamValue)("x", node, tensorMap, context), begin, size)
                ];
            }
        case "StridedSlice":
            {
                const begin1 = (0, _utils.getParamValue)("begin", node, tensorMap, context);
                const end = (0, _utils.getParamValue)("end", node, tensorMap, context);
                const strides = (0, _utils.getParamValue)("strides", node, tensorMap, context);
                const beginMask = (0, _utils.getParamValue)("beginMask", node, tensorMap, context);
                const endMask = (0, _utils.getParamValue)("endMask", node, tensorMap, context);
                const ellipsisMask = (0, _utils.getParamValue)("ellipsisMask", node, tensorMap, context);
                const newAxisMask = (0, _utils.getParamValue)("newAxisMask", node, tensorMap, context);
                const shrinkAxisMask = (0, _utils.getParamValue)("shrinkAxisMask", node, tensorMap, context);
                const tensor = (0, _utils.getParamValue)("x", node, tensorMap, context);
                if (begin1.length === 1 && tensor.shape.length > 1) for(let i = 1; i < tensor.shape.length; i++){
                    begin1.push(0);
                    end.push(tensor.shape[i]);
                    strides.push(strides[0]);
                }
                return [
                    _tfjsCore.stridedSlice(tensor, begin1, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)
                ];
            }
        case "Pack":
            return _tfjsCore.tidy(()=>{
                const axis = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const tensors = (0, _utils.getParamValue)("tensors", node, tensorMap, context);
                // Reshape the tensors to the first tensor's shape if they don't match.
                const shape = tensors[0].shape;
                const squeezedShape = tensors[0].squeeze().shape;
                const mapped = tensors.map((tensor)=>{
                    const sameShape = _tfjsCore.util.arraysEqual(tensor.shape, shape);
                    if (!sameShape && !_tfjsCore.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) throw new Error("the input tensors shape does not match");
                    return sameShape ? tensor : tensor.reshape(shape);
                });
                return [
                    _tfjsCore.stack(mapped, axis)
                ];
            });
        case "Unpack":
            return _tfjsCore.tidy(()=>{
                const axis = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const tensor = (0, _utils.getParamValue)("tensor", node, tensorMap, context);
                return _tfjsCore.unstack(tensor, axis);
            });
        case "Tile":
            {
                const reps = (0, _utils.getParamValue)("reps", node, tensorMap, context);
                return [
                    _tfjsCore.tile((0, _utils.getParamValue)("x", node, tensorMap, context), reps)
                ];
            }
        case "Split":
        case "SplitV":
            {
                const axis3 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                const numOrSizeSplits = (0, _utils.getParamValue)("numOrSizeSplits", node, tensorMap, context);
                return _tfjsCore.split((0, _utils.getParamValue)("x", node, tensorMap, context), numOrSizeSplits, axis3);
            }
        case "ScatterNd":
            {
                const indices1 = (0, _utils.getParamValue)("indices", node, tensorMap, context);
                const values = (0, _utils.getParamValue)("values", node, tensorMap, context);
                const shape = (0, _utils.getParamValue)("shape", node, tensorMap, context);
                return [
                    _tfjsCore.scatterND(indices1, values, shape)
                ];
            }
        case "GatherNd":
            {
                const x = (0, _utils.getParamValue)("x", node, tensorMap, context);
                const indices2 = (0, _utils.getParamValue)("indices", node, tensorMap, context);
                return [
                    _tfjsCore.gatherND(x, indices2)
                ];
            }
        case "SparseToDense":
            {
                const indices3 = (0, _utils.getParamValue)("sparseIndices", node, tensorMap, context);
                const shape1 = (0, _utils.getParamValue)("outputShape", node, tensorMap, context);
                const sparseValues = (0, _utils.getParamValue)("sparseValues", node, tensorMap, context);
                const defaultValue = (0, _utils.getParamValue)("defaultValue", node, tensorMap, context);
                return [
                    _tfjsCore.sparseToDense(indices3, sparseValues, shape1, sparseValues.dtype === defaultValue.dtype ? defaultValue : defaultValue.asType(sparseValues.dtype))
                ];
            }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "slice_join";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHu9e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "FFT":
            return [
                _tfjsCore.fft((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "IFFT":
            return [
                _tfjsCore.ifft((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "RFFT":
            return [
                _tfjsCore.rfft((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        case "IRFFT":
            return [
                _tfjsCore.irfft((0, _utils.getParamValue)("x", node, tensorMap, context))
            ];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "spectral";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gIW5l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeOp", ()=>executeOp);
parcelHelpers.export(exports, "CATEGORY", ()=>CATEGORY);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var _utils = require("./utils");
const executeOp = (node, tensorMap, context)=>{
    switch(node.op){
        case "Cast":
            return [
                _tfjsCore.cast((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("dtype", node, tensorMap, context))
            ];
        case "ExpandDims":
            {
                const axis = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                return [
                    _tfjsCore.expandDims((0, _utils.getParamValue)("x", node, tensorMap, context), axis)
                ];
            }
        case "Squeeze":
            {
                const axis1 = (0, _utils.getParamValue)("axis", node, tensorMap, context);
                return [
                    _tfjsCore.squeeze((0, _utils.getParamValue)("x", node, tensorMap, context), axis1)
                ];
            }
        case "Reshape":
            return [
                _tfjsCore.reshape((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.getParamValue)("shape", node, tensorMap, context))
            ];
        case "PadV2":
        case "Pad":
            return [
                _tfjsCore.pad((0, _utils.getParamValue)("x", node, tensorMap, context), (0, _utils.split)((0, _utils.getParamValue)("padding", node, tensorMap, context), 2), (0, _utils.getParamValue)("constantValue", node, tensorMap, context))
            ];
        case "SpaceToBatchND":
            {
                const blockShape = (0, _utils.getParamValue)("blockShape", node, tensorMap, context);
                const paddings = (0, _utils.split)((0, _utils.getParamValue)("paddings", node, tensorMap, context), 2);
                return [
                    _tfjsCore.spaceToBatchND((0, _utils.getParamValue)("x", node, tensorMap, context), blockShape, paddings)
                ];
            }
        case "BatchToSpaceND":
            {
                const blockShape1 = (0, _utils.getParamValue)("blockShape", node, tensorMap, context);
                const crops = (0, _utils.split)((0, _utils.getParamValue)("crops", node, tensorMap, context), 2);
                return [
                    _tfjsCore.batchToSpaceND((0, _utils.getParamValue)("x", node, tensorMap, context), blockShape1, crops)
                ];
            }
        case "DepthToSpace":
            {
                const blockSize = (0, _utils.getParamValue)("blockSize", node, tensorMap, context);
                const dataFormat = (0, _utils.getParamValue)("dataFormat", node, tensorMap, context).toUpperCase();
                return [
                    _tfjsCore.depthToSpace((0, _utils.getParamValue)("x", node, tensorMap, context), blockSize, dataFormat)
                ];
            }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = "transformation";

},{"@tensorflow/tfjs-core":"2votT","./utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jODI0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * ExecutionContext captures the runtime environment of the node. It keeps
 * track of the current frame and iteration for the control flow ops.
 *
 * For example, typical Dynamic RNN model may contain loops, for which
 * TensorFlow will generate graphs with Enter/Exit nodes to control the
 * current execution frame, and NextIteration Nodes for iteration id increment.
 * For model with branch logic, TensorFLow will generate Switch/Merge ops.
 */ parcelHelpers.export(exports, "ExecutionContext", ()=>ExecutionContext);
class ExecutionContext {
    constructor(weightMap, tensorArrayMap){
        this.weightMap = weightMap;
        this.tensorArrayMap = tensorArrayMap;
        this.rootContext = {
            id: 0,
            frameName: "",
            iterationId: 0
        };
        this.contexts = [
            this.rootContext
        ];
        this.lastId = 0;
        this.generateCurrentContextIds();
    }
    newFrame(id, frameName) {
        return {
            id,
            frameName,
            iterationId: 0
        };
    }
    /**
     * Set the current context
     * @param contexts: ExecutionContextInfo[] the current path of execution
     * frames
     */ set currentContext(contexts) {
        if (this.contexts !== contexts) {
            this.contexts = contexts;
            this.generateCurrentContextIds();
        }
    }
    get currentContext() {
        return this.contexts;
    }
    /**
     * Returns the current context in string format.
     */ get currentContextId() {
        return this._currentContextIds[0];
    }
    /**
     * Returns the current context and all parent contexts in string format.
     * This allow access to the nodes in the current and parent frames.
     */ get currentContextIds() {
        return this._currentContextIds;
    }
    generateCurrentContextIds() {
        const names = [];
        for(let i = 0; i < this.contexts.length - 1; i++){
            const contexts = this.contexts.slice(0, this.contexts.length - i);
            names.push(this.contextIdforContexts(contexts));
        }
        names.push("");
        this._currentContextIds = names;
    }
    contextIdforContexts(contexts) {
        return contexts ? contexts.map((context)=>context.id === 0 && context.iterationId === 0 ? "" : `${context.frameName}-${context.iterationId}`).join("/") : "";
    }
    /**
     * Enter a new frame, a new context is pushed on the current context list.
     * @param frameId new frame id
     */ enterFrame(frameId) {
        if (this.contexts) {
            this.lastId++;
            this.contexts = this.contexts.slice();
            this.contexts.push(this.newFrame(this.lastId, frameId));
            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));
        }
    }
    /**
     * Exit the current frame, the last context is removed from the current
     * context list.
     */ exitFrame() {
        if (this.contexts && this.contexts.length > 1) {
            this.contexts = this.contexts.slice();
            this.contexts.splice(-1);
            this.currentContextIds.shift();
        } else throw new Error("Cannot exit frame, the context is empty");
    }
    /**
     * Enter the next iteration of a loop, the iteration id of last context is
     * increased.
     */ nextIteration() {
        if (this.contexts && this.contexts.length > 0) {
            this.contexts = this.contexts.slice();
            this.lastId++;
            const context = Object.assign({}, this.contexts[this.contexts.length - 1]);
            context.iterationId += 1;
            context.id = this.lastId;
            this.contexts.splice(-1, 1, context);
            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
        } else throw new Error("Cannot increase frame iteration, the context is empty");
    }
    getWeight(name) {
        return this.weightMap[name];
    }
    addTensorArray(tensorArray) {
        this.tensorArrayMap[tensorArray.id] = tensorArray;
    }
    getTensorArray(id) {
        return this.tensorArrayMap[id];
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ex955":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given graph inputs and desired outputs, find the minimal set of nodes
 * to execute in order to compute the outputs. In addition return other useful
 * info such:
 * - Missing inputs needed to compute the output.
 * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).
 * - Alternative inputs in order to avoid async (dynamic op) execution.
 */ parcelHelpers.export(exports, "getExecutionSubgraph", ()=>getExecutionSubgraph);
/**
 * Given the execution info, return a list of nodes in topological order that
 * need to be executed to compute the output.
 */ parcelHelpers.export(exports, "getNodesInTopologicalOrder", ()=>getNodesInTopologicalOrder);
parcelHelpers.export(exports, "isControlFlow", ()=>isControlFlow);
parcelHelpers.export(exports, "isDynamicShape", ()=>isDynamicShape);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _utils = require("../operations/executors/utils");
function getExecutionSubgraph(inputs, outputs, weightMap) {
    const usedNodes = new Set();
    const missingInputs = [];
    let dynamicNode = null;
    let syncInputs = null;
    // Start with the outputs, going backwards and find all the nodes that are
    // needed to compute those outputs.
    const seen = new Set();
    const inputNodeNames = Object.keys(inputs).map((name)=>(0, _utils.parseNodeName)(name)[0]);
    const frontier = [
        ...outputs
    ];
    while(frontier.length > 0){
        const node = frontier.pop();
        if (isControlFlow(node) || isDynamicShape(node)) {
            if (dynamicNode == null) {
                dynamicNode = node;
                syncInputs = dynamicNode.children.map((child)=>child.name).filter((name)=>usedNodes.has(name));
            }
        }
        usedNodes.add(node.name);
        // Weights are dead end since we already have their values.
        if (weightMap[node.name] != null) continue;
        // This node is a dead end since it's one of the user-provided inputs.
        if (inputNodeNames.indexOf(node.name) !== -1) continue;
        if (node.inputs.length === 0) {
            missingInputs.push(node.name);
            continue;
        }
        node.inputs.forEach((input)=>{
            // Don't add to the frontier if it is already there.
            if (seen.has(input.name)) return;
            seen.add(input.name);
            frontier.push(input);
        });
    }
    return {
        inputs,
        outputs,
        usedNodes,
        missingInputs,
        dynamicNode,
        syncInputs
    };
}
function getNodesInTopologicalOrder(graph, weightMap, executionInfo) {
    const { usedNodes , inputs  } = executionInfo;
    const frontier = [];
    const inputNodes = Object.keys(inputs).map((name)=>(0, _utils.parseNodeName)(name)[0]).map((name)=>graph.nodes[name]);
    inputNodes.forEach((input)=>{
        if (usedNodes.has(input.name)) frontier.push(input);
    });
    graph.weights.forEach((weight)=>{
        if (usedNodes.has(weight.name)) frontier.push(weight);
    });
    const seen = new Set();
    const orderedNodes = [];
    while(frontier.length > 0){
        const node = frontier.pop();
        seen.add(node.name);
        if (!weightMap[node.name]) orderedNodes.push(node);
        node.children.forEach((child)=>{
            if (!seen.has(child.name) && usedNodes.has(child.name) && child.inputs.every((input)=>seen.has(input.name))) frontier.push(child);
        });
    }
    return orderedNodes;
}
const CONTROL_FLOW_OPS = [
    "Switch",
    "Merge",
    "Enter",
    "Exit",
    "NextIteration"
];
const DYNAMIC_SHAPE_OPS = [
    "NonMaxSuppressionV2",
    "NonMaxSuppressionV3",
    "NonMaxSuppressionV5",
    "Where"
];
function isControlFlow(node) {
    return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;
}
function isDynamicShape(node) {
    return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;
}

},{"../operations/executors/utils":"e4F2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3keZk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
const version = "2.0.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aCSP1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
const version = "2.0.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4mRaZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Get my wrapped model.
 * @param modelType
 * @returns {ModelWrapper}
 */ parcelHelpers.export(exports, "getModel", ()=>getModel);
parcelHelpers.export(exports, "ModelWrapper", ()=>ModelWrapper);
/**
 * The MNIST data is stored all images as a single array of pixel values[0,255, ...].
 * This function reshapes these into a 784 pixel values (28 * 28)
 * @param xs inputs
 * @param ys labels
 * @returns {{images: *[], labels: *[]}}
 */ parcelHelpers.export(exports, "convertFromFlattenArray", ()=>convertFromFlattenArray);
var _tfjs = require("@tensorflow/tfjs");
var _data = require("./data");
var _network = require("./network");
const IMAGE_SIZE = (0, _data.IMAGE_H) * (0, _data.IMAGE_W);
const NUM_CLASSES = 10;
function getAvg(losses) {
    return losses.map((loss)=>Math.abs(loss.data[0][0])).reduce((a, b)=>a + b) / losses.length;
}
function getModel(modelType) {
    let model = createModel(modelType);
    if (model instanceof (0, _network.TrainableNeuralNetwork)) return new ModelWrapper(model);
    // Now that we've defined our model, we will define our optimizer. The
    // optimizer will be used to optimize our model's weight values during
    // training so that we can decrease our training loss and increase our
    // classification accuracy.
    // We are using rmsprop as our optimizer.
    // An optimizer is an iterative method for minimizing an loss function.
    // It tries to find the minimum of our loss function with respect to the
    // model's weight parameters.
    const optimizer = "rmsprop";
    // We compile our model by specifying an optimizer, a loss function, and a
    // list of metrics that we will use for model evaluation. Here we're using a
    // categorical crossentropy loss, the standard choice for a multi-class
    // classification problem like MNIST digits.
    // The categorical crossentropy loss is differentiable and hence makes
    // model training possible. But it is not amenable to easy interpretation
    // by a human. This is why we include a "metric", namely accuracy, which is
    // simply a measure of how many of the examples are classified correctly.
    // This metric is not differentiable and hence cannot be used as the loss
    // function of the model.
    model.compile({
        optimizer,
        loss: "categoricalCrossentropy",
        metrics: [
            "accuracy"
        ]
    });
    return new ModelWrapper(model);
}
function createModel(modelType) {
    if (modelType === "ConvNet") return createConvModel();
    if (modelType === "DenseNet") return createDenseModel();
    if (modelType === "MyNet") return createMyModel();
    throw new Error(`Invalid model type: ${modelType}`);
}
class ModelWrapper {
    /**
     * @param {tf.Sequential| TrainableNeuralNetwork} tfModel
     */ constructor(tfModel){
        this.model = tfModel;
    }
    /**
     * Run the model training
     * @param {int[[]]}xs
     * @param {int[[]]}ys
     * @param {{
     *     epochs: number,
     *     batchSize: number,
     *     validationSplit: number,
     *     callbacks: {
     *       onBatchEnd: (batch: number, logs: any) => void,
     *       onEpochEnd: (epoch: number, logs: any) => void
     *     }
     * }}args
     * @returns {Promise<unknown>}
     */ async train(xs, ys, args) {
        if (this.model instanceof _tfjs.Sequential) {
            const inputs = _tfjs.tensor4d(xs, [
                xs.length / IMAGE_SIZE,
                (0, _data.IMAGE_H),
                (0, _data.IMAGE_W),
                1
            ]);
            const labels = _tfjs.tensor2d(ys, [
                ys.length / NUM_CLASSES,
                NUM_CLASSES
            ]);
            return this.model.fit(inputs, labels, args);
        }
        return this.#handleMyNNTraining(xs, ys, args);
    }
     #handleMyNNTraining(xs, ys, args) {
        let { images , labels  } = convertFromFlattenArray(xs, ys);
        console.log("Training data size: ", images.length);
        console.log("Batch size:", args.batchSize);
        console.log("Epochs:", args.epochs);
        console.log("Validation split:", args.validationSplit);
        let i = 0;
        let epoch = 0;
        let batch = 0;
        const model = this.model;
        return new Promise(function(resolve, reject) {
            let step = ()=>{
                batch++;
                if (i >= images.length) {
                    i = 0;
                    epoch++;
                    args.callbacks.onEpochEnd(epoch, {
                        val_acc: 1,
                        loss: 0
                    });
                }
                if (epoch + 1 >= args.epochs) {
                    resolve();
                    return;
                }
                let losses = [];
                for(let j = 0; j < args.batchSize; j++){
                    if (i >= images.length) {
                        console.log("End of epoch " + i);
                        break;
                    }
                    losses.push(model.fit(images[i], labels[i]));
                    i++;
                }
                args.callbacks.onBatchEnd(i, {
                    loss: getAvg(losses) * 100,
                    val_acc: 1
                });
                requestAnimationFrame(step);
            };
            // using requestAnimationFrame instead of for looping to avoid blocking the UI thread
            requestAnimationFrame(step);
        });
    }
    /**
     * Evaluate the model with the given test data
     * @param {int[]} inputs
     * @param {int[]} targets
     * @returns {number} average accuracy
     */ evaluate(xs, ys) {
        if (this.model instanceof _tfjs.Sequential) {
            let inputs = _tfjs.tensor4d(xs, [
                xs.length / IMAGE_SIZE,
                (0, _data.IMAGE_H),
                (0, _data.IMAGE_W),
                1
            ]);
            let labels = _tfjs.tensor2d(ys, [
                ys.length / NUM_CLASSES,
                NUM_CLASSES
            ]);
            let testResult = this.model.evaluate(inputs, labels);
            return testResult[1].dataSync()[0] * 100;
        }
        let { images , labels: labels1  } = convertFromFlattenArray(xs, ys);
        return this.model.evaluate(images, labels1) * 100;
    }
    /**
     * Perform the prediction
     * @param {int[]} input - Array of input values
     **/ predict(xs) {
        if (this.model instanceof _tfjs.Sequential) {
            let inputs = _tfjs.tensor4d(xs, [
                xs.length / IMAGE_SIZE,
                (0, _data.IMAGE_H),
                (0, _data.IMAGE_W),
                1
            ]);
            let output = this.model.predict(inputs);
            // tf.argMax() returns the indices of the maximum values in the tensor along
            // a specific axis. Categorical classification tasks like this one often
            // represent classes as one-hot vectors. One-hot vectors are 1D vectors with
            // one element for each output class. All values in the vector are 0
            // except for one, which has a value of 1 (e.g. [0, 0, 0, 1, 0]). The
            // output from model.predict() will be a probability distribution, so we use
            // argMax to get the index of the vector element that has the highest
            // probability. This is our prediction.
            // (e.g. argmax([0.07, 0.1, 0.03, 0.75, 0.05]) == 3)
            // dataSync() synchronously downloads the tf.tensor values from the GPU so
            // that we can use them in our normal CPU JavaScript code
            // (for a non-blocking version of this function, use data()).
            return Array.from(output.argMax(1).dataSync());
        }
        let { images  } = convertFromFlattenArray(xs, null);
        let predictions = [];
        for (const image of images){
            let output1 = this.model.predict(image);
            predictions.push((0, _network.argMax)(output1));
        }
        return predictions;
    }
    summary() {
        this.model.summary();
    }
}
/**
 * Create a vanilla neural network model (My own NN)
 * @returns {TrainableNeuralNetwork}
 */ function createMyModel() {
    let imageSize = (0, _data.IMAGE_H) * (0, _data.IMAGE_W);
    /**
     * @type {Layer[]} layers
     */ let layers = [];
    layers.push(new (0, _network.Layer)(imageSize, imageSize, (0, _network.Activation).ReLU, (0, _network.Layer).INPUT));
    layers.push(new (0, _network.Layer)(imageSize, 42, (0, _network.Activation).ReLU, (0, _network.Layer).HIDDEN));
    layers.push(new (0, _network.Layer)(42, 10, (0, _network.Activation).SOFTMAX, (0, _network.Layer).OUTPUT));
    return new (0, _network.TrainableNeuralNetwork)(layers);
}
/**
 * Creates a model consisting of only flatten, dense and dropout layers.
 *
 * The model create here has approximately the same number of parameters
 * (~31k) as the convnet created by `createConvModel()`, but is
 * expected to show a significantly worse accuracy after training, due to the
 * fact that it doesn't utilize the spatial information as the convnet does.
 *
 * This is for comparison with the convolutional network above.
 *
 * @returns {tf.Sequential} An instance of tf.Model.
 */ function createDenseModel() {
    const model = _tfjs.sequential();
    model.add(_tfjs.layers.flatten({
        inputShape: [
            (0, _data.IMAGE_H),
            (0, _data.IMAGE_W),
            1
        ]
    }));
    model.add(_tfjs.layers.dense({
        units: 42,
        activation: "relu"
    }));
    model.add(_tfjs.layers.dense({
        units: 10,
        activation: "softmax"
    }));
    return model;
}
/**
 * Creates a convolutional neural network (Convnet) for the MNIST data.
 *
 * @returns {tf.Sequential} An instance of tf.Model.
 */ function createConvModel() {
    // Create a sequential neural network model. tf.sequential provides an API
    // for creating "stacked" models where the output from one layer is used as
    // the input to the next layer.
    const model = _tfjs.sequential();
    // The first layer of the convolutional neural network plays a dual role:
    // it is both the input layer of the neural network and a layer that performs
    // the first convolution operation on the input. It receives the 28x28 pixels
    // black and white images. This input layer uses 16 filters with a kernel size
    // of 5 pixels each. It uses a simple RELU activation function which pretty
    // much just looks like this: __/
    model.add(_tfjs.layers.conv2d({
        inputShape: [
            (0, _data.IMAGE_H),
            (0, _data.IMAGE_W),
            1
        ],
        kernelSize: 3,
        filters: 16,
        activation: "relu"
    }));
    // After the first layer we include a MaxPooling layer. This acts as a sort of
    // downsampling using max values in a region instead of averaging.
    // https://www.quora.com/What-is-max-pooling-in-convolutional-neural-networks
    model.add(_tfjs.layers.maxPooling2d({
        poolSize: 2,
        strides: 2
    }));
    // Our third layer is another convolution, this time with 32 filters.
    model.add(_tfjs.layers.conv2d({
        kernelSize: 3,
        filters: 32,
        activation: "relu"
    }));
    // Max pooling again.
    model.add(_tfjs.layers.maxPooling2d({
        poolSize: 2,
        strides: 2
    }));
    // Add another conv2d layer.
    model.add(_tfjs.layers.conv2d({
        kernelSize: 3,
        filters: 32,
        activation: "relu"
    }));
    // Now we flatten the output from the 2D filters into a 1D vector to prepare
    // it for input into our last layer. This is common practice when feeding
    // higher dimensional data to a final classification output layer.
    model.add(_tfjs.layers.flatten({}));
    model.add(_tfjs.layers.dense({
        units: 64,
        activation: "relu"
    }));
    // Our last layer is a dense layer which has 10 output units, one for each
    // output class (i.e. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9). Here the classes actually
    // represent numbers, but it's the same idea if you had classes that
    // represented other entities like dogs and cats (two output classes: 0, 1).
    // We use the softmax function as the activation for the output layer as it
    // creates a probability distribution over our 10 classes so their output
    // values sum to 1.
    model.add(_tfjs.layers.dense({
        units: 10,
        activation: "softmax"
    }));
    return model;
}
function convertFromFlattenArray(xs, ys) {
    const batchSize = xs.length / IMAGE_SIZE;
    let images = [];
    let labels = [];
    for(let i = 0; i < batchSize; i++){
        const image = xs.slice(i * IMAGE_SIZE, (i + 1) * IMAGE_SIZE);
        images.push(image);
        if (ys) {
            const label = ys.slice(i * NUM_CLASSES, (i + 1) * NUM_CLASSES);
            labels.push(label);
        }
    }
    return {
        images,
        labels
    };
}

},{"@tensorflow/tfjs":"fzTad","./data":"5pclG","./network":"gukqw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5pclG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IMAGE_H", ()=>IMAGE_H);
parcelHelpers.export(exports, "IMAGE_W", ()=>IMAGE_W);
/**
 * A class that fetches the sprited MNIST dataset and provide data as flatten pixel values
 */ parcelHelpers.export(exports, "MnistData", ()=>MnistData);
const IMAGE_H = 28;
const IMAGE_W = 28;
const IMAGE_SIZE = IMAGE_H * IMAGE_W;
const NUM_CLASSES = 10;
const NUM_DATASET_ELEMENTS = 65000;
const NUM_TRAIN_ELEMENTS = 55000;
const MNIST_IMAGES_SPRITE_PATH = "https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png";
const MNIST_LABELS_PATH = "https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8";
class MnistData {
    constructor(){}
    /**
     * Load the dataset and parse it into training and test sets.
     * @return {Promise<void>}
     */ async load() {
        // Make a request for the MNIST sprited image.
        const img = new Image();
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        const imgRequest = new Promise((resolve, reject)=>{
            img.crossOrigin = "";
            img.onload = ()=>{
                img.width = img.naturalWidth;
                img.height = img.naturalHeight;
                const datasetBytesBuffer = new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);
                const chunkSize = 5000;
                canvas.width = img.width;
                canvas.height = chunkSize;
                for(let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++){
                    const datasetBytesView = new Float32Array(datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4, IMAGE_SIZE * chunkSize);
                    ctx.drawImage(img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width, chunkSize);
                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                    for(let j = 0; j < imageData.data.length / 4; j++)// All channels hold an equal value since the image is grayscale, so
                    // just read the red channel.
                    datasetBytesView[j] = imageData.data[j * 4] / 255;
                }
                this.datasetImages = new Float32Array(datasetBytesBuffer);
                resolve();
            };
            img.src = MNIST_IMAGES_SPRITE_PATH;
        });
        const labelsRequest = fetch(MNIST_LABELS_PATH);
        const [imgResponse, labelsResponse] = await Promise.all([
            imgRequest,
            labelsRequest
        ]);
        this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());
        // Slice the the images and labels into train and test sets.
        this.trainImages = this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);
        this.trainLabels = this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);
        this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);
        this.testLabels = this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);
    }
    /**
     * Get all training data and the labels as a flatten array.
     *
     * @returns {{
     *     xs: Float32Array,
     *     labels: Uint8Array,
     * }}
     *
     */ getTrainData() {
        return {
            xs: this.trainImages,
            labels: this.trainLabels
        };
    }
    /**
     * Get all test data and the labels as a flatten array.
     *
     * @returns {{
     *     xs: Float32Array,
     *     labels: Uint8Array,
     * }}
     *
     */ getTestData(numExamples) {
        if (numExamples != null) {
            let inputs = this.testImages.slice(0, IMAGE_SIZE * numExamples);
            let labels = this.testLabels.slice(0, NUM_CLASSES * numExamples);
            return {
                xs: inputs,
                labels: labels
            };
        }
        return {
            xs: this.testImages,
            labels: this.testLabels
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gukqw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Neural Network that implements backpropagation algorithm
 */ parcelHelpers.export(exports, "TrainableNeuralNetwork", ()=>TrainableNeuralNetwork);
/**
 * Available activation functions
 */ parcelHelpers.export(exports, "Activation", ()=>Activation);
/**
 * Neural network layer
 */ parcelHelpers.export(exports, "Layer", ()=>Layer);
/**
 * Return the index of the highest value in the array
 * (e.g. argmax([0.07, 0.1, 0.03, 0.75, 0.05]) == 3)
 * @param arr
 * @return {number}
 */ parcelHelpers.export(exports, "argMax", ()=>argMax);
/**
 * This file contain our vanilla javascript code for the neural network
 */ var _matrix = require("./matrix");
/**
 * Artificial Neural Network
 */ class NeuralNetwork {
    /**
     * @param  {Layer[]} layers - network layers
     */ constructor(layers){
        this.layerNodesCounts = []; // no of neurons per layer
        this.layers = layers;
        this.#setLayerNodeCounts(layers);
    }
     #setLayerNodeCounts(layers) {
        for (const layer of layers){
            if (layer.layerType == Layer.INPUT) continue;
            this.layerNodesCounts.push(layer.weights.cols);
            if (layer.layerType == Layer.OUTPUT) this.layerNodesCounts.push(layer.weights.rows);
        }
    }
    /**
     * Perform the feed forward operation
     * @param {number[]} input_array - Array of input values
     * @param {Boolean} GET_ALL_LAYERS - if we need all layers after feed forward instead of just output layer
     * @returns {number[]} - the Neural net output for each layer
     */ feedForward(input_array, GET_ALL_LAYERS = false) {
        this.#feedforwardArgsValidator(input_array);
        let inputMat = (0, _matrix.Matrix).fromArray(input_array);
        let outputs = [];
        for(let i = 0; i < this.layerNodesCounts.length; i++){
            outputs[i] = this.layers[i].processFeedForward(inputMat);
            inputMat = outputs[i];
        }
        if (GET_ALL_LAYERS == true) return outputs;
        return outputs[outputs.length - 1].toArray();
    }
    // Argument validator functions
     #feedforwardArgsValidator(input_array) {
        if (input_array.length != this.layers[0].inputs.length) throw new Error("Feedforward failed : Input array and input layer size doesn't match.");
    }
}
class TrainableNeuralNetwork extends NeuralNetwork {
    learningRate;
    /**
     * Constructor
     * @param {Layer[]}layers
     * @param [float]learningRate
     */ constructor(layers, learningRate = 0.1){
        super(layers);
        this.learningRate = learningRate;
    }
    /**
     * Trains with back propagation
     * @param {int[]} input - Array of input values
     * @param {int[]} target - Array of labels
     */ fit(input, target) {
        this.#trainArgsValidator(input, target);
        let pred = this.feedForward(input, true);
        console.log("Predicted", pred);
        console.log(target, pred);
        let loss = this.calculateLoss(target);
        this.updateWeights();
        return loss;
    }
    /**
     * Evaluate the model with the given test data
     * @param {int[]} inputs
     * @param {int[]} targets
     * @returns {number} average accuracy
     */ evaluate(inputs, targets) {
        let total = 0;
        for(let i = 0; i < inputs.length; i++){
            const output = this.predict(inputs[i]);
            total += argMax(output) == argMax(targets[i]) ? 1 : 0;
        }
        return total / inputs.length;
    }
    /**
     * Perform the prediction
     * @param {int[]} input - Array of input values
     **/ predict(input) {
        return this.feedForward(input, false);
    }
    /**
     * Calculate the loss for each layer
     * @param {int[]} target - Array of out values
     **/ calculateLoss(target) {
        const targetMatrix = (0, _matrix.Matrix).fromArray(target);
        this.#loopLayersInReverse(this.layerNodesCounts, (layerIndex)=>{
            let prevLayer;
            if (this.layers[layerIndex].layerType != Layer.OUTPUT) prevLayer = this.layers[layerIndex + 1];
            this.layers[layerIndex].calculateErrorLoss(targetMatrix, prevLayer);
        });
        return this.layers[this.layers.length - 1].layerError;
    }
    /**
     * Neural network summary
     */ summary() {
        console.log("Neural Network Summary");
        console.log("Layers : ", this.layerNodesCounts);
        console.log("Learning Rate : ", this.learningRate);
    }
    /**
     * Update the weights of each layer based on the loss calculated
     */ updateWeights() {
        this.#loopLayersInReverse(this.layerNodesCounts, (layerIndex)=>{
            const currentLayer = this.layers[layerIndex];
            const nextLayer = this.layers[layerIndex - 1];
            currentLayer.calculateGradient(this.learningRate);
            currentLayer.updateWeights(nextLayer.outputs);
        });
    }
     #loopLayersInReverse(layerOutputs, callback) {
        for(let layer_index = layerOutputs.length - 1; layer_index >= 1; layer_index--)callback(layer_index);
    }
     #trainArgsValidator(input_array1, target_array) {
        if (input_array1.length != this.layerNodesCounts[0]) throw new Error("Training failed : Input array and input layer size doesn't match.");
        if (target_array.length != this.layerNodesCounts[this.layerNodesCounts.length - 1]) throw new Error("Training failed : Target array and output layer size doesn't match.");
    }
}
class Activation {
    static SIGMOID = 1;
    static ReLU = 2;
    static SOFTMAX = 3;
    /**
     * Create a new activation function pair (activation and derivative)
     * @param {int} activationType
     * @returns {{
     *   derivative: ((function(number): (number))),
     *   activation: ((function(number): (number)))
     * }}
     */ static create(activationType) {
        switch(activationType){
            case Activation.SIGMOID:
                return {
                    activation: Activation.#sigmoid,
                    derivative: Activation.#sigmoid_derivative
                };
            case Activation.ReLU:
                return {
                    activation: Activation.#relu,
                    derivative: Activation.#relu_derivative
                };
            case Activation.SOFTMAX:
                return {
                    activation: Activation.#softmax,
                    derivative: Activation.#softmax_derivative
                };
            default:
                console.error("Activation type invalid, setting sigmoid by default");
                return {
                    activation: Activation.sigmoid,
                    derivative: Activation.sigmoid_derivative
                };
        }
    }
    static  #softmax_derivative(y) {
        return y * (1 - y);
    }
    static  #softmax(x) {
        return 1 / (1 + Math.exp(-x));
    }
    static  #sigmoid(x1) {
        return 1 / (1 + Math.exp(-1 * x1));
    }
    static  #sigmoid_derivative(y1) {
        return y1 * (1 - y1);
    }
    static  #relu(x2) {
        if (x2 >= 0) return x2;
        return 0;
    }
    static  #relu_derivative(y2) {
        if (y2 > 0) return 1;
        return 0;
    }
}
class Layer {
    static INPUT = 1;
    static HIDDEN = 2;
    static OUTPUT = 3;
    /**
     * @type {Matrix}
     */ layerError;
    /**
     * @type {Matrix}
     */ weights;
    /**
     * @type {Matrix}
     */ outputs;
    /**
     * Constructor
     * @param {int} inputSize
     * @param {int}outputSize
     * @param {number} activation
     * @param {number} layerType
     */ constructor(inputSize, outputSize, activation, layerType){
        this.layerType = layerType;
        this.activationFun = Activation.create(activation);
        this.weights = (0, _matrix.Matrix).randomize(outputSize, inputSize);
        this.biases = (0, _matrix.Matrix).randomize(outputSize, 1);
        this.inputs = new Array(inputSize);
    }
    /**
     * Feed forward the input matrix to the layer
     * @param {Matrix} input_array - Array of input values
     * @returns {Matrix} - Array of output values
     */ processFeedForward(input) {
        if (this.layerType == Layer.INPUT) {
            this.inputs = input.data;
            this.outputs = input;
            return input;
        }
        this.inputs = input.data;
        let output = (0, _matrix.Matrix).multiply(this.weights, input);
        output.add(this.biases);
        output.map(this.activationFun.activation);
        this.outputs = output;
        return output;
    }
    /**
     * Calculate the loss for the layer using the MSE loss function
     * @param target_matrix
     * @param prevLayer
     * @return {*}
     */ calculateErrorLoss(target_matrix, prevLayer) {
        if (this.layerType == Layer.OUTPUT) {
            this.layerError = (0, _matrix.Matrix).add(target_matrix, (0, _matrix.Matrix).multiply(this.outputs, -1));
            return this.layerError;
        }
        const weightTranspose = (0, _matrix.Matrix).transpose(prevLayer.weights);
        this.layerError = (0, _matrix.Matrix).multiply(weightTranspose, prevLayer.layerError);
        return this.layerError;
    }
    /**
     * Update the weights of the layer
     */ updateWeights(nextLayerOutput) {
        //Calculating delta weights
        const nextLayerOutputTransposed = (0, _matrix.Matrix).transpose(nextLayerOutput);
        const nextWeightsDelta = (0, _matrix.Matrix).multiply(this.gradient, nextLayerOutputTransposed);
        //Updating weights and biases
        this.weights.add(nextWeightsDelta);
        this.biases.add(this.gradient);
    }
    /**
     * Calculate the gradient of the layer
     * @param {float}learningRate
     */ calculateGradient(learningRate) {
        this.gradient = (0, _matrix.Matrix).map(this.outputs, this.activationFun.derivative);
        this.gradient.multiply(this.layerError);
        this.gradient.multiply(learningRate);
    }
}
function argMax(arr) {
    return arr.indexOf(Math.max(...arr));
}

},{"./matrix":"cy5qd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cy5qd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This class provides some basic matrix operations
 */ parcelHelpers.export(exports, "Matrix", ()=>Matrix);
class Matrix {
    /**
     * Values are initialized to 0
     * @param {number} Rows
     * @param {number} Columns
     */ constructor(rows, cols){
        this.rows = rows;
        this.cols = cols;
        this.data = [];
        for(let i = 0; i < this.rows; i++){
            this.data[i] = [];
            for(let j = 0; j < this.cols; j++)this.data[i][j] = 0;
        }
    }
    /**
     * Applies matrix multiplication to each element of the matrix(Dot product)
     *
     * @param {Matrix | number} n
     * @returns {Matrix}
     */ multiply(n) {
        let newMatrix = Matrix.multiply(this, n);
        this.data = newMatrix.data;
        this.cols = newMatrix.cols;
        this.rows = newMatrix.rows;
        return this;
    }
    /**
     * Applies matrix multiplication to each element of the matrix
     * (matrix,matrix) or (matrix,scalar)
     * @param {Matrix} matrix1
     * @param {Matrix | number} matrix2
     * @returns {Matrix}
     */ static multiply(matrix1, matrix2) {
        //scalar multiply
        if (matrix1 instanceof Matrix && !(matrix2 instanceof Matrix)) {
            let num = matrix2; //scalar value
            let newMatrix = Matrix.copy(matrix1);
            for(let i = 0; i < matrix1.rows; i++)for(let j = 0; j < matrix1.cols; j++)newMatrix.data[i][j] *= num;
            return newMatrix;
        }
        if (!(matrix1 instanceof Matrix && matrix2 instanceof Matrix)) throw new Error("Multiplication failed because no Matrix object found!");
        if (matrix2.rows == matrix1.rows && matrix2.cols == matrix1.cols) {
            for(let i1 = 0; i1 < matrix1.rows; i1++)for(let j1 = 0; j1 < matrix1.cols; j1++)matrix1.data[i1][j1] *= matrix2.data[i1][j1];
            return matrix1;
        }
        return this.calcMatrixProduct(matrix1, matrix2);
    }
    /**
     ** Matrix multiplication - cols * rows
     ** For matrix multiplication, the number of columns in the first matrix must be equal to the number of rows in the second matrix.
     ** The resulting matrix, known as the matrix product, has the number of rows of the first and the number of columns of the second matrix
     * @param {Matrix} matrix1
     * @param {Matrix} matrix2
     * @returns {Matrix}
     **/ static calcMatrixProduct(matrix1, matrix2) {
        if (matrix1.cols != matrix2.rows) throw new Error("multiplication failed because of size mismatch!");
        let newMatrix = new Matrix(matrix1.rows, matrix2.cols);
        for(let i = 0; i < newMatrix.rows; i++)for(let j = 0; j < newMatrix.cols; j++){
            newMatrix.data[i][j] = 0;
            for(let k = 0; k < matrix1.cols; k++)newMatrix.data[i][j] += matrix1.data[i][k] * matrix2.data[k][j];
        }
        return newMatrix;
    }
    /**
     * Creates a copy of a matrix
     * @param {Matrix} matrix
     * @returns {Matrix}
     */ static copy(matrix) {
        let newMat = new Matrix(matrix.rows, matrix.cols);
        for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.cols; j++)newMat.data[i][j] = matrix.data[i][j];
        return newMat;
    }
    /**
     * Prints the matrix
     */ print() {
        console.table(this.data);
    }
    /**
     * Transposes the matrix
     * @param matrix
     * @returns {Matrix}
     */ static transpose(matrix) {
        let transposed = new Matrix(matrix.cols, matrix.rows);
        for(let i = 0; i < matrix.cols; i++)for(let j = 0; j < matrix.rows; j++)transposed.data[i][j] = matrix.data[j][i];
        return transposed;
    }
    /**
     * Applies addition to each element of the matrix
     * @param {Matrix| number}matrix
     */ add(matrix) {
        let newMatrix = Matrix.add(this, matrix);
        this.data = newMatrix.data;
        this.cols = newMatrix.cols;
        this.rows = newMatrix.rows;
        return this;
    }
    /**
     * Applies addition to each element of the matrix
     * @param {Matrix} m1
     * @param {Matrix|number} m2
     * @returns {Matrix}
     */ static add(m1, m2) {
        if (m1 instanceof Matrix && m2 instanceof Matrix) {
            if (m1.rows != m2.rows || m1.cols != m2.cols) throw new Error("invalid addition : size mismatch");
            let newMatrix = new Matrix(m1.rows, m1.cols);
            for(let i = 0; i < m1.rows; i++)for(let j = 0; j < m1.cols; j++)newMatrix.data[i][j] = m1.data[i][j] + m2.data[i][j];
            return newMatrix;
        }
        //scalar addition
        for(let i1 = 0; i1 < m1.rows; i1++)for(let j1 = 0; j1 < m1.cols; j1++)m1.data[i1][j1] += m2;
        return m1;
    }
    /**
     * Applies a function to each element of the matrix
     * @param {(number)=>{}}func
     */ map(func) {
        let newMatrix = Matrix.map(this, func);
        this.data = newMatrix.data;
        this.cols = newMatrix.cols;
        this.rows = newMatrix.rows;
        return this;
    }
    /**
     * Applies a function to each element of the matrix
     * @param {Matrix} matrix
     * @param {(number)=>{}}func
     */ static map(matrix, func) {
        let newMatrix = new Matrix(matrix.rows, matrix.cols);
        for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.cols; j++)newMatrix.data[i][j] = func(matrix.data[i][j]);
        return newMatrix;
    }
    /**
     * Create a randomized matrix
     * @param {number} rows
     * @param {number} cols
     * @returns {Matrix}
     */ static randomize(rows, cols) {
        let newMatrix = new Matrix(rows, cols);
        for(let i = 0; i < newMatrix.rows; i++)for(let j = 0; j < newMatrix.cols; j++)newMatrix.data[i][j] = Math.random() * 2 - 1; //random number between -1 and 1
        return newMatrix;
    }
    /**
     * Takes array of numbers and returns a 1d Matrix object
     * @param {number[]} arr - array of numbers
     */ static fromArray(arr) {
        let rows = arr.length;
        let cols = 1;
        let matrix = new Matrix(rows, cols);
        for(let i = 0; i < rows; i++)matrix.data[i][0] = arr[i];
        return matrix;
    }
    /**
     * Return a 1d array of the matrix
     * @return {number[]}
     */ toArray() {
        let arr = [];
        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.cols; j++)arr.push(this.data[i][j]);
        return arr;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jRvde":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logStatus", ()=>logStatus);
parcelHelpers.export(exports, "showTestResults", ()=>showTestResults);
parcelHelpers.export(exports, "draw", ()=>draw);
parcelHelpers.export(exports, "getModelTypeId", ()=>getModelTypeId);
parcelHelpers.export(exports, "getTrainEpochs", ()=>getTrainEpochs);
parcelHelpers.export(exports, "setTrainButtonCallback", ()=>setTrainButtonCallback);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const statusElement = document.getElementById("status");
const imagesElement = document.getElementById("images");
function logStatus(message) {
    statusElement.innerText = message;
}
function showTestResults(images, predictions, labels) {
    imagesElement.innerHTML = "";
    for(let i = 0; i < images.length; i++){
        const image = images[i];
        const div = document.createElement("div");
        div.className = "pred-container";
        const canvas = document.createElement("canvas");
        canvas.className = "prediction-canvas";
        draw(image, canvas);
        const pred = document.createElement("div");
        const prediction = predictions[i];
        const label = labels[i];
        const correct = prediction === label;
        pred.className = `pred ${correct ? "pred-correct" : "pred-incorrect"}`;
        pred.innerText = `pred: ${prediction}`;
        div.appendChild(pred);
        div.appendChild(canvas);
        imagesElement.appendChild(div);
    }
}
function draw(data, canvas) {
    const [width, height] = [
        28,
        28
    ];
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext("2d");
    const imageData = new ImageData(width, height);
    for(let i = 0; i < height * width; ++i){
        const j = i * 4;
        imageData.data[j + 0] = data[i] * 255;
        imageData.data[j + 1] = data[i] * 255;
        imageData.data[j + 2] = data[i] * 255;
        imageData.data[j + 3] = 255;
    }
    ctx.putImageData(imageData, 0, 0);
}
function getModelTypeId() {
    return document.getElementById("model-type").value;
}
function getTrainEpochs() {
    return Number.parseInt(document.getElementById("train-epochs").value);
}
function setTrainButtonCallback(callback) {
    const trainButton = document.getElementById("train");
    const modelType = document.getElementById("model-type");
    trainButton.addEventListener("click", ()=>{
        trainButton.setAttribute("disabled", true);
        modelType.setAttribute("disabled", true);
        callback();
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["bB7Pu"], "bB7Pu", "parcelRequirec8f8")

//# sourceMappingURL=index.3d214d75.js.map
